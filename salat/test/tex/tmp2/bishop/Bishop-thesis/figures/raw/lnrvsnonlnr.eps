%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: lnrvsnonlnr.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: RSLab
%%CreationDate: 9/18/2009
%%BoundingBox: 0 0 270 204
%%HiResBoundingBox: 0 0 269.2500 204
%%CropBox: 0 0 269.2500 204
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2008-09-14T12:24:20-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-09-18T01:27:09-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-09-18T01:27:09-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>196</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAxAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FUBdaq8N29&#xA;tHY3FyY4lmeSL0uIDFwFHORGLfuz0Hhiq839wHCfo+43BPKsFBSmxPq9d8VWRapPKsTLp1yFlT1F&#xA;J9AUG2zfvdj8XTFW11K4Kxt+jrker2PoVWqlvi/e7dKfPFWv0pPVAdOuQZHaNa+h1UMan970PDY4&#xA;q2NSuDx/3HXI5Myb+htxruf3vQ8dj8sVWNrDrMIDYXPqmpRP3FWUFAzD979lTKtTkTMcQj1O/wAq&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:A00DDFCC7582DD119997F45A17949884</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:5C34153A10A4DE11A306EA4CD3E0E7A3</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -204 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 204 li
269.25 204 li
269.25 0 li
cp
clp
[1 0 0 1 0 0 ] concat
gsave % PSGState
0 0 mo
0 118.125 li
147.188 118.125 li
147.188 0 li
eclp
gsave % PSGState
6.9375 .125 mo
6.9375 117.125 li
140.938 117.125 li
140.938 .125 li
eclp
gsave % PSGState
36.9375 5.125 mo
36.9375 88.125 li
139.938 88.125 li
139.938 5.125 li
eclp
grestore % PSGState
gsave % PSGState
36.9375 5.125 mo
36.9375 88.125 li
139.938 88.125 li
139.938 5.125 li
eclp
grestore % PSGState
gsave % PSGState
36.9375 5.125 mo
36.9375 88.125 li
139.938 88.125 li
139.938 5.125 li
eclp
.75 lw
2 lc
0 lj
3.23931 ml
[] 0 dsh
true sadj
37.5 87.625 mo
37.5625 87.625 li
37.625 87.625 li
37.75 87.625 li
38 87.625 li
38.5 87.625 li
39.5 87.625 li
41.6875 87.625 li
43.75 87.625 li
45.75 87.5625 li
47.875 87.5625 li
49.9375 87.5625 li
50 87.5625 li
50.0625 87.5625 li
50.1875 87.5625 li
50.4375 87.5625 li
51 87.5625 li
52.125 87.5625 li
52.1875 87.5625 li
52.25 87.5625 li
52.375 87.5625 li
52.625 87.5625 li
53.1875 87.5625 li
54.25 87.5625 li
54.3125 87.5625 li
54.375 87.5625 li
54.5 87.5625 li
54.75 87.5625 li
55.25 87.5625 li
56.25 87.5625 li
56.3125 87.5625 li
56.375 87.5625 li
56.5 87.5625 li
56.8125 87.5625 li
57.3125 87.5625 li
58.4375 87.5625 li
58.5 87.5625 li
58.5625 87.5625 li
58.6875 87.5625 li
58.9375 87.5625 li
59.4375 87.5625 li
60.4375 87.5625 li
60.5 87.5625 li
60.5625 87.5625 li
60.6875 87.5625 li
60.9375 87.5625 li
61.4375 87.5625 li
61.5 87.5625 li
61.5625 87.5625 li
61.6875 87.5625 li
61.9375 87.5625 li
62.4375 87.5 li
62.5 87.5 li
62.5625 87.5 li
62.6875 87.5 li
63 87.5 li
63.5 87.5 li
63.5625 87.5 li
63.6875 87.5 li
63.8125 87.5 li
64.0625 87.5 li
64.625 87.5 li
64.6875 87.5 li
64.75 87.5 li
64.875 87.5 li
65.125 87.5 li
65.625 87.5 li
65.6875 87.5 li
65.75 87.5 li
65.875 87.5 li
66.125 87.5 li
66.625 87.5 li
66.6875 87.5 li
66.75 87.5 li
66.875 87.5 li
67.1875 87.5 li
67.6875 87.5 li
67.75 87.5 li
67.875 87.5 li
68 87.5 li
68.25 87.4375 li
68.8125 87.4375 li
68.875 87.4375 li
68.9375 87.4375 li
69.0625 87.4375 li
69.3125 87.4375 li
69.875 87.4375 li
69.9375 87.4375 li
70 87.4375 li
70.125 87.4375 li
70.375 87.4375 li
70.9375 87.4375 li
71 87.4375 li
71.0625 87.4375 li
71.1875 87.4375 li
71.4375 87.375 li
71.9375 87.375 li
72 87.375 li
72.0625 87.375 li
72.1875 87.375 li
72.4375 87.375 li
72.9375 87.375 li
73 87.375 li
73.0625 87.375 li
73.1875 87.375 li
73.5 87.3125 li
74 87.3125 li
74.0625 87.3125 li
74.1875 87.3125 li
74.3125 87.3125 li
74.5625 87.3125 li
75.125 87.25 li
75.1875 87.25 li
75.25 87.25 li
75.375 87.25 li
75.625 87.25 li
75.6875 87.25 li
75.75 87.25 li
75.875 87.25 li
76.125 87.1875 li
76.1875 87.1875 li
76.25 87.1875 li
76.375 87.1875 li
76.625 87.1875 li
77.125 87.125 li
77.1875 87.125 li
77.25 87.125 li
77.375 87.125 li
77.6875 87.0625 li
77.75 87.0625 li
77.8125 87.0625 li
77.9375 87.0625 li
78.25 87 li
78.3125 87 li
78.375 87 li
78.5 87 li
78.75 86.9375 li
79.3125 86.875 li
79.375 86.875 li
79.4375 86.875 li
79.5625 86.8125 li
79.875 86.75 li
79.9375 86.75 li
80 86.75 li
80.125 86.75 li
80.375 86.6875 li
80.4375 86.6875 li
80.4375 86.625 li
80.5 86.625 li
80.6875 86.625 li
80.9375 86.5625 li
80.9375 86.5 li
81 86.5 li
81.0625 86.5 li
81.1875 86.4375 li
81.5 86.375 li
81.5625 86.375 li
81.625 86.3125 li
81.75 86.3125 li
82 86.1875 li
82.0625 86.1875 li
82.125 86.125 li
82.25 86.0625 li
82.5 85.9375 li
82.5625 85.9375 li
82.625 85.875 li
82.75 85.8125 li
82.8125 85.8125 li
82.875 85.75 li
83 85.6875 li
83.0625 85.625 li
83.125 85.625 li
83.25 85.5 li
83.5 85.3125 li
83.5625 85.25 li
83.625 85.1875 li
83.75 85.0625 li
83.8125 85.0625 li
83.8125 85 li
83.875 84.9375 li
84 84.8125 li
84.0625 84.75 li
84.0625 84.6875 li
84.1875 84.625 li
84.3125 84.4375 li
84.5625 84.0625 li
84.625 84 li
84.6875 83.875 li
84.8125 83.625 li
84.875 83.5625 li
84.875 83.5 li
85 83.375 li
85.125 83.0625 li
85.125 83 li
85.1875 82.875 li
85.25 82.75 li
85.375 82.375 li
85.4375 82.3125 li
85.4375 82.1875 li
85.5 82 li
85.625 81.5625 li
85.6875 81.4375 li
85.6875 81.3125 li
85.75 81.125 li
85.9375 80.625 li
85.9375 80.4375 li
86 80.3125 li
86.0625 80 li
86.1875 79.375 li
86.1875 79.25 li
86.25 79.0625 li
86.3125 78.6875 li
86.3125 78.5 li
86.375 78.3125 li
86.4375 77.875 li
86.4375 77.6875 li
86.5 77.4375 li
86.5625 77 li
86.6875 76 li
86.6875 75.6875 li
86.75 75.375 li
86.8125 74.8125 li
86.8125 74.5 li
86.875 74.1875 li
86.9375 73.5 li
86.9375 73.125 li
87 72.75 li
87.0625 71.9375 li
87.1875 70.1875 li
87.1875 69.6875 li
87.25 69.25 li
87.3125 68.1875 li
87.3125 67.625 li
87.375 67.0625 li
87.4375 65.875 li
87.4375 65.1875 li
87.5 64.5625 li
87.5625 63.1875 li
87.6875 60.0625 li
87.6875 59.25 li
87.75 58.375 li
87.8125 56.625 li
87.9375 52.75 li
87.9375 51.6875 li
88 50.625 li
88.0625 48.375 li
88.1875 43.6875 li
88.1875 42.5 li
88.25 41.3125 li
88.3125 38.8125 li
88.3125 37.625 li
88.375 36.375 li
88.4375 34 li
88.4375 32.875 li
88.5 31.75 li
88.5 30.6875 li
88.5625 29.6875 li
88.5625 28.75 li
88.625 27.8125 li
88.625 27 li
88.6875 26.3125 li
88.6875 25.625 li
88.75 25.0625 li
88.75 24.625 li
88.8125 24.3125 li
88.8125 24.0625 li
88.875 23.9375 li
88.875 23.875 li
88.9375 24 li
88.9375 24.1875 li
89 24.5 li
89 24.9375 li
89.0625 25.4375 li
89.0625 26.0625 li
89.125 26.75 li
89.125 27.5625 li
89.1875 28.4375 li
89.1875 29.375 li
89.25 30.375 li
89.3125 32.5 li
89.4375 37.1875 li
89.6875 46.875 li
89.6875 48.125 li
89.75 49.3125 li
89.8125 51.6875 li
89.875 52.8125 li
89.875 53.9375 li
89.9375 56 li
90 57 li
90 58 li
90.0625 59.8125 li
90.1875 63.125 li
90.25 63.875 li
90.3125 64.625 li
90.375 65.9375 li
90.375 66.625 li
90.4375 67.25 li
90.5 68.4375 li
90.5 69 li
90.5625 69.5 li
90.625 70.5 li
90.75 72.3125 li
90.8125 72.75 li
90.8125 73.125 li
90.875 73.875 li
90.9375 74.25 li
90.9375 74.625 li
91 75.25 li
91.0625 75.5625 li
91.125 75.875 li
91.1875 76.4375 li
91.3125 77.4375 li
91.3125 77.6875 li
91.375 77.9375 li
91.4375 78.375 li
91.4375 78.5625 li
91.5 78.75 li
91.5625 79.125 li
91.625 79.3125 li
91.625 79.5 li
91.6875 79.8125 li
91.8125 80.4375 li
91.875 80.5625 li
91.875 80.75 li
91.9375 81 li
92.0625 81.4375 li
92.125 81.5625 li
92.125 81.625 li
92.1875 81.875 li
92.3125 82.25 li
92.375 82.3125 li
92.375 82.4375 li
92.5 82.5625 li
92.625 82.875 li
92.625 82.9375 li
92.6875 83.0625 li
92.75 83.1875 li
92.875 83.4375 li
92.875 83.5 li
92.9375 83.5625 li
93 83.6875 li
93.125 83.875 li
93.125 83.9375 li
93.1875 84 li
93.25 84.125 li
93.375 84.3125 li
93.4375 84.375 li
93.5 84.4375 li
93.625 84.625 li
93.875 84.875 li
93.875 84.9375 li
93.9375 85 li
94 85.0625 li
94.125 85.1875 li
94.1875 85.1875 li
94.1875 85.25 li
94.25 85.3125 li
94.375 85.375 li
94.4375 85.4375 li
94.5 85.4375 li
94.5625 85.5 li
94.6875 85.625 li
94.9375 85.75 li
95 85.8125 li
95.0625 85.875 li
95.25 85.9375 li
95.5 86.0625 li
95.5625 86.0625 li
95.625 86.125 li
95.75 86.1875 li
96.0625 86.3125 li
96.125 86.3125 li
96.1875 86.3125 li
96.3125 86.375 li
96.5625 86.4375 li
96.625 86.5 li
96.6875 86.5 li
96.875 86.5625 li
97.125 86.625 li
97.1875 86.625 li
97.25 86.625 li
97.375 86.6875 li
97.625 86.75 li
97.6875 86.75 li
97.8125 86.75 li
97.9375 86.75 li
98.1875 86.8125 li
98.25 86.8125 li
98.3125 86.875 li
98.4375 86.875 li
98.6875 86.9375 li
98.75 86.9375 li
98.8125 86.9375 li
98.9375 86.9375 li
99.1875 87 li
99.25 87 li
99.3125 87 li
99.4375 87 li
99.6875 87.0625 li
100.188 87.0625 li
100.25 87.0625 li
100.313 87.125 li
100.438 87.125 li
100.75 87.125 li
100.813 87.125 li
100.875 87.125 li
101 87.125 li
101.25 87.1875 li
101.313 87.1875 li
101.438 87.1875 li
101.563 87.1875 li
101.813 87.1875 li
102.375 87.25 li
102.438 87.25 li
102.5 87.25 li
102.625 87.25 li
102.875 87.25 li
103.375 87.3125 li
103.438 87.3125 li
103.5 87.3125 li
103.625 87.3125 li
103.875 87.3125 li
104.375 87.3125 li
104.438 87.3125 li
104.5 87.375 li
104.625 87.375 li
104.875 87.375 li
105.375 87.375 li
105.438 87.375 li
105.5 87.375 li
105.625 87.375 li
105.875 87.375 li
106.375 87.375 li
106.438 87.375 li
106.5 87.375 li
106.625 87.4375 li
106.938 87.4375 li
107.438 87.4375 li
107.5 87.4375 li
107.563 87.4375 li
107.688 87.4375 li
108 87.4375 li
108.5 87.4375 li
108.563 87.4375 li
108.625 87.4375 li
108.75 87.4375 li
109 87.4375 li
109.5 87.4375 li
109.563 87.4375 li
109.625 87.4375 li
109.688 87.4375 li
109.813 87.5 li
110.063 87.5 li
110.563 87.5 li
110.625 87.5 li
110.688 87.5 li
110.813 87.5 li
111.063 87.5 li
111.625 87.5 li
111.688 87.5 li
111.75 87.5 li
111.875 87.5 li
112.188 87.5 li
112.688 87.5 li
112.75 87.5 li
112.813 87.5 li
113 87.5 li
113.25 87.5 li
113.75 87.5 li
114.75 87.5 li
114.813 87.5 li
114.875 87.5 li
115 87.5 li
115.25 87.5 li
115.75 87.5625 li
116.75 87.5625 li
116.813 87.5625 li
116.875 87.5625 li
117 87.5625 li
117.313 87.5625 li
117.813 87.5625 li
118.938 87.5625 li
119 87.5625 li
119.063 87.5625 li
119.188 87.5625 li
119.438 87.5625 li
119.938 87.5625 li
120.938 87.5625 li
121 87.5625 li
121.063 87.5625 li
121.188 87.5625 li
121.5 87.5625 li
122 87.5625 li
123.125 87.5625 li
123.188 87.5625 li
123.25 87.5625 li
123.375 87.5625 li
123.688 87.5625 li
124.188 87.5625 li
125.25 87.5625 li
127.25 87.5625 li
129.438 87.5625 li
131.5 87.5625 li
133.5 87.625 li
135.625 87.625 li
137.625 87.625 li
139.813 87.625 li
139.875 87.625 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 1 rgb
@
37.5 87.625 mo
37.5625 87.625 li
37.625 87.625 li
37.75 87.625 li
38 87.625 li
38.5 87.625 li
39.5 87.625 li
41.6875 87.625 li
43.75 87.625 li
45.75 87.625 li
47.875 87.5625 li
49.9375 87.5625 li
50 87.5625 li
50.0625 87.5625 li
50.1875 87.5625 li
50.4375 87.5625 li
51 87.5625 li
52.125 87.5625 li
52.1875 87.5625 li
52.25 87.5625 li
52.375 87.5625 li
52.625 87.5625 li
53.1875 87.5625 li
54.25 87.5625 li
54.3125 87.5625 li
54.375 87.5625 li
54.5 87.5625 li
54.75 87.5625 li
55.25 87.5625 li
56.25 87.5625 li
56.3125 87.5625 li
56.375 87.5625 li
56.5 87.5625 li
56.8125 87.5625 li
57.3125 87.5625 li
58.4375 87.5625 li
58.5 87.5625 li
58.5625 87.5625 li
58.6875 87.5625 li
58.9375 87.5625 li
59.4375 87.5625 li
60.4375 87.5625 li
60.5 87.5625 li
60.5625 87.5625 li
60.6875 87.5625 li
60.9375 87.5625 li
61.4375 87.5625 li
61.5 87.5625 li
61.5625 87.5625 li
61.6875 87.5625 li
61.9375 87.5625 li
62.4375 87.5625 li
62.5 87.5625 li
62.5625 87.5625 li
62.6875 87.5625 li
63 87.5 li
63.5 87.5 li
63.5625 87.5 li
63.6875 87.5 li
63.8125 87.5 li
64.0625 87.5 li
64.625 87.5 li
64.6875 87.5 li
64.75 87.5 li
64.875 87.5 li
65.125 87.5 li
65.625 87.5 li
65.6875 87.5 li
65.75 87.5 li
65.875 87.5 li
66.125 87.5 li
66.625 87.5 li
66.6875 87.5 li
66.75 87.5 li
66.875 87.5 li
67.1875 87.5 li
67.6875 87.5 li
67.75 87.5 li
67.875 87.5 li
68 87.5 li
68.25 87.5 li
68.8125 87.4375 li
68.875 87.4375 li
68.9375 87.4375 li
69.0625 87.4375 li
69.3125 87.4375 li
69.875 87.4375 li
69.9375 87.4375 li
70 87.4375 li
70.125 87.4375 li
70.375 87.4375 li
70.9375 87.4375 li
71 87.4375 li
71.0625 87.4375 li
71.1875 87.4375 li
71.4375 87.4375 li
71.9375 87.375 li
72 87.375 li
72.0625 87.375 li
72.1875 87.375 li
72.4375 87.375 li
72.9375 87.375 li
73 87.375 li
73.0625 87.375 li
73.1875 87.375 li
73.5 87.375 li
74 87.3125 li
74.0625 87.3125 li
74.1875 87.3125 li
74.3125 87.3125 li
74.5625 87.3125 li
75.125 87.25 li
75.1875 87.25 li
75.25 87.25 li
75.375 87.25 li
75.625 87.25 li
75.6875 87.25 li
75.75 87.25 li
75.875 87.25 li
76.125 87.1875 li
76.1875 87.1875 li
76.25 87.1875 li
76.375 87.1875 li
76.625 87.1875 li
77.125 87.125 li
77.1875 87.125 li
77.25 87.125 li
77.375 87.125 li
77.6875 87.125 li
77.6875 87.0625 li
77.75 87.0625 li
77.8125 87.0625 li
77.9375 87.0625 li
78.25 87.0625 li
78.3125 87.0625 li
78.375 87 li
78.5 87 li
78.75 87 li
79.3125 86.875 li
79.375 86.875 li
79.4375 86.875 li
79.5625 86.875 li
79.875 86.8125 li
79.9375 86.8125 li
80 86.8125 li
80.125 86.75 li
80.375 86.6875 li
80.4375 86.6875 li
80.5 86.6875 li
80.6875 86.625 li
80.9375 86.5625 li
81 86.5625 li
81.0625 86.5625 li
81.1875 86.5 li
81.5 86.4375 li
81.5625 86.375 li
81.625 86.375 li
81.75 86.3125 li
82 86.25 li
82.0625 86.25 li
82.125 86.1875 li
82.25 86.125 li
82.5 86.0625 li
82.5 86 li
82.5625 86 li
82.625 86 li
82.75 85.875 li
82.8125 85.875 li
82.875 85.8125 li
83 85.75 li
83.0625 85.75 li
83.125 85.6875 li
83.25 85.625 li
83.5 85.4375 li
83.5 85.375 li
83.5625 85.375 li
83.625 85.3125 li
83.75 85.1875 li
83.8125 85.125 li
83.875 85.0625 li
84 84.9375 li
84.0625 84.875 li
84.1875 84.75 li
84.3125 84.625 li
84.5625 84.25 li
84.625 84.1875 li
84.625 84.125 li
84.6875 84.0625 li
84.8125 83.8125 li
84.875 83.75 li
84.875 83.6875 li
85 83.5625 li
85.125 83.3125 li
85.125 83.1875 li
85.1875 83.125 li
85.25 83 li
85.375 82.625 li
85.4375 82.5625 li
85.4375 82.5 li
85.5 82.3125 li
85.625 81.875 li
85.6875 81.8125 li
85.6875 81.6875 li
85.75 81.4375 li
85.9375 81 li
85.9375 80.875 li
86 80.75 li
86.0625 80.5 li
86.1875 79.9375 li
86.1875 79.75 li
86.25 79.625 li
86.3125 79.25 li
86.3125 79.125 li
86.375 78.9375 li
86.4375 78.5625 li
86.4375 78.375 li
86.5 78.125 li
86.5625 77.75 li
86.6875 76.8125 li
86.6875 76.5625 li
86.75 76.3125 li
86.8125 75.8125 li
86.8125 75.5 li
86.875 75.25 li
86.9375 74.625 li
86.9375 74.3125 li
87 74 li
87.0625 73.3125 li
87.1875 71.8125 li
87.1875 71.4375 li
87.25 71 li
87.3125 70.125 li
87.3125 69.6875 li
87.375 69.25 li
87.4375 68.25 li
87.4375 67.6875 li
87.5 67.1875 li
87.5625 66.0625 li
87.6875 63.625 li
87.6875 63 li
87.75 62.375 li
87.8125 61 li
87.9375 58.1875 li
87.9375 57.4375 li
88 56.625 li
88.0625 55.125 li
88.1875 51.9375 li
88.1875 51.125 li
88.25 50.375 li
88.3125 48.8125 li
88.3125 48.0625 li
88.375 47.3125 li
88.4375 45.875 li
88.4375 45.25 li
88.5 44.5625 li
88.5 44 li
88.5625 43.4375 li
88.5625 42.875 li
88.625 42.375 li
88.625 41.9375 li
88.6875 41.5625 li
88.6875 41.1875 li
88.75 40.9375 li
88.75 40.6875 li
88.8125 40.5 li
88.8125 40.375 li
88.875 40.3125 li
88.9375 40.3125 li
88.9375 40.4375 li
89 40.625 li
89 40.8125 li
89.0625 41.125 li
89.0625 41.4375 li
89.125 41.8125 li
89.125 42.25 li
89.1875 42.6875 li
89.1875 43.25 li
89.25 43.8125 li
89.3125 45 li
89.3125 45.6875 li
89.375 46.375 li
89.4375 47.8125 li
89.4375 48.5625 li
89.5 49.3125 li
89.5625 50.875 li
89.6875 54.0625 li
89.6875 54.875 li
89.75 55.75 li
89.8125 57.4375 li
89.9375 60.5625 li
90 61.3125 li
90 62.0625 li
90.0625 63.4375 li
90.1875 66.0625 li
90.25 66.625 li
90.3125 67.25 li
90.375 68.3125 li
90.375 68.875 li
90.4375 69.375 li
90.5 70.375 li
90.5 70.8125 li
90.5625 71.25 li
90.625 72.125 li
90.75 73.6875 li
90.8125 74 li
90.8125 74.375 li
90.875 75 li
90.9375 75.3125 li
90.9375 75.625 li
91 76.1875 li
91.0625 76.4375 li
91.125 76.75 li
91.1875 77.25 li
91.3125 78.125 li
91.3125 78.375 li
91.375 78.5625 li
91.4375 78.9375 li
91.5625 79.6875 li
91.625 79.8125 li
91.625 80 li
91.6875 80.3125 li
91.8125 80.875 li
91.875 81 li
91.875 81.125 li
91.9375 81.375 li
92.0625 81.75 li
92.125 81.875 li
92.125 82 li
92.1875 82.1875 li
92.3125 82.5 li
92.375 82.625 li
92.375 82.6875 li
92.5 82.8125 li
92.625 83.125 li
92.625 83.1875 li
92.6875 83.25 li
92.75 83.375 li
92.875 83.625 li
92.875 83.6875 li
92.9375 83.75 li
93 83.875 li
93.125 84.0625 li
93.125 84.125 li
93.1875 84.1875 li
93.25 84.25 li
93.375 84.4375 li
93.375 84.5 li
93.4375 84.5 li
93.5 84.625 li
93.625 84.75 li
93.875 85 li
93.875 85.0625 li
93.9375 85.0625 li
94 85.125 li
94.125 85.25 li
94.1875 85.3125 li
94.25 85.375 li
94.375 85.5 li
94.4375 85.5 li
94.5 85.5625 li
94.5625 85.5625 li
94.6875 85.6875 li
94.9375 85.875 li
95 85.875 li
95.0625 85.9375 li
95.25 86 li
95.5 86.125 li
95.5625 86.125 li
95.625 86.1875 li
95.75 86.25 li
96.0625 86.3125 li
96.0625 86.375 li
96.125 86.375 li
96.1875 86.375 li
96.3125 86.4375 li
96.5625 86.5 li
96.625 86.5 li
96.6875 86.5625 li
96.875 86.5625 li
97.125 86.625 li
97.1875 86.6875 li
97.25 86.6875 li
97.375 86.6875 li
97.625 86.75 li
97.6875 86.75 li
97.8125 86.8125 li
97.9375 86.8125 li
98.1875 86.875 li
98.25 86.875 li
98.3125 86.875 li
98.4375 86.875 li
98.6875 86.9375 li
98.75 86.9375 li
98.8125 86.9375 li
98.9375 86.9375 li
99.1875 87 li
99.25 87 li
99.3125 87 li
99.4375 87 li
99.6875 87.0625 li
100.188 87.125 li
100.25 87.125 li
100.313 87.125 li
100.438 87.125 li
100.75 87.125 li
100.813 87.125 li
100.875 87.1875 li
101 87.1875 li
101.25 87.1875 li
101.313 87.1875 li
101.438 87.1875 li
101.563 87.1875 li
101.813 87.25 li
102.375 87.25 li
102.438 87.25 li
102.5 87.25 li
102.625 87.25 li
102.875 87.3125 li
103.375 87.3125 li
103.438 87.3125 li
103.5 87.3125 li
103.625 87.3125 li
103.875 87.3125 li
104.375 87.375 li
104.438 87.375 li
104.5 87.375 li
104.625 87.375 li
104.875 87.375 li
105.375 87.375 li
105.438 87.375 li
105.5 87.375 li
105.625 87.375 li
105.875 87.375 li
106.375 87.4375 li
106.438 87.4375 li
106.5 87.4375 li
106.625 87.4375 li
106.938 87.4375 li
107.438 87.4375 li
107.5 87.4375 li
107.563 87.4375 li
107.688 87.4375 li
108 87.4375 li
108.5 87.4375 li
108.563 87.4375 li
108.625 87.4375 li
108.75 87.4375 li
109 87.4375 li
109.5 87.5 li
109.563 87.5 li
109.625 87.5 li
109.688 87.5 li
109.813 87.5 li
110.063 87.5 li
110.563 87.5 li
110.625 87.5 li
110.688 87.5 li
110.813 87.5 li
111.063 87.5 li
111.625 87.5 li
111.688 87.5 li
111.75 87.5 li
111.875 87.5 li
112.188 87.5 li
112.688 87.5 li
112.75 87.5 li
112.813 87.5 li
113 87.5 li
113.25 87.5 li
113.75 87.5 li
114.75 87.5 li
114.813 87.5 li
114.875 87.5 li
115 87.5625 li
115.25 87.5625 li
115.75 87.5625 li
116.75 87.5625 li
116.813 87.5625 li
116.875 87.5625 li
117 87.5625 li
117.313 87.5625 li
117.813 87.5625 li
118.938 87.5625 li
119 87.5625 li
119.063 87.5625 li
119.188 87.5625 li
119.438 87.5625 li
119.938 87.5625 li
120.938 87.5625 li
121 87.5625 li
121.063 87.5625 li
121.188 87.5625 li
121.5 87.5625 li
122 87.5625 li
123.125 87.5625 li
123.188 87.5625 li
123.25 87.5625 li
123.375 87.5625 li
123.688 87.5625 li
124.188 87.5625 li
125.25 87.5625 li
127.25 87.5625 li
129.438 87.5625 li
131.5 87.5625 li
133.5 87.625 li
135.625 87.625 li
137.625 87.625 li
139.813 87.625 li
139.875 87.625 li
1 0 0 rgb
@
37.5 87.625 mo
37.5625 87.625 li
37.625 87.625 li
37.75 87.625 li
38 87.625 li
38.5 87.625 li
39.5 87.625 li
41.6875 87.625 li
43.75 87.625 li
45.75 87.625 li
47.875 87.5625 li
49.9375 87.5625 li
50 87.5625 li
50.0625 87.5625 li
50.1875 87.5625 li
50.4375 87.5625 li
51 87.5625 li
52.125 87.5625 li
52.1875 87.5625 li
52.25 87.5625 li
52.375 87.5625 li
52.625 87.5625 li
53.1875 87.5625 li
54.25 87.5625 li
54.3125 87.5625 li
54.375 87.5625 li
54.5 87.5625 li
54.75 87.5625 li
55.25 87.5625 li
56.25 87.5625 li
56.3125 87.5625 li
56.375 87.5625 li
56.5 87.5625 li
56.8125 87.5625 li
57.3125 87.5625 li
58.4375 87.5625 li
58.5 87.5625 li
58.5625 87.5625 li
58.6875 87.5625 li
58.9375 87.5625 li
59.4375 87.5625 li
60.4375 87.5625 li
60.5 87.5625 li
60.5625 87.5625 li
60.6875 87.5625 li
60.9375 87.5625 li
61.4375 87.5625 li
61.5 87.5625 li
61.5625 87.5625 li
61.6875 87.5625 li
61.9375 87.5625 li
62.4375 87.5625 li
62.5 87.5625 li
62.5625 87.5625 li
62.6875 87.5625 li
63 87.5 li
63.5 87.5 li
63.5625 87.5 li
63.6875 87.5 li
63.8125 87.5 li
64.0625 87.5 li
64.625 87.5 li
64.6875 87.5 li
64.75 87.5 li
64.875 87.5 li
65.125 87.5 li
65.625 87.5 li
65.6875 87.5 li
65.75 87.5 li
65.875 87.5 li
66.125 87.5 li
66.625 87.5 li
66.6875 87.5 li
66.75 87.5 li
66.875 87.5 li
67.1875 87.5 li
67.6875 87.5 li
67.75 87.5 li
67.875 87.5 li
68 87.5 li
68.25 87.5 li
68.8125 87.4375 li
68.875 87.4375 li
68.9375 87.4375 li
69.0625 87.4375 li
69.3125 87.4375 li
69.875 87.4375 li
69.9375 87.4375 li
70 87.4375 li
70.125 87.4375 li
70.375 87.4375 li
70.9375 87.4375 li
71 87.4375 li
71.0625 87.4375 li
71.1875 87.4375 li
71.4375 87.4375 li
71.9375 87.375 li
72 87.375 li
72.0625 87.375 li
72.1875 87.375 li
72.4375 87.375 li
72.9375 87.375 li
73 87.375 li
73.0625 87.375 li
73.1875 87.375 li
73.5 87.375 li
74 87.3125 li
74.0625 87.3125 li
74.1875 87.3125 li
74.3125 87.3125 li
74.5625 87.3125 li
75.125 87.25 li
75.1875 87.25 li
75.25 87.25 li
75.375 87.25 li
75.625 87.25 li
75.6875 87.25 li
75.75 87.25 li
75.875 87.25 li
76.125 87.1875 li
76.1875 87.1875 li
76.25 87.1875 li
76.375 87.1875 li
76.625 87.1875 li
77.125 87.125 li
77.1875 87.125 li
77.25 87.125 li
77.375 87.125 li
77.6875 87.125 li
77.6875 87.0625 li
77.75 87.0625 li
77.8125 87.0625 li
77.9375 87.0625 li
78.25 87.0625 li
78.3125 87 li
78.375 87 li
78.5 87 li
78.75 87 li
79.3125 86.875 li
79.375 86.875 li
79.4375 86.875 li
79.5625 86.875 li
79.875 86.8125 li
79.9375 86.8125 li
80 86.8125 li
80.125 86.75 li
80.375 86.6875 li
80.4375 86.6875 li
80.5 86.6875 li
80.6875 86.625 li
80.9375 86.5625 li
81 86.5625 li
81.0625 86.5625 li
81.1875 86.5 li
81.5 86.4375 li
81.5 86.375 li
81.5625 86.375 li
81.625 86.375 li
81.75 86.3125 li
82 86.25 li
82.0625 86.1875 li
82.125 86.1875 li
82.25 86.125 li
82.5 86 li
82.5625 86 li
82.625 85.9375 li
82.75 85.875 li
82.8125 85.875 li
82.875 85.8125 li
83 85.75 li
83 85.6875 li
83.0625 85.6875 li
83.125 85.625 li
83.25 85.5625 li
83.5 85.375 li
83.5625 85.3125 li
83.625 85.25 li
83.75 85.125 li
83.8125 85.125 li
83.8125 85.0625 li
83.875 85 li
84 84.875 li
84.0625 84.8125 li
84.1875 84.6875 li
84.3125 84.5625 li
84.3125 84.5 li
84.375 84.4375 li
84.4375 84.375 li
84.5625 84.125 li
84.625 84.125 li
84.625 84.0625 li
84.6875 83.9375 li
84.8125 83.6875 li
84.875 83.625 li
84.875 83.5625 li
85 83.4375 li
85.125 83.125 li
85.125 83.0625 li
85.1875 83 li
85.25 82.8125 li
85.375 82.4375 li
85.4375 82.375 li
85.4375 82.25 li
85.5 82.0625 li
85.625 81.625 li
85.6875 81.5 li
85.6875 81.375 li
85.75 81.1875 li
85.9375 80.625 li
85.9375 80.5 li
86 80.375 li
86.0625 80.0625 li
86.1875 79.4375 li
86.1875 79.25 li
86.25 79.0625 li
86.3125 78.6875 li
86.3125 78.5 li
86.375 78.3125 li
86.4375 77.875 li
86.4375 77.625 li
86.5 77.4375 li
86.5625 76.9375 li
86.6875 75.875 li
86.6875 75.5625 li
86.75 75.25 li
86.8125 74.625 li
86.8125 74.3125 li
86.875 73.9375 li
86.9375 73.1875 li
86.9375 72.8125 li
87 72.375 li
87.0625 71.5625 li
87.1875 69.625 li
87.1875 69.125 li
87.25 68.5625 li
87.3125 67.375 li
87.3125 66.75 li
87.375 66.125 li
87.4375 64.75 li
87.4375 64 li
87.5 63.25 li
87.5625 61.625 li
87.6875 58 li
87.6875 57 li
87.75 56 li
87.8125 53.8125 li
87.8125 52.6875 li
87.875 51.5 li
87.9375 48.9375 li
87.9375 47.625 li
88 46.25 li
88.0625 43.375 li
88.1875 37.0625 li
88.1875 35.375 li
88.25 33.6875 li
88.3125 30.25 li
88.4375 23.1875 li
88.4375 21.5 li
88.5 19.8125 li
88.5 18.1875 li
88.5625 16.625 li
88.5625 15.125 li
88.625 13.6875 li
88.625 12.4375 li
88.6875 11.25 li
88.6875 10.1875 li
88.75 9.3125 li
88.75 8.5625 li
88.8125 8 li
88.8125 7.625 li
88.875 7.375 li
88.9375 7.5 li
88.9375 7.875 li
89 8.375 li
89 9.0625 li
89.0625 9.875 li
89.0625 10.875 li
89.125 12 li
89.125 13.25 li
89.1875 14.625 li
89.1875 16.0625 li
89.25 17.625 li
89.3125 20.9375 li
89.4375 27.875 li
89.4375 29.625 li
89.5 31.375 li
89.5625 34.8125 li
89.6875 41.3125 li
89.6875 43 li
89.75 44.5625 li
89.8125 47.625 li
89.875 49.0625 li
89.875 50.4375 li
89.9375 53.0625 li
90 54.3125 li
90 55.5 li
90.0625 57.6875 li
90.1875 61.625 li
90.25 62.5 li
90.3125 63.3125 li
90.375 64.875 li
90.375 65.625 li
90.4375 66.3125 li
90.5 67.625 li
90.5 68.25 li
90.5625 68.875 li
90.625 70 li
90.75 71.9375 li
90.8125 72.4375 li
90.8125 72.8125 li
90.875 73.625 li
90.9375 74 li
90.9375 74.375 li
91 75.0625 li
91.0625 75.4375 li
91.125 75.75 li
91.1875 76.3125 li
91.3125 77.4375 li
91.3125 77.625 li
91.375 77.875 li
91.4375 78.3125 li
91.4375 78.5625 li
91.5 78.75 li
91.5625 79.1875 li
91.625 79.375 li
91.625 79.5 li
91.6875 79.875 li
91.8125 80.5 li
91.875 80.625 li
91.875 80.75 li
91.9375 81.0625 li
92.0625 81.5 li
92.125 81.625 li
92.125 81.75 li
92.1875 81.9375 li
92.3125 82.3125 li
92.375 82.375 li
92.375 82.5 li
92.5 82.625 li
92.625 82.9375 li
92.625 83.0625 li
92.6875 83.125 li
92.75 83.25 li
92.875 83.5 li
92.875 83.5625 li
92.9375 83.625 li
93 83.75 li
93.125 84 li
93.1875 84.0625 li
93.25 84.1875 li
93.375 84.375 li
93.4375 84.4375 li
93.5 84.5 li
93.625 84.6875 li
93.875 84.9375 li
93.875 85 li
93.9375 85.0625 li
94 85.125 li
94.125 85.25 li
94.1875 85.25 li
94.1875 85.3125 li
94.25 85.375 li
94.375 85.4375 li
94.4375 85.5 li
94.5 85.5 li
94.5625 85.5625 li
94.6875 85.625 li
94.9375 85.8125 li
95 85.8125 li
95 85.875 li
95.0625 85.875 li
95.25 86 li
95.3125 86 li
95.375 86.0625 li
95.5 86.125 li
95.5625 86.125 li
95.625 86.1875 li
95.75 86.25 li
96.0625 86.3125 li
96.125 86.375 li
96.1875 86.375 li
96.3125 86.4375 li
96.5625 86.5 li
96.625 86.5 li
96.6875 86.5625 li
96.875 86.5625 li
97.125 86.625 li
97.1875 86.625 li
97.25 86.6875 li
97.375 86.6875 li
97.625 86.75 li
97.6875 86.75 li
97.8125 86.75 li
97.9375 86.8125 li
98.1875 86.875 li
98.25 86.875 li
98.3125 86.875 li
98.4375 86.875 li
98.6875 86.9375 li
98.75 86.9375 li
98.8125 86.9375 li
98.9375 86.9375 li
99.1875 87 li
99.25 87 li
99.3125 87 li
99.4375 87 li
99.6875 87.0625 li
100.188 87.125 li
100.25 87.125 li
100.313 87.125 li
100.438 87.125 li
100.75 87.125 li
100.813 87.125 li
100.875 87.1875 li
101 87.1875 li
101.25 87.1875 li
101.313 87.1875 li
101.438 87.1875 li
101.563 87.1875 li
101.813 87.25 li
102.375 87.25 li
102.438 87.25 li
102.5 87.25 li
102.625 87.25 li
102.875 87.3125 li
103.375 87.3125 li
103.438 87.3125 li
103.5 87.3125 li
103.625 87.3125 li
103.875 87.3125 li
104.375 87.375 li
104.438 87.375 li
104.5 87.375 li
104.625 87.375 li
104.875 87.375 li
105.375 87.375 li
105.438 87.375 li
105.5 87.375 li
105.625 87.375 li
105.875 87.375 li
106.375 87.4375 li
106.438 87.4375 li
106.5 87.4375 li
106.625 87.4375 li
106.938 87.4375 li
107.438 87.4375 li
107.5 87.4375 li
107.563 87.4375 li
107.688 87.4375 li
108 87.4375 li
108.5 87.4375 li
108.563 87.4375 li
108.625 87.4375 li
108.75 87.4375 li
109 87.4375 li
109.5 87.5 li
109.563 87.5 li
109.625 87.5 li
109.688 87.5 li
109.813 87.5 li
110.063 87.5 li
110.563 87.5 li
110.625 87.5 li
110.688 87.5 li
110.813 87.5 li
111.063 87.5 li
111.625 87.5 li
111.688 87.5 li
111.75 87.5 li
111.875 87.5 li
112.188 87.5 li
112.688 87.5 li
112.75 87.5 li
112.813 87.5 li
113 87.5 li
113.25 87.5 li
113.75 87.5 li
114.75 87.5 li
114.813 87.5 li
114.875 87.5 li
115 87.5625 li
115.25 87.5625 li
115.75 87.5625 li
116.75 87.5625 li
116.813 87.5625 li
116.875 87.5625 li
117 87.5625 li
117.313 87.5625 li
117.813 87.5625 li
118.938 87.5625 li
119 87.5625 li
119.063 87.5625 li
119.188 87.5625 li
119.438 87.5625 li
119.938 87.5625 li
120.938 87.5625 li
121 87.5625 li
121.063 87.5625 li
121.188 87.5625 li
121.5 87.5625 li
122 87.5625 li
123.125 87.5625 li
123.188 87.5625 li
123.25 87.5625 li
123.375 87.5625 li
123.688 87.5625 li
124.188 87.5625 li
125.25 87.5625 li
127.25 87.5625 li
129.438 87.5625 li
131.5 87.5625 li
133.5 87.625 li
135.625 87.625 li
137.625 87.625 li
139.813 87.625 li
139.875 87.625 li
0 1 0 rgb
@
grestore % PSGState
.1875 lw
2 lc
0 lj
3.23931 ml
[] 0 dsh
true sadj
139.875 87.625 mo
37.5 87.625 li
false sop
0 0 0 rgb
@
37.5 87.625 mo
37.5 5.75 li
@
37.5 5.75 mo
139.875 5.75 li
@
139.875 5.75 mo
139.875 87.625 li
@
0 lc
50.875 87.625 mo
50.875 85.625 li
@
73.125 87.625 mo
73.125 85.625 li
@
95.375 87.625 mo
95.375 85.625 li
@
117.625 87.625 mo
117.625 85.625 li
@
37.5 87.625 mo
39.5 87.625 li
@
gsave % PSGState
22.25 81.5 mo
22.25 93.75 li
35.5 93.75 li
35.5 81.5 li
eclp
%ADOBeginSubsetFont: MinionPro-Regular Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /MinionPro-Regular def
/FontInfo 7 dict dup begin
/Notice (Copyright 2000, 2002, 2004 Adobe Systems Incorporated. All Rights Reserved. U.S. Patent D371,799.Minion is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Regular) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 48 /zero put
def
/FontBBox {-290 -360 1684 989} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 650 670 437 459 623 640 700 716 464 486] def
/OtherBlues [-261 -239] def
/FamilyBlues [-22 0 650 670 437 459 623 640 700 716 464 486] def
/FamilyOtherBlues [-261 -239] def
/BlueScale 0.0437917 def
/BlueShift 5.1 def
/StdHW [32] def
/StdVW [79] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/period <1C60D8A8C9B88622A20BEE6FE758C6EA81AC58F948B82FF4AEDF6FD
AEAA11545D5FED21207885C98E179> |-
/zero <1C60D8A8C9B75BE5919947CB2EEB8E5EDD3554F80D5A5EB8D43768FA2
A854FCF45893A2BBAFAEE48B2C21203AE0000703CEE538C576248CDE18537E00
DE47F854177267191134F662B60469E53F49963606D1D3D7DA6B498F5156CEE4
0> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BDPDEK+MinionPro-Regular /MinionPro-Regular findfont def
/BDPDEK+MinionPro-Regular*1 
[
46{/.notdef}repeat /period /.notdef /zero 207{/.notdef}repeat
] BDPDEK+MinionPro-Regular nfnt
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
23.2695 90.5684 mov
(0.0) sh
grestore % PSGState
37.5 84.25 mo
38.75 84.25 li
@
37.5 80.8125 mo
38.75 80.8125 li
@
37.5 77.4375 mo
38.75 77.4375 li
@
37.5 74.0625 mo
39.5 74.0625 li
@
gsave % PSGState
22.25 67.9375 mo
22.25 80.1875 li
35.5 80.1875 li
35.5 67.9375 li
eclp
%ADOBeginSubsetFont: MinionPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BDPDEK+MinionPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B75BE5656D406C6ABC516BEA8DD92DEB8A665E8A0A461A79
263E9A5D057D20D9378DEF6E9CD588C90910A245BEC6093AB1D96F8D42B02624
B3D55A0F374AE925839846C9A3E31828B71EF9E2DB190BF22FDEAC8851C9C600
88371C9368FD2E078473B3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDPDEK+MinionPro-Regular /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/BDPDEK+MinionPro-Regular*1 
[
46{/.notdef}repeat /period /.notdef /zero /.notdef /two 205{/.notdef}repeat
] BDPDEK+MinionPro-Regular nfnt
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
23.2695 76.9844 mov
(0.2) sh
grestore % PSGState
37.5 70.625 mo
38.75 70.625 li
@
37.5 67.25 mo
38.75 67.25 li
@
37.5 63.875 mo
38.75 63.875 li
@
37.5 60.4375 mo
39.5 60.4375 li
@
gsave % PSGState
22.25 54.3125 mo
22.25 66.5625 li
35.5 66.5625 li
35.5 54.3125 li
eclp
%ADOBeginSubsetFont: MinionPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BDPDEK+MinionPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B75BE5651F5D1C65E8307EA378AB7070081E67782E03888
63678DE0DF92A363BCE5CF05EC518F84D15448D92D0CFD2802DBBA29BA0E90B7
707CF7FD32E9CDE006AF3C8CD3DB11516403582E6AED65DF7BE09F659D03363B
8BDCF04> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDPDEK+MinionPro-Regular /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/BDPDEK+MinionPro-Regular*1 
[
46{/.notdef}repeat /period /.notdef /zero /.notdef /two /.notdef /four 
203{/.notdef}repeat
] BDPDEK+MinionPro-Regular nfnt
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
23.2695 63.4004 mov
(0.4) sh
grestore % PSGState
37.5 57.0625 mo
38.75 57.0625 li
@
37.5 53.6875 mo
38.75 53.6875 li
@
37.5 50.25 mo
38.75 50.25 li
@
37.5 46.875 mo
39.5 46.875 li
@
gsave % PSGState
22.25 40.75 mo
22.25 53 li
35.5 53 li
35.5 40.75 li
eclp
%ADOBeginSubsetFont: MinionPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BDPDEK+MinionPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B75BE5919947C4FE04164B96DAD0D84C79BA3D86E22F463F
5911CB25181AB20AECD31289ADD6F6A74D3EC07CCDC7F007876BAF1B9FE3227C
AEE76B0439E47D65C6753A8FF6135A6B9B31B107A4F1F700CE019AEE7366DD78
E32B8E31F74F226039C316C45249DF4DBFA7464682F224A2826DE023598F0C28
61E76B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDPDEK+MinionPro-Regular /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/BDPDEK+MinionPro-Regular*1 
[
46{/.notdef}repeat /period /.notdef /zero /.notdef /two /.notdef /four 
/.notdef /six 201{/.notdef}repeat
] BDPDEK+MinionPro-Regular nfnt
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
23.2695 49.8164 mov
(0.6) sh
grestore % PSGState
37.5 43.5 mo
38.75 43.5 li
@
37.5 40.0625 mo
38.75 40.0625 li
@
37.5 36.6875 mo
38.75 36.6875 li
@
37.5 33.3125 mo
39.5 33.3125 li
@
gsave % PSGState
22.25 27.1875 mo
22.25 39.4375 li
35.5 39.4375 li
35.5 27.1875 li
eclp
%ADOBeginSubsetFont: MinionPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BDPDEK+MinionPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B75BE5919F1D0BEABEFD1A841AFD0D7F0E6C8DD9F2F0A7
B7BEC39E2FDB5ECA059CEA447C95C4F8FA2C65429CB552FFAABF82B2B7800BD8
94118C0074973915F948A0A4DAE2EF9F6913BBBA408521D78BF2AEB0828A41C4
0D8B68022165F87DC5BF185F2A2453DA92B2A054F30FB7AC8B6D7DB43155FBC5
526D051105FA372F05543D367DCE74F05FA4766D0F7A2DF66D68FF3E6F240FCC
65CE7C881484685E36DC9846F3D81A96A7277B36331D4471DFA1FAA856156ECB
6224C5C7BBD47E04C3C1535C0A8120FAA551F1075AF3241D50AF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDPDEK+MinionPro-Regular /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/BDPDEK+MinionPro-Regular*1 
[
46{/.notdef}repeat /period /.notdef /zero /.notdef /two /.notdef /four 
/.notdef /six /.notdef /eight 199{/.notdef}repeat
] BDPDEK+MinionPro-Regular nfnt
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
23.2695 36.2324 mov
(0.8) sh
grestore % PSGState
37.5 29.875 mo
38.75 29.875 li
@
37.5 26.5 mo
38.75 26.5 li
@
37.5 23.125 mo
38.75 23.125 li
@
37.5 19.6875 mo
39.5 19.6875 li
@
gsave % PSGState
22.25 13.5625 mo
22.25 25.8125 li
35.5 25.8125 li
35.5 13.5625 li
eclp
%ADOBeginSubsetFont: MinionPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BDPDEK+MinionPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B75BE5651F5D13227D5CE5949D94867FDF67E0D40D50D9D4
7D355440E5CA52302664629A3BCAB48342E2F13A2F08209F3DA2DB1341BF9362
FAC2CC2DAAF9113781BB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDPDEK+MinionPro-Regular /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/BDPDEK+MinionPro-Regular*1 
[
46{/.notdef}repeat /period /.notdef /zero /one /two /.notdef /four 
/.notdef /six /.notdef /eight 199{/.notdef}repeat
] BDPDEK+MinionPro-Regular nfnt
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
23.2695 22.6484 mov
(1.0) sh
grestore % PSGState
37.5 16.3125 mo
38.75 16.3125 li
@
37.5 12.9375 mo
38.75 12.9375 li
@
37.5 9.5 mo
38.75 9.5 li
@
37.5 6.125 mo
39.5 6.125 li
@
37.5 5.75 mo
37.5 6.9375 li
@
42 5.75 mo
42 6.9375 li
@
46.4375 5.75 mo
46.4375 6.9375 li
@
50.875 5.75 mo
50.875 7.75 li
@
55.3125 5.75 mo
55.3125 6.9375 li
@
59.75 5.75 mo
59.75 6.9375 li
@
64.25 5.75 mo
64.25 6.9375 li
@
68.6875 5.75 mo
68.6875 6.9375 li
@
73.125 5.75 mo
73.125 7.75 li
@
77.5625 5.75 mo
77.5625 6.9375 li
@
82 5.75 mo
82 6.9375 li
@
86.5 5.75 mo
86.5 6.9375 li
@
90.9375 5.75 mo
90.9375 6.9375 li
@
95.375 5.75 mo
95.375 7.75 li
@
99.8125 5.75 mo
99.8125 6.9375 li
@
104.313 5.75 mo
104.313 6.9375 li
@
108.75 5.75 mo
108.75 6.9375 li
@
113.188 5.75 mo
113.188 6.9375 li
@
117.625 5.75 mo
117.625 7.75 li
@
122.063 5.75 mo
122.063 6.9375 li
@
126.563 5.75 mo
126.563 6.9375 li
@
131 5.75 mo
131 6.9375 li
@
135.438 5.75 mo
135.438 6.9375 li
@
139.875 5.75 mo
139.875 7.75 li
@
139.875 87.625 mo
137.875 87.625 li
@
139.875 84.25 mo
138.688 84.25 li
@
139.875 80.8125 mo
138.688 80.8125 li
@
139.875 77.4375 mo
138.688 77.4375 li
@
139.875 74.0625 mo
137.875 74.0625 li
@
139.875 70.625 mo
138.688 70.625 li
@
139.875 67.25 mo
138.688 67.25 li
@
139.875 63.875 mo
138.688 63.875 li
@
139.875 60.4375 mo
137.875 60.4375 li
@
139.875 57.0625 mo
138.688 57.0625 li
@
139.875 53.6875 mo
138.688 53.6875 li
@
139.875 50.25 mo
138.688 50.25 li
@
139.875 46.875 mo
137.875 46.875 li
@
139.875 43.5 mo
138.688 43.5 li
@
139.875 40.0625 mo
138.688 40.0625 li
@
139.875 36.6875 mo
138.688 36.6875 li
@
139.875 33.3125 mo
137.875 33.3125 li
@
139.875 29.875 mo
138.688 29.875 li
@
139.875 26.5 mo
138.688 26.5 li
@
139.875 23.125 mo
138.688 23.125 li
@
139.875 19.6875 mo
137.875 19.6875 li
@
139.875 16.3125 mo
138.688 16.3125 li
@
139.875 12.9375 mo
138.688 12.9375 li
@
139.875 9.5 mo
138.688 9.5 li
@
139.875 6.125 mo
137.875 6.125 li
@
gsave % PSGState
8 41.1875 mo
8 52.1875 li
20.25 52.1875 li
20.25 41.1875 li
eclp
grestore % PSGState
gsave % PSGState
36.9375 5.125 mo
36.9375 88.125 li
139.938 88.125 li
139.938 5.125 li
eclp
gsave % PSGState
42.5625 7.8125 mo
42.5625 20.0625 li
53.125 20.0625 li
53.125 7.8125 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 113 /q put
def
/FontBBox {-568 -307 2000 1007} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/a <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550D
EC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B
177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB33
3E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB
0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70
BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895
DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737
B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272E
F1EF1464C3F0D45D7CBB8749AF571E09> |-
/q <1C60D8A8C9B7A73DB694895DD5E49D3BBCEE95B381618ED0718BA1F35CD3
9E95BCBD1002A9F89110DE3E7AD181B368295D0F054E6A3D9A7267329EB95AB8
13B7AE1696D9C600AC6A6B00419AEBFBF715793C3A2F30373AE9BFAB97302272
E9B4EA6D0F482F853122AF239C1F65C8335B7091413102CCD1675C767B686462
E8E1B94DFF670F4F69122307C3AAC013B5112B2F564262A5E8DE4D58B097F43D
017CDAA97C6843EB833175C60735563DF7F92AF1ACD211546A7958997473A18D
23764933CEE9DC71CCD4C3E61E53DA702E> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BKFDEK+TimesNewRomanPSMT /TimesNewRomanPSMT findfont def
/BKFDEK+TimesNewRomanPSMT*1 
[
97{/.notdef}repeat /a 15{/.notdef}repeat /q 142{/.notdef}repeat
] BKFDEK+TimesNewRomanPSMT nfnt
BKFDEK+TimesNewRomanPSMT*1  [9 0 0 -9 0 0 ]mfnt sfnt
43.4756 16.8613 mov
(qa) sh
grestore % PSGState
grestore % PSGState
grestore % PSGState
grestore % PSGState
gsave % PSGState
137.75 .125 mo
137.75 117.125 li
268.75 117.125 li
268.75 .125 li
eclp
gsave % PSGState
165.75 5.125 mo
165.75 88.125 li
268.75 88.125 li
268.75 5.125 li
eclp
grestore % PSGState
gsave % PSGState
165.75 5.125 mo
165.75 88.125 li
268.75 88.125 li
268.75 5.125 li
eclp
grestore % PSGState
gsave % PSGState
165.75 5.125 mo
165.75 88.125 li
268.75 88.125 li
268.75 5.125 li
eclp
.75 lw
2 lc
0 lj
3.23931 ml
[] 0 dsh
true sadj
166.25 87.625 mo
166.25 87.625 li
166.313 87.625 li
166.375 87.625 li
166.5 87.625 li
166.75 87.625 li
167.25 87.625 li
168.25 87.625 li
170.438 87.625 li
172.438 87.625 li
174.438 87.5625 li
176.625 87.5625 li
178.625 87.5625 li
178.688 87.5625 li
178.75 87.5625 li
178.875 87.5625 li
179.188 87.5625 li
179.75 87.5625 li
180.813 87.5625 li
180.875 87.5625 li
180.938 87.5625 li
181.063 87.5625 li
181.375 87.5625 li
181.875 87.5625 li
182.938 87.5625 li
183 87.5625 li
183.063 87.5625 li
183.188 87.5625 li
183.438 87.5625 li
184 87.5625 li
185 87.5625 li
185.063 87.5625 li
185.125 87.5625 li
185.25 87.5625 li
185.5 87.5625 li
186.063 87.5625 li
187.125 87.5625 li
187.188 87.5625 li
187.25 87.5625 li
187.375 87.5625 li
187.625 87.5625 li
188.188 87.5625 li
189.188 87.5625 li
189.25 87.5625 li
189.313 87.5625 li
189.438 87.5625 li
189.688 87.5625 li
190.188 87.5625 li
190.25 87.5625 li
190.313 87.5625 li
190.438 87.5625 li
190.688 87.5625 li
191.188 87.5 li
191.25 87.5 li
191.313 87.5 li
191.438 87.5 li
191.688 87.5 li
192.25 87.5 li
192.313 87.5 li
192.375 87.5 li
192.5 87.5 li
192.75 87.5 li
193.313 87.5 li
193.375 87.5 li
193.438 87.5 li
193.563 87.5 li
193.813 87.5 li
194.313 87.5 li
194.375 87.5 li
194.438 87.5 li
194.563 87.5 li
194.813 87.5 li
195.313 87.5 li
195.375 87.5 li
195.438 87.5 li
195.625 87.5 li
195.875 87.5 li
196.438 87.5 li
196.5 87.5 li
196.563 87.5 li
196.688 87.5 li
196.938 87.4375 li
197.5 87.4375 li
197.563 87.4375 li
197.625 87.4375 li
197.75 87.4375 li
198.063 87.4375 li
198.563 87.4375 li
198.625 87.4375 li
198.688 87.4375 li
198.875 87.4375 li
199.125 87.4375 li
199.625 87.4375 li
199.688 87.4375 li
199.75 87.4375 li
199.875 87.4375 li
200.125 87.375 li
200.625 87.375 li
200.688 87.375 li
200.75 87.375 li
200.875 87.375 li
201.125 87.375 li
201.625 87.375 li
201.688 87.375 li
201.75 87.375 li
201.813 87.375 li
201.938 87.375 li
202.188 87.3125 li
202.75 87.3125 li
202.813 87.3125 li
202.875 87.3125 li
203 87.3125 li
203.25 87.3125 li
203.813 87.25 li
203.875 87.25 li
203.938 87.25 li
204.063 87.25 li
204.313 87.25 li
204.375 87.25 li
204.438 87.25 li
204.563 87.25 li
204.813 87.1875 li
204.875 87.1875 li
204.938 87.1875 li
205.063 87.1875 li
205.313 87.1875 li
205.813 87.125 li
205.875 87.125 li
205.938 87.125 li
206 87.125 li
206.125 87.125 li
206.375 87.0625 li
206.438 87.0625 li
206.5 87.0625 li
206.688 87.0625 li
206.938 87 li
207 87 li
207.063 87 li
207.188 87 li
207.5 86.9375 li
208.063 86.875 li
208.125 86.875 li
208.188 86.875 li
208.313 86.875 li
208.563 86.8125 li
208.625 86.8125 li
208.688 86.75 li
208.813 86.75 li
209.125 86.6875 li
209.188 86.6875 li
209.25 86.6875 li
209.375 86.625 li
209.625 86.5625 li
209.688 86.5625 li
209.75 86.5625 li
209.938 86.5 li
210.188 86.4375 li
210.25 86.4375 li
210.313 86.375 li
210.438 86.375 li
210.688 86.25 li
210.75 86.25 li
210.813 86.1875 li
210.938 86.1875 li
211.188 86.0625 li
211.25 86.0625 li
211.25 86 li
211.313 86 li
211.438 85.9375 li
211.688 85.8125 li
211.75 85.75 li
211.813 85.75 li
211.938 85.625 li
212.188 85.5 li
212.25 85.4375 li
212.313 85.375 li
212.438 85.25 li
212.5 85.25 li
212.563 85.1875 li
212.625 85.1875 li
212.75 85.0625 li
212.75 85 li
212.813 85 li
212.875 84.875 li
213 84.75 li
213.25 84.4375 li
213.313 84.4375 li
213.375 84.375 li
213.438 84.25 li
213.563 84.0625 li
213.625 84 li
213.688 83.875 li
213.813 83.6875 li
213.875 83.625 li
213.875 83.5625 li
213.938 83.4375 li
214.125 83.125 li
214.375 82.5625 li
214.375 82.5 li
214.438 82.4375 li
214.5 82.25 li
214.625 81.9375 li
214.625 81.8125 li
214.688 81.75 li
214.75 81.5625 li
214.875 81.125 li
214.938 81.0625 li
214.938 80.9375 li
215 80.6875 li
215.125 80.25 li
215.375 79.1875 li
215.438 79.0625 li
215.438 78.875 li
215.5 78.625 li
215.625 77.9375 li
215.875 76.5625 li
215.938 76.3125 li
215.938 76.125 li
216 75.75 li
216.125 74.9375 li
216.375 73.125 li
216.438 72.9375 li
216.438 72.6875 li
216.5 72.25 li
216.625 71.375 li
216.688 71.125 li
216.688 70.875 li
216.75 70.4375 li
216.875 69.625 li
216.938 69.4375 li
216.938 69.25 li
217 68.875 li
217.063 68.6875 li
217.063 68.5 li
217.125 68.1875 li
217.188 68.0625 li
217.188 67.875 li
217.25 67.75 li
217.25 67.625 li
217.313 67.5 li
217.313 67.4375 li
217.375 67.3125 li
217.375 67.25 li
217.438 67.1875 li
217.438 67.125 li
217.5 67.0625 li
217.563 67 li
217.625 67 li
217.688 67 li
217.688 67.0625 li
217.75 67.125 li
217.813 67.25 li
217.813 67.3125 li
217.875 67.375 li
217.875 67.5 li
217.938 67.625 li
217.938 67.6875 li
218 68 li
218.063 68.125 li
218.063 68.3125 li
218.125 68.625 li
218.188 68.8125 li
218.188 69 li
218.25 69.375 li
218.375 70.1875 li
218.438 70.4375 li
218.438 70.625 li
218.5 71.125 li
218.688 72.125 li
218.938 74.0625 li
218.938 74.25 li
219 74.5 li
219.063 74.9375 li
219.188 75.8125 li
219.5 77.4375 li
219.5 77.625 li
219.563 77.8125 li
219.625 78.1875 li
219.75 78.8125 li
219.75 79 li
219.813 79.125 li
219.875 79.4375 li
220 80 li
220.063 80.125 li
220.063 80.25 li
220.125 80.5 li
220.313 81 li
220.563 81.8125 li
220.563 81.9375 li
220.625 82 li
220.688 82.1875 li
220.813 82.5 li
220.813 82.5625 li
220.875 82.625 li
220.938 82.75 li
221.063 83.0625 li
221.063 83.125 li
221.125 83.1875 li
221.188 83.3125 li
221.313 83.5 li
221.563 83.9375 li
221.563 84 li
221.625 84.0625 li
221.688 84.125 li
221.813 84.3125 li
221.875 84.375 li
221.938 84.4375 li
222.063 84.625 li
222.125 84.625 li
222.125 84.6875 li
222.188 84.75 li
222.313 84.875 li
222.563 85.125 li
222.625 85.125 li
222.625 85.1875 li
222.688 85.25 li
222.813 85.375 li
222.875 85.375 li
222.938 85.375 li
223 85.4375 li
223.125 85.5625 li
223.188 85.625 li
223.25 85.625 li
223.375 85.75 li
223.688 85.875 li
223.75 85.9375 li
223.813 85.9375 li
223.938 86 li
224.188 86.125 li
224.25 86.125 li
224.25 86.1875 li
224.375 86.1875 li
224.5 86.25 li
224.75 86.3125 li
224.813 86.375 li
224.875 86.375 li
225 86.4375 li
225.313 86.5 li
225.375 86.5 li
225.438 86.5625 li
225.563 86.5625 li
225.813 86.625 li
225.875 86.625 li
225.875 86.6875 li
225.938 86.6875 li
226.125 86.6875 li
226.375 86.75 li
226.875 86.875 li
226.938 86.875 li
227 86.875 li
227.125 86.875 li
227.375 86.9375 li
227.438 86.9375 li
227.5 86.9375 li
227.625 86.9375 li
227.875 87 li
227.938 87 li
228 87 li
228.125 87 li
228.375 87.0625 li
228.875 87.125 li
228.938 87.125 li
229 87.125 li
229.063 87.125 li
229.188 87.125 li
229.438 87.125 li
229.5 87.125 li
229.563 87.125 li
229.688 87.1875 li
230 87.1875 li
230.063 87.1875 li
230.125 87.1875 li
230.25 87.1875 li
230.5 87.1875 li
231.063 87.25 li
231.125 87.25 li
231.188 87.25 li
231.313 87.25 li
231.563 87.25 li
232.063 87.3125 li
232.125 87.3125 li
232.188 87.3125 li
232.313 87.3125 li
232.563 87.3125 li
233.125 87.3125 li
233.188 87.375 li
233.25 87.375 li
233.375 87.375 li
233.625 87.375 li
234.063 87.375 li
234.125 87.375 li
234.188 87.375 li
234.313 87.375 li
234.563 87.375 li
235.063 87.375 li
235.125 87.375 li
235.25 87.4375 li
235.375 87.4375 li
235.625 87.4375 li
236.188 87.4375 li
236.25 87.4375 li
236.313 87.4375 li
236.438 87.4375 li
236.688 87.4375 li
237.25 87.4375 li
237.313 87.4375 li
237.375 87.4375 li
237.5 87.4375 li
237.75 87.4375 li
238.25 87.4375 li
238.313 87.4375 li
238.375 87.5 li
238.5 87.5 li
238.75 87.5 li
239.25 87.5 li
239.313 87.5 li
239.375 87.5 li
239.5 87.5 li
239.813 87.5 li
240.313 87.5 li
240.375 87.5 li
240.438 87.5 li
240.5 87.5 li
240.625 87.5 li
240.875 87.5 li
241.438 87.5 li
241.5 87.5 li
241.563 87.5 li
241.688 87.5 li
241.938 87.5 li
242.438 87.5 li
243.438 87.5 li
243.5 87.5 li
243.563 87.5 li
243.688 87.5 li
243.938 87.5 li
244.438 87.5625 li
245.438 87.5625 li
245.5 87.5625 li
245.625 87.5625 li
245.75 87.5625 li
246 87.5625 li
246.563 87.5625 li
247.625 87.5625 li
247.688 87.5625 li
247.75 87.5625 li
247.875 87.5625 li
248.125 87.5625 li
248.625 87.5625 li
249.625 87.5625 li
249.688 87.5625 li
249.813 87.5625 li
249.938 87.5625 li
250.188 87.5625 li
250.75 87.5625 li
251.813 87.5625 li
251.875 87.5625 li
252 87.5625 li
252.125 87.5625 li
252.375 87.5625 li
252.938 87.5625 li
254 87.5625 li
256 87.5625 li
258.188 87.5625 li
260.188 87.5625 li
262.188 87.625 li
264.313 87.625 li
266.375 87.625 li
268.563 87.625 li
268.625 87.625 li
false sop
0 0 1 rgb
@
166.25 87.625 mo
166.25 87.625 li
166.313 87.625 li
166.375 87.625 li
166.5 87.625 li
166.75 87.625 li
167.25 87.625 li
168.25 87.625 li
170.438 87.625 li
172.438 87.625 li
174.438 87.625 li
176.625 87.5625 li
178.625 87.5625 li
178.688 87.5625 li
178.75 87.5625 li
178.875 87.5625 li
179.188 87.5625 li
179.75 87.5625 li
180.813 87.5625 li
180.875 87.5625 li
180.938 87.5625 li
181.063 87.5625 li
181.375 87.5625 li
181.875 87.5625 li
182.938 87.5625 li
183 87.5625 li
183.063 87.5625 li
183.188 87.5625 li
183.438 87.5625 li
184 87.5625 li
185 87.5625 li
185.063 87.5625 li
185.125 87.5625 li
185.25 87.5625 li
185.5 87.5625 li
186.063 87.5625 li
187.125 87.5625 li
187.188 87.5625 li
187.25 87.5625 li
187.375 87.5625 li
187.625 87.5625 li
188.188 87.5625 li
189.188 87.5625 li
189.25 87.5625 li
189.313 87.5625 li
189.438 87.5625 li
189.688 87.5625 li
190.188 87.5625 li
190.25 87.5625 li
190.313 87.5625 li
190.438 87.5625 li
190.688 87.5625 li
191.188 87.5625 li
191.25 87.5625 li
191.313 87.5625 li
191.438 87.5625 li
191.688 87.5 li
192.25 87.5 li
192.313 87.5 li
192.375 87.5 li
192.5 87.5 li
192.75 87.5 li
193.313 87.5 li
193.375 87.5 li
193.438 87.5 li
193.563 87.5 li
193.813 87.5 li
194.313 87.5 li
194.375 87.5 li
194.438 87.5 li
194.563 87.5 li
194.813 87.5 li
195.313 87.5 li
195.375 87.5 li
195.438 87.5 li
195.625 87.5 li
195.875 87.5 li
196.438 87.5 li
196.5 87.5 li
196.563 87.5 li
196.688 87.5 li
196.938 87.5 li
197.5 87.4375 li
197.563 87.4375 li
197.625 87.4375 li
197.75 87.4375 li
198.063 87.4375 li
198.563 87.4375 li
198.625 87.4375 li
198.688 87.4375 li
198.875 87.4375 li
199.125 87.4375 li
199.625 87.4375 li
199.688 87.4375 li
199.75 87.4375 li
199.875 87.4375 li
200.125 87.4375 li
200.625 87.375 li
200.688 87.375 li
200.75 87.375 li
200.875 87.375 li
201.125 87.375 li
201.625 87.375 li
201.688 87.375 li
201.75 87.375 li
201.813 87.375 li
201.938 87.375 li
202.188 87.375 li
202.75 87.3125 li
202.813 87.3125 li
202.875 87.3125 li
203 87.3125 li
203.25 87.3125 li
203.813 87.3125 li
203.875 87.3125 li
203.875 87.25 li
203.938 87.25 li
204.063 87.25 li
204.313 87.25 li
204.813 87.25 li
204.875 87.25 li
204.938 87.25 li
205.063 87.1875 li
205.313 87.1875 li
205.813 87.1875 li
205.875 87.1875 li
205.938 87.125 li
206 87.125 li
206.125 87.125 li
206.375 87.125 li
206.438 87.125 li
206.5 87.125 li
206.688 87.0625 li
206.938 87.0625 li
207 87.0625 li
207.063 87.0625 li
207.188 87.0625 li
207.5 87 li
208.063 86.9375 li
208.125 86.9375 li
208.188 86.9375 li
208.313 86.875 li
208.563 86.875 li
208.625 86.875 li
208.688 86.8125 li
208.813 86.8125 li
209.125 86.75 li
209.188 86.75 li
209.25 86.75 li
209.375 86.6875 li
209.625 86.625 li
209.688 86.625 li
209.75 86.625 li
209.938 86.5625 li
210.188 86.5 li
210.25 86.5 li
210.313 86.5 li
210.438 86.4375 li
210.688 86.375 li
210.75 86.375 li
210.813 86.3125 li
210.938 86.3125 li
211.188 86.1875 li
211.25 86.1875 li
211.313 86.125 li
211.438 86.0625 li
211.688 86 li
211.75 85.9375 li
211.813 85.9375 li
211.938 85.875 li
212.188 85.6875 li
212.25 85.6875 li
212.313 85.625 li
212.438 85.5625 li
212.5 85.5 li
212.563 85.5 li
212.625 85.4375 li
212.75 85.375 li
212.75 85.3125 li
212.813 85.3125 li
212.875 85.25 li
213 85.125 li
213.25 84.9375 li
213.313 84.875 li
213.375 84.875 li
213.438 84.75 li
213.563 84.625 li
213.813 84.3125 li
213.875 84.3125 li
213.875 84.25 li
213.938 84.1875 li
214.125 84 li
214.375 83.625 li
214.375 83.5625 li
214.438 83.5625 li
214.5 83.4375 li
214.625 83.25 li
214.875 82.8125 li
214.938 82.8125 li
214.938 82.75 li
215 82.625 li
215.125 82.4375 li
215.375 82 li
215.438 81.9375 li
215.438 81.875 li
215.5 81.75 li
215.625 81.5625 li
215.688 81.5 li
215.75 81.375 li
215.813 81.375 li
215.813 81.3125 li
215.875 81.25 li
215.938 81.1875 li
216 81.125 li
216.063 81.0625 li
216.125 81.0625 li
216.125 81 li
216.188 81 li
216.25 81 li
216.313 81 li
216.375 81 li
216.438 81 li
216.438 81.0625 li
216.5 81.0625 li
216.563 81.125 li
216.625 81.1875 li
216.688 81.25 li
216.688 81.3125 li
216.75 81.375 li
216.813 81.4375 li
216.813 81.5 li
216.875 81.625 li
216.938 81.6875 li
216.938 81.75 li
217 81.875 li
217.063 81.9375 li
217.063 82 li
217.125 82.125 li
217.188 82.1875 li
217.188 82.25 li
217.25 82.3125 li
217.25 82.375 li
217.313 82.4375 li
217.375 82.5 li
217.375 82.5625 li
217.438 82.5625 li
217.438 82.625 li
217.5 82.625 li
217.563 82.6875 li
217.625 82.6875 li
217.688 82.625 li
217.75 82.625 li
217.75 82.5625 li
217.813 82.5625 li
217.813 82.5 li
217.875 82.5 li
217.875 82.4375 li
217.938 82.375 li
217.938 82.3125 li
218 82.1875 li
218.125 82 li
218.188 81.875 li
218.188 81.8125 li
218.25 81.6875 li
218.313 81.625 li
218.313 81.5625 li
218.375 81.5 li
218.438 81.4375 li
218.438 81.375 li
218.5 81.3125 li
218.5 81.25 li
218.563 81.1875 li
218.625 81.1875 li
218.625 81.125 li
218.688 81.125 li
218.688 81.0625 li
218.75 81.0625 li
218.75 81 li
218.813 81 li
218.875 81 li
218.938 81 li
219 81 li
219.063 81 li
219.125 81.0625 li
219.188 81.125 li
219.25 81.125 li
219.25 81.1875 li
219.313 81.25 li
219.375 81.3125 li
219.5 81.4375 li
219.5 81.5 li
219.563 81.5 li
219.625 81.625 li
219.75 81.8125 li
220 82.3125 li
220.563 83.1875 li
220.563 83.25 li
220.625 83.3125 li
220.688 83.375 li
220.813 83.5625 li
221.063 83.9375 li
221.063 84 li
221.125 84 li
221.188 84.125 li
221.313 84.25 li
221.563 84.5625 li
221.625 84.625 li
221.688 84.6875 li
221.813 84.8125 li
222.063 85.0625 li
222.125 85.0625 li
222.188 85.125 li
222.313 85.25 li
222.563 85.4375 li
222.625 85.4375 li
222.625 85.5 li
222.688 85.5 li
222.813 85.625 li
223.125 85.75 li
223.125 85.8125 li
223.188 85.8125 li
223.25 85.875 li
223.375 85.9375 li
223.688 86.0625 li
223.75 86.0625 li
223.813 86.125 li
223.938 86.1875 li
224.188 86.25 li
224.25 86.25 li
224.25 86.3125 li
224.375 86.3125 li
224.5 86.375 li
224.75 86.4375 li
224.813 86.4375 li
224.875 86.5 li
225 86.5 li
225.313 86.5625 li
225.313 86.625 li
225.375 86.625 li
225.438 86.625 li
225.563 86.625 li
225.813 86.6875 li
225.875 86.6875 li
225.875 86.75 li
225.938 86.75 li
226.125 86.75 li
226.375 86.8125 li
226.875 86.875 li
226.938 86.875 li
227 86.9375 li
227.125 86.9375 li
227.375 86.9375 li
227.438 86.9375 li
227.438 87 li
227.5 87 li
227.625 87 li
227.875 87 li
227.938 87 li
228 87.0625 li
228.125 87.0625 li
228.375 87.0625 li
228.875 87.125 li
228.938 87.125 li
229 87.125 li
229.063 87.125 li
229.188 87.125 li
229.438 87.1875 li
229.5 87.1875 li
229.563 87.1875 li
229.688 87.1875 li
230 87.1875 li
230.063 87.1875 li
230.125 87.1875 li
230.25 87.25 li
230.5 87.25 li
231.063 87.25 li
231.125 87.25 li
231.188 87.25 li
231.313 87.25 li
231.563 87.3125 li
232.063 87.3125 li
232.125 87.3125 li
232.188 87.3125 li
232.313 87.3125 li
232.563 87.3125 li
233.125 87.375 li
233.188 87.375 li
233.25 87.375 li
233.375 87.375 li
233.625 87.375 li
234.063 87.375 li
234.125 87.375 li
234.188 87.375 li
234.313 87.375 li
234.563 87.375 li
235.063 87.4375 li
235.125 87.4375 li
235.25 87.4375 li
235.375 87.4375 li
235.625 87.4375 li
236.188 87.4375 li
236.25 87.4375 li
236.313 87.4375 li
236.438 87.4375 li
236.688 87.4375 li
237.25 87.4375 li
237.313 87.4375 li
237.375 87.4375 li
237.5 87.4375 li
237.75 87.4375 li
238.25 87.5 li
238.313 87.5 li
238.375 87.5 li
238.5 87.5 li
238.75 87.5 li
239.25 87.5 li
239.313 87.5 li
239.375 87.5 li
239.5 87.5 li
239.813 87.5 li
240.313 87.5 li
240.375 87.5 li
240.438 87.5 li
240.5 87.5 li
240.625 87.5 li
240.875 87.5 li
241.438 87.5 li
241.5 87.5 li
241.563 87.5 li
241.688 87.5 li
241.938 87.5 li
242.438 87.5 li
243.438 87.5 li
243.5 87.5 li
243.563 87.5 li
243.688 87.5625 li
243.938 87.5625 li
244.438 87.5625 li
245.438 87.5625 li
245.5 87.5625 li
245.625 87.5625 li
245.75 87.5625 li
246 87.5625 li
246.563 87.5625 li
247.625 87.5625 li
247.688 87.5625 li
247.75 87.5625 li
247.875 87.5625 li
248.125 87.5625 li
248.625 87.5625 li
249.625 87.5625 li
249.688 87.5625 li
249.813 87.5625 li
249.938 87.5625 li
250.188 87.5625 li
250.75 87.5625 li
251.813 87.5625 li
251.875 87.5625 li
252 87.5625 li
252.125 87.5625 li
252.375 87.5625 li
252.938 87.5625 li
254 87.5625 li
256 87.5625 li
258.188 87.5625 li
260.188 87.5625 li
262.188 87.625 li
264.313 87.625 li
266.375 87.625 li
268.563 87.625 li
268.625 87.625 li
1 0 0 rgb
@
166.25 87.625 mo
166.25 87.625 li
166.313 87.625 li
166.375 87.625 li
166.5 87.625 li
166.75 87.625 li
167.25 87.625 li
168.25 87.625 li
170.438 87.625 li
172.438 87.625 li
174.438 87.625 li
176.625 87.5625 li
178.625 87.5625 li
178.688 87.5625 li
178.75 87.5625 li
178.875 87.5625 li
179.188 87.5625 li
179.75 87.5625 li
180.813 87.5625 li
180.875 87.5625 li
180.938 87.5625 li
181.063 87.5625 li
181.375 87.5625 li
181.875 87.5625 li
182.938 87.5625 li
183 87.5625 li
183.063 87.5625 li
183.188 87.5625 li
183.438 87.5625 li
184 87.5625 li
185 87.5625 li
185.063 87.5625 li
185.125 87.5625 li
185.25 87.5625 li
185.5 87.5625 li
186.063 87.5625 li
187.125 87.5625 li
187.188 87.5625 li
187.25 87.5625 li
187.375 87.5625 li
187.625 87.5625 li
188.188 87.5625 li
189.188 87.5625 li
189.25 87.5625 li
189.313 87.5625 li
189.438 87.5625 li
189.688 87.5625 li
190.188 87.5625 li
190.25 87.5625 li
190.313 87.5625 li
190.438 87.5625 li
190.688 87.5625 li
191.188 87.5625 li
191.25 87.5625 li
191.313 87.5625 li
191.438 87.5625 li
191.688 87.5 li
192.25 87.5 li
192.313 87.5 li
192.375 87.5 li
192.5 87.5 li
192.75 87.5 li
193.313 87.5 li
193.375 87.5 li
193.438 87.5 li
193.563 87.5 li
193.813 87.5 li
194.313 87.5 li
194.375 87.5 li
194.438 87.5 li
194.563 87.5 li
194.813 87.5 li
195.313 87.5 li
195.375 87.5 li
195.438 87.5 li
195.625 87.5 li
195.875 87.5 li
196.438 87.5 li
196.5 87.5 li
196.563 87.5 li
196.688 87.5 li
196.938 87.5 li
197.5 87.4375 li
197.563 87.4375 li
197.625 87.4375 li
197.75 87.4375 li
198.063 87.4375 li
198.563 87.4375 li
198.625 87.4375 li
198.688 87.4375 li
198.875 87.4375 li
199.125 87.4375 li
199.625 87.4375 li
199.688 87.4375 li
199.75 87.4375 li
199.875 87.4375 li
200.125 87.4375 li
200.625 87.375 li
200.688 87.375 li
200.75 87.375 li
200.875 87.375 li
201.125 87.375 li
201.625 87.375 li
201.688 87.375 li
201.75 87.375 li
201.813 87.375 li
201.938 87.375 li
202.188 87.375 li
202.75 87.3125 li
202.813 87.3125 li
202.875 87.3125 li
203 87.3125 li
203.25 87.3125 li
203.813 87.25 li
203.875 87.25 li
203.938 87.25 li
204.063 87.25 li
204.313 87.25 li
204.375 87.25 li
204.438 87.25 li
204.563 87.25 li
204.813 87.1875 li
204.875 87.1875 li
204.938 87.1875 li
205.063 87.1875 li
205.313 87.1875 li
205.813 87.125 li
205.875 87.125 li
205.938 87.125 li
206 87.125 li
206.125 87.125 li
206.375 87.125 li
206.438 87.0625 li
206.5 87.0625 li
206.688 87.0625 li
206.938 87.0625 li
207 87.0625 li
207 87 li
207.063 87 li
207.188 87 li
207.5 87 li
208.063 86.875 li
208.125 86.875 li
208.188 86.875 li
208.313 86.875 li
208.563 86.8125 li
208.625 86.8125 li
208.688 86.8125 li
208.813 86.75 li
209.125 86.6875 li
209.188 86.6875 li
209.25 86.6875 li
209.375 86.625 li
209.625 86.5625 li
209.688 86.5625 li
209.75 86.5625 li
209.938 86.5 li
210.188 86.4375 li
210.188 86.375 li
210.25 86.375 li
210.313 86.375 li
210.438 86.3125 li
210.688 86.25 li
210.75 86.1875 li
210.813 86.1875 li
210.938 86.125 li
211.188 86 li
211.25 86 li
211.313 85.9375 li
211.438 85.875 li
211.5 85.875 li
211.563 85.8125 li
211.688 85.75 li
211.75 85.6875 li
211.813 85.625 li
211.938 85.5625 li
212.188 85.375 li
212.25 85.375 li
212.25 85.3125 li
212.313 85.25 li
212.438 85.125 li
212.5 85.125 li
212.563 85.0625 li
212.625 85 li
212.75 84.875 li
212.75 84.8125 li
212.813 84.8125 li
212.875 84.6875 li
213 84.5625 li
213.063 84.5 li
213.063 84.4375 li
213.125 84.375 li
213.25 84.125 li
213.313 84.125 li
213.375 84.0625 li
213.438 83.9375 li
213.563 83.6875 li
213.563 83.625 li
213.625 83.5625 li
213.688 83.4375 li
213.813 83.125 li
213.875 83.0625 li
213.875 83 li
213.938 82.8125 li
214.125 82.4375 li
214.125 82.375 li
214.188 82.25 li
214.25 82.0625 li
214.375 81.625 li
214.375 81.5 li
214.438 81.375 li
214.5 81.1875 li
214.625 80.625 li
214.625 80.5 li
214.688 80.375 li
214.75 80.0625 li
214.875 79.4375 li
214.938 79.25 li
214.938 79.0625 li
215 78.6875 li
215.063 78.5 li
215.063 78.3125 li
215.125 77.875 li
215.188 77.625 li
215.188 77.4375 li
215.25 76.9375 li
215.375 75.875 li
215.438 75.5625 li
215.438 75.25 li
215.5 74.625 li
215.563 74.3125 li
215.563 73.9375 li
215.625 73.1875 li
215.688 72.8125 li
215.688 72.375 li
215.75 71.5625 li
215.875 69.625 li
215.938 69.125 li
215.938 68.5625 li
216 67.375 li
216.063 66.75 li
216.063 66.125 li
216.125 64.75 li
216.188 64 li
216.188 63.25 li
216.25 61.625 li
216.375 58 li
216.438 57 li
216.438 56 li
216.5 53.8125 li
216.563 52.6875 li
216.563 51.5 li
216.625 48.9375 li
216.688 47.625 li
216.688 46.25 li
216.75 43.375 li
216.875 37.0625 li
216.938 35.375 li
216.938 33.6875 li
217 30.25 li
217.125 23.1875 li
217.188 21.5 li
217.188 19.8125 li
217.25 18.1875 li
217.25 16.625 li
217.313 15.125 li
217.313 13.6875 li
217.375 12.4375 li
217.375 11.25 li
217.438 10.1875 li
217.438 9.3125 li
217.5 8.5625 li
217.5 8 li
217.563 7.625 li
217.563 7.375 li
217.625 7.375 li
217.625 7.5 li
217.688 7.875 li
217.688 8.375 li
217.75 9.0625 li
217.75 9.875 li
217.813 10.875 li
217.813 12 li
217.875 13.25 li
217.875 14.625 li
217.938 16.0625 li
217.938 17.625 li
218 20.9375 li
218.125 27.875 li
218.188 29.625 li
218.188 31.375 li
218.25 34.8125 li
218.375 41.3125 li
218.438 43 li
218.438 44.5625 li
218.5 47.625 li
218.563 49.0625 li
218.625 50.4375 li
218.688 53.0625 li
218.688 54.3125 li
218.75 55.5 li
218.813 57.6875 li
218.938 61.625 li
218.938 62.5 li
219 63.3125 li
219.063 64.875 li
219.125 65.625 li
219.125 66.3125 li
219.188 67.625 li
219.25 68.25 li
219.25 68.875 li
219.313 70 li
219.5 71.9375 li
219.5 72.4375 li
219.563 72.8125 li
219.625 73.625 li
219.625 74 li
219.688 74.375 li
219.75 75.0625 li
219.75 75.4375 li
219.813 75.75 li
219.875 76.3125 li
220 77.4375 li
220.063 77.625 li
220.063 77.875 li
220.125 78.3125 li
220.188 78.5625 li
220.188 78.75 li
220.313 79.1875 li
220.313 79.375 li
220.375 79.5 li
220.438 79.875 li
220.563 80.5 li
220.563 80.625 li
220.625 80.75 li
220.688 81.0625 li
220.813 81.5 li
220.813 81.625 li
220.875 81.75 li
220.938 81.9375 li
221.063 82.3125 li
221.063 82.375 li
221.125 82.5 li
221.188 82.625 li
221.313 82.9375 li
221.313 83.0625 li
221.375 83.125 li
221.438 83.25 li
221.563 83.5 li
221.563 83.5625 li
221.625 83.625 li
221.688 83.75 li
221.813 84 li
221.875 84 li
221.875 84.0625 li
221.938 84.1875 li
222.063 84.375 li
222.125 84.375 li
222.125 84.4375 li
222.188 84.5 li
222.313 84.6875 li
222.563 84.9375 li
222.625 85 li
222.625 85.0625 li
222.688 85.125 li
222.813 85.25 li
222.875 85.25 li
222.938 85.3125 li
223 85.375 li
223.125 85.4375 li
223.125 85.5 li
223.188 85.5 li
223.25 85.5625 li
223.375 85.625 li
223.688 85.8125 li
223.75 85.875 li
223.813 85.875 li
223.938 86 li
224 86 li
224.063 86.0625 li
224.188 86.125 li
224.25 86.125 li
224.375 86.1875 li
224.5 86.25 li
224.75 86.3125 li
224.813 86.3125 li
224.813 86.375 li
224.875 86.375 li
225 86.4375 li
225.313 86.5 li
225.375 86.5 li
225.438 86.5625 li
225.563 86.5625 li
225.813 86.625 li
225.875 86.625 li
225.938 86.6875 li
226.125 86.6875 li
226.375 86.75 li
226.438 86.75 li
226.5 86.75 li
226.625 86.8125 li
226.875 86.875 li
226.938 86.875 li
227 86.875 li
227.125 86.875 li
227.375 86.9375 li
227.438 86.9375 li
227.5 86.9375 li
227.625 86.9375 li
227.875 87 li
227.938 87 li
228 87 li
228.125 87 li
228.375 87.0625 li
228.875 87.125 li
228.938 87.125 li
229 87.125 li
229.063 87.125 li
229.188 87.125 li
229.438 87.125 li
229.5 87.125 li
229.563 87.1875 li
229.688 87.1875 li
230 87.1875 li
230.063 87.1875 li
230.125 87.1875 li
230.25 87.1875 li
230.5 87.25 li
231.063 87.25 li
231.125 87.25 li
231.188 87.25 li
231.313 87.25 li
231.563 87.3125 li
232.063 87.3125 li
232.125 87.3125 li
232.188 87.3125 li
232.313 87.3125 li
232.563 87.3125 li
233.125 87.375 li
233.188 87.375 li
233.25 87.375 li
233.375 87.375 li
233.625 87.375 li
234.063 87.375 li
234.125 87.375 li
234.188 87.375 li
234.313 87.375 li
234.563 87.375 li
235.063 87.4375 li
235.125 87.4375 li
235.25 87.4375 li
235.375 87.4375 li
235.625 87.4375 li
236.188 87.4375 li
236.25 87.4375 li
236.313 87.4375 li
236.438 87.4375 li
236.688 87.4375 li
237.25 87.4375 li
237.313 87.4375 li
237.375 87.4375 li
237.5 87.4375 li
237.75 87.4375 li
238.25 87.5 li
238.313 87.5 li
238.375 87.5 li
238.5 87.5 li
238.75 87.5 li
239.25 87.5 li
239.313 87.5 li
239.375 87.5 li
239.5 87.5 li
239.813 87.5 li
240.313 87.5 li
240.375 87.5 li
240.438 87.5 li
240.5 87.5 li
240.625 87.5 li
240.875 87.5 li
241.438 87.5 li
241.5 87.5 li
241.563 87.5 li
241.688 87.5 li
241.938 87.5 li
242.438 87.5 li
243.438 87.5 li
243.5 87.5 li
243.563 87.5 li
243.688 87.5625 li
243.938 87.5625 li
244.438 87.5625 li
245.438 87.5625 li
245.5 87.5625 li
245.625 87.5625 li
245.75 87.5625 li
246 87.5625 li
246.563 87.5625 li
247.625 87.5625 li
247.688 87.5625 li
247.75 87.5625 li
247.875 87.5625 li
248.125 87.5625 li
248.625 87.5625 li
249.625 87.5625 li
249.688 87.5625 li
249.813 87.5625 li
249.938 87.5625 li
250.188 87.5625 li
250.75 87.5625 li
251.813 87.5625 li
251.875 87.5625 li
252 87.5625 li
252.125 87.5625 li
252.375 87.5625 li
252.938 87.5625 li
254 87.5625 li
256 87.5625 li
258.188 87.5625 li
260.188 87.5625 li
262.188 87.625 li
264.313 87.625 li
266.375 87.625 li
268.563 87.625 li
268.625 87.625 li
0 1 0 rgb
@
grestore % PSGState
.1875 lw
2 lc
0 lj
3.23931 ml
[] 0 dsh
true sadj
268.625 87.625 mo
166.25 87.625 li
false sop
0 0 0 rgb
@
166.25 87.625 mo
166.25 5.75 li
@
166.25 5.75 mo
268.625 5.75 li
@
268.625 5.75 mo
268.625 87.625 li
@
0 lc
179.563 87.625 mo
179.563 85.625 li
@
201.813 87.625 mo
201.813 85.625 li
@
224.125 87.625 mo
224.125 85.625 li
@
246.375 87.625 mo
246.375 85.625 li
@
166.25 87.625 mo
168.25 87.625 li
@
gsave % PSGState
157.75 81.5 mo
157.75 93.75 li
164.25 93.75 li
164.25 81.5 li
eclp
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
158.733 90.5684 mov
(0) sh
grestore % PSGState
166.25 84.25 mo
167.438 84.25 li
@
166.25 80.8125 mo
167.438 80.8125 li
@
166.25 77.4375 mo
167.438 77.4375 li
@
166.25 74.0625 mo
168.25 74.0625 li
@
gsave % PSGState
157.75 67.9375 mo
157.75 80.1875 li
164.25 80.1875 li
164.25 67.9375 li
eclp
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
158.733 76.9844 mov
(2) sh
grestore % PSGState
166.25 70.625 mo
167.438 70.625 li
@
166.25 67.25 mo
167.438 67.25 li
@
166.25 63.875 mo
167.438 63.875 li
@
166.25 60.4375 mo
168.25 60.4375 li
@
gsave % PSGState
157.75 54.3125 mo
157.75 66.5625 li
164.25 66.5625 li
164.25 54.3125 li
eclp
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
158.733 63.4004 mov
(4) sh
grestore % PSGState
166.25 57.0625 mo
167.438 57.0625 li
@
166.25 53.6875 mo
167.438 53.6875 li
@
166.25 50.25 mo
167.438 50.25 li
@
166.25 46.875 mo
168.25 46.875 li
@
gsave % PSGState
157.75 40.75 mo
157.75 53 li
164.25 53 li
164.25 40.75 li
eclp
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
158.733 49.8164 mov
(6) sh
grestore % PSGState
166.25 43.5 mo
167.438 43.5 li
@
166.25 40.0625 mo
167.438 40.0625 li
@
166.25 36.6875 mo
167.438 36.6875 li
@
166.25 33.3125 mo
168.25 33.3125 li
@
gsave % PSGState
157.75 27.1875 mo
157.75 39.4375 li
164.25 39.4375 li
164.25 27.1875 li
eclp
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
158.733 36.2324 mov
(8) sh
grestore % PSGState
166.25 29.875 mo
167.438 29.875 li
@
166.25 26.5 mo
167.438 26.5 li
@
166.25 23.125 mo
167.438 23.125 li
@
166.25 19.6875 mo
168.25 19.6875 li
@
gsave % PSGState
153.25 13.5625 mo
153.25 25.8125 li
164.25 25.8125 li
164.25 13.5625 li
eclp
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
154.233 22.6484 mov
0.000350952 0 (10) ash
grestore % PSGState
166.25 16.3125 mo
167.438 16.3125 li
@
166.25 12.9375 mo
167.438 12.9375 li
@
166.25 9.5 mo
167.438 9.5 li
@
166.25 6.125 mo
168.25 6.125 li
@
166.25 5.75 mo
166.25 6.9375 li
@
170.688 5.75 mo
170.688 6.9375 li
@
175.125 5.75 mo
175.125 6.9375 li
@
179.563 5.75 mo
179.563 7.75 li
@
184.063 5.75 mo
184.063 6.9375 li
@
188.5 5.75 mo
188.5 6.9375 li
@
192.938 5.75 mo
192.938 6.9375 li
@
197.375 5.75 mo
197.375 6.9375 li
@
201.813 5.75 mo
201.813 7.75 li
@
206.313 5.75 mo
206.313 6.9375 li
@
210.75 5.75 mo
210.75 6.9375 li
@
215.188 5.75 mo
215.188 6.9375 li
@
219.625 5.75 mo
219.625 6.9375 li
@
224.125 5.75 mo
224.125 7.75 li
@
228.563 5.75 mo
228.563 6.9375 li
@
233 5.75 mo
233 6.9375 li
@
237.438 5.75 mo
237.438 6.9375 li
@
241.875 5.75 mo
241.875 6.9375 li
@
246.375 5.75 mo
246.375 7.75 li
@
250.813 5.75 mo
250.813 6.9375 li
@
255.25 5.75 mo
255.25 6.9375 li
@
259.688 5.75 mo
259.688 6.9375 li
@
264.125 5.75 mo
264.125 6.9375 li
@
268.625 5.75 mo
268.625 7.75 li
@
268.625 87.625 mo
266.625 87.625 li
@
268.625 84.25 mo
267.375 84.25 li
@
268.625 80.8125 mo
267.375 80.8125 li
@
268.625 77.4375 mo
267.375 77.4375 li
@
268.625 74.0625 mo
266.625 74.0625 li
@
268.625 70.625 mo
267.375 70.625 li
@
268.625 67.25 mo
267.375 67.25 li
@
268.625 63.875 mo
267.375 63.875 li
@
268.625 60.4375 mo
266.625 60.4375 li
@
268.625 57.0625 mo
267.375 57.0625 li
@
268.625 53.6875 mo
267.375 53.6875 li
@
268.625 50.25 mo
267.375 50.25 li
@
268.625 46.875 mo
266.625 46.875 li
@
268.625 43.5 mo
267.375 43.5 li
@
268.625 40.0625 mo
267.375 40.0625 li
@
268.625 36.6875 mo
267.375 36.6875 li
@
268.625 33.3125 mo
266.625 33.3125 li
@
268.625 29.875 mo
267.375 29.875 li
@
268.625 26.5 mo
267.375 26.5 li
@
268.625 23.125 mo
267.375 23.125 li
@
268.625 19.6875 mo
266.625 19.6875 li
@
268.625 16.3125 mo
267.375 16.3125 li
@
268.625 12.9375 mo
267.375 12.9375 li
@
268.625 9.5 mo
267.375 9.5 li
@
268.625 6.125 mo
266.625 6.125 li
@
gsave % PSGState
165.75 5.125 mo
165.75 88.125 li
268.75 88.125 li
268.75 5.125 li
eclp
gsave % PSGState
171 7.8125 mo
171 20.0625 li
182 20.0625 li
182 7.8125 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
BKFDEK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8
F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9A
F110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D39992
4398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D660
3C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83
F23AED1F56FC130F21> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKFDEK+TimesNewRomanPSMT /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
/BKFDEK+TimesNewRomanPSMT*1 
[
97{/.notdef}repeat /a /b 14{/.notdef}repeat /q 142{/.notdef}repeat
] BKFDEK+TimesNewRomanPSMT nfnt
BKFDEK+TimesNewRomanPSMT*1  [9 0 0 -9 0 0 ]mfnt sfnt
171.971 16.8613 mov
(qb) sh
grestore % PSGState
grestore % PSGState
grestore % PSGState
.5 lw
2 lc
0 lj
3.23931 ml
[] 0 dsh
true sadj
37.625 174.5 mo
37.6875 174.5 li
37.75 174.5 li
37.875 174.5 li
38.125 174.5 li
38.625 174.5 li
39.625 174.5 li
41.8125 174.5 li
43.875 174.438 li
45.875 174.438 li
48 174.438 li
50.0625 174.438 li
52.25 174.438 li
54.375 174.438 li
54.4375 174.438 li
54.5 174.438 li
54.625 174.438 li
54.875 174.438 li
55.375 174.438 li
56.375 174.438 li
56.4375 174.438 li
56.5 174.438 li
56.625 174.438 li
56.9375 174.438 li
57.4375 174.438 li
58.5625 174.438 li
58.625 174.438 li
58.6875 174.438 li
58.8125 174.438 li
59.0625 174.438 li
59.5625 174.438 li
60.5625 174.438 li
60.625 174.438 li
60.6875 174.438 li
60.8125 174.438 li
61.0625 174.438 li
61.5625 174.438 li
62.5625 174.375 li
62.625 174.375 li
62.6875 174.375 li
62.8125 174.375 li
63.125 174.375 li
63.625 174.375 li
63.6875 174.375 li
63.8125 174.375 li
63.9375 174.375 li
64.1875 174.375 li
64.75 174.375 li
64.8125 174.375 li
64.875 174.375 li
65 174.375 li
65.25 174.375 li
65.75 174.375 li
65.8125 174.375 li
65.875 174.375 li
66 174.375 li
66.25 174.375 li
66.75 174.375 li
66.8125 174.375 li
66.875 174.375 li
67 174.375 li
67.3125 174.375 li
67.8125 174.375 li
67.875 174.375 li
68 174.375 li
68.125 174.375 li
68.375 174.375 li
68.9375 174.313 li
69 174.313 li
69.0625 174.313 li
69.1875 174.313 li
69.4375 174.313 li
70 174.313 li
70.0625 174.313 li
70.125 174.313 li
70.25 174.313 li
70.5 174.313 li
71.0625 174.313 li
71.125 174.313 li
71.1875 174.313 li
71.3125 174.313 li
71.5625 174.313 li
72.0625 174.25 li
72.125 174.25 li
72.1875 174.25 li
72.3125 174.25 li
72.5625 174.25 li
73.0625 174.25 li
73.125 174.25 li
73.1875 174.25 li
73.3125 174.25 li
73.625 174.25 li
74.125 174.188 li
74.1875 174.188 li
74.3125 174.188 li
74.4375 174.188 li
74.6875 174.188 li
75.25 174.188 li
75.3125 174.188 li
75.375 174.188 li
75.5 174.188 li
75.75 174.125 li
76.25 174.125 li
76.3125 174.125 li
76.375 174.125 li
76.5 174.125 li
76.75 174.125 li
77.25 174.063 li
77.3125 174.063 li
77.375 174.063 li
77.5 174.063 li
77.8125 174.063 li
78.375 174 li
78.4375 174 li
78.5 174 li
78.625 174 li
78.875 173.938 li
79.4375 173.938 li
79.5 173.875 li
79.5625 173.875 li
79.6875 173.875 li
80 173.875 li
80.0625 173.875 li
80.125 173.813 li
80.25 173.813 li
80.5 173.813 li
80.5625 173.813 li
80.5625 173.75 li
80.625 173.75 li
80.8125 173.75 li
81.0625 173.688 li
81.625 173.625 li
81.6875 173.625 li
81.75 173.625 li
81.875 173.625 li
82.125 173.563 li
82.625 173.438 li
82.6875 173.438 li
82.75 173.438 li
82.875 173.438 li
83.125 173.375 li
83.625 173.25 li
83.6875 173.25 li
83.75 173.188 li
83.875 173.188 li
84.125 173.125 li
84.6875 172.938 li
85.75 172.625 li
85.8125 172.563 li
85.875 172.563 li
86.0625 172.5 li
86.3125 172.438 li
86.8125 172.25 li
86.875 172.25 li
86.9375 172.25 li
87.0625 172.188 li
87.3125 172.125 li
87.375 172.063 li
87.4375 172.063 li
87.5625 172.063 li
87.8125 172 li
87.875 171.938 li
87.9375 171.938 li
88 171.938 li
88.0625 171.938 li
88.125 171.938 li
88.1875 171.938 li
88.3125 171.875 li
88.375 171.875 li
88.4375 171.875 li
88.5 171.875 li
88.5625 171.875 li
88.625 171.875 li
88.6875 171.875 li
88.75 171.875 li
88.8125 171.875 li
88.875 171.875 li
88.9375 171.813 li
89 171.813 li
89.0625 171.813 li
89.125 171.875 li
89.1875 171.875 li
89.25 171.875 li
89.3125 171.875 li
89.375 171.875 li
89.4375 171.875 li
89.5 171.875 li
89.5625 171.875 li
89.625 171.875 li
89.6875 171.875 li
89.75 171.875 li
89.8125 171.875 li
89.8125 171.938 li
89.875 171.938 li
89.9375 171.938 li
90.0625 171.938 li
90.125 171.938 li
90.1875 172 li
90.3125 172 li
90.375 172 li
90.4375 172 li
90.5 172.063 li
90.625 172.063 li
90.875 172.125 li
90.9375 172.188 li
91 172.188 li
91.125 172.25 li
91.4375 172.313 li
91.9375 172.5 li
92 172.5 li
92.0625 172.563 li
92.1875 172.563 li
92.4375 172.688 li
93 172.813 li
93.0625 172.875 li
93.125 172.875 li
93.25 172.938 li
93.5 173 li
94 173.125 li
94.0625 173.125 li
94.125 173.188 li
94.25 173.188 li
94.5 173.25 li
94.5625 173.25 li
94.625 173.25 li
94.6875 173.313 li
94.8125 173.313 li
95.0625 173.375 li
95.125 173.375 li
95.1875 173.438 li
95.375 173.438 li
95.625 173.5 li
96.1875 173.625 li
96.25 173.625 li
96.3125 173.625 li
96.4375 173.625 li
96.6875 173.688 li
96.75 173.688 li
96.8125 173.688 li
97 173.688 li
97.25 173.75 li
97.3125 173.75 li
97.375 173.75 li
97.5 173.813 li
97.75 173.813 li
98.3125 173.875 li
98.375 173.875 li
98.4375 173.875 li
98.5625 173.875 li
98.8125 173.938 li
99.3125 174 li
99.375 174 li
99.4375 174 li
99.5625 174 li
99.8125 174 li
100.313 174.063 li
100.375 174.063 li
100.438 174.063 li
100.563 174.063 li
100.875 174.063 li
101.375 174.125 li
101.438 174.125 li
101.563 174.125 li
101.688 174.125 li
101.938 174.125 li
102.5 174.188 li
102.563 174.188 li
102.625 174.188 li
102.75 174.188 li
103 174.188 li
103.5 174.188 li
103.563 174.188 li
103.625 174.188 li
103.75 174.188 li
104 174.25 li
104.5 174.25 li
104.563 174.25 li
104.625 174.25 li
104.75 174.25 li
105 174.25 li
105.5 174.25 li
105.563 174.25 li
105.625 174.25 li
105.75 174.25 li
106 174.25 li
106.5 174.313 li
106.563 174.313 li
106.625 174.313 li
106.75 174.313 li
107.063 174.313 li
107.563 174.313 li
107.625 174.313 li
107.688 174.313 li
107.813 174.313 li
108.125 174.313 li
108.625 174.313 li
108.688 174.313 li
108.75 174.313 li
108.875 174.313 li
109.125 174.313 li
109.625 174.375 li
109.688 174.375 li
109.75 174.375 li
109.813 174.375 li
109.938 174.375 li
110.188 174.375 li
110.688 174.375 li
110.75 174.375 li
110.813 174.375 li
110.938 174.375 li
111.188 174.375 li
111.75 174.375 li
111.813 174.375 li
111.875 174.375 li
112 174.375 li
112.313 174.375 li
112.813 174.375 li
112.875 174.375 li
112.938 174.375 li
113.125 174.375 li
113.375 174.375 li
113.875 174.375 li
114.875 174.375 li
114.938 174.375 li
115 174.375 li
115.125 174.375 li
115.375 174.375 li
115.875 174.438 li
116.875 174.438 li
116.938 174.438 li
117 174.438 li
117.125 174.438 li
117.438 174.438 li
117.938 174.438 li
119.063 174.438 li
119.125 174.438 li
119.188 174.438 li
119.313 174.438 li
119.563 174.438 li
120.063 174.438 li
121.063 174.438 li
121.125 174.438 li
121.188 174.438 li
121.313 174.438 li
121.625 174.438 li
122.125 174.438 li
123.25 174.438 li
123.313 174.438 li
123.375 174.438 li
123.5 174.438 li
123.813 174.438 li
124.313 174.438 li
125.375 174.438 li
127.375 174.438 li
129.563 174.438 li
131.625 174.438 li
133.625 174.438 li
135.75 174.5 li
137.75 174.5 li
139.938 174.5 li
140 174.5 li
false sop
0 0 1 rgb
@
37.625 174.5 mo
37.6875 174.5 li
37.75 174.5 li
37.875 174.5 li
38.125 174.5 li
38.625 174.5 li
39.625 174.5 li
41.8125 174.5 li
43.875 174.5 li
45.875 174.438 li
48 174.438 li
50.0625 174.438 li
52.25 174.438 li
54.375 174.438 li
54.4375 174.438 li
54.5 174.438 li
54.625 174.438 li
54.875 174.438 li
55.375 174.438 li
56.375 174.438 li
56.4375 174.438 li
56.5 174.438 li
56.625 174.438 li
56.9375 174.438 li
57.4375 174.438 li
58.5625 174.438 li
58.625 174.438 li
58.6875 174.438 li
58.8125 174.438 li
59.0625 174.438 li
59.5625 174.438 li
60.5625 174.438 li
60.625 174.438 li
60.6875 174.438 li
60.8125 174.438 li
61.0625 174.438 li
61.5625 174.438 li
62.5625 174.438 li
62.625 174.438 li
62.6875 174.438 li
62.8125 174.438 li
63.125 174.438 li
63.625 174.375 li
64.75 174.375 li
64.8125 174.375 li
64.875 174.375 li
65 174.375 li
65.25 174.375 li
65.75 174.375 li
65.8125 174.375 li
65.875 174.375 li
66 174.375 li
66.25 174.375 li
66.75 174.375 li
66.8125 174.375 li
66.875 174.375 li
67 174.375 li
67.3125 174.375 li
67.8125 174.375 li
67.875 174.375 li
68 174.375 li
68.125 174.375 li
68.375 174.375 li
68.9375 174.375 li
69 174.375 li
69.0625 174.375 li
69.1875 174.375 li
69.4375 174.375 li
70 174.313 li
70.0625 174.313 li
70.125 174.313 li
70.25 174.313 li
70.5 174.313 li
71.0625 174.313 li
71.125 174.313 li
71.1875 174.313 li
71.3125 174.313 li
71.5625 174.313 li
72.0625 174.313 li
72.125 174.313 li
72.1875 174.313 li
72.3125 174.313 li
72.5625 174.313 li
73.0625 174.313 li
73.125 174.25 li
73.1875 174.25 li
73.3125 174.25 li
73.625 174.25 li
74.125 174.25 li
74.1875 174.25 li
74.3125 174.25 li
74.4375 174.25 li
74.6875 174.25 li
75.25 174.25 li
75.3125 174.25 li
75.375 174.25 li
75.5 174.188 li
75.75 174.188 li
76.25 174.188 li
76.3125 174.188 li
76.375 174.188 li
76.5 174.188 li
76.75 174.188 li
77.25 174.125 li
77.3125 174.125 li
77.375 174.125 li
77.5 174.125 li
77.8125 174.125 li
78.375 174.125 li
79.4375 174.063 li
79.5 174.063 li
79.5625 174.063 li
79.6875 174.063 li
80 174 li
80.5 174 li
80.5625 174 li
80.625 174 li
80.8125 174 li
81.0625 173.938 li
81.625 173.938 li
81.6875 173.938 li
81.75 173.938 li
81.875 173.938 li
82.125 173.875 li
82.1875 173.875 li
82.25 173.875 li
82.375 173.875 li
82.625 173.875 li
82.6875 173.875 li
82.75 173.875 li
82.875 173.875 li
82.9375 173.875 li
83 173.875 li
83.125 173.875 li
83.1875 173.875 li
83.25 173.875 li
83.3125 173.875 li
83.375 173.875 li
83.4375 173.875 li
83.5 173.875 li
83.5625 173.813 li
83.625 173.813 li
83.6875 173.813 li
83.75 173.813 li
83.8125 173.813 li
83.875 173.813 li
83.9375 173.813 li
84 173.813 li
84.0625 173.813 li
84.125 173.813 li
84.1875 173.813 li
84.25 173.813 li
84.3125 173.813 li
84.375 173.813 li
84.4375 173.813 li
84.5 173.813 li
84.5 173.875 li
84.5625 173.875 li
84.625 173.875 li
84.6875 173.875 li
84.75 173.875 li
84.8125 173.875 li
84.875 173.875 li
84.9375 173.875 li
85 173.875 li
85.125 173.875 li
85.25 173.875 li
85.3125 173.875 li
85.375 173.875 li
85.5 173.938 li
85.5625 173.938 li
85.625 173.938 li
85.75 173.938 li
85.8125 173.938 li
85.875 173.938 li
86.0625 174 li
86.3125 174 li
86.375 174 li
86.4375 174.063 li
86.5625 174.063 li
86.8125 174.125 li
86.875 174.125 li
86.9375 174.125 li
87.0625 174.125 li
87.3125 174.188 li
87.375 174.188 li
87.4375 174.25 li
87.5625 174.25 li
87.8125 174.313 li
87.875 174.313 li
87.9375 174.313 li
88.0625 174.313 li
88.0625 174.375 li
88.125 174.375 li
88.1875 174.375 li
88.3125 174.375 li
88.375 174.375 li
88.4375 174.375 li
88.5 174.375 li
88.5625 174.375 li
88.625 174.375 li
88.625 174.438 li
88.6875 174.438 li
88.75 174.438 li
88.8125 174.438 li
88.875 174.438 li
88.9375 174.438 li
89 174.438 li
89.0625 174.438 li
89.125 174.438 li
89.1875 174.438 li
89.25 174.438 li
89.3125 174.438 li
89.375 174.438 li
89.4375 174.375 li
89.5 174.375 li
89.5625 174.375 li
89.625 174.375 li
89.6875 174.375 li
89.8125 174.375 li
89.875 174.375 li
89.9375 174.375 li
90.0625 174.313 li
90.3125 174.25 li
90.375 174.25 li
90.4375 174.25 li
90.5 174.25 li
90.625 174.25 li
90.875 174.188 li
90.9375 174.188 li
91 174.125 li
91.125 174.125 li
91.4375 174.063 li
91.5 174.063 li
91.5625 174.063 li
91.6875 174 li
91.9375 174 li
92 174 li
92 173.938 li
92.0625 173.938 li
92.1875 173.938 li
92.25 173.938 li
92.3125 173.938 li
92.4375 173.938 li
92.5 173.938 li
92.5 173.875 li
92.625 173.875 li
92.6875 173.875 li
92.75 173.875 li
92.8125 173.875 li
92.875 173.875 li
93 173.875 li
93.0625 173.875 li
93.125 173.875 li
93.1875 173.875 li
93.25 173.875 li
93.3125 173.875 li
93.375 173.875 li
93.4375 173.875 li
93.5 173.875 li
93.5625 173.813 li
93.625 173.813 li
93.6875 173.813 li
93.75 173.813 li
93.8125 173.813 li
93.875 173.813 li
93.9375 173.813 li
94 173.813 li
94.0625 173.813 li
94.125 173.813 li
94.1875 173.813 li
94.25 173.813 li
94.3125 173.813 li
94.375 173.813 li
94.4375 173.813 li
94.5 173.875 li
94.5625 173.875 li
94.625 173.875 li
94.6875 173.875 li
94.75 173.875 li
94.8125 173.875 li
94.875 173.875 li
94.9375 173.875 li
95.0625 173.875 li
95.125 173.875 li
95.1875 173.875 li
95.375 173.875 li
95.625 173.875 li
96.1875 173.938 li
96.25 173.938 li
96.3125 173.938 li
96.4375 173.938 li
96.6875 173.938 li
97.25 174 li
98.3125 174.063 li
98.375 174.063 li
98.4375 174.063 li
98.5625 174.063 li
98.8125 174.063 li
99.3125 174.063 li
99.375 174.063 li
99.4375 174.125 li
99.5625 174.125 li
99.8125 174.125 li
100.313 174.125 li
100.375 174.125 li
100.438 174.125 li
100.563 174.125 li
100.875 174.188 li
101.375 174.188 li
101.438 174.188 li
101.563 174.188 li
101.688 174.188 li
101.938 174.188 li
102.5 174.188 li
102.563 174.188 li
102.625 174.25 li
102.75 174.25 li
103 174.25 li
103.5 174.25 li
103.563 174.25 li
103.625 174.25 li
103.75 174.25 li
104 174.25 li
104.5 174.25 li
104.563 174.25 li
104.625 174.25 li
104.75 174.25 li
105 174.313 li
105.5 174.313 li
105.563 174.313 li
105.625 174.313 li
105.75 174.313 li
106 174.313 li
106.5 174.313 li
106.563 174.313 li
106.625 174.313 li
106.75 174.313 li
107.063 174.313 li
107.563 174.313 li
107.625 174.313 li
107.688 174.313 li
107.813 174.313 li
108.125 174.313 li
108.625 174.375 li
108.688 174.375 li
108.75 174.375 li
108.875 174.375 li
109.125 174.375 li
109.625 174.375 li
109.688 174.375 li
109.75 174.375 li
109.813 174.375 li
109.938 174.375 li
110.188 174.375 li
110.688 174.375 li
110.75 174.375 li
110.813 174.375 li
110.938 174.375 li
111.188 174.375 li
111.75 174.375 li
112.813 174.375 li
112.875 174.375 li
112.938 174.375 li
113.125 174.375 li
113.375 174.375 li
113.875 174.375 li
114.875 174.438 li
114.938 174.438 li
115 174.438 li
115.125 174.438 li
115.375 174.438 li
115.875 174.438 li
116.875 174.438 li
116.938 174.438 li
117 174.438 li
117.125 174.438 li
117.438 174.438 li
117.938 174.438 li
119.063 174.438 li
119.125 174.438 li
119.188 174.438 li
119.313 174.438 li
119.563 174.438 li
120.063 174.438 li
121.063 174.438 li
121.125 174.438 li
121.188 174.438 li
121.313 174.438 li
121.625 174.438 li
122.125 174.438 li
123.25 174.438 li
123.313 174.438 li
123.375 174.438 li
123.5 174.438 li
123.813 174.438 li
124.313 174.438 li
125.375 174.438 li
127.375 174.438 li
129.563 174.438 li
131.625 174.438 li
133.625 174.438 li
135.75 174.5 li
137.75 174.5 li
139.938 174.5 li
140 174.5 li
1 0 0 rgb
@
.75 lw
37.625 174.5 mo
37.6875 174.5 li
37.75 174.5 li
37.875 174.5 li
38.125 174.5 li
38.625 174.5 li
39.625 174.5 li
41.8125 174.5 li
43.875 174.438 li
45.875 174.438 li
48 174.438 li
50.0625 174.438 li
50.125 174.438 li
50.1875 174.438 li
50.3125 174.438 li
50.5625 174.438 li
51.125 174.438 li
52.25 174.438 li
52.3125 174.438 li
52.375 174.438 li
52.5 174.438 li
52.75 174.438 li
53.3125 174.438 li
54.375 174.438 li
54.4375 174.438 li
54.5 174.438 li
54.625 174.438 li
54.875 174.438 li
55.375 174.438 li
56.375 174.438 li
56.4375 174.438 li
56.5 174.438 li
56.625 174.438 li
56.9375 174.438 li
57.4375 174.438 li
58.5625 174.438 li
58.625 174.438 li
58.6875 174.438 li
58.8125 174.438 li
59.0625 174.438 li
59.5625 174.438 li
60.5625 174.438 li
60.625 174.438 li
60.6875 174.438 li
60.8125 174.438 li
61.0625 174.438 li
61.5625 174.438 li
61.625 174.438 li
61.6875 174.438 li
61.8125 174.438 li
62.0625 174.438 li
62.5625 174.375 li
62.625 174.375 li
62.6875 174.375 li
62.8125 174.375 li
63.125 174.375 li
63.625 174.375 li
63.6875 174.375 li
63.8125 174.375 li
63.9375 174.375 li
64.1875 174.375 li
64.75 174.375 li
64.8125 174.375 li
64.875 174.375 li
65 174.375 li
65.25 174.375 li
65.75 174.375 li
65.8125 174.375 li
65.875 174.375 li
66 174.375 li
66.25 174.375 li
66.75 174.375 li
66.8125 174.375 li
66.875 174.375 li
67 174.375 li
67.3125 174.375 li
67.8125 174.375 li
67.875 174.375 li
68 174.375 li
68.125 174.375 li
68.375 174.313 li
68.9375 174.313 li
69 174.313 li
69.0625 174.313 li
69.1875 174.313 li
69.4375 174.313 li
70 174.313 li
70.0625 174.313 li
70.125 174.313 li
70.25 174.313 li
70.5 174.313 li
71.0625 174.313 li
71.125 174.313 li
71.1875 174.313 li
71.3125 174.313 li
71.5625 174.25 li
72.0625 174.25 li
72.125 174.25 li
72.1875 174.25 li
72.3125 174.25 li
72.5625 174.25 li
73.0625 174.25 li
73.125 174.25 li
73.1875 174.25 li
73.3125 174.25 li
73.625 174.188 li
74.125 174.188 li
74.1875 174.188 li
74.3125 174.188 li
74.4375 174.188 li
74.6875 174.188 li
75.25 174.125 li
75.3125 174.125 li
75.375 174.125 li
75.5 174.125 li
75.75 174.125 li
75.8125 174.125 li
75.875 174.125 li
76 174.125 li
76.25 174.063 li
76.3125 174.063 li
76.375 174.063 li
76.5 174.063 li
76.75 174.063 li
77.25 174 li
77.3125 174 li
77.375 174 li
77.5 174 li
77.8125 173.938 li
77.875 173.938 li
77.9375 173.938 li
78.0625 173.938 li
78.375 173.938 li
78.375 173.875 li
78.4375 173.875 li
78.5 173.875 li
78.625 173.875 li
78.875 173.813 li
79.4375 173.75 li
79.5 173.75 li
79.5625 173.75 li
79.6875 173.75 li
80 173.688 li
80.0625 173.688 li
80.125 173.625 li
80.25 173.625 li
80.5 173.563 li
80.5625 173.563 li
80.625 173.563 li
80.8125 173.5 li
81.0625 173.438 li
81.125 173.438 li
81.1875 173.375 li
81.3125 173.375 li
81.625 173.313 li
81.625 173.25 li
81.6875 173.25 li
81.75 173.25 li
81.875 173.188 li
82.125 173.125 li
82.125 173.063 li
82.1875 173.063 li
82.25 173.063 li
82.375 173 li
82.625 172.875 li
82.6875 172.875 li
82.75 172.813 li
82.875 172.75 li
82.9375 172.688 li
83 172.688 li
83.125 172.625 li
83.125 172.563 li
83.1875 172.563 li
83.25 172.5 li
83.375 172.438 li
83.625 172.25 li
83.625 172.188 li
83.6875 172.188 li
83.75 172.125 li
83.875 172 li
83.9375 172 li
83.9375 171.938 li
84 171.875 li
84.125 171.75 li
84.1875 171.688 li
84.1875 171.625 li
84.3125 171.563 li
84.4375 171.438 li
84.4375 171.375 li
84.5 171.313 li
84.5625 171.25 li
84.6875 171 li
84.75 171 li
84.75 170.938 li
84.8125 170.813 li
84.9375 170.563 li
85 170.5 li
85 170.438 li
85.125 170.313 li
85.25 170 li
85.25 169.938 li
85.3125 169.875 li
85.375 169.688 li
85.5 169.313 li
85.5625 169.25 li
85.5625 169.125 li
85.625 168.938 li
85.75 168.5 li
85.8125 168.375 li
85.8125 168.25 li
85.875 168.063 li
86.0625 167.5 li
86.0625 167.375 li
86.125 167.25 li
86.1875 166.938 li
86.3125 166.313 li
86.3125 166.125 li
86.375 165.938 li
86.4375 165.563 li
86.4375 165.375 li
86.5 165.188 li
86.5625 164.75 li
86.5625 164.5 li
86.625 164.313 li
86.6875 163.813 li
86.8125 162.75 li
86.8125 162.438 li
86.875 162.125 li
86.9375 161.5 li
86.9375 161.125 li
87 160.813 li
87.0625 160.063 li
87.0625 159.688 li
87.125 159.25 li
87.1875 158.438 li
87.3125 156.5 li
87.3125 155.938 li
87.375 155.438 li
87.4375 154.25 li
87.4375 153.625 li
87.5 153 li
87.5625 151.625 li
87.5625 150.875 li
87.625 150.125 li
87.6875 148.5 li
87.8125 144.875 li
87.8125 143.875 li
87.875 142.875 li
87.9375 140.688 li
87.9375 139.563 li
88 138.375 li
88.0625 135.813 li
88.0625 134.5 li
88.125 133.125 li
88.1875 130.25 li
88.3125 123.938 li
88.3125 122.25 li
88.375 120.563 li
88.4375 117.125 li
88.5625 110.063 li
88.5625 108.375 li
88.625 106.688 li
88.625 105.063 li
88.6875 103.5 li
88.6875 102 li
88.75 100.563 li
88.75 99.3125 li
88.8125 98.125 li
88.8125 97.0625 li
88.875 96.1875 li
88.875 95.4375 li
88.9375 94.875 li
88.9375 94.5 li
89 94.25 li
89.0625 94.375 li
89.0625 94.75 li
89.125 95.25 li
89.125 95.9375 li
89.1875 96.75 li
89.1875 97.75 li
89.25 98.875 li
89.25 100.125 li
89.3125 101.5 li
89.3125 102.938 li
89.375 104.5 li
89.4375 107.813 li
89.5625 114.75 li
89.5625 116.5 li
89.625 118.25 li
89.6875 121.688 li
89.8125 128.188 li
89.8125 129.875 li
89.875 131.438 li
89.9375 134.5 li
90 135.938 li
90 137.313 li
90.0625 139.938 li
90.125 141.188 li
90.125 142.375 li
90.1875 144.563 li
90.3125 148.5 li
90.375 149.375 li
90.4375 150.188 li
90.5 151.75 li
90.5 152.5 li
90.5625 153.188 li
90.625 154.5 li
90.625 155.125 li
90.6875 155.75 li
90.75 156.875 li
90.875 158.813 li
90.9375 159.25 li
90.9375 159.688 li
91 160.5 li
91.0625 160.875 li
91.0625 161.25 li
91.125 161.938 li
91.1875 162.313 li
91.25 162.625 li
91.3125 163.188 li
91.4375 164.25 li
91.4375 164.5 li
91.5 164.75 li
91.5625 165.188 li
91.5625 165.438 li
91.625 165.625 li
91.6875 166 li
91.75 166.188 li
91.75 166.375 li
91.8125 166.75 li
91.9375 167.375 li
92 167.5 li
92 167.625 li
92.0625 167.875 li
92.1875 168.375 li
92.25 168.5 li
92.25 168.563 li
92.3125 168.813 li
92.4375 169.188 li
92.5 169.25 li
92.5 169.375 li
92.625 169.5 li
92.75 169.813 li
92.75 169.938 li
92.8125 170 li
92.875 170.125 li
93 170.375 li
93 170.438 li
93.0625 170.5 li
93.125 170.625 li
93.25 170.813 li
93.25 170.875 li
93.3125 170.938 li
93.375 171.063 li
93.5 171.25 li
93.5625 171.313 li
93.625 171.375 li
93.75 171.563 li
94 171.813 li
94 171.875 li
94.0625 171.875 li
94.125 172 li
94.25 172.125 li
94.3125 172.125 li
94.3125 172.188 li
94.375 172.188 li
94.5 172.313 li
94.5625 172.375 li
94.625 172.375 li
94.6875 172.438 li
94.8125 172.5 li
95.0625 172.688 li
95.125 172.688 li
95.125 172.75 li
95.1875 172.75 li
95.375 172.813 li
95.375 172.875 li
95.4375 172.875 li
95.5 172.938 li
95.625 173 li
95.6875 173 li
95.75 173.063 li
95.875 173.063 li
96.1875 173.188 li
96.25 173.188 li
96.3125 173.25 li
96.4375 173.313 li
96.6875 173.375 li
96.75 173.375 li
96.8125 173.375 li
97 173.438 li
97.25 173.5 li
97.3125 173.5 li
97.375 173.563 li
97.5 173.563 li
97.75 173.625 li
97.8125 173.625 li
97.9375 173.625 li
98.0625 173.688 li
98.3125 173.75 li
98.375 173.75 li
98.4375 173.75 li
98.5625 173.75 li
98.8125 173.813 li
98.875 173.813 li
98.9375 173.813 li
99.0625 173.813 li
99.3125 173.875 li
99.375 173.875 li
99.4375 173.875 li
99.5625 173.875 li
99.8125 173.938 li
100.313 174 li
100.375 174 li
100.438 174 li
100.563 174 li
100.875 174 li
100.938 174 li
101 174 li
101.125 174.063 li
101.375 174.063 li
101.438 174.063 li
101.563 174.063 li
101.688 174.063 li
101.938 174.125 li
102.5 174.125 li
102.563 174.125 li
102.625 174.125 li
102.75 174.125 li
103 174.125 li
103.5 174.188 li
103.563 174.188 li
103.625 174.188 li
103.75 174.188 li
104 174.188 li
104.5 174.25 li
104.563 174.25 li
104.625 174.25 li
104.75 174.25 li
105 174.25 li
105.5 174.25 li
105.563 174.25 li
105.625 174.25 li
105.75 174.25 li
106 174.25 li
106.5 174.25 li
106.563 174.313 li
106.625 174.313 li
106.75 174.313 li
107.063 174.313 li
107.563 174.313 li
107.625 174.313 li
107.688 174.313 li
107.813 174.313 li
108.125 174.313 li
108.625 174.313 li
108.688 174.313 li
108.75 174.313 li
108.875 174.313 li
109.125 174.313 li
109.625 174.313 li
109.688 174.313 li
109.75 174.313 li
109.813 174.375 li
109.938 174.375 li
110.188 174.375 li
110.688 174.375 li
110.75 174.375 li
110.813 174.375 li
110.938 174.375 li
111.188 174.375 li
111.75 174.375 li
111.813 174.375 li
111.875 174.375 li
112 174.375 li
112.313 174.375 li
112.813 174.375 li
112.875 174.375 li
112.938 174.375 li
113.125 174.375 li
113.375 174.375 li
113.875 174.375 li
114.875 174.375 li
114.938 174.375 li
115 174.375 li
115.125 174.375 li
115.375 174.375 li
115.875 174.438 li
116.875 174.438 li
116.938 174.438 li
117 174.438 li
117.125 174.438 li
117.438 174.438 li
117.938 174.438 li
119.063 174.438 li
119.125 174.438 li
119.188 174.438 li
119.313 174.438 li
119.563 174.438 li
120.063 174.438 li
121.063 174.438 li
121.125 174.438 li
121.188 174.438 li
121.313 174.438 li
121.625 174.438 li
122.125 174.438 li
123.25 174.438 li
123.313 174.438 li
123.375 174.438 li
123.5 174.438 li
123.813 174.438 li
124.313 174.438 li
125.375 174.438 li
127.375 174.438 li
129.563 174.438 li
131.625 174.438 li
133.625 174.438 li
135.75 174.5 li
137.75 174.5 li
139.938 174.5 li
140 174.5 li
0 1 0 rgb
@
.1875 lw
140 174.5 mo
37.625 174.5 li
0 0 0 rgb
@
37.625 174.5 mo
37.625 92.625 li
@
37.625 92.625 mo
140 92.625 li
@
140 92.625 mo
140 174.5 li
@
0 lc
51 174.5 mo
51 172.5 li
@
73.25 174.5 mo
73.25 172.5 li
@
95.5 174.5 mo
95.5 172.5 li
@
117.75 174.5 mo
117.75 172.5 li
@
37.625 174.5 mo
39.625 174.5 li
@
37.625 171.125 mo
38.875 171.125 li
@
37.625 167.688 mo
38.875 167.688 li
@
37.625 164.313 mo
38.875 164.313 li
@
37.625 160.938 mo
39.625 160.938 li
@
37.625 157.5 mo
38.875 157.5 li
@
37.625 154.125 mo
38.875 154.125 li
@
37.625 150.75 mo
38.875 150.75 li
@
37.625 147.313 mo
39.625 147.313 li
@
37.625 143.938 mo
38.875 143.938 li
@
37.625 140.563 mo
38.875 140.563 li
@
37.625 137.125 mo
38.875 137.125 li
@
37.625 133.75 mo
39.625 133.75 li
@
37.625 130.375 mo
38.875 130.375 li
@
37.625 126.938 mo
38.875 126.938 li
@
37.625 123.563 mo
38.875 123.563 li
@
37.625 120.188 mo
39.625 120.188 li
@
37.625 116.75 mo
38.875 116.75 li
@
37.625 113.375 mo
38.875 113.375 li
@
37.625 110 mo
38.875 110 li
@
37.625 106.563 mo
39.625 106.563 li
@
37.625 103.188 mo
38.875 103.188 li
@
37.625 99.8125 mo
38.875 99.8125 li
@
37.625 96.375 mo
38.875 96.375 li
@
37.625 93 mo
39.625 93 li
@
37.625 92.625 mo
37.625 93.8125 li
@
42.125 92.625 mo
42.125 93.8125 li
@
46.5625 92.625 mo
46.5625 93.8125 li
@
51 92.625 mo
51 94.625 li
@
55.4375 92.625 mo
55.4375 93.8125 li
@
59.875 92.625 mo
59.875 93.8125 li
@
64.375 92.625 mo
64.375 93.8125 li
@
68.8125 92.625 mo
68.8125 93.8125 li
@
73.25 92.625 mo
73.25 94.625 li
@
77.6875 92.625 mo
77.6875 93.8125 li
@
82.125 92.625 mo
82.125 93.8125 li
@
86.625 92.625 mo
86.625 93.8125 li
@
91.0625 92.625 mo
91.0625 93.8125 li
@
95.5 92.625 mo
95.5 94.625 li
@
99.9375 92.625 mo
99.9375 93.8125 li
@
104.438 92.625 mo
104.438 93.8125 li
@
108.875 92.625 mo
108.875 93.8125 li
@
113.313 92.625 mo
113.313 93.8125 li
@
117.75 92.625 mo
117.75 94.625 li
@
122.188 92.625 mo
122.188 93.8125 li
@
126.688 92.625 mo
126.688 93.8125 li
@
131.125 92.625 mo
131.125 93.8125 li
@
135.563 92.625 mo
135.563 93.8125 li
@
140 92.625 mo
140 94.625 li
@
140 174.5 mo
138 174.5 li
@
140 171.125 mo
138.813 171.125 li
@
140 167.688 mo
138.813 167.688 li
@
140 164.313 mo
138.813 164.313 li
@
140 160.938 mo
138 160.938 li
@
140 157.5 mo
138.813 157.5 li
@
140 154.125 mo
138.813 154.125 li
@
140 150.75 mo
138.813 150.75 li
@
140 147.313 mo
138 147.313 li
@
140 143.938 mo
138.813 143.938 li
@
140 140.563 mo
138.813 140.563 li
@
140 137.125 mo
138.813 137.125 li
@
140 133.75 mo
138 133.75 li
@
140 130.375 mo
138.813 130.375 li
@
140 126.938 mo
138.813 126.938 li
@
140 123.563 mo
138.813 123.563 li
@
140 120.188 mo
138 120.188 li
@
140 116.75 mo
138.813 116.75 li
@
140 113.375 mo
138.813 113.375 li
@
140 110 mo
138.813 110 li
@
140 106.563 mo
138 106.563 li
@
140 103.188 mo
138.813 103.188 li
@
140 99.8125 mo
138.813 99.8125 li
@
140 96.375 mo
138.813 96.375 li
@
140 93 mo
138 93 li
@
%ADOBeginSubsetFont: MinionPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BDPDEK+MinionPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B75BE5918BFD7A3723E4D7BC5AA79B284D74FAD091E22D
6505E7130A2C48253744D2479479CD8948E4305177A16FB824245BD09CD45B4C
97629CFFC39769BBA2670D6A059F123BD0CD3DCBD96F163C6A086E749E1B0863
CC01DF90B71C9293913F20A64A4BFFD638658A363B37E8A0637CFBBAA9708F52
1FB44E7566D70799E101F6143552878CCAE7F7EC0C6FDC45C1C8814F669D83E3
475218D037B112928C70738A2B57E7381938> |-
/seven <1C60D8A8C9B75BE571108146A43A1BE967C88B55DC5E612102179BA6
6A883370A6592B44F8D2EE79A206CB7D245E867D242BF14AD12E81DEA393D2BB
9906CE4309B0933812577CEC40FF3EF2EAB442B1674542C3586977C7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDPDEK+MinionPro-Regular /Encoding get
dup 51 /three put
dup 55 /seven put
pop
%ADOEndSubsetFont
/BDPDEK+MinionPro-Regular*1 
[
46{/.notdef}repeat /period /.notdef /zero /one /two /three /four 
/.notdef /six /seven /eight 199{/.notdef}repeat
] BDPDEK+MinionPro-Regular nfnt
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
65.377 185.564 mov
(6.73) sh
109.886 185.564 mov
(6.74) sh
30.1445 177.439 mov
(0) sh
25.6445 163.855 mov
(20) sh
25.6445 150.271 mov
(40) sh
25.6445 136.688 mov
(60) sh
25.6445 123.104 mov
(80) sh
21.1445 109.52 mov
0.000213623 0 48 (100) wsh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
BKFDEK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |-
/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B
4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25
003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0
F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11E
C41D90433CE0F55F0A42A96AF852FD50FA> |-
/c <1C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438ECC5
4400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F42A
6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F9C
2999730E7919239B324086FEA852156F456647AA0692084759C352D699897179
9F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKFDEK+TimesNewRomanPSMT /Encoding get
dup 49 /one put
dup 50 /two put
dup 99 /c put
pop
%ADOEndSubsetFont
/BKFDEK+TimesNewRomanPSMT*1 
[
49{/.notdef}repeat /one /two 46{/.notdef}repeat /a /b /c 13{/.notdef}repeat 
/q 142{/.notdef}repeat
] BKFDEK+TimesNewRomanPSMT nfnt
BKFDEK+TimesNewRomanPSMT*1  [9 0 0 -9 0 0 ]mfnt sfnt
84.3301 196.814 mov
(q1) sh
BKFDEK+TimesNewRomanPSMT*1  [0 -9 -9 0 0 0 ]mfnt sfnt
16.957 96.0537 mov
(q2) sh
BKFDEK+TimesNewRomanPSMT*1  [9 0 0 -9 0 0 ]mfnt sfnt
43.6631 103.732 mov
(qc) sh
gsave % PSGState
128.25 87 mo
128.25 204 li
269.25 204 li
269.25 87 li
eclp
gsave % PSGState
166.25 92 mo
166.25 175 li
269.25 175 li
269.25 92 li
eclp
grestore % PSGState
gsave % PSGState
166.25 92 mo
166.25 175 li
269.25 175 li
269.25 92 li
eclp
grestore % PSGState
gsave % PSGState
166.25 92 mo
166.25 175 li
269.25 175 li
269.25 92 li
eclp
.75 lw
2 lc
166.25 174.5 mo
166.25 174.5 li
166.313 174.5 li
166.375 174.5 li
166.5 174.5 li
166.75 174.5 li
167.25 174.5 li
168.25 174.5 li
170.438 174.5 li
172.438 174.5 li
174.438 174.5 li
176.625 174.438 li
178.625 174.438 li
180.813 174.438 li
182.938 174.438 li
185 174.438 li
187.125 174.438 li
189.188 174.438 li
191.188 174.438 li
193.313 174.438 li
195.313 174.438 li
197.5 174.375 li
199.625 174.375 li
201.625 174.375 li
203.813 174.375 li
205.813 174.313 li
208.063 174.313 li
210.188 174.25 li
210.25 174.25 li
210.313 174.25 li
210.438 174.25 li
210.688 174.25 li
211.188 174.25 li
211.25 174.25 li
211.313 174.25 li
211.438 174.25 li
211.688 174.25 li
212.188 174.25 li
212.25 174.25 li
212.313 174.25 li
212.438 174.25 li
212.75 174.25 li
213.25 174.25 li
213.313 174.25 li
213.375 174.25 li
213.438 174.25 li
213.563 174.25 li
213.813 174.25 li
214.375 174.25 li
214.438 174.25 li
214.5 174.25 li
214.625 174.25 li
214.875 174.25 li
214.938 174.25 li
215 174.25 li
215.125 174.25 li
215.375 174.25 li
215.438 174.25 li
215.5 174.25 li
215.625 174.25 li
215.688 174.25 li
215.75 174.25 li
215.875 174.25 li
215.938 174.25 li
216 174.25 li
216.125 174.25 li
216.188 174.25 li
216.25 174.25 li
216.375 174.25 li
216.438 174.25 li
216.5 174.25 li
216.563 174.25 li
216.625 174.25 li
216.688 174.25 li
216.75 174.25 li
216.875 174.25 li
216.938 174.25 li
217 174.25 li
217.063 174.25 li
217.125 174.25 li
217.188 174.25 li
217.25 174.25 li
217.313 174.25 li
217.375 174.25 li
217.438 174.25 li
217.5 174.25 li
217.563 174.25 li
217.625 174.25 li
217.688 174.25 li
217.75 174.25 li
217.813 174.25 li
217.875 174.25 li
217.938 174.25 li
218 174.25 li
218.063 174.25 li
218.125 174.25 li
218.188 174.25 li
218.25 174.25 li
218.313 174.25 li
218.375 174.25 li
218.438 174.25 li
218.5 174.25 li
218.563 174.25 li
218.625 174.25 li
218.688 174.25 li
218.75 174.25 li
218.813 174.25 li
218.938 174.25 li
219 174.25 li
219.063 174.25 li
219.188 174.25 li
219.5 174.25 li
219.563 174.25 li
219.625 174.25 li
219.75 174.25 li
220 174.25 li
220.063 174.25 li
220.125 174.25 li
220.313 174.25 li
220.563 174.25 li
220.625 174.25 li
220.688 174.25 li
220.813 174.25 li
221.063 174.25 li
221.563 174.25 li
221.625 174.25 li
221.688 174.25 li
221.813 174.25 li
222.063 174.25 li
222.563 174.25 li
222.625 174.25 li
222.688 174.25 li
222.813 174.25 li
223.125 174.25 li
223.688 174.25 li
224.75 174.25 li
226.875 174.313 li
228.875 174.313 li
231.063 174.313 li
233.125 174.375 li
235.063 174.375 li
237.25 174.375 li
239.25 174.375 li
241.438 174.438 li
243.438 174.438 li
245.438 174.438 li
247.625 174.438 li
249.625 174.438 li
251.813 174.438 li
254 174.438 li
256 174.438 li
258.188 174.438 li
260.188 174.438 li
262.188 174.5 li
264.313 174.5 li
266.375 174.5 li
268.563 174.5 li
268.625 174.5 li
0 0 1 rgb
@
166.25 174.5 mo
166.25 174.5 li
166.313 174.5 li
166.375 174.5 li
166.5 174.5 li
166.75 174.5 li
167.25 174.5 li
168.25 174.5 li
170.438 174.5 li
172.438 174.5 li
174.438 174.5 li
176.625 174.5 li
178.625 174.5 li
180.813 174.438 li
182.938 174.438 li
185 174.438 li
187.125 174.438 li
189.188 174.438 li
191.188 174.438 li
193.313 174.438 li
195.313 174.438 li
195.375 174.438 li
195.438 174.438 li
195.625 174.438 li
195.875 174.438 li
196.438 174.438 li
196.5 174.438 li
196.563 174.438 li
196.688 174.438 li
196.938 174.438 li
197.5 174.438 li
197.563 174.438 li
197.625 174.438 li
197.75 174.438 li
198.063 174.438 li
198.125 174.438 li
198.188 174.438 li
198.313 174.438 li
198.563 174.438 li
198.625 174.438 li
198.688 174.438 li
198.875 174.438 li
199.125 174.438 li
199.188 174.438 li
199.25 174.438 li
199.375 174.438 li
199.625 174.438 li
199.688 174.438 li
199.75 174.438 li
199.875 174.438 li
199.938 174.438 li
200 174.438 li
200.125 174.438 li
200.188 174.438 li
200.25 174.438 li
200.375 174.438 li
200.438 174.438 li
200.5 174.438 li
200.625 174.438 li
200.688 174.438 li
200.75 174.438 li
200.813 174.438 li
200.875 174.438 li
200.938 174.438 li
201 174.438 li
201.063 174.438 li
201.125 174.438 li
201.188 174.438 li
201.25 174.438 li
201.313 174.438 li
201.375 174.438 li
201.438 174.438 li
201.5 174.438 li
201.563 174.438 li
201.625 174.438 li
201.688 174.438 li
201.75 174.438 li
201.813 174.438 li
201.875 174.438 li
201.938 174.438 li
202 174.438 li
202.063 174.438 li
202.125 174.438 li
202.188 174.438 li
202.25 174.438 li
202.313 174.438 li
202.375 174.438 li
202.438 174.438 li
202.5 174.438 li
202.563 174.438 li
202.625 174.438 li
202.75 174.438 li
202.813 174.438 li
202.875 174.438 li
203 174.438 li
203.063 174.438 li
203.125 174.438 li
203.25 174.438 li
203.313 174.438 li
203.375 174.438 li
203.438 174.438 li
203.563 174.438 li
203.813 174.438 li
203.875 174.438 li
203.938 174.438 li
204.063 174.438 li
204.313 174.438 li
204.375 174.438 li
204.438 174.438 li
204.563 174.438 li
204.813 174.438 li
204.875 174.438 li
204.938 174.438 li
205.063 174.438 li
205.313 174.438 li
205.813 174.438 li
205.875 174.438 li
205.938 174.438 li
206 174.438 li
206.125 174.438 li
206.375 174.438 li
206.438 174.438 li
206.5 174.438 li
206.688 174.438 li
206.938 174.438 li
207 174.438 li
207.063 174.438 li
207.188 174.438 li
207.5 174.438 li
208.063 174.438 li
208.125 174.438 li
208.188 174.438 li
208.313 174.438 li
208.563 174.438 li
209.125 174.438 li
210.188 174.438 li
212.188 174.5 li
212.25 174.5 li
212.313 174.5 li
212.438 174.5 li
212.75 174.5 li
213.25 174.5 li
213.313 174.5 li
213.375 174.5 li
213.438 174.5 li
213.563 174.5 li
213.813 174.5 li
214.375 174.5 li
214.438 174.5 li
214.5 174.5 li
214.625 174.5 li
214.875 174.5 li
214.938 174.5 li
215 174.5 li
215.125 174.5 li
215.375 174.5 li
215.438 174.5 li
215.5 174.5 li
215.625 174.5 li
215.688 174.5 li
215.75 174.5 li
215.875 174.5 li
215.938 174.5 li
216 174.5 li
216.125 174.5 li
216.188 174.5 li
216.25 174.5 li
216.375 174.5 li
216.438 174.5 li
216.5 174.5 li
216.563 174.5 li
216.625 174.5 li
216.688 174.5 li
216.75 174.5 li
216.875 174.5 li
216.938 174.5 li
217 174.5 li
217.063 174.5 li
217.125 174.5 li
217.188 174.5 li
217.25 174.5 li
217.313 174.5 li
217.375 174.5 li
217.438 174.5 li
217.5 174.5 li
217.563 174.5 li
217.625 174.5 li
217.688 174.5 li
217.75 174.5 li
217.813 174.5 li
217.875 174.5 li
217.938 174.5 li
218 174.5 li
218.063 174.5 li
218.125 174.5 li
218.188 174.5 li
218.25 174.5 li
218.313 174.5 li
218.375 174.5 li
218.438 174.5 li
218.5 174.5 li
218.563 174.5 li
218.625 174.5 li
218.688 174.5 li
218.75 174.5 li
218.813 174.5 li
218.938 174.5 li
219 174.5 li
219.063 174.5 li
219.188 174.5 li
219.5 174.5 li
219.563 174.5 li
219.625 174.5 li
219.75 174.5 li
220 174.5 li
220.063 174.5 li
220.125 174.5 li
220.313 174.5 li
220.563 174.5 li
220.625 174.5 li
220.688 174.5 li
220.813 174.5 li
221.063 174.5 li
221.563 174.5 li
222.563 174.5 li
224.75 174.438 li
224.813 174.438 li
224.875 174.438 li
225 174.438 li
225.313 174.438 li
225.813 174.438 li
225.875 174.438 li
225.938 174.438 li
226.125 174.438 li
226.375 174.438 li
226.875 174.438 li
226.938 174.438 li
227 174.438 li
227.125 174.438 li
227.375 174.438 li
227.875 174.438 li
227.938 174.438 li
228 174.438 li
228.125 174.438 li
228.375 174.438 li
228.875 174.438 li
228.938 174.438 li
229 174.438 li
229.063 174.438 li
229.188 174.438 li
229.438 174.438 li
229.5 174.438 li
229.563 174.438 li
229.688 174.438 li
230 174.438 li
230.063 174.438 li
230.125 174.438 li
230.25 174.438 li
230.5 174.438 li
230.563 174.438 li
230.625 174.438 li
230.688 174.438 li
230.813 174.438 li
231.063 174.438 li
231.125 174.438 li
231.188 174.438 li
231.313 174.438 li
231.375 174.438 li
231.438 174.438 li
231.563 174.438 li
231.625 174.438 li
231.688 174.438 li
231.813 174.438 li
231.875 174.438 li
231.938 174.438 li
232.063 174.438 li
232.125 174.438 li
232.188 174.438 li
232.313 174.438 li
232.375 174.438 li
232.438 174.438 li
232.563 174.438 li
232.625 174.438 li
232.688 174.438 li
232.75 174.438 li
232.813 174.438 li
232.875 174.438 li
232.938 174.438 li
233 174.438 li
233.063 174.438 li
233.125 174.438 li
233.188 174.438 li
233.25 174.438 li
233.313 174.438 li
233.375 174.438 li
233.438 174.438 li
233.5 174.438 li
233.563 174.438 li
233.625 174.438 li
233.688 174.438 li
233.75 174.438 li
233.813 174.438 li
233.875 174.438 li
233.938 174.438 li
234 174.438 li
234.063 174.438 li
234.125 174.438 li
234.188 174.438 li
234.25 174.438 li
234.313 174.438 li
234.375 174.438 li
234.438 174.438 li
234.563 174.438 li
234.625 174.438 li
234.688 174.438 li
234.813 174.438 li
235.063 174.438 li
235.125 174.438 li
235.25 174.438 li
235.375 174.438 li
235.625 174.438 li
235.688 174.438 li
235.75 174.438 li
235.875 174.438 li
236.188 174.438 li
236.25 174.438 li
236.313 174.438 li
236.438 174.438 li
236.688 174.438 li
237.25 174.438 li
237.313 174.438 li
237.375 174.438 li
237.5 174.438 li
237.75 174.438 li
238.25 174.438 li
239.25 174.438 li
241.438 174.438 li
243.438 174.438 li
245.438 174.438 li
247.625 174.438 li
249.625 174.438 li
251.813 174.438 li
254 174.438 li
256 174.438 li
258.188 174.5 li
260.188 174.5 li
262.188 174.5 li
264.313 174.5 li
266.375 174.5 li
268.563 174.5 li
268.625 174.5 li
1 0 0 rgb
@
166.25 174.5 mo
166.25 174.5 li
166.313 174.5 li
166.375 174.5 li
166.5 174.5 li
166.75 174.5 li
167.25 174.5 li
168.25 174.5 li
170.438 174.5 li
172.438 174.438 li
174.438 174.438 li
176.625 174.438 li
178.625 174.438 li
178.688 174.438 li
178.75 174.438 li
178.875 174.438 li
179.188 174.438 li
179.75 174.438 li
180.813 174.438 li
180.875 174.438 li
180.938 174.438 li
181.063 174.438 li
181.375 174.438 li
181.875 174.438 li
182.938 174.438 li
183 174.438 li
183.063 174.438 li
183.188 174.438 li
183.438 174.438 li
184 174.438 li
185 174.438 li
185.063 174.438 li
185.125 174.438 li
185.25 174.438 li
185.5 174.438 li
186.063 174.438 li
187.125 174.438 li
187.188 174.438 li
187.25 174.438 li
187.375 174.438 li
187.625 174.438 li
188.188 174.438 li
189.188 174.438 li
189.25 174.438 li
189.313 174.438 li
189.438 174.438 li
189.688 174.438 li
190.188 174.438 li
190.25 174.438 li
190.313 174.438 li
190.438 174.438 li
190.688 174.438 li
191.188 174.375 li
191.25 174.375 li
191.313 174.375 li
191.438 174.375 li
191.688 174.375 li
192.25 174.375 li
192.313 174.375 li
192.375 174.375 li
192.5 174.375 li
192.75 174.375 li
193.313 174.375 li
193.375 174.375 li
193.438 174.375 li
193.563 174.375 li
193.813 174.375 li
194.313 174.375 li
194.375 174.375 li
194.438 174.375 li
194.563 174.375 li
194.813 174.375 li
195.313 174.375 li
195.375 174.375 li
195.438 174.375 li
195.625 174.375 li
195.875 174.375 li
196.438 174.375 li
196.5 174.375 li
196.563 174.375 li
196.688 174.375 li
196.938 174.313 li
197.5 174.313 li
197.563 174.313 li
197.625 174.313 li
197.75 174.313 li
198.063 174.313 li
198.563 174.313 li
198.625 174.313 li
198.688 174.313 li
198.875 174.313 li
199.125 174.313 li
199.625 174.313 li
199.688 174.313 li
199.75 174.313 li
199.875 174.313 li
200.125 174.25 li
200.625 174.25 li
200.688 174.25 li
200.75 174.25 li
200.875 174.25 li
201.125 174.25 li
201.625 174.25 li
201.688 174.25 li
201.75 174.25 li
201.813 174.25 li
201.938 174.25 li
202.188 174.188 li
202.75 174.188 li
202.813 174.188 li
202.875 174.188 li
203 174.188 li
203.25 174.188 li
203.813 174.125 li
203.875 174.125 li
203.938 174.125 li
204.063 174.125 li
204.313 174.125 li
204.375 174.125 li
204.438 174.125 li
204.563 174.125 li
204.813 174.063 li
204.875 174.063 li
204.938 174.063 li
205.063 174.063 li
205.313 174.063 li
205.813 174 li
205.875 174 li
205.938 174 li
206 174 li
206.125 174 li
206.375 173.938 li
206.438 173.938 li
206.5 173.938 li
206.688 173.938 li
206.938 173.938 li
207 173.875 li
207.063 173.875 li
207.188 173.875 li
207.5 173.813 li
208.063 173.75 li
208.125 173.75 li
208.188 173.75 li
208.313 173.75 li
208.563 173.688 li
208.625 173.688 li
208.688 173.625 li
208.813 173.625 li
209.125 173.563 li
209.188 173.563 li
209.25 173.563 li
209.375 173.5 li
209.625 173.438 li
209.688 173.438 li
209.75 173.375 li
209.938 173.375 li
210.188 173.313 li
210.188 173.25 li
210.25 173.25 li
210.313 173.25 li
210.438 173.188 li
210.688 173.125 li
210.688 173.063 li
210.75 173.063 li
210.813 173.063 li
210.938 173 li
211.188 172.875 li
211.25 172.875 li
211.313 172.813 li
211.438 172.75 li
211.5 172.75 li
211.5 172.688 li
211.563 172.688 li
211.688 172.625 li
211.75 172.563 li
211.813 172.5 li
211.938 172.438 li
212.188 172.25 li
212.25 172.188 li
212.313 172.125 li
212.438 172 li
212.5 172 li
212.563 171.938 li
212.625 171.875 li
212.75 171.75 li
212.75 171.688 li
212.813 171.625 li
212.875 171.563 li
213 171.438 li
213.063 171.375 li
213.063 171.313 li
213.125 171.25 li
213.25 171 li
213.313 171 li
213.375 170.938 li
213.438 170.813 li
213.563 170.563 li
213.563 170.5 li
213.625 170.438 li
213.688 170.313 li
213.813 170 li
213.875 169.938 li
213.875 169.875 li
213.938 169.688 li
214.125 169.313 li
214.125 169.25 li
214.188 169.125 li
214.25 168.938 li
214.375 168.5 li
214.375 168.375 li
214.438 168.25 li
214.5 168.063 li
214.625 167.5 li
214.625 167.375 li
214.688 167.25 li
214.75 166.938 li
214.875 166.313 li
214.938 166.125 li
214.938 165.938 li
215 165.563 li
215.063 165.375 li
215.063 165.188 li
215.125 164.75 li
215.188 164.5 li
215.188 164.313 li
215.25 163.813 li
215.375 162.75 li
215.438 162.438 li
215.438 162.125 li
215.5 161.5 li
215.563 161.125 li
215.563 160.813 li
215.625 160.063 li
215.688 159.688 li
215.688 159.25 li
215.75 158.438 li
215.875 156.5 li
215.938 155.938 li
215.938 155.438 li
216 154.25 li
216.063 153.625 li
216.063 153 li
216.125 151.625 li
216.188 150.875 li
216.188 150.125 li
216.25 148.5 li
216.375 144.875 li
216.438 143.875 li
216.438 142.875 li
216.5 140.688 li
216.563 139.563 li
216.563 138.375 li
216.625 135.813 li
216.688 134.5 li
216.688 133.125 li
216.75 130.25 li
216.875 123.938 li
216.938 122.25 li
216.938 120.563 li
217 117.125 li
217.125 110.063 li
217.188 108.375 li
217.188 106.688 li
217.25 105.063 li
217.25 103.5 li
217.313 102 li
217.313 100.563 li
217.375 99.3125 li
217.375 98.125 li
217.438 97.0625 li
217.438 96.1875 li
217.5 95.4375 li
217.5 94.875 li
217.563 94.5 li
217.563 94.25 li
217.625 94.25 li
217.625 94.375 li
217.688 94.75 li
217.688 95.25 li
217.75 95.9375 li
217.75 96.75 li
217.813 97.75 li
217.813 98.875 li
217.875 100.125 li
217.875 101.5 li
217.938 102.938 li
217.938 104.5 li
218 107.813 li
218.125 114.75 li
218.188 116.5 li
218.188 118.25 li
218.25 121.688 li
218.375 128.188 li
218.438 129.875 li
218.438 131.438 li
218.5 134.5 li
218.563 135.938 li
218.625 137.313 li
218.688 139.938 li
218.688 141.188 li
218.75 142.375 li
218.813 144.563 li
218.938 148.5 li
218.938 149.375 li
219 150.188 li
219.063 151.75 li
219.125 152.5 li
219.125 153.188 li
219.188 154.5 li
219.25 155.125 li
219.25 155.75 li
219.313 156.875 li
219.5 158.813 li
219.5 159.25 li
219.563 159.688 li
219.625 160.5 li
219.625 160.875 li
219.688 161.25 li
219.75 161.938 li
219.75 162.313 li
219.813 162.625 li
219.875 163.188 li
220 164.25 li
220.063 164.5 li
220.063 164.75 li
220.125 165.188 li
220.188 165.438 li
220.188 165.625 li
220.313 166 li
220.313 166.188 li
220.375 166.375 li
220.438 166.75 li
220.563 167.375 li
220.563 167.5 li
220.625 167.625 li
220.688 167.875 li
220.813 168.375 li
220.813 168.5 li
220.875 168.563 li
220.938 168.813 li
221.063 169.188 li
221.063 169.25 li
221.125 169.375 li
221.188 169.5 li
221.313 169.813 li
221.313 169.938 li
221.375 170 li
221.438 170.125 li
221.563 170.375 li
221.563 170.438 li
221.625 170.5 li
221.688 170.625 li
221.813 170.813 li
221.875 170.875 li
221.875 170.938 li
221.938 171.063 li
222.063 171.25 li
222.125 171.25 li
222.125 171.313 li
222.188 171.375 li
222.313 171.563 li
222.563 171.813 li
222.625 171.875 li
222.688 172 li
222.813 172.125 li
222.875 172.125 li
222.938 172.188 li
223 172.188 li
223.125 172.313 li
223.125 172.375 li
223.188 172.375 li
223.25 172.438 li
223.375 172.5 li
223.688 172.688 li
223.75 172.75 li
223.813 172.75 li
223.938 172.813 li
224 172.875 li
224.063 172.938 li
224.188 173 li
224.25 173 li
224.375 173.063 li
224.5 173.063 li
224.75 173.188 li
224.813 173.188 li
224.875 173.25 li
225 173.313 li
225.313 173.375 li
225.375 173.375 li
225.438 173.375 li
225.563 173.438 li
225.813 173.5 li
225.875 173.5 li
225.938 173.563 li
226.125 173.563 li
226.375 173.625 li
226.438 173.625 li
226.5 173.625 li
226.625 173.688 li
226.875 173.75 li
226.938 173.75 li
227 173.75 li
227.125 173.75 li
227.375 173.813 li
227.438 173.813 li
227.5 173.813 li
227.625 173.813 li
227.875 173.875 li
227.938 173.875 li
228 173.875 li
228.125 173.875 li
228.375 173.938 li
228.875 174 li
228.938 174 li
229 174 li
229.063 174 li
229.188 174 li
229.438 174 li
229.5 174 li
229.563 174 li
229.688 174.063 li
230 174.063 li
230.063 174.063 li
230.125 174.063 li
230.25 174.063 li
230.5 174.125 li
231.063 174.125 li
231.125 174.125 li
231.188 174.125 li
231.313 174.125 li
231.563 174.125 li
232.063 174.188 li
232.125 174.188 li
232.188 174.188 li
232.313 174.188 li
232.563 174.188 li
233.125 174.25 li
233.188 174.25 li
233.25 174.25 li
233.375 174.25 li
233.625 174.25 li
234.063 174.25 li
234.125 174.25 li
234.188 174.25 li
234.313 174.25 li
234.563 174.25 li
235.063 174.25 li
235.125 174.25 li
235.125 174.313 li
235.25 174.313 li
235.375 174.313 li
235.625 174.313 li
236.188 174.313 li
236.25 174.313 li
236.313 174.313 li
236.438 174.313 li
236.688 174.313 li
237.25 174.313 li
237.313 174.313 li
237.375 174.313 li
237.5 174.313 li
237.75 174.313 li
238.25 174.313 li
238.313 174.313 li
238.375 174.375 li
238.5 174.375 li
238.75 174.375 li
239.25 174.375 li
239.313 174.375 li
239.375 174.375 li
239.5 174.375 li
239.813 174.375 li
240.313 174.375 li
240.375 174.375 li
240.438 174.375 li
240.5 174.375 li
240.625 174.375 li
240.875 174.375 li
241.438 174.375 li
241.5 174.375 li
241.563 174.375 li
241.688 174.375 li
241.938 174.375 li
242.438 174.375 li
243.438 174.375 li
243.5 174.375 li
243.563 174.375 li
243.688 174.375 li
243.938 174.375 li
244.438 174.438 li
245.438 174.438 li
245.5 174.438 li
245.625 174.438 li
245.75 174.438 li
246 174.438 li
246.563 174.438 li
247.625 174.438 li
247.688 174.438 li
247.75 174.438 li
247.875 174.438 li
248.125 174.438 li
248.625 174.438 li
249.625 174.438 li
249.688 174.438 li
249.813 174.438 li
249.938 174.438 li
250.188 174.438 li
250.75 174.438 li
251.813 174.438 li
251.875 174.438 li
252 174.438 li
252.125 174.438 li
252.375 174.438 li
252.938 174.438 li
254 174.438 li
256 174.438 li
258.188 174.438 li
260.188 174.438 li
262.188 174.438 li
264.313 174.5 li
266.375 174.5 li
268.563 174.5 li
268.625 174.5 li
0 1 0 rgb
@
grestore % PSGState
2 lc
268.625 174.5 mo
166.25 174.5 li
@
166.25 174.5 mo
166.25 92.625 li
@
166.25 92.625 mo
268.625 92.625 li
@
268.625 92.625 mo
268.625 174.5 li
@
0 lc
179.563 174.5 mo
179.563 172.5 li
@
gsave % PSGState
178.563 176.5 mo
178.563 188.75 li
180.563 188.75 li
180.563 176.5 li
eclp
grestore % PSGState
201.813 174.5 mo
201.813 172.5 li
@
gsave % PSGState
192.938 176.5 mo
192.938 188.75 li
210.688 188.75 li
210.688 176.5 li
eclp
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
193.965 185.564 mov
-0.000564575 0 46 0.000350952 0 (6.7) awsh
204.656 185.564 mov
(3) sh
grestore % PSGState
224.125 174.5 mo
224.125 172.5 li
@
gsave % PSGState
223.125 176.5 mo
223.125 188.75 li
225.125 188.75 li
225.125 176.5 li
eclp
grestore % PSGState
246.375 174.5 mo
246.375 172.5 li
@
gsave % PSGState
237.5 176.5 mo
237.5 188.75 li
255.25 188.75 li
255.25 176.5 li
eclp
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
238.475 185.564 mov
-0.000564575 0 46 0.000350952 0 (6.7) awsh
249.166 185.564 mov
(4) sh
grestore % PSGState
166.25 174.5 mo
168.25 174.5 li
@
gsave % PSGState
157.75 168.375 mo
157.75 180.625 li
164.25 180.625 li
164.25 168.375 li
eclp
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
158.733 177.439 mov
(0) sh
grestore % PSGState
166.25 171.125 mo
167.438 171.125 li
@
166.25 167.688 mo
167.438 167.688 li
@
166.25 164.313 mo
167.438 164.313 li
@
166.25 160.938 mo
168.25 160.938 li
@
gsave % PSGState
148.75 154.813 mo
148.75 167.063 li
164.25 167.063 li
164.25 154.813 li
eclp
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
149.733 163.855 mov
-0.000976563 0 48 0.000350952 0 (200) awsh
grestore % PSGState
166.25 157.5 mo
167.438 157.5 li
@
166.25 154.125 mo
167.438 154.125 li
@
166.25 150.75 mo
167.438 150.75 li
@
166.25 147.313 mo
168.25 147.313 li
@
gsave % PSGState
148.75 141.188 mo
148.75 153.438 li
164.25 153.438 li
164.25 141.188 li
eclp
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
149.733 150.271 mov
-0.000976563 0 48 0.000350952 0 (400) awsh
grestore % PSGState
166.25 143.938 mo
167.438 143.938 li
@
166.25 140.563 mo
167.438 140.563 li
@
166.25 137.125 mo
167.438 137.125 li
@
166.25 133.75 mo
168.25 133.75 li
@
gsave % PSGState
148.75 127.625 mo
148.75 139.875 li
164.25 139.875 li
164.25 127.625 li
eclp
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
149.733 136.688 mov
-0.000976563 0 48 0.000350952 0 (600) awsh
grestore % PSGState
166.25 130.375 mo
167.438 130.375 li
@
166.25 126.938 mo
167.438 126.938 li
@
166.25 123.563 mo
167.438 123.563 li
@
166.25 120.188 mo
168.25 120.188 li
@
gsave % PSGState
148.75 114.063 mo
148.75 126.313 li
164.25 126.313 li
164.25 114.063 li
eclp
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
149.733 123.104 mov
-0.000976563 0 48 0.000350952 0 (800) awsh
grestore % PSGState
166.25 116.75 mo
167.438 116.75 li
@
166.25 113.375 mo
167.438 113.375 li
@
166.25 110 mo
167.438 110 li
@
166.25 106.563 mo
168.25 106.563 li
@
gsave % PSGState
144.25 100.438 mo
144.25 112.688 li
164.25 112.688 li
164.25 100.438 li
eclp
BDPDEK+MinionPro-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
145.233 109.52 mov
-0.000976563 0 48 0.000350952 0 (100) awsh
158.193 109.52 mov
(0) sh
grestore % PSGState
166.25 103.188 mo
167.438 103.188 li
@
166.25 99.8125 mo
167.438 99.8125 li
@
166.25 96.375 mo
167.438 96.375 li
@
166.25 93 mo
168.25 93 li
@
166.25 92.625 mo
166.25 93.8125 li
@
170.688 92.625 mo
170.688 93.8125 li
@
175.125 92.625 mo
175.125 93.8125 li
@
179.563 92.625 mo
179.563 94.625 li
@
184.063 92.625 mo
184.063 93.8125 li
@
188.5 92.625 mo
188.5 93.8125 li
@
192.938 92.625 mo
192.938 93.8125 li
@
197.375 92.625 mo
197.375 93.8125 li
@
201.813 92.625 mo
201.813 94.625 li
@
206.313 92.625 mo
206.313 93.8125 li
@
210.75 92.625 mo
210.75 93.8125 li
@
215.188 92.625 mo
215.188 93.8125 li
@
219.625 92.625 mo
219.625 93.8125 li
@
224.125 92.625 mo
224.125 94.625 li
@
228.563 92.625 mo
228.563 93.8125 li
@
233 92.625 mo
233 93.8125 li
@
237.438 92.625 mo
237.438 93.8125 li
@
241.875 92.625 mo
241.875 93.8125 li
@
246.375 92.625 mo
246.375 94.625 li
@
250.813 92.625 mo
250.813 93.8125 li
@
255.25 92.625 mo
255.25 93.8125 li
@
259.688 92.625 mo
259.688 93.8125 li
@
264.125 92.625 mo
264.125 93.8125 li
@
268.625 92.625 mo
268.625 94.625 li
@
268.625 174.5 mo
266.625 174.5 li
@
268.625 171.125 mo
267.375 171.125 li
@
268.625 167.688 mo
267.375 167.688 li
@
268.625 164.313 mo
267.375 164.313 li
@
268.625 160.938 mo
266.625 160.938 li
@
268.625 157.5 mo
267.375 157.5 li
@
268.625 154.125 mo
267.375 154.125 li
@
268.625 150.75 mo
267.375 150.75 li
@
268.625 147.313 mo
266.625 147.313 li
@
268.625 143.938 mo
267.375 143.938 li
@
268.625 140.563 mo
267.375 140.563 li
@
268.625 137.125 mo
267.375 137.125 li
@
268.625 133.75 mo
266.625 133.75 li
@
268.625 130.375 mo
267.375 130.375 li
@
268.625 126.938 mo
267.375 126.938 li
@
268.625 123.563 mo
267.375 123.563 li
@
268.625 120.188 mo
266.625 120.188 li
@
268.625 116.75 mo
267.375 116.75 li
@
268.625 113.375 mo
267.375 113.375 li
@
268.625 110 mo
267.375 110 li
@
268.625 106.563 mo
266.625 106.563 li
@
268.625 103.188 mo
267.375 103.188 li
@
268.625 99.8125 mo
267.375 99.8125 li
@
268.625 96.375 mo
267.375 96.375 li
@
268.625 93 mo
266.625 93 li
@
gsave % PSGState
211.938 187.75 mo
211.938 200 li
222.938 200 li
222.938 187.75 li
eclp
BKFDEK+TimesNewRomanPSMT*1  [9 0 0 -9 0 0 ]mfnt sfnt
212.919 196.814 mov
(q1) sh
grestore % PSGState
gsave % PSGState
166.25 92 mo
166.25 175 li
269.25 175 li
269.25 92 li
eclp
gsave % PSGState
171 94.6875 mo
171 106.938 li
182 106.938 li
182 94.6875 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
BKFDEK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D2030
65B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD3329A
86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB857
EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5CCB
01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD104
E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A618879362783A
36815EA1CE5876FAC4F83CDFE1BD4A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKFDEK+TimesNewRomanPSMT /Encoding get
dup 100 /d put
pop
%ADOEndSubsetFont
/BKFDEK+TimesNewRomanPSMT*1 
[
49{/.notdef}repeat /one /two 46{/.notdef}repeat /a /b /c /d 
12{/.notdef}repeat /q 142{/.notdef}repeat
] BKFDEK+TimesNewRomanPSMT nfnt
BKFDEK+TimesNewRomanPSMT*1  [9 0 0 -9 0 0 ]mfnt sfnt
171.971 103.732 mov
(qd) sh
grestore % PSGState
grestore % PSGState
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
] del_res
/BDPDEK+MinionPro-Regular*1 ufnt
/BKFDEK+TimesNewRomanPSMT*1 ufnt
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 12.0.1
%%For: (RSLab) (Yale)
%%Title: (lnrvsnonlnr.eps)
%%CreationDate: 9/18/2009 1:27 AM
%AI9_DataStream
%Gb"-6B6W[OXoS;^cW^;YG,i/SguI%,\'o]WWGY;?itduL1\\fam>j[K.>hlKF77o]B$E?h(.80K8:ggIOPANdnRC#8O$61rs(&eT
%d4;--;DR9tihGUsmHmCCZ8^5K&Y^.'Q,)M0;-B+rC>m=FZP`C*oCM4Ve!nV)j2#t$bBh?][mo5<ed$HKnil[MKCN=*d\,.dU;*[e
%7rqN#Ud+.*7fYj9ZM1U@[&1'$aEu_bp1C59^FmREf'*%sjI6)?C,)+bqRs%Y'ZF\D[FQGlC?+Q_2><uC!Wn8-CMD0<FAE^jG&NiB
%8jWTqj]Bs-Ri,lIBGUNJ^mh+E@+"A4K3%ZVboq<r6Z5l+ki&O#T*,(DarrrSek>,DCd&ma'NqVirpr@+qY"RnBkn4Dru=j3?h];=
%6#5=EbSLpZ1uT1g%/`bIX$o<QP\u^!dA3:)Gp?3J*_j]^aVtJX6rK2]#q6n>`8bRn,LU;>5Pr./ZJJ'Sea6'GmM)SjX8[U"f#iRE
%\lhkFQ]".JH8Fj4PpR68)9eS6EORl'@Hd=:TEQ9pgF/6"8r;lboV4>MK5<YP^ijA(BgI.Ppj_)q]/QRBS5"=)lgZR,BESg]32fk7
%$2>X!OuJd/@kigR,e^196;0cMeLEinn9Ymk$MMP$kbPP!s._g$7`9NiTGE2o3h8hl]i^p#];-*=OuJC#TU&!peGh>is-3qDk0N5(
%OkKjj[)sa!';0Ad"Y3CiFj&eglj#Lh[S(!R^`bfWIjf6W"*t2K/1-rQ*^,"oRFq7C4R^Mp`^.q?8]ErkXZq/=;+em/Ms8kEaoYS;
%h4""Gn"?TT,7NtJ0au:LraaRbjC@#sa%('Jqubfr3rLKE,k$BBIq"VuFT+:,bZ^cZm&JO'N^p>b0NShR6194C40*\HGQQo[!.YUY
%#2K0ICEubSo`;gB0*$)8l]&KXfk7BF7/tKI2!i2sSET[$XXT>KYo,nCIm!/<]&WSd8=_r3(n'#D\)3[,(=0Xuf`Xu@YF(9h3fE70
%2sU;M*g3f%FSsZ.[@qgVPNeH<51UTIr`3u5]C3EVO<u4AGtNqprqALV_.YrlIJuD*m#>IQ1h"4Uh:Ss^J^jg<"e??s$l1Ygj^K!p
%s#$B"!7Uf)Bl*c/mIdia<bF/U`J+c(R$M4ff'S"e8(`>+kmmtMJ8%+i?[rIm>I2UaJ81<D_jB8=eeEK6It"g1n!Jh2S9`)4'J#pJ
%!)OCb`?Nj%7EjY`f(pS,5ce(IQ'Ei;Wp'%V'n$Lp<2n3Eg367rWej;(WA72M9Qg=P4%08QRPXlX)?/QQqVVe6ktLtl\/<HePJQ.]
%Ze5>=M&Wig2u)DPlJiiNWsARnqK"b&USS1ur!3_==fd;`\((,YW39EmFA#!L6L8CY@NC^S4oBR9A+,P@!NMab>p#Euj&1;_6shIn
%"7-k5Jn&&5XO_)ZI5"]ZB]!t0J+b#c1Lku#?!p84?%!LB2h0l>F2X$P<NtYIlRJ3XM8Rs2)-@*KhGZ+iPa)7URd-h-L22:iqeB58
%Gt[O7bZHK0r";ZblX(]$$-5&jNjmX][sQ_V:O4X.Am!f5X$*DL!?*bCM&.XJc*!rPWa`INYG\U1rQuV0qpPjtQ[V(>/ATI*FM*tt
%8+0s6++D]jms/^J$$773j(8=q!lL(*r!@lpp]"3Dd8k`0YX*Ot"X=l6m]?B!f9q9['`e&P[HPq`:/IM!V.r%P)rYO,(UHp+olrUG
%Wi?b0?>28$X$$CD+%&FHbTd*orc=3g>@8HUF*dE1n*ogfhJ7d<^3)aX/EMuZ4Gru:)DU7grsUrMdI7#G:gq%Ni"OCqLD+@BGcs;8
%'*s==CK*kQorn#EJZV31/V7"nJ+a*,8WUYE#Zu5^GHL,J&Tdpm[`=%"Ce/e;6+#NE:][tF8lZ*ZJq)\:^Q)pjTJZd[)SOL4K-\ok
%$V3?K=s4_KRt+t3QAgr^Xit&4Rga`ND3XkR"))_oN^i'D7d.s`KoHt05p^$=X^TNp#-Y6,^mOD$mfi.tp_-@LdV1-?(&3HDJP(:s
%4Ne&M=qSFA/Qbu!qAVU=JmZ7nln<;4HfBI$(;*o`G^#!;hKJuTbc*bO+5RhO2XgrU]gi'@!U]%&[Z6gT"TQC4\TCgDU780@k#Fq<
%#$jVOgV2:b><ns=)@[s@hKDe*ed=m+^Afk-/ClpImstG)83JeEmY8t@5cX,X@q0M@,tFp_i0S]f6<*uG$4"XSW#5c8d]0]]C!FI:
%fRAgZ!'!s9A%r-!e!g9<!:EXC:Ou6#TDY0aV)T<2=*(=qHN!j]!gBM9MnhP%0F.c"'Q1\V$iJZr/CY:MDla6Nle]tfSuAiD/MV,4
%X"itc>@#U-Fjr`_\e]bsmCq*l5juq`+&eAQ7Rd<gq6<F^FZtAi"3bkp'K`%gU-LH#p=mBeR43jaP])pYAS3SC;W4/A+6[JVD.>%*
%5FZ6a['-Z_B/Fr=I5fn:.8*`JqB+o:dM-!mTpH6nfg1YIIs*pHO&dKJq69sH)iWlW`#W(%[JS$p0E+n\7Q6&\5R-8o=0Lq_Tg7Ei
%j2_1E,Lo9]r7GsETDnXa_`>aS2U(%XqO_%fB7kZrs41)*>')W.9KPDE.JOEk*'5P7CT?f=`\)V?_*;c`n-.k0p8sKVs2YECc#:sA
%%rT)5[n7:ms2\fOp#iaMYC:]pl(Db49N:k$N^BQG]Z.A"F.ej?pYP(X+4\)r@+psej*t5GNU?LRXk-rXqnKFAYBQgH?Sa)XM12*5
%S"f+0TCum1l(:--FmhP9Dme>l\(^dHJ$'-cA0N0E'^cd,)/j:ODi\,OY."Mn,J9cFA(oD3QB:*(g:XZNSSB(</`&DMI9X(#*Gc=O
%3nWG/)b2#%2kRNJZUkOC^4/iR?14lp?YVkma'P&*hYq="_d3>c*\q''97MqOG!00U!I!P/<m)sm!(Ab8)%)r(*k+T\Mq1DEHTn$7
%+2B!87IJ$-T.T1=JF]uLp\=XcKcH.[&uqZ9O+cqrPMYZTp(L@G)I&X":0Nk<'Q@lu(pk\:L1)*(YQ@3BSs7q:h+9iR%d2MU4D3od
%#5oDI)n'?c.YEn!;^\\"A]kdWhVr!.f%R6_XN-N2\%`bX/9n%f(U%>5J/Q^C1t1UD;pLO,]r0_2X^l(kT)ejV-dR:T0IUG4aWXNS
%7KNJ4'NI$]B<O)r6atkiZpl&t3YQZ(O8nQ@-dY.p?l&>;(m6:N@h+0G_kOItN(bDc#V`nISp#Hd::GR[VrP>"pF8767.eGZ_l2:r
%nbf^P%6,ik)?-au$dtknfkGXkMdhGN@4WH`L12VSAhshSW$GIXJP>8_;i*.#T1QCG*e>r4@pW>H,Xn[R68P'3'SoIq-Hh!4dA`ff
%\*XjaEgq6);ICh*"Y!m!QMlIKHp&F-!tihGf%dhN/2Mug<E_IX$BBES5W\jX`U*?H4PCfLVXJ"MEK]*8Hjmca0]$S'IXdF(`tRWi
%@:0tPJk9Z1IX59_C'TIcW/WoiKolpb\#,J(LBXU*AsQ`U$!=,%U\D#sN\V+RA\5X"-q.fDh%(e!c)BM#q@7G0U<e:Lg[kDlcu\^`
%T%NN1JQ8&3P56'>j`G.hNC'="BMG4N3\@9g:uoq*=EN,.%=/p^gO^op"AeT>;NpXPDpr4#)!HRnkBQi12T<\b5)b?,6TCH&[IpC+
%j/-Z#X0N6emoI=;FEnSZCsC]4q67hQ:#*$aS,UtG[MAOuA]\h.f)HRA%,gd(A29-nJgi\F=jCk`mOs@WFI%5V8jq]Rm\BnQq_3ad
%MCh2<J>D;*A6jXVi>6@R&ijK(dS:(!JmH$Om;+8ujo]0A:F9+X.P.J?-3YFJ#).ijomjJ\*IJ$G:iEB.(0K,oJ"Wd3<+(C`.3P_t
%4esZ,8u@507Q2#,^6Sofe(8D,#>"+LikL=V7D3oY[^S@'7Sq_6jM/8f4+@T^s-.>g"SFQsQLYjt$GfJWefRHIC5k\mX)Wo;\AbCV
%XnZ+^!BLnEh'Q=UGg]mMQ'g7ak_q*<"#WCf^/Y8m[h=38H@*J-G6.heACV9b:qI6<F]G=q;:TuBp'*F4eSNX)bq2IpjbrDI#9&Y@
%S3&,p%q0MoBf`\+C'[:u`<.bs"uY-Lk6siNfW<0crd_Ks\2+Ah$D#SgWgUBDAC1/,MKN#'pi)noJ3ol/jM75QHoaXGfh=604sHVY
%rG#!kRDl[qg'Bm88>kJlbcrm.G',<W,*RgTW<?Rg1)2NJ(j2_>T'"@OTl*<,U_fKG4:d?;;];qX/h='7SXMA=PBo:U6$uUh&I46>
%^A8M9q2MK#D5;LZ*<C9;7uuEI_f6VbH.$P'&_A*Q<^"2qHoSB8lkh1>3_")Q1W=-LV=Rk-bE\cZVQ@:@/p/cb-VbkA_TFZ&2ad-O
%RuU^($JRK@'jIXH#_PM-<lR3>'-EFI5=3XIBR=EHBr@`CTDB6KY(6'sjqt]R\aBgl1K:2\fPh\8%_k=oD4@^_0aF?8l\L?WW1mZ\
%`3(O"%6J7L=GNEfN!D]N_/'ZZAG/!HSr/55Jh^\FE0M\;TtZ2:=5X5kK#4=.<Gj_DM+S9c98#<i:K5'fKsS8$d+u5n5`b_7A*Z(!
%+d^Vt3r(9dr0<2Qe]+RM=m/bU2-tXkkqq99Q/57p:ViZoZUuBcPc3H(2st18iiaS/b=8d6Y$Dk'pBRsKD?`9h*"%\7o5^f!3L:Dn
%Eo8L?]?!U<_JM@]#_B+b+:8Y.npC>W=$1i?^8^4on_a+Y/9F"D:8QY!(RAe`^/-2'jpU6FK7Jn6nl.dAKg1&oq*On\RP/XV0_P\2
%qCjB@B)nmugPO8;XU@NsWW(X\!EA56*Qfa^S!Dj;[&A^SNpeGf:#D64[dk/mbn?#[gN@odOK%*%HC"lAfgcO[YO\`;HNi+LN7ZL\
%Q7qmRIgB6lWdj2[riQh*7BR!,^.::/^rB[W,,L()&DM^(CLf'WZZu6Xr[Nc@i_tukOf5<m^?==0[%#sOTGN+e.0UWXY"OJn`X@$m
%&&=!GW6f\AS)$i3#3d?U(;KFh4G7t.p$I,%i54pfT8=eml2-gh:I&Og>Rhg*IRl,VIZS.hKPGm^Gr7@PqD*JJrOanZ])S)k%Sd-p
%'p)i0:LB:"cHW:G2@&X%00[pVmr>d]qf'iU$HUH>(]1i?D#*U_fA+_Z-_<,fReR;/(#gTgWptjkTdBn<&61\QRHAD:]#h)(A`/eC
%<N'3\<D9><2n.,:MFARdfJe?MRo&#?Fi.e]7QkdrgMBCKGuU\;^KX9`lM9j#e$&?!I*b;]!?!RHgJr[R5"qTF_c')`@-lV2@sn<P
%*!0+"A!ZEO9<Q:0$HO@,M8@lb*"h=0D,"A\[Vnm=eiLq#DGoUpSJ@c.6ktPR6ZX4:n`.NS:GoW?TC&M!VECm-`LF@Xn/!.<)6/c,
%)GmuX95\fJf5?$jI\lg=it%2;m3m2(D<jZ.R+[Ll<\=@i??:hS\:80aFm%he=#Zo.'C$C'^DNu4$tf(pSZr&-]=e8F;\OoNCq'Bn
%.o[T7IYMUsqs3M[;lr63eT=c?jb;`,7YYFRiLlmTNN_eM]Ms^YW!^S_pRWhaoL\_Pbtpi>'Z)N?g#24S:\ADqf2377;d?>(-Z[@o
%l>\t9'ZZ+gYIT^6iOX:L0VQ(F?QI`?;d??3_S"2k<HS=1pptYfq_Y)%'Q.9$o6dRYRGD)^n$Km,H5F-JJ^`)L\T^LBhPM1@^@3Yc
%s2([[g?ee3Fb5'/'p,*p5IWRH9W<JP#J5a<<1aN7b=aS8Vg9-4!+[EB+RQ_aI?X-uVGoJq?@jmqeXXrES^u*$+Oq$t$<okhW&*Z\
%[#rXV!7gEp/"ma<kZ4DRPmK3F^L'pW.A@/+!.RAff"a9c!nm+V$42IsEq/c_[XH^k\HGkBAo(\PV\;@i3\Q.'Tsu[j^#I-Y4jUHi
%BN_*A`J%-jhUE[uW)50bqf[>ce,u@I>Hk0pIOoMpW><FI#X]>gfsj5Y`j.o`g`.F%e?&Je-^Ej886%@Noi?P<I:()"!S'OZbMh]m
%)H'Yio:]%Cn4B&14"7tZPrm6Hl.]$`IluZ&eJ<c7q9IL^F.o&gL=Nb7#6!KTT^etp]ep)mj3-ai1-Kmd\o/V\[jSo+LW/$C<g:6S
%1/0`4I/Pu'r9?2(Z$?.K/b.\t9G=Q^a(M9A:Zl.X?01>^7Tk##qGuK;Z-uFWr?s<IVATcsD4PTJ]M1Tc/`&BL/*&:;Btk:A+nO$P
%^\ha,DdWG4HeqtdBeLP]4k%`nP+U'i^Q%,?>39btU[L-B9G:'eGhi5aBjMjM^HMJ>mTD7r]/(>>RXX\Z$'c1hgXdnOG3^FRV7pfm
%N(ih76=m)K0O\cS-ugk>;09*rhW?2:g]Rn_PE@&C>*gP+H)_^SJB\"8j\%.k@Y]/mc/.DZV%C5L:.K[n$h13G%]n%5Ep`k*eg2Xa
%^p1GN&\QJ>D8uGLm/Z@kN@L%XKhGHBRr1d/qr\QmP<i-'@RbfFhF5F:'"-'rH6D3+G*3p6!qZ&5!LFN\aPLu#WmL6;]OaO&pnar6
%;ojW,EYI.mcR)U5Sd8>tVs0Y^;4GYh<1t=C8ep&G+"Gh;J5A[H<6c;QRiB,rU7$D#O=7-bSXiK4_pC<gW6.0$M,.e($n+8u-4H=?
%Cef,Jer#no7CE5X.Q4&PeHjBO2dUPKP@#o?f!gh)<2".olY/+1TV/%,18B/0_;Wk<>96d=VEmX<hmH[m5Zmmu;7*:[I`tYL\Lcs@
%J6>b./XS+N5`%<O+uc0]-Vh46i!cIsW0:N*+QC8[BBo5&Bt#3A+`Co8>Vc'FiG+bV;iV"(RSA9_?"3kXWNuj1CD27qBfnJro`2`V
%d(rOIU_tljkhhn_`uQQo(."2eerCIP<-?K1@(NpQ9(>+Y)(6IO[^XANr5@L+<jZS\M['TAH6.Io+t<afX"hiNO+$^Okg--GTHGhV
%<Cm8Gn5p9,>It?(LD!nWI!&Zh'0[9iF^f_V\6?;.Bsgc[`:/a'L4:7Ys,>fcLq$d\=-$<nM?W%fT@SFER,>Olb$03_a4;h16NB=&
%FlVnEK0Fr%oo?J+e.ufMRPM7qLR.jYgkS5bGOLiV;REOYn]M9om-Ds5R&:.qq61s!e`U)krV0h;Bfs-'U8r6?a84C:_g8n4>]TkX
%*.;oY,HqDFa"L-u@4>0(ap7T;W6.^UC'VXE$7Y85Yt#kP;]QCV9'`<Mml\16Pr0f`WmKaClDH"6UY!I;&G7DZNI?6hp:XG%k=+Wk
%0>u,4-[+Ef)Ah(/V/_S*C0r-2EFQuV\%iKB94i"3BJYWbQe!)QVgc"J$iuBeY<Gr19/_VJcrFWHd3DteO1O;a"92VpG*VPLDEKV3
%;--Op]WkYM97CI5m%;5GVJ!Xq#4t;5rQ6+k_Ibk+T_#n*;%Mn=@*SWQjB&cA/LW'`n'G0d1E/f5'TpJkb_'E#[ILh:h5.J2E(PD\
%%<K*m&;`6P"/.ZgM&@eoQ31a15\oCJ1**j/cZ*XUW1@(5$W8+4kt/I_DPs$cQ9sE=(bGVTXuTXS2m0MZWpj)9DS8^e*l>Xrmpo8n
%Qc1FH'eKUS6u\Xc.nHk_k&os+=KJ)!>)aNcH?GtJ)=)BfWD-^SLWYX4GrOIAHHu?uagA71NP=h&U4V[f7X1k2c,MV!)`<F;Kj%u;
%/[h6_!\t=VYWeq@CLrsA<i4!>1fIPVM9dMbZu/)H6?fn=>t&hSPqCg9U!L`XV88L4o7G;>lA]<me@tb-o:r!dpK*fTo>6edEuOH4
%EZ$^sE^s8NS2+cuZ#-5u%])FA54>mcD]IID>`B?&k*8$%Fn<V[13?6\=b07@Lr$5nL-(7JeV)=2@81uMV]AuXVCZLF[Pm8j<O:)V
%=UjH`G%8+=3:TXV^m)Sh7I&h!A!s@coB]uTL4Yijj*-\(i&o8=-V;N/b4Fth?2&Ve648?][8n%HMWh^'$A;X0RV</mrZ.>S!V7)L
%L"ko,Vt-=qfl.i/BsU@:K@`N9DrP?qG.aE?-+r\qht(@]MRMPK7OFuoQj%PtSk-XJfJb/TMQ_eBBVrCD4Uq<u-G+L^@qN<bQ'j21
%+^elOg\[_"LO*m.\MM4IkoanUrEGSBV%ZA%Z?dRtqE<`(ikU[<4ObnUZ<dktoVd;[`Vo3F+_[\9.`8F=m[ZaR0J&%5M4-j$GdqEb
%k$'`$[WtUlrj$^'p5)jm&cp"bBDoTH]n<C_crp?o#$L_EF9@uQ"k>->B\MsNQr2,"*9l!i/d6o7P6,?b[Tp<KD6CsoaUu44RafEP
%,GL:5fJOZbE8J*-)F<DhCR@&E,Q4WU_J[QU?F\Z(R<Ii%:5<`R,Jui]gEbd3e2<(g#+#l)faAm)rj9r0V0J2G+:?K<VZg<l:"P%a
%H8X;l?/hlpRK<Ze]C\B4(Du:R!a<o631tgn%^!=S;$L;@2j],R9@`9--H)3m^dH[AbEpQeg\uRh&T`Fjp,B'!['^hpp70#X&DNeB
%M"J^LEn,_O<h>2I3h1U.Jd$(r3^fdHL$faD7Me>BoG`dmQ;tUc*UXdAOX@(ESH'Y;Sj?+WD@dQE$WMi)P*R!((:79^3BMpARKX*<
%Fi7!X0b#k\RU3CWMht<B!S@b-NTlqcf<TaS7"Q8M1haXSgHZ4(m<ISh\nUJiM6R5hSblHQDDu7cXLs)lHd5O#3L0^XdIP_FfJaAh
%)Pe=jZAr3qKLdcPFB^[?A/C'c#P>=Ap7%mW9t(5(F4"^s-;;M%>9IHUp[<%P[?XsGJ7b#JHeV_6K3]s/cY@U#d#$*QfZa(qXX1,i
%(DgP%B391eFnP!U15hAK4SKNdedsNHKuIMsh7?\c9sC96YRX'EB"+LWg*8A+2*':?oii"6gY/1QY_?V-UgtADY=8>D1+fp=UTb/;
%b.[J*`\*92QG[6][#`UR(naaGOX]Zt*=V[der-<`AI\:e$6Co"&6OSY&$U!ga!I$/Lr`3ck@#N_BEjURp!LG$D#DZJejij@#\S.i
%7uO-K<F:'#I%=FlNo?-C`s^8A*L87dLRu268]>@\P*p$hKi\IXgX`s5@jMtbqV62"&3-*@!8EjNpRND^D8A%VR]t1Mj::D*WM:>L
%[1*LV7+;c_jYC;+WKY;;<JCYkS`]O&?)cO6UD_[T3EW-q5IBZI<K=BQ937g,XC%V`dr1bEEmqiMHWXoo0>M27pI!LNS*_;R9ftIC
%P;B$uF6&*7fi?DnArK.S>'k-!2A<b+"t5kn!P2]*Dadc.bMfZZ%u[9t*3_5Z;cY9h.&hQmpW*#mH;[H$\2o&kJ$mS`"(]uHc=`]k
%kJ9__X/GPlkOQFi]p<b(lWcW7+a%eHF?]"q4qBaVAf^,`#-,7>5/epT4e9n[Qd::[J6>%+cUa>Hj\lnmQ.,Q1F87pt(>_[JI+GiU
%*aNCJ$L)rl05`D7otI>^FM<iJ/g',/[LRgG:Vb_W=Bie8aF!MhUk_KhaZAZ[>YqQ.[J@S:PP=32>;IUN`b7q*:/YI?`-`qa1C%oR
%eGtp$4qB]Il,l&Obpf^5qD99@HW=;ESL(+<NL[;3T]4]b(&KC4a"9\kSDJ*qLe)L=_C+rn<>%CWXBN%5KGJ_$0Su/TN\1]?=XNT_
%e:]RrT<gni;giD$;fiG!au3s=9?*=fN5C@+Db5/ZZ#L9nNl'^j)Wrrk`.PBt:"/N2%OA!Q-buf,mETn08(mF:8\;=5#b:9_TH0)k
%MIT#mg.Hpp\>HJKX6otW5/8[^e1=c\;q'R!KW_TE;[tBhDU_L`jrj-C;:95aqPJ>/<qQInIT^KGT3\D@'V;MQ`7Gk+2L&38dSiWU
%=FS^,[-QRrj3Th)9s<@3*'$*'b]ur,)pu'0_@%?.2Yf:Nq"e\Fg:UVcONJm?*/X:d/$iqn/^f'mqG?YRj@.oeouP]eYGYqRHL,YZ
%m;d6;N<gL:&$bBEC05%pnPXIr*=k*]b_#YW@i?_/B*G/8m%h./VX_"t=%m-%`Uj!dS%DV1J)SNp>#04:IF%Km#Lf8994N@?[]+U9
%*-qbC6Vfi@7*P7L&cJu&kGA&oG+MnW3?IQI?,JdC34B.g.U%H<$0`Ldm5ZepY:n-U<m7lC>kCpCAt?iB=*45d"")dU8HF\hI+u!d
%^s4/EEKI<#:/=fK=QqWG8_3(2W(f&;Wp;N9cF3!+VHp(%:;+"OcqTk@+KImnMp5^k!&@9lWgYU1Y4]0bq6koD.deX_5u2:-oECXq
%r.T<^i1spe<LK?QJs^OckNHZlp"o3(KVg+jXKsp=8T4Q0e;6Djc'L9q<k7hYR"rU=h0O!]FjbVTjK6X-bep#-Ek!1ZNP(P4fO.2&
%;Ya=q]Jhf0aXf_K4PEr!pBH][m1X\FFEJ!&Xh?[3@(4=7ZO*UQF:QgZ3oU9N5+IK(`hQ=m[EfRmc?l=-hF$-FS0eM]%"!E2+?f6G
%#.1^!q!@gH9oUa[CpPiW7\e=e+q<&79iiQk05QZ7oDfba`T.<8InY8KDEL1WEIQXJ@OLtjX%(>aOnV&Um,Tr]Bl)p_`u\OOU0WZ6
%d`7qV7NkIqEuPe69C_&!DW4?0&U"3nP]AX@EVQJX31unM-[Xs(jYO/[et&4AYt)%DbWO0'Y$'E6.[bR(f_*cUE``%(GtS:X/sD^D
%N?*\oC[96h1Q>17De>U(&,TV;2.YipkWERBS4CnuF_'WK4r\ojhC>NI0/J[Z5]IUH2.Yiprno-dXXc3R@',j`$^D/+1,#3-[P%74
%rl-eeP1;UaKO3Lp$GEg5!k73TZi?^]$98R*ZphnQ^Tl:#0h/Nj*Z2hI(?lRCBFuHSo2Y%rHi"@iR-/,M5dSOA+T%bsI!h:uk9GL;
%S<(m)1q8:_VL]@4e$=(Zd6iq1?"-"S3^!\&Q>*5fn^dYdjJ_@*kGup!YcNUS'n0Vr4%&(N5$FAa(stD81;h=H1gS[K&NRp;B9!$L
%%IAi%bVsKXD$\&,PIm@VNa^euZ1X":D#XiL9XBK!&3%gS-JTujMAqT(=res3MAu)N9cLn;hU^uK6'Ne+Q6b.q[3WlNXXd!:DI#i>
%GKp`12Xu=F*iQC7TPIg=K\Q9u>o[#W-_l\1!8gn^BFa4#+XrJ7BeK"2*%0hs;+%uuTlh^DYtY%:O=n.5;P&5Bk>Fls:2J66,iukn
%kk"?r6cbQfb+m`&p;sM]-fm)^1e3[VATUJK,GCbl+5.q9C:2OZ)*P)b>LS^R#Se`TOQV:=&:+W2kW!31/udNgU[DBUVIB\^2l6CQ
%)g@/+ahoeOdUEZ="5:S3Tc7OG%Yk5$<p3egGe"qQ).'/[*S!bHi1&:^I$)gqX"Skt;Y<J9nr#/AR&Rrlj3-rD"1i7gOFdEQ^jG2S
%IGr=[)?,3=Nb5`,?JT$>Xo-W/ThT1Z2LV3j5"c6kAja^Qp^(oMN?,(,]4cj=1chY1SFgfphnmhiKl,[?#*3A1GJC6-mXEn9qn8V.
%R5?k5\K`00G0Hn.XYRac=*h=rPBOG2fcq,m9h!6TD[j+_Z>"Ln<lof@ant5BIR5V2S=38KDJi_iV&-J]m-Ko6AoVmlp$g_<.91V.
%m\e#eKi+li"-7Y#WD7(bH(QNchnaBp>3EO'KR4TE$L!i))1h@^mSGhF9Zk%"L*P/fR#FB1qk\UgArAG7WJj#P0nm_O:IR`A<BWBl
%Ho*(C%b;EX[m`<5n'rqte.r^o$TqHp78I&3(S1$G(ag&Ba2?:FBWa[6E)qWp[IagsdM[ftgLI1K\6b4t-P&3<AhDX#3Ha(Vm%_!0
%Z>)$`#-FZQ6,tqMnS^^$gigluXCp9SFoMY(P'a%L&hUK*?,8P]*QPCY3gmT%ln?n1?71jjUKiK'=sit5ZMO>+ift/Rh"bcP:@."P
%os%1p6Xh.@EV'b<RM,LBG-3`AesG$uN^V);pV`IgH6%ij]W=;f=+*5gI4c!c=XC?!jW_BS@\9nu>;.(Eh2-QW)_:5Km,KD7fgH9$
%PM!q)(sT?1<_2T+pFsnX;`F9l<g4mCqfjS$m[LU2p@7FD$Q3)C@NR8(c_s+2SCkk\>BLG8od'8$qN0-Aes4n.bNe\<DI?d*Z&a[_
%j!`g6<FVR`e(0]7a33aPQ"dZFUCG\<:[I-/_K_"U4]>9qWPgt@![XmCVffSj@<7nuam(+/o\'rTGag:B!k$=l5#W,=]nq.a)_:5L
%ln`!eesb73@gCkJ=DM@fNuafVet1O7;_N:9/Z_u^AK+KmT!b>>)c=.ac/t0uLH0c-T.0(@1WjE,TC'"`q&_:l3S&/-T2qk,>G'.i
%\+oJ_.:qM-ZYF\U<j=[O^ROrNL;S$#l/Z/UgM5h%0CUd"PF8E\Wb$N'Y1#E4Xh[\3GKMD)=`"^.<n06k5Im)P'1UWemE\q!$)Vn!
%"a2tIjUDaP&SgFcnimY-!fXP$^=)+mXK^[@s6$h1L<KTZCdOPbS3GOpT6'"c3VWP*dj3c2J'>QFmaQ9$q4G22P.ptB4s%]*nirp8
%g"ub<o&Y?Bb:GbGgJ:=Uk5J7kF9/5g`p;n6a$VK7U`:Z@3XC3rie8=mpXX.!(NAhh2/EpH\Vb>_)5X"dod2TCH117V4uX,+AG(W?
%HqptfD3H!*a@>/3?8b=`Aj"coiFlhf=]Q3,daWU!25E(:?>W/biD_>6`=M)\g.jm\+n=a5[=qcb<,2oM3Zkq:r_,d"jLIu1[Bi9F
%J=gsK/;kq?TK4LNapuha$)WT5%^1RPk'+4YkQGK&JR]7\o3aHc'tm-oftILI>'PP1cJo?7[WUF'$nDMbS"h*HH8.5;Ap6aSY6m&L
%)qrrOMV@3_2@YiOZf^fL>_CihCAW1eUgC6#MucSCH,EoomPt(V*GV-?;FkG-:2VYiPlc\MSX3-j>[>B82qhE1:cR>.7YoW8Muc8P
%ndXI^MrC6^g5L'87A9%S4i,WA?Y6WhQP6J%P6/qY4ETr&#G&,kHiIo7/=`Up=l&sf.auW(j)Xnn),tbPlG'//0m/]-,5K(sOn4ea
%Et_WcqJRDA6KrLU5\,*-+'EOKZ;Xf8pWpah(\c#g-/d_<5GuQ2_\B1F#<-JRVM,nQ+%$m8dqmo'=3?RZTM>*O]9T^NeWI:pCgV0,
%@[c]Mif#LCBGK]sk3b]pera>Yi<<*KX>O3M(7QKpM,Zlu2YPmgg%W-RD62F':6"iW^fHh`\jX*L\V3`;k#,@C"D.Poegchs/ompf
%1Yl:0k'[?9XXVa-gGc9UW@XI'>at*e3qV"FXlIXf1[D\D=%c`X;RoGr!d,-Xg^d'=h3RIN,)jN4_EBIJBau`)p<<@g9G3cQoU`dn
%0#KNndm-R@XR.@tQXOWK+EgLN7sVS?qmh]8jBT$:=Rn4@?Haup5$e+B9R'.$ILTi/\BDJfFgAaj;iS5l>V:hT%:a[EB,lM\:'adp
%I)2R@&S2?e'Z2G.ppGJ9$XOX5*gfn$g-&M8%?Fg/6L=\%V'q)qj"IuqW\6to24`Ve1G=.t',WBXrr0[gXmq(q7!2S[q:f,??Y5Z)
%ENe?mTS&_2hUma3,,.ma--o8`-9&D'o%pEM52ZgC8e1r.,%BAp0W/*X:EMEnCd-e>GB35ljN&Lh7Ubko73^a1!I_k[5"@642n1Tc
%#>BLL&+5#_C*?t`!mMAj!J`lB;lW1O\\[DlHKb"2mB>/ZgPfmjlLI._CJ&_1q`*B,7Ah:Tn7a\(@s5b!fW)'u*N!2/*VKc=!rAa*
%KeBr1;1?'^c(9Q.JBViiCu=EKk]H@k[7r6CYgir#<1Uk`gT[;$VFjZlfuh'WG0,SO[u/Hnh\e3(8U,RHIBH4MH8[L#8=;M;bYsT5
%SArcMFlL=IJ83cWeiV(N,"f(O8M@^!FhV?!aJq=Peg=BF=?JO'EHBKT`*,7[FVWqKQ*P%]g+rF,S>N$7*3b=i$'DL.(1'cE+k,5#
%JQ^JOC--@(k9\hfq807tlF,/CbM9l!Z;,-C(_tFe=lVI=3*\pp4bQ=akVDg*HX,GFo+3h+fQQ\nXfa6#lD7*hA<5h\N=O1nLWG4&
%`n>2B<S)3.mR)6YTi->@8\;=6Y-mrB/gYKpO#2kpKdhkZ*cqj:j#h8)euF;Rb[\F.q9t^1?K6<T[3`#$i!>h'`kCV&6EVm()Y"td
%_Ii$qFI;r<*gNX*L;p_u1Cm1(YXdWga/:[emstc_,8.S1gQNd3PSD-#r^sM`)H6&JQO.MiF(R@Gl(]*\p;]P1an0UrW=#h(b'I!A
%\Nu!_5%e)"?!etMMc=0X1m`KE>HW!>Q/i=ZDB,eA3/osP?=9$1@<)ga:)@l#c0cc!A'1ti[Kl,VcWr<N/t9pN1\j,*b;.?18g/CP
%lcm\Y)7#XSe])n6)j+8e-.-EjU.P?De!*7u3E/*Sf0r<+dsOQ0+]op7d:ke=k7;]VAuV"_Vtl,ia4Inj-K$o+7o\(ZZdE6GP3=_E
%OU3"3Jg6<H&NpoM[l[,PFIJ8H/Eu7p'(pB&cWp$S8P@'p?K5UNC>\sYAVG*!_>=RF#dIqn.jXP<+2+b;NZ.c1b6fh3g,^l;<(<>T
%`IP!p<iE!M5C6P,LX#JfREGq#QM5a/E*8mK:*0,%)1A"]Y)uGu1:lsOD[Nh[*V'hQQFcR)q1Q%2-"OgG%W);#SVB[=hfe3C[+F`_
%6YA,M.pmP"G5OBr[Bd=3d*8Oj.pR<ipQG'T6[_N'$5Xae-W_`_IB-_"BW]OK"Xgjpn;u+,lF'&Y&!YfV&$:1WM]K/:J$p.7=uT1o
%d&UMuBRSVYM1f.(_F*W9dEC69(ESaBZ8oXI[0mMI,MG9B)3V%j%aNpSW%,8,?[-7MA/AEJH<f7f)A_LkB0!Nld+TPlKjCm&i??0Z
%c4k@`d`a=+[)Tt(5:gs9+W$'F#22'*SR6VTNCDZ_Z9YdW[!^EU\akH0f!cZo/\H42Gc8hVPM6ST+S&Mc4LEtm`)9tP(ER<a%9K[Y
%VWXrq*el45]WlmkL'nNopR"*'\U=&X&$>TK4P];R,q_=@ASi(AhKnMB`J')u=KEKJXtDiD`o:.ASR/6UQ5[KT<0Ej3_F#\"(ZqF)
%94)qbpY2aX*O94A^@75PO3Hk9Se]]6>f;"<A6-J7d!G.!LF'%\_S_JsD20`CFmBDG?/JSjnpKNRG0#WLjY&a'`aY[BF"TRsG=<[-
%b/58%[-WL%.+,s)[R6*M,,XB.&$7.Q6^_P9iM![M_i1ta00J;pN4SD<ftVN8g+X<a/tIpdm_V=A/@T-$+lN.46Ur"EX'^,8,bg3<
%iLt/hfj1UAkI*b686b2m6UHNOgS'VuhYDk\Au\/Le8;\EKnn5F<,+u%aql,aQtEkqd(m#"00F@FlWi_l6RT>*)D4.Z^?s9qLn`"F
%LXm@g,L_snnBb?KjDRRAET*VaD22.2.rLPm/T*WqX65?V*a2&URsEOi?[-74gS(t0.#0_hReo]>`fshoM/%+jU%MSt#U3XL_F*q&
%!ZnSILe`9,Gb0>NH6Nmh$oU28<V$J(N&t-E4Wgdg_D^r`qBX3%irLYTQPYoWYW^>>!3".V+j3t].sqV!]ZDPHa+U:J[0j80)X3&r
%#9K[D]dqq7!;L<'P^;_^Vpg'nPeVKmnGBXaWOQk*/(As_n^W=hb$LWlp'02J.).u0#i-JKmL%LnM(I.3eH;N=r7hkKiPhX4S16Z/
%a,dtr_F\\NqaS*LgJ%rTYD&-Yo=NfnDKeUC_X4W'/_j)2[tM@[]-9A0I2rX?oB<mWg5LuD\)?AVn<SD-9W+eNh<D$9S=ImE43d"6
%4+Ec;:.jtPq)H&a;GBBqco%%`meT[r9&!7dhqIIgDr1K)c>S]>Z.b3PIm)V9]?7!0Xq*UVcun`'2h-tU,stjBibkOc</m]6GCG0^
%$.WDb?Gnei5KC4YqBqWN(uRK3l'0dbIus2S#4W)W"e"kkc$8.iPflM$>^di>J-PHJD^YMle5eiS[(2mD:)nX6'_4TXqQ;0p2ok+1
%=o,:ZEa,qnea(S2/:t%igqXeje`uVUFS7QJK<S)1_9I55OD0s:T2>@[=N=7N[)X&1:PZiEi,``9D[sHNpPX?*b4!I.^!@d7D8<gA
%6hk:)?9<K$Mo9dF+Qr=b511g'dqAqdOBARYMEi:s%aq;jMSnuSXE\i2pCaKZ[hgoOUY,c.lL5+AWP&KWO21+283fm[$ORh\QbRB,
%Y\B@u4O)eo9G,C'`if$Y%rX?G5fXJL=/Z_L\]A.b&&ZGlnlUoAZ$k)WC1"tIe_Bs*XO35:\=Jl,rDlT+@emN@X6R%<p%u)\MenKf
%&?@J;SGM4f9O?Xj]ApR#Xqi>P_!:T5TY<B$a:"Gc4WAog%FCp:#9grJ6lM.ahpiq3*E'?Ilo9`dM-0^MJ1'')jK6XF%N]O6Lcbr2
%bWMXC3%p%pOYHQo)M,q@7$T50m92FK5)u@8kTV,<GUYli/qQ;npiqkib(].Y'_c$D.iLZrUC_ccU>?#`b2T!Zp#.HZaN13bS-ENt
%H7sjDnn57O<Z7bme'uH,r<ic[`l=IWl9YJI?H*7C*^8R`GDu)^+=NF4qq6#[AnUS7r0]U7'X*Fi4#F"6dUVbMO5W@e^(8:)llGu#
%@$"[;g)ta;41Tc5L.i!!dHD.W/u+M$@@0S"^qX%l[h86?E;_8BJ!GK)%63MmE7@^eaf^?o`=I>!3`m*s=]YY)c$h&E!iNg2@)hX:
%!O0Y>,6/XrE1h0p&HM/$_oasoJ+04A!?,&3US4F-_lJW[)\m.:__B+9?l#9QrBb>g#I?;X3j2P[PI*+4iDhMDh`[?:dKnddiV2/H
%oEbFYN"HSO.=0p!7Qgh9IMc4bLfl,7mX?4rp3&Zj%3bNR1r8H#c[,^SmIU[F'($3WE<F:X^eDqL!gHNs1FU!K/HQ:7g1UNgT.ctR
%oRe3t.B$.;)&!YM,Ik`8!OX4rgF0gb't]DeJ4&f/G$bRbQ*c>b=hjL)nUUTu@l+t7\ZqpY0qN!S3X1Q<q'B$ic&)MsI3DRO!_L1a
%3-5VO41Rg!2&tT:W78`tE@;h&?h.\)V-AI/#0LDQ0Pe`ke`nS]QLNG4HnP^>-*ZE&2IHdW$\ti[8U1!ejM^c89jVi;mQ\Y_:"Na<
%%EGrbP7[%h1G=L]a'j6@(cdQJ+"gubXP!LX4bV>'pCi0[Do!#OW^L"q@edGJZXsGZYVR8]jPm.D'0DPk,AW>'fT?9dce#26;)smW
%Nj?!s]Q8;H,l9N\30Fp/a"J_fE*:?+40i+Kp!5:L@XB<udb'Zek&e)L84JZ'L`&:bqLYUkPbP&#.X`DiJWUPeUHSg(o4))67"\"@
%)JA)$or%b&`#Z:[:jq6IRI(7C#MqsJH@6L-ONhdM?ERjm_tIZ(@P_ht@M)kl>8LtniH:#KDhsCoUqh18kf60C-T$K$nI]l8'SaNm
%Z6m7V05i<X;hcpFbp1SBc*G42>@1MAInZN,VHC,nL9?Z.E4pPqot(80O*o/*FA:P<m7^nW^;eM.(p,_%Eq/NX6REagk*;YXl?>#S
%S%26aF]Wm+FMh@5[Ee^NVK2f\`W9JLS4eAs8&o"pSQ3U'ZM\N%+.RKr,L_7\>-+>UW'Ui*0sVf&;t2T;L;be&IJb5Y6Qi74E`1h'
%Wrfg\JXU3ZN9IS,Ag%BGiEal[]PSk(#G6P+I9`"prV&F=/jOmK&&<E=*'?7@k4AR9=K)hY2N`CuU*e"$i,2I#/@t^f\9sJTHL:9S
%iXW?W-5<#5/XUMEF99T?R"1[6Wa*'UB#W%r$c(VjpT1o^I@Yb?g2Z`G\&Q\0#p=Xm&3C[eD`hq&>XJoeQf7)I&5YO'3)Npu.Q:@O
%2ijYM\XB8'$1rj\<GWXcNn$*.Hg.g<l79qN`>Mbe\d)V#\1[k7WfGY<-p"1s2gOU`S@Km^I[M0HJQ*1m'*0D`SNo#]NZa3"/H7>S
%7NNAmC(HPo=VL'q;26qk7-uIkFe9GMY+#r9Y#8c_36D2?).[P9rPj_4GfjE>]kO.u$0M&'%^bo6jE.\ciL@lXjr<H#jQkqL5^oTU
%4]QRQX,WF.9[&TS#YP[B*[o_=SFh"!Fp"'VfZ`@qkee4iIA`KLYNi#+=G+o2LTo5_>i"2Ldo9ac02q(0HS<:ekcoH."9CKFct<6r
%lSQtu+AduKaX/,NPN;,6!(LL@2ssj9[jR5`p&lIGm0[7Z2pNBSj@#lD)N.r2IDHkO/@h2+]SHX.@0gu="/-4fG9#g:bq'^.f9C-,
%/87KcO[0[XkM^<;q'!Qc&1kODc]*sTgkN0t[FO=tG0R`eNe=J!9*1KOQh0H@RU,-;gk1VdBbmB^^H8"Y&_02No?I4i%Db%jJ6ISr
%Z,(`ChC&kfme3S7SaMPkFLNA/GV4TW-BYcBnn0"S1'R0`DVM"iMMe&oS^iH^'HrK7N5?ahmd$UU$W'_`2>[p2\Toq3lHN$<q<alL
%RRbX3'mBJV_B,SZrn/\FDrl"XWim)H(!(9DdVsS9@E+*$`OWZ*YiKT'55=+YH[h#&or64ffVHL@JZKb2pt3=$WSBt7EUZ_^U8jq(
%!Is'JT\G]%"NZ^\g&ZP]qQgh;.V"X2>H,f]WJ@"<W&s%CnKq#<-G@c#P!1M^RX_.]9[.Rb[r]9g:5?i%\mcYEfp17LNY/DV&<8^2
%]XtY$$2'X.=QC,tNT50*'E&KXQhk]:Ni4FunR12k3"q+s,crHP*e@m85[S\"`K:m&\jI<=C2ZQdjp9gf^QF2XXG9LrhSkJ9K1]OT
%\f$O05J1/eb0^J]J=3iN6Z01a/goS>QIHTSBBH'bduR"l)Jk0KTgXYhJoY7NFCQK]GY(/4lZ+Decp]<n_$jnuaUF2G2+<4"]htN"
%5]RODlC08,07=)TCAeo>[C5+nPrH[5Qk93oks9,@hIPGkj7ci\oCr@TP86fjY65JaVTqX$jimJ3>6/?XjYq;VVU\s&FFrjf$otlK
%D'.gFL-#Z^^Tr@\3`d<DTRqDaU&*8kc$`6?o#\[UqBD-+f8:C+a3%9.G6Q(S2l>(%I_/J`?!UOSNMgDe-gbkG9)5,C:dbHkB)9L:
%5-4%@>e$Al'(b^s?N'\$qP/;Cf]lOfFjK$Lo<h-ErUa^J6RtpBqr-B>ftV6n@2H]<4Ds&pPW$#>"h;2M.%MH'L:!HE2`-;=Jm+UI
%)tgF%s'F>WQ!=2.]"1IXhO^aZ"]3ggrJPoFrd^R1W#sMB:ogXS$Qa]=1H\WHLL]QsRubp#O7k6*D48o7mAZ]$"elNoUo=:3Og9ZW
%!_U^O5]"45XrqiiFRi?u$m.\L2!kF"2/N?"(Y#FQ!s9&D)PDr<^oof52tTCsr"<oa&s_K&V!J,i^@1Om,6YI'Jp80TiN4==JoR7#
%mL)PaaXJ(4D^"*/4Bhr(<A+][Z`f&Wgje.3VS@RIGo-Y=3KKh("PfHD):Dc`PIW6!5CI\8pB!t\c%5LJ'P*lb<mRK"[g'oi-cF*7
%>a9M\65074"b6.\r#u:_G?0g^Hl;.gC7N:-a70cV<,pDHhciMld6Hpc&FL7Z(TU'CiR]<_6K*+1YhJpLc@B%4&("$;ql(*M60NR>
%;;2Ad96IKO.,`PCc=hgn7#1Pb3D[5L)eaTKXls^W2_Z,9U;O\"J?^)s7>H6#Tn`9P&fi<>j7V/+DI>6NU'&U@H`rC9gjng1f:p0r
%gjhc-[HMQ_2mD]6=EHs]+=8WuSqWs+j1a0%DNtZO,F>IO52S^rH"ZS#MgV(#d/gB#c4GBQh%CRP+kCR\+%VZ*oa#C7305*#H1+dU
%\<%Z5(Jm]65Sh1'W2^]oN-7P.9RTha;SOrG$t-I(N8kYEB:ij(7?Kit$TB#%C_:LO.V>;*A3gS-(`hrL[p+Xs1)UaXG'BkTX7j`?
%X-8$hG@annNoGL1Xp-!U"FAkA2J9SIc/(:F^PSQu;pSaa,$9;"q%W6]4A)'$0Fos)b,nC6_0K2H"2IM*C+r%"\kCe%q[Wcs?gY&W
%"MK*o8!b<Q]OCP4WEUN.b]\IN*].l>Rk;n@4W#+XKQGhmGa-!gSO&UBii)h\GWXZB,OKlCOqOOa7k)-2lQ#$HKVt)G)@m2m+^^2%
%G_&9J!:0Pj((.>GAnk*r!I/>Zl;_]Z_cF*CT80V*5SS-9<85$ekQ86N3f0;]-pn49EKKD\30^nXgS.e7*hMkt7D1W]*p<M-_CrhY
%U^MQ>W^,E!o?%j5c/eu1ZatCr9mU[QRW<C/-pTfeUj=CQMGSPf_]ig)QV`2Rb:&GfR7"b"EF5_&p62-sjI0$WhSI`@fqeqSXVSP]
%T\GS(M?3R/+f5#\8Bjmbn4lX'3LVRK4/$]I[o"bq:eCdl_DksW3,SmpHQlJ:`"*UVG+ra/.*Lr."qGUh&QM)P`m>rpL<r/**T^#P
%m)Nf6VO":&a4T.S41X$qEAlFq.lO<gc)tMqZ//R9Q]-QWPS']i?k.@,f9KrL\H`+*L3leZs0[O>m[sdlL>Kc:n>1jgh1\Eo*pcOu
%1#68(#Sb`7N]<.NSMLtP-PN+#aV@Y49>E#Q[3g_%"C)+jF-28r0eA:3MX:^uQdiZ2hfsZ=4(Oj(;AbMsEX@19YhD7@2IcW?Qb(g`
%S@pC0^]00.;;S0qEW`@p*17F%JpR)Z!*^@\h$)?^%kHq^6S6NS_3n.'H"-$[$SZ?X*Z00Pd=;iWUSqKIS/R-$l'.6t3aPWdk;3=<
%<C&7V+rN--F]em_('f0Qj^-c[K*QCl3<DRW%1'$rYnIk@aJsm@+t!OH$YN!E5W,kN6f-[]L<XZX71I?b+<_BZ.VNNE!Mj>:+Re)k
%+!E^6H4*1P5gd%\$FLMXrlYNdZdkOnm8Cr./<L:&2DF-AXIc;`_^t;$kNl%Gd\?B.O'FOVB)L#@4rKDB+7>EP0RVE3VcKI0YfGB#
%J.++Bg:roG`VZi5.+;Ap*hI=$&R?k?dLaA'j4!>s)7:m43%Z0YWK&;a,)V>h-q!a[>tf,)*AD3]cN/2J$E+5T(i'V(Yf=`6nL]a>
%@/9=/V#QAJ4,fJ6=H/c)4!)mP"CgContNUY=+n,%h+aHK$N'U>bC+dfd#F9@3ZL.h9G""B0(6JmC4[iTW+EXY=R=b2+HR$!]t![O
%=aLO;H4u5aaMSj$Qlp)<)39Yi+EiTVO8s;GF"FaI1[)6fe6mSo&P7Q.+d=5oqbeR-;8kW*WoHDnCef?m+s+]!U^Km_Tnsa/0G8@9
%<8tC.P86,g`0%i;>$A9si1@;SJ[(*>:^dj^!b2sZTaM`@3UGEu>#=b9Fol.gBq]i5Muk4H1'5@IZj;JH[(skR=We8VK"(m?K!0$1
%eW>ZA24JDQRA45lN2O0p>!*jnXnuflWr0q1&J!-YDN)XY1.Y!12SI$8[[S*Lr8);O\_bimr1GGAI<RWOV6aA3etHppJ`_';paU6u
%-)6YIj.QltM3%TlN9/-;iL>ZZpL./*1f^c\!H"1/>R)iAOEZ)g"r%SfaoClM`Ru[!-O5O;+7%A@ipm9!+>)=MoM$m2nLFdPbG#oi
%Oq(.sF]fqfL6o"g/\^Z46?Va%>&n8/Uau@nLQf5,!L]SOE"_mlAD3)i3($mK,#JT3oPiAG(CkUX4B1U?cGKrP2amDeMe!h"P!99(
%[Ya35>+g0$9OOqG/Wc=:RD;on=s+-r',WZ;N"HmrBp#L:qXp1B\C$^UV+(@E4th)fG7W6V6*A!/B:B(835)pH!^fmelEPe_^S$=!
%4-C@molMN7*(UIrm;<aQWk!!aGrUX*Jf4^VpM^c>-<b>:b/6e-/%eFQOGB%02\cM=hSZlgFmn97.\H"4Oe1ah_rX"N!LQ=m@H)67
%P(otMMiW/ElVu=[f'VEAmS2?&TC?gZD'r&Xi#uLmiQQ\I@'F]XhDtC&kp4a.6que2btTaP)]VJ,"8p%\Qj$\!GWQ""%3QXG<R>+P
%1mBUM+IB77oK!25Nm%i#j]2E'YHnM!&PXBuJ49Q]h*!%4V)S2gm1eOcl2Q3>k<.q^M)SaB1e-uI`Pr/n[9D:2iRA]16f:IU0Tj2F
%#b,D=(C"@PSIoWo7M$HXhMYK\8RhnHZrkuE]kDpr/oaq/8L8=?'o'L^QJ<!:Xg&HT0L_jY-DFd;G_+&3oN(c.B;C6oP:N1PKBE(U
%8nK!YXG1#%[m\U=GRjF73gZ7%G`r2.oYS4R4t;a.H7]Je[#&rgG!GNM+t1X`aKMoY:`rqeGYV"3/lj2BJli4eF2%jBKT?t`+7d*F
%"Jk,`r$!F,Sr5:m8$!e>*^GRGKb;Z#FKLi7=HKN#qYA;a$no4Od4@+lmXg^-j^so.*\;`1Asu.G\,A3sPR;2c6GJYdS_;t.WNar%
%<&,sS("O9,oQ@<*WNar%4S[-bP'2H-Z:Y:X[)H[_E&7ne`a5VM6$"F;4ET@lLX7YRGE*&?LF<3(fccdad+]^gHPK<V#nEn>D$%(]
%m?$PaTcJa_!qjmA"<+p^kj,`0QZ`RYZl=V[1_-Y'Qf'"Pj7j*8f=qiL_te]i7]$I<,uG6n>I+\!-E%a"9rSbn^g(-TGh^bl6Yp`B
%];:Hq?O.,VJVBcdi*1YIAAqGuid!opKh"5:gSOT%:/I%VKHITc[/?Dc[6B[@i&JG[BgJH['I$\2QHQ,+&*P:]#B\Ne5Q[8A@ndBh
%DC(FK1RCM_:F2MGl[&$LIcFCsSp9^'S"BQ.Ib"lG<dP$2ZZ1lP2X*2:nC_dS:@T%Q1Q!AeGRRr0,eG'Gl0ET+Pi`cm<Z0#dE&K'`
%cK9-*h1*0m2@a77[io@;hH(J[-c&K9[Q/p@F?^b3V82"8VcQD%:sN$j"u82L'G?II_BijL[%VLr'dVR>EYlZh]+buuKZ'@BFmjq[
%CNqD8$f]J$fUjf7nVr3]GW93>od^irJsNDiJ^k,glhL=0"(d''"1=S)PNUGkg^i`AC\"!aBT^$NMB'AX_`>k,!FWZn>V&ZGYks";
%U!T@0Ja=?Ub5i/*[62q_P4EcT!f#_(,,b3#.3Z.l/dO\QgPJgZG!VX%+#mbA>qSiMN<3rfY0EeWW_iaOCNO9ZC(tcO`HnVH(sbR#
%]]r789Fobb&Be!TfFVu7?f8sk]_1drDW<5K:.)\%Gj'ahOF\=s347H?TcKOPe*,&7SKq/p^tW`^M)I#kb!G_SE%DcG3fOPiJS%WV
%>\;DLLh'7jrH>Z,PS>6e?M;A7a0;6W6t5/uKL9-!hFp\sjt4t/B]XF)TbTtj^^IshKi[D4:AVNJ$DLCjeuZcYBrt6WPd;I=cjKd[
%TbTUsX#o8GmB*'LNfL_sW@He2n79M\Jc`n!r)=RP&JQ:6[[j0M1)iN16S%q`!k&<T$9BqoOVLPl"BSDb7msC-*'RU7#!m5k6kN_D
%e'iBW$Mp`=&!-,e@\'U1?DI1e7,+gX[-9hPGlIT$T)?EA&(2B:ejk6"g2nGc!#\L3(kX_@:.%B=Tt/nN!+]@%P:jC;apB.qEn`rQ
%!tc2Ejfrb26sMH;+uYRfd04C8HQN[Fk^^j0oHq`rZ."XOEWRkcb_/^R;)hOM1m.GS+%__"T*/Z=lgOnYSFej%IU:J!d"bf8[Q_X#
%R4mj@qG;U25AY`r@FsfRW8Lf#JBYS,.X9MLhN2!/99ZlHR=$`[7Go;]_O**ePCTh/&fA)^U1l4cfDVqT9@H!>`1n=SA=F(g^nkc1
%cU<1K4%'QfrVCM>/tT^$2usai`\\6]BlkC$E`54F@gtjkbl)7(.L.ISOJ%+AmNo,ZRH+X2l>c1^4^0fRUqh<1\md*J)T=_Z(K9t5
%ePjISQMG!ib-?!0R!$-1kDqKsN*5>%_'._pAP@U@JW_d#SM+U1NIkq8`dPuH&k_AD*7g`rH2?aY!kXRZP9aN5<+%Xu>\Kr$8NV'/
%Jd,TMK-H3TP;9#MS3o.r`0Ym,m(Yb]FTLa/=t#=%S!TjaGdN@DGe;gb0c0"<!8S_ge\,CH1-?]*22:F;97<57f]P5_Qehf<=d3+t
%7iG&SrScO0$cD!?hQ7stG0YQE=11:Tph5uD;oYo@&,lLPO'*PQ6ua4r@g;8Z.ha2Z#AhX?.:WC&6!#,hL^D?&0Eted1K@g![gmCe
%U])NGVq-WY3m$@dXUc^maBb%-Sb8-@#(lf%,6a:CdW@UYVGo\;lfoUF@d$i?8p%^Yn+V??I6PW*"mqiBb#4n%BqR9FJ_V)#O;*::
%17nSYmArk>L6>1"-j@'IbGmb"5PZLj4+l]U2dlDoN]m*QU"mFl$#=U"@_#@JDD?0ap3!Oo_b&nnR[ub*i?WFG#Ef%JLQfdgX:)NP
%*U`"n[Vl50'g.uuUYIPn!06oqXm#Q;*Sntt%Wf/]X^Fb=TOWK1@36PTOoL]rM[g%%cYPo2IGG/kd=L?_B]`Fu+#Ihr)Zi,V8),=:
%D4pqH\"[B7.`_A"-X$AVSRfPo90@)fZD\j`/7Fihe<;H!kDWuH5DqR(6Yi1DfK*+Y)U%_J36;5-8F67"Md3>*NgJhde<aU>"kEkF
%Ikc4Y3dtWY^l1hO6]4`08(dn4E*7kQQm-WDe:aU`j@#=86D';J<mBNICuS2^3.J,U?7q&)K3\e,7MCZH.NF$j`E+T4h(A&B\)SVj
%$)X;DO3h,1#X-Ek\U9"n_p`jq,P8e7QH.%dV+T6]$l6rmdaW'+`,[CJf^71(JaAl&*#Gcj(<ARNjg]gGh>$1R1#6jHn;;oel*W%[
%nWaf\A,e_T:ImfQ$7PgSeM^IX;_)sfgA=+M)!s5AO?s$0pG'<%C04?:QO.5bZuC?2%5O^0G\VqhY<q[op^*Dl)'!`>_9^aRaPbG4
%&c@I0JIE$LG#<dhc%4HSeW.,$aJRQ%2Fgk)fGs`,+6kNR"Ydg?DUa_8<A5R2-q&'W;&+Odp_=dqk(iQ:T>SPCC\!u;<?[;f\ca`.
%^VVpj<Om?U6G&sg<L:0VPCccEoDp0].)W.5ZN=)YT/@i\YCXLQme5]QSn=Ps0CJRbH6jXW%7H'@Iefor7quLUE9YhrSK=a:aIq",
%?)<=eh]GjNP?ar>\_eJTHYY7^_qa^AHDo"-*N+\'5>i/+XRN\irUO!tHpkD6h<^1,TsYeM4Aa8`3a[q%Kf""0f"Lad,QO5i`_r28
%,h-ZTXJ`2b854=/YPq'ePd*RFX-NdB@-gHc"9N'ge;i#e8>+bS^/Xcj;S")1.1JZZ6XSq<\QD#;^hD"CO?I5&FJL7(GL+Tcg,*_*
%`7ELWj%"J.F9F>E#B@L"*s<ct]0!U0%t\u(rh'c'P-Nmb?.fHK\&QC$RNMEP=$?mHDq*T?pj(*+#6B7?S+.K42q3ft!Y4Eo,:FQ,
%+?0Cg5N.5kXYo=LI'E*+p^62hrkhG6#c2TF0-18#Ak&4upiS)q+s(pU8EK%BFX`ErZ3g^sTqVZ2Q##tl3QkcL6Fo@E]7&r/O=NS.
%aW!KMq&f[*-#Wd'jb&)p^iDAa\FMq18G6eHT]LO'E/afE2]3#s!=(Q6I*Si(\_9Wm<.gpX;f/=Z._4>c&&NtFmTqMj_JsV,G#87,
%UVRise_fE`+Q/qO(?\otElYD-3TPGc!hal?ClZsXkYo8%n"["@rqj+VJTtn='`tQeC_]o6jZ_J_aMD['G^8Mja,*b)Zs)%08e4ZL
%GBY1$UZD"%9(Us$o)ERKji\]G"3@:j>CqO'm-b$*E$3c[GXV`2Y&kphR_Hqj3$MbM3!rNQ[A.+V4bT)rEU_&>&:lX7OX!2:4G;`W
%0`@":`t<ku_^L<K;(fT=SZlbd5Y$L?;e]h$!PB@nPSM@uTGSY+UpoXDKdph9=W$re66QE*XI=EZ7m-<2quW[JWn9l0*oYJh@PA'!
%h#5A^aT0:T\L>.7C+8+TD\jaVq$oMf-ho3;q!BIHK(YeR;WRncFe%B>!M^rms6b75mlJ9l]3NFJ91"L!1'UAGOpuYp_EQ+A!!@Ol
%+B?"L'4_:Hbc+WYE(P;U::3DYqR?g8'&\>-<I&3qguIjM5,(:K:6(*iF4j+kh?/7X:7sn(g7V^bPT,pCLL>]em[j)kgFmiWrmEAH
%ELi7fZe.jd91#Xfp`"s*]?i*X.`XoTk$EYficdCuD1[#>Mk69MK[>8V!m%Hj$)%G7"BoTA?:*kk"MoG#r1eF:1I9MH/Wba>M&3CU
%he(3DK'<V-lYbk(Yl?\!lCmu[Q/c;"hhNAq,6LDIWZo+5$5o'&mE[bRK"W%ckWs9Mp/Qo>>+kg5/26ke$6h1.Zm`o]:;u_I#Ke)N
%JU&UJnkS*o/bIaU"gQMj%[Hq+Fh.`cg3O:SjFpM51/PXqeu2pEF:/UOQ!^S<_:'uTLuMUg$_D70pN<W-^#8,j*ccq*dA=Cj+]jV?
%JV3f@Mranl*KTlm(MZVY%)OQ68$kXkH0U*$mj"Z-0DKl9H>+P?;fm%F^&*f<_Ou<EW>@jo)Z+oC*l+JWc=?c4^.q>o_Ylp"BLI/g
%$"Z>EN'H%8rR!#DUg)c>p6/?S8@lY1Ap*c5NPdI+!9*2EWd;KQ+k<P.n;uj%.O-hYQZ(Fo+M=h4+4pS0$c-#s$_D6e]Rr--`P^=p
%^!HpM#Y3mp!GiRp&=#g@KUT0?STpup3:e(+l8:OuP1H[fVHCU$<)G?9</D$a:rEVLiiV]&m[A&#$C-7XSc."r&p35DDoDRATIVn@
%ieJ11<,:lV'0T19m17tb'[d4l&Ynj?5@!c,4NoYUE4fPa+rHX?"Vd/W>%8M;\ak1TQ>&RH9M-CeVt4q2S<)9^k?q9,,qnHh+5XcE
%Iqq.d:ZWRV9[O)YqD*gk+kY)W@rh=2!)5=3PEj\=n-!VSqdAR_Ub#LeK6[,)k)e\DI+j[A^fksW'b9Ec?YUSH4C/6D'8$J][.PHe
%D7VNtRl;i>d;?HN6AJaHIRLY[>\(U;SIqkZNfU0l=m8$f.,3EBnn>EJLr:'r7e4s+qje<V/7C^9TUU[LHJ%8"Qah]FG6?gC%\Rrd
%"pSa3jIKq9Y5HB;UW*D?FI[t$)eut(:(h</HXc"8SpnYUCT'hg:uWU'5S;UEI["7Z=Yn:50]'tp"ghFEA4@E!!\:f8juHf4fC$@q
%r].B?kNLc`-1fG3-fe'0=UN7J>YI*(/^V.5gIZ\er:;>!(5@+p+HJ?ofH-/P*a%e0`>$.bFrq.MDM^mlP9#]a[ShDJW(LjV\Wt=$
%(*;S;8pW!&\_d+nW*-M-9rE@Y^Z;3+_,^`1\;MW#>g1=Zn<j>MW&oM60Y5:L/7.b$S]=tU:N88R,67lrJ=O1?a.[+-Knj<k&GN"d
%Z<INUb/"2n\I*G[bDPfgEa\%63.ppadjmYKMR5?*6HTG\3g\GG*(O1?g[g20]#c%WY4/3K(*mGO7jBSo7c=\gk1Q.WdUH=C?AD*o
%A1K]5RNj!,I#t4nKNP!oi&FZ$O0m!&-nel%"j=9jp3md5Jn,<\=obOa'+Q)oK#W)=79WZS%<sVdYsH[.S^IYb%7:/&5fb(FBl`@V
%+tYpSalQ?aW)*-<F+9S?hh*cc>7T'i7oqH._AlQ"Es-;oruTnb>9tQ<U#E8VTWg47*1tMnX[f%$+rHCFm#b"GPplYb!m,Cd0Eb=j
%drd*/:9T_p4E$O.&XtV\;'Zs8keb/@iInl"RFRF[6"7+M,9Ar_-hn@i(WjIHF4q.7bBDhWp7dTCPEE:O^63mE^qKhU.m5.FdWAtD
%\k?m[_!MG>B-<<D,!?"/ZHW\r5+tIh:`cOmYoHb.X23=b@tm7G-bSa3<NYO`J:<WK\$QqpqSdGFS'XY;qSc+-7nJ9,)#\>Mrm4u-
%e;JY;)fBD^#&2_L^TA88%FZsoia(i\OOGV@C%,L8Cm9d9854gl6o:h#AcmFnTTQ]J6BJ_o@9fV7Q-(QX-%(:hR)Mg2+5UFT&Q:7_
%Yu>=&c<ViC3u9g]0DMlAgI.N+crm<'o0=Q2?'!SLH?Y_lh3Xs(oE,NbcMOl8pqP&H;koX77ENHFX>d1e9Pq)+ocg.Ck#q4(([t's
%=2$blSW2S])?7R*WqMnN0R%rcG$mQ0eLs]fb1JrE"`_$<mU$-_I7,c&OBN.5Y+V`TGL`"bmEp6>.Z5qCH5(3Tq[+k19M"JTgk\Oe
%aC>M#3,M\bcj2te%VRb5pI`'_7fi;<moiET/*l1*^l,(_`2CEgKtr`>#JJ=$rEqZN7"qf$T2dkAc_?0h`Tg)SVnrqjh"N>rqY=;o
%'0FN:idI'r)l"=Weg=t%EgRdRT[]C.Q$U86#4o=<+%4_g_7:7H9*3der."=05LMl'oVQ1soYrL"KAQ6:gAgAt]Khhb*A(<.MW2mZ
%40D;)^$FO)k*9q!1$jn^hQ/Y:]IGk0ksVB")0^GaYdtX3`@**kJPnmb-&96UOgj%(FXIQ&K3(%i)V#)%^Y>ToPD`m)4;+:\$K>p6
%ZIrMKQPeH<7<4UG4k2!!GgogO1\Irkk2h&mnh*&cg"i[aan7S$1MQVNS`ht2[2sa)WHRCp2eK9O&Foho6Q[-rPALra62!!+2oLiH
%QVVLc(Vn8\h4pF*TBhj<ajY9Siug8+*?N.2?)RtZ17MY6e[kqZAae7@-k@5Fs&<e[I;R8YfFj)T)S<LtIWA;[jManI9%9$oPD^&W
%OZ^d7=[0ADWFG+I(F=Vrjnn3V-%s7A19Gt%67WZ^PdT@:8WbJ^<!KsFfSpCm!%]='9Ed]Tq/#E$hN^hG97aqO*/K1l<.dhD+aRu>
%!1J^@"McW2LV[GG(Cl@Rg5tp21)5@kW`l,M1E;S0h`0LZnTZ+&Ls&KJiet[Ar")/Nq.ReZ/u%i)`Ifo!>?0:77[Wu@^_aJaQQ!qS
%3InA6;7+E$op=kqp``1S7HnfB,_J-SG-jL'`=Z4GkP9&[*dH/20j^V`'UCX]O-Ec^^(HXKL8-.K"[;Wil?[\+#`87PJKk\g?jM4O
%@A/d4(aCaAS,QB_HQNTA-2%^L:8B!([K@8K`s_ucAt2bWc;sTa!BTdlNflQ@lLLOA>[fZf1BQSX(J74e-[eC.0G)GepWkZ9k6-S*
%W!LtLnO@LHFLOc*l#_Cp,jnPM2@J-h>iZ#*g%_9sJ*'$D41#!Rh"5HM[ONbec495^70lL?$@u<kYD`7PC9\k#s1sa3WE;B7;agd'
%7^M1'crOSah^[u$)XF#T6Ln/0pP)X,A3&qP!,Qd?n:]A(3!:?o6Fjeg,uc1=nD-6T[u"JY%;noip0k]BCsq>15XncrXSul%E@SH6
%^^nu2$SdP(M-^>_Ku\a^pDV9gKNtI@P%UGApBs7ZiDJ2;-NTJkaj$s;A`+8M[S`T4e34#+mi"5YPpX0E10E;H9p.[mkaI!t-et//
%kBpc;4#EWG"I7Z*>!'YUh+0VaBUsot]V,Z6jSKST0D*-=hR\(9MgrC"fg=;<Inj`R<uY!?4b;V`idh@+c7!5LkO(EaZkY(^!Ar4Y
%NiYe134K@)<#j;A3=^-H\pYm/YVF$=DM2&k7+NGL#U%T^`DMXbS9!)2Y8T7W\B2b#3'\c:e._no)kUj@_2*a,[mQ0PhMA]<@#f>=
%C,mtn/r.j_>n35a$pM'V3`]CB)_nYK'GXgE7Z#KDXSSg:J[H\pf'0Z"LO`8:DDAgR0pY(=Q:_Zs1IO<eQIa[fFX$eM7/GMlj@WeZ
%f89,am6lPT%-T0eXcC!"Rg=PR!U-OB?VF:Y`+u@Hd2sC<rpG>/.sg`8!r*<*9kCu3PkI_+"F*I&k],AKLEDfTM?30#][Yt!<h.Gc
%rQ`&?*jqkpHa=!$Ir]qcXE_'X>l#2"hXgS0SV1'@*4uV$&(N23l)WtX_-;SBmf2kUnZDdd:hg'IJ&A0OnEW#`rT0#c:V;b7K"(%X
%^%];jP`oEF:.3R1KQi6D`.Wf8N^9/q%/Zuh"cpIK]CYr?lM9JWo1-gd%s[R3&FK.#'YL*568Y5F`(\T06rU'q4JaqI2YA,15_=uS
%!^qN`jesG;AC5b`&X51C'1jVR.*GIjX]C[@*+K8ULE;ZqR8U#_^j_[!@u$_a!>J%HUB-MYGs"heE>=duB&jX.b:o!Q:)(p&.2+R*
%oRMU&`0:h.@QJ(N),&(&5lchL<<ob(!LmW8-?HD"2DH=!!L^0`Jf4?PLiZ*4pb8"%JjVH4+c?T6%[8eZ9<k%Lih/n43?T)9RX&EU
%)nJ,KTp.90b-7+n!qR7?h]!.0(^Iu'(7@YrZ1auf:]]p(MLLf2BN>-?(;N*i#h$:s=drCUF-8,j4JpdB[)n7-EAG((5`u:)Nss/j
%M_`,C9X#oY;<F!,R:&l=UQYV=H-:T-AA:pF*K_NZ%J:!]Bsf3/Jk1TlRE)6,;*&IiLk@+n4Ap;I0[W^p%%7#C/1!!27T9B-ee<Rm
%&.DC-7K!lc90f3P@K>Va-2j#>Ve!RlYrJ_.PZ66%PY>L00[U.]6<&D3+9O*.U1b*pH.L!"#1:"SK-Un.f]TUB98:8LbqN*6_^#=P
%Wt,B_C.,n$#&Hkg6:qDQ/:c[15Qnb);?.S;K4lj4@;N1_o;GQFX,e_+.B\/"L55W(&<,Wm!b(@6NCQDH&iYEpB*BmL%L-LoYEV?k
%h1Ia:.>YiD$DJ,u71Ei5886C"@KK0d!,2Hs`V#;7Dc/5'+>V:.UVa:C5U[6V#GSY%SN-\IZ!W-?KYBM0d\9bG)Pj)P?`N-O)]NL.
%>u#&RS5ttg4U>Oj6jWmjD@*F<+Y71).D;6J3\@JUXb>7qBiT*uZlY=YqU6Qi/YrNUb%p@+[)s&4MC;3?Bm%`5ltS6W.&f<X/P-Sh
%BTb/C>-(?AA5m"=>'gu]Rag&g9%"t&26%orOpYnq91jKJ%oIpZGtm6t.\.cYR=\j4>\uo%)i^<1:(cb0/?M%/DpfPH9o>jD)FU!c
%BaV-9S5/;LBnAh=eVs'tZoLKWTLf%j@?q+kn1&jVd3\j<!d^oKHdXSrUE.3.*-eiK5deR,p`W6n;#jd>=Xd.6VV!"_M0(o^WR#Q!
%5Z*793D.$%cP.#9V5-dD!JBCS'1//74jXHgJ!(,<4c%QYC+p<_qM`ITW]<CJ&j30]$3+&@:9$G,7RU/5BSO_S]K2nm$6b.[UpB9;
%RF6>^=CWe:rX=E9UHGY2W[Y4lVI<-9'Tlnj1PH$S<aCkC%"hH"0o-^'BF6PI:fYFR<b.?p6=n51"4lbE`Z=i9+g"dfmgL)@GclrB
%Jhi%IPtBAq+\4Yo5%<A[W6'SoKHs*aVcAgPd>DF1S0A00;q,_@r>!jK&i*;g+prGR0M"$P,k;tUW$KN-ob:M5H,L58P7T!*<?JIf
%JhdO4OtN';&.4[0U-:t0,r%gm/d51CP(lcd05?NCnRiDF!,)Wm04BPJ/;RK8e!MQq-8?'@IcE-dGtOc.(f(.;W,rOR9&X)VTCJ#9
%g&]64-6?^uRU7bN89-F0&r*9K@8Dl"<Vo]FYCf\G#!-0rq5);iFBnho/!"qXM$+iBR\bg"b,A3kFBD"p).Yk.3b=1HIl(8t.Yd$l
%H,L>I@Q8ofO%DcnWNYj/L.k)G:a@g(3bB*%X,.)s5ds>ta]b`#!YWj/qE\/S<0<]thFH+=+AN:&Ps1TY..LJ2Zs#mHd0gKhP0%of
%'df#Ob%esZ;tQ?o9bdsP7:/fIC9o^r^76J/N/";3j\[9lE!_)u[DG1[Y(6dU8r<$<s,*h6Kn_qC[Y^/6_[&g/:t33XocpRAd?r?O
%(e%7uP0u0Q78lfWpbe-u5%PG?N2Fa]jXh]T8n*qc6NB]U=CrhQ7r%uU&OhibdOM*g.8n<@XD5sn%<YoUOHTgE!&PZ%<F\c8R)/hY
%""6=(eB"<:B4P$4ccF%4d9%_/o0d)VU=AcWg/j^HUU<F0KPPm97ZQKk"9hV;5f#:=nuQ4rWu.anY"Y@m6(84$c0,eJ;Hj#U5/`<J
%WjP#3jae7q1D;.eX2^9TAuTMR8.\FZJf.4\Q@;_!V:jfA84B?VQq,E_TFKU#+\t?9$d^G;!]%8,1.af=K<WZqJX#RgV5n_NES]hd
%$4]r1NdXq8BV!67j()%k>r5BHGuX((4O@E1N91:AT'5(q"];fdg?o[Zd2ZON9_gBE6.fhprC)8G+(Z9OU-O!H.@@rlLO^fubQpd\
%^19BXU*-a:9F*C9X1/FkEHFNDL.*@"grVAREZhGJ('6?#1b`E-..aCY"tJ-B>uK*YKF!,@)Cg^:oMR@f^d'$f+V<fJ88nh[=98d=
%!IF?+"")^aW1a@%;ag_40EZKE[tOm(&>hDm;nNI8aJ9up1lkD#7jlQTPNL7a)dANWn%jh^g"FpV8HZct%K!4[+:8NT;.+C"6Blmn
%)ns_gH\nK*)l#R&mo^VS>;LF9'1-5lKs57CSOWfS0`\YjE<E2MJJ9J"5njtZ^m#FC#\FWJj-9f=$5tXrfk2?]Z:RU)3$9!2&$ulo
%JUQZWP6<*f8MEu)3.'_\,k;L=A2f;KElo9:(Eh'9X8meUODMkU$'>dq,S+SHSBPc>9J%M.N0:spbSZ3^b!Z_9+DiqaYU^PA"K#T_
%Se>G,:e$,36=)Mh$H<DND[ZhJ63"q+&K(E(^Tg$baT('u+<"Y'+rV&O#/pP]"Y"tOFBjn/@$S\1hZa6uJH$'U5mli5THF?t*u,K#
%!3@\C8.RM(jY1!H4g#\QUd6iHSJFAQ@3/!>$jBin?:[LR_:6dbDF8pc+]#pB,=mBaNuB;o<_*Bk&C!G>JLoi51l,fFBKfUB",mQo
%,+&c[?RefAH"<K\B=RM',(h^%WjeK`[(%5q_iBT_P#R6N!2u9`i$$?\/Sg^^%Wbp_O9X]0<;]]dOk(R7Jk.=[8nea/icVWt+=^nm
%h:iJuL]Yqp0d8Y>84>lGlF'0NTHQ"kQi`pqV!Z0`6JAT&A:S>eVIG4W0H=pSLC1Z@?rTOTng,`\7LCT*g'/?ZNM#5^5^UAUd01.s
%JO5$o$6Y$:#h:U\:5B&$W-`qbOH<Y3M@n8ZU&n/`dA'8/>D$V8>*+j"2DlV5%O=pPBapfU#Z6s&\nt@T5S_)bPpea3,*V:7Zp\^C
%#_c@5R&7f])An^35?'r6Za,@d`Sr3.X_?ff_l*_HV3FJD1I[Wq&?7fLLt6]PUl_65V@kl"8G`NWFO<Ns'rD^<TY5a/UJ-02D!b/p
%&Sd79,rP5HS0Hp:$6ZH5@()q'FIX6kKI`Z]YsTE1pddi#W>[`:9V_eW&?1>lPgWO@Pm/C#PkZ@6#,83r)+/Y1W,@l0&8#.$W-'L:
%8B_W"Y<J0%W6Q81[Ru1O@7A<Ph,4ZU@u]t_c_RO$.j/,%'aR6%JInt6+[PB?&Hef&PTY9D:hMh7-=>_V+G#Cm9_0=)O;o5C,`i!Z
%$:MkPi!prZ7NcfKOP50[6^:@a7,]C+Lnh1Y/"mB,'TE?AFAhjtTTLWiJ`nLQXindB&j1WA&1+15Fcf!^ALnJDBLYg6Qj+^&dd"=i
%&6+CQ/f>A)V\)uF`Y9.&Vnpf7R,WWh;8Z7f.uMf0'VRn7#@W`]70k>/7\U3(0Mt2t"VDoT8/d$aU10[VMBjGI/</+XTMSf,WA5WP
%9;Q`+8W&fPmg1(5/.iW/J0/@q8JU15I_Qe+Ul-2gs4[@=*_gZ"^&%g.+8V_,;TXtnP46QtG(Ep-?j#FP)Zsar)fSI$8Fh*,]do<:
%nO*M\B<&PDVal&/ou9qHi)aMGa9Y7sF-5+gag[(]9&,55f`FR<aF]4c6Y;#TY9EC*&f2_\$"Ak7Fr3GOE#MV/llTb/FZ-u3L$0*9
%>N7N8JC@O!,*Fc&nB#)rM.s.P)+][BZ6W]kQ+_#b8;e*)4Q7fc4]>ps7>N7$:b^9o8H-r+f,#I4/eBJK>mlOrORS(0&GQ8T7Y%79
%_q)t!SJE+0-"KSh$Z`%\BY$I7JJ!Q;^a2P-KJGpS-,b>/\>$!g0-HE$do,(-ru^nH&r<"Y*^SRD,%\C-*DlbY5lB1HrI]oAm2a,A
%(<#Tq_-KS3hWLYP&2=L9@Mg4cL?lhH6JOBh(K0VK*/;uCa-#@<PSm;i+bc@T4A?5kS'+VE^n6Y#Ku4H2L\2Jcn;U\-)Bj%X0SCK2
%?eT'>$PibehY_LW$lo=#&?Z)NIpATh7Nrs40]HfenF.+f!e*K$.^O.2H$B^"qVa$um8rF%Pf,L/4oBpRr]q(p+9ind6+Z&=r.>i*
%jMO4Gi?'>,Qhg+]1<@?tkU6:\?5?/s-6KBV*[69ZQ"uIh$7ug53r3<(Tk+WU`Lcf?@a\,$h@7kc5,3bW7tV*K`:Ai-P!erCfZ.6M
%Zk_"86.A7mU%TH-!J\sq@%ms)p#%F?E\qs$16E:<$,dK$3nQiH+VT[[>e=%EE%)D*S;M1eU,G7Z,&O-b'.nhMJY/&]'RbjBJ07&'
%?''Jl,T%+Qs+kY'A5C"i;FG>6:ldRS.7A\2<N66JiW2&?d>6q'#Xu\Uib&CVKl//egX7_dO%B:8Rp<0X'2nFPL*9/1LsAJFG(ZpF
%,p:Q"M1VF`Kk?j6"=-)=&=c8u89?%iNlE:6JBB%qJ&YB1@p/o\'9Sq>icJ-cdW($da[i]r'\WE':P7J_#.3`[8+BE3W'mkB"I&RE
%)\0l@^bLLBqT_lZ]A5Eq8`k3bi6!?HOXqn#W^qc"h573b6SKiR%Ub\ZBm(09k[Mm0FER^Al43UY>_'2&N`F@9$UuiBVqNJNr_jIr
%s/?lZ.%BoA#+q"qI4,VCi^K1SCR[LV"h\+DK1C^pMFt,fZuLC0'n*Oe:#U#nPeDp23X#in*sINW<"]n8#l<N(+@CEV&fc\pZ.$1H
%!#)qWc>G8MFS@,7pXL:+-t+JO@$D@nF1DhFe3m]4m-NtZ3i!ET@>\I?Um&iMXdedp0S;e23-(#UD$#20Em94IP[Ni!aUsHHXcPZ'
%oT^34U+V/^8#)bcqN.Z,!&9F3deqZ]0l^VQ*YQL`N`h&78JJQ\&_ZuD$.4puf,7m*Ktq1i51ij7m7u0lQNhVaQpkI,eu2$bYt1U\
%8C/RMjI)8K/B3doXpcUbZ4#Y"@hu$\%9aGh#)LbqP@573M+se20>\GE"%3!jrZSYt@1Zlc*3KQV#I+?<MGBsPWb2nd>*RUHMG,9:
%8C6j<1d?(J'#]JM8l;c;s!+4:bKPpL6:k^r9!/ImPbaCSeYbZ5b;N4S#geZ$.OYKDEpcDhjBCX/TBg6f(]d<Mh$c!NE&Ai4R]Y@$
%!Js#"I\_ek5,-%0-+eDX9_?@(8T)<AeT`;FnG/W;#^Ej'.F^K>l%^e;_\GbJLF^d[M[b-F+u0%875Ef=($X\7A<C4SE7)F@L:4S5
%c,OJINo"i*J,S#le=ELU`"QDdbnqhMeF(G:l-r&s5=D]Sfql)0eNA(*]YXS"J01Eo_roDX*uiFJFbF?VF9$B7kEHff2"l<P>6A;5
%#T6Q]:Vm?h*Bu8Jd3J"i3t^?<Y/Gup;Sjq_i;W_"s8:mf5Q'7XJ,cDs+5fkBs5A`_q;^pnpjX+L1h4;tm]V-:nNR0P:[c$.4Po3F
%G#.f"hgKS:j"[1:/@N)^q>:4Xj_\mDAL&II2"7Kjhm:Y#Nn1<mI(2?)H;_Zjl:I/#n^K(-L6_B2_lC;!@APP=cIJoKr7=Wnr^i<m
%NYFH[Vk+jNr2d-"6+,U!g=e.i3KJ17=)Z!ho4[pA@X]a5]A\tN@*$EDDk+,Ij6XL%b4>>'.H=oDS?f$(Eh/d*#"QOK5@nY>`A-ca
%+*M4l]t.WPUBe*M'1udTqdP$=liq)so*2j>de]k8g3'+C]k+n3R5#uWJ!"HVO$Lp6dRbdgYPTC';D?F#_d!Q2=dqOrV*"%/e'pQq
%RWpLU!N/\0gc@S+/Er;:RnqaLORcnOdc0k@jlp`#29p)SRp51qEf<+/3+4i+gqJ$Mc;0n59S_so@7^uPF`J7"ecYcXT<MSn;<K[Z
%'d%R0mBS&hWu<IHg7-maQ5!u@eBPa=V64E3FCQj/e^h[i>@pjQ11#`(^bn^,1;#rV85[?s:6Ll8!$dKlW<8b8L67[P.&.uPO_j6u
%7^QT5ARF+)JPNRtJ-B0d(hl,ADdO#.qmujgZ(/&'"4']oJ!5Te4G#ii8)J,1"Ye@;-#\AeQ6;3mq:PhjZHfgN^rV%9,J=:!"bNm^
%`so1`6*/"P\2dL+17$bB)F0=jDO.KGpYo[E<SNeXB)4PY=PZtT<o3bMdP_7k)f0tjdI)F5<B!.ZCA'j,Wgb)IW87D#Zg.E=eu8J]
%=Bq1hh$5jcpOs..I:WP0?X%4ZIUFeTV7%N]=B3<T<hnV'X/NPPL`.nM<UJ4KZ+rsmSd8:1:S08dnVGMjGedL2B:OhaXK(;P1S'],
%bc96u=JOCHA)/\??$&Wf)IZ"87N"Lod5G1A#+-o_Lchm+\i[-Z$Yt7SD,7T-Y`Jrch83!WV>SZ>3DDq6*92c%[M$,DA%SN[S!&Rn
%\>lBoo]K:(IE,7MRjulC.UPpBq(;/S@OUP@HLUdC_MZ?c>5%#5+.GGcX#it$&sbET9AMbQXNq4M/bLLCFGXMu3nP2se+auGX2o?k
%s2OXXEKac5P$\,#RJC[F@m;gp?a(SPhT('K%X\&$?LdqrA\Tkbl=oohEL1L<\@d.S>JaQol2h?Z!5&RbfX[rT/MK*Q1E\W["=W+p
%JX:j#Chmtj7?^f*4*(`u6W<<O_J5K,/.1aUVk^q^UT8ZZ+YA%e@=d]h;+3<,p$B`/Q^+qC[B\=P'm3s[l78o7#K+9-a$Sjt&p_L"
%XNXrJ>`J$ZG[`),UOhEG+S#Cm(rQUT>4:F4m,>7\,l%l,U234[e'LaO9KR=f:p1Z9*,5GDJqW22JFe[AcFI<cA,>:1fGrhgjNWgb
%(LbSNUNi1Qa=Nf*SP3sZ(RI,^]ZdrIndI:D3I`$<-XAeDhlt!mN:Ta].o2D7n3e/W_Js,E'kIDM\<Y83'*8pqaqkqhE6n:h;]6%I
%Eb:;u1McV_ZPV5]--kZW!Z(]kL:gK980*5+mir-)l7cS_Kgir3OMSt2T]AXn=87AH&:uKC_#`mpD]S6o?XS^7ou0kJ>m&B!Z'7@D
%MM)W!M_9niRaPg[,CY1m$Pki,TD!W'Q51XP.-DT]1HM-7k"5&0<6X6(cKMUSqL99Q21r+m"@L;sX&/&Y>Zt]"=jg4-p:JK]f#3+u
%!AqDrYfKfg'?a2"GPQ,YO<?..*R_>-,q53+'RY0Z:n;m$@+(,DhuXPC=p='mC*r"NZAdei<Z$po!u(`EOd`q@FV\UMFi;R>pGB?N
%*g<sHRhh[Fc&alXcNegQWMq)BiuL4fgeb=JH4QSjR2th=4^O<-UJ!aWBEHNW$^uUg&P%2%(t%;m44X[0]*C0O*A3"_L6P%tOX&c1
%F&PW46>1RFqluO'+)tqhJ$4X!(X:sIRH!5\R%>##MAYtK8Fj`;)b:<;6#nIDnTs_ReVp?H[*+fJ@mP=Dj[+b+@<0sgMog\3*V]b2
%:b+iS,o;?A):YXZmB,jI^<]NG4&j8tT6#c"j1WaK93YO8KNh+@BFf"n1Qj\-RI]qR9Q[\AR"itm1OO2j@;]d6Xe]8'b5tPi:QR.e
%QQ)5RmYb`!2%^i6\\5(c`Z+SlCf$3)&:Pd>ha!F9`Z.g:Nkghgc?YVrF$fkW/H2UXL7":=QD*Dt.<)c.AXG]nZ^bG*#q@?0*0M'K
%'V&GX>6M;hHiXh$/-H\K9G.LoJE<Rb@-]1@Kq+\LH9p6Tig9i`p!C:ak_'d9TXVgu8[DpX9_O;.%%Lq=0[6pPodFo+`cJ2TH"p:P
%&5tE@8K5m9>1sH2J)A-uO"DSQ)8.C")qkc11S6>pkS(_nP89&5j`;(\AcF)Qh<2_1=M4=r5m'sLgDIfEoK)#J_91)l%4?cpoCl'a
%#(Il*-%*IO#*H[a7,M2tV[t!K!>]4'hO-L4?R-??Tlsa:R&5!uHcq:HhZBGm@bCt.:!J&ITQgA^Lo7f?d6t&<,\q/CZG^nf+0Wul
%SAZ\d;bT_[>>,tA!n#5GeVT#*dZ`3b1>e?[FU7&Gln_blZ;t&L8^nsB&J\&PW<TiKTPQF\@+N+Rd!fu!(+_OFDd"1^MVkd'&FAtk
%b&*1'[^%slb6#rVreL1dU?(Z;.G(P$&J^jT#cKA;M^nQr9WBVS/OE9WKj$Hh8'8B`/jrp?pFc]6;e=SfjXN>8!GXk0]B@=_,o&/f
%'IkAf=CT_+5VI;Jq9XjF,f56%F<h"=;Cq1/1L)]c\NRD*&iT"m/u'W3D4>X"TCuq@l`QiDGUS^5oM-aI4#.k'AA-Xu:dcM3OL0PJ
%75Bl7W=Zmbes#&\&A`<aoE('rZL%QUX2"b/6@l$;(3cKQ+DP<i/=b^bGQM">E#u9'XB4sbSe#@V+aX!_R(pXd#>F[.Pm,#D!jl?n
%>X:Q,4CkB[nT>urCf(FfiM(#*CJG4/i'N)4'%Nq<=@<5>\WV+gUn+PE0+Rr%=e+U:dT6%J76Sn`2_mjC(;sBtEp:kCF<f$2?Eh1s
%RZ"dSR`k1u7ZbKA0dWAeJ*$;hX?G]dB(2T2;Y;m^^e..PYi9[GSZqIWB.(A0_O1IHXXf&n+rC`^\M!<.jpK/\#Y&W=>J7fU[&@OJ
%`]MeLD_Zj%CAJiR5`oo.g7)\--oUnRUT@s6[ElnQSnMGa%F;)2i;(HS?C:!KZ'qL6(q0#J4*Sj$+c(Sj"c@aPQV5Nd9>]a$G$dpj
%)O@_<rUOP<l#LF!&G2;BbMSH"M?"0:Q&!*]K+#DK^P[Y5]QB2e.gB7CN<h/*&)WYUh04R/LZ=8B+*UsUnF+897?K7j\:W@2jCe!q
%klD*"X/0.jPQKLSl\0#<rsH4L^`ouo7`DH)MP7Ee#c7d6JGAnTdd!Q9gfD:+Qo_2h</<+TjNm+MPDWh.8AE\J75=:1aT?#aaC2/:
%lCj@TP\(Vp*t^N('l<`EJA6uOW%b@Q.=sA]&1M*:^+"Tr_(]9@-MEh_drK%P[[2D^5V:h@@-HIH=m3_Co*?(ld(p_kZ0@>Oc6-)d
%!2R[1#a-TM!;iQk7)X>c8-HFskjTdU?Xd:k&=Wl3@anckN#5hTED=is:tHEN'r_RW!_T(1Wi5]#;G%M4EsXU$hIGnKoK$ELRKW%/
%J>)k\!gucj?7cda<VaSEVrkq/UfiTA6e!5,DBm0i723#CoM$1KO,4"3&b(!qf_Q?J,=lKfM?2[@D?Xb;e9-M>8a3n/Jn"X?\3bU"
%AW^,HCqlg.r'GCN(SNF%FgNN$>r$d5/fHBQMS8Z"Y_BnS(?9e`TH5VB!?#H_fJuNGoJ#lclC`b[#hQ6*OC1EGP:3Q12&8pD!\'1@
%LHsH$"goVj0[[F"/a7fL;gWE.+UEafMt[PAT-X::$arm=V^P:oCe.ni\,/p[d*3.mUY,Z`DGZgO5L@r6?QH$Bga`Gh,e=_:dY%j"
%TaDWdSA[d-o1q(c#k0X,r=MjLH0(])Mg#Xs/c7.TT_Ua"Il&L<d*7ZiHqZU!'OO,&P9]+CXn.3f7:\TJQuorYrfc)Z3_h(R,9-T.
%FQ3-4JaT.]XojE-1\)rc!:n9hShc6*(U'Z;PT_X">\_2Yh\buu+\YGV"P?Gg\?\)26<mtp;jI-s!6.RXg6kUR7XSOX=]c\L/Eg'9
%X?*+#U(0e^<uRb5)=]O>8.34-,tCM<,b?LlM9_TtXLPF+=3:u',-KcQ%O=NCUV-=B-WE\TF>'kKcilir9aHW_`2PUbb74YZ`5K-;
%&G0=<KNZY47<WSVeHH]g((QGmq.,/Er[Rt(jJ]9t7<]N<o9VJETX.5FF2,Mejh80q\.(X3[P7[/?7j`D71M6fr2'<qA/*G-"i(l(
%4S7<3>adq+(kUV[]u;t;XKZY#pUM8KZ=#[8^B4ENFAW?W_%.%m#(=X!j5.Yg_me_Xnnh6*MrNuVLW^,j4C#U0&!nR@/Eu-Bo'g@=
%pp:>%n7hF>_l)VNLJQ+2VhMpA:Wjt"Mke%q?n?h&i,u;,IYQb'X.lspqNhZ<Z>tD&Btq(f/Hc*KB?Yn6!"g>@nZe`=qA=]-CeJ9$
%%cj%(-8pePCmdfqJ5$E%#m=7j/7fGYP6*&DEIn%"d+<tD8XmM6Ar1X^arOAjd_I'_!K801gVS[cVE'SC](dZX_Le`lK=kUY'T)CT
%SS.=sDX%=CC.Yr?%@DD!F;;g'![LN#)#ND]^fi(63&]?G?s6BCFP$bKYeeNf%?W%nfFYK7:\n76cqd,k7W%c6!<L@Wd?<L&T[h0L
%"D1?C"IUM@(BZ+t(/_Gk*G#O(#gjcR:!0>AMeE@gVOO853Xcmn0iSH2Lo5nU;#pQ9aF=BqPLSha!tcRW62)UEXT:MB#.$<dg'#d9
%BHf^fet6%h6eKtH2,b`Z1>7pBLWBHC.u']BNP5"4MLf7afoaKTKJ`i?:dQ,\-EA",.YsjXSA98'2+rMD&;:mN8!XmM?C8H_MM,ro
%@I=TEKf1757d$0V\/3CUjttothGD%cgdm.mc645<LLpa5hG&6^pQt_$4Qd_;*Be=QEe1$;4Qlkt?5Wn&>gi%3ZX'+Eb+`@_oan(U
%!]_H1k036:gU'#XKu;>M("9Hi%-QGG3b+bV5L_8OlphgB9G?YRR+MP[cojM;@"Jq!NG>d#;!Mrhe^>#SL[B&>[Fn%\AT8b14Feo;
%+F*S6Ha-$JNNmoq@E9:&X7>3MI;/:e86GLNG2mU"B7@l)Rr(:*q&qmE*=5u^fa9Q09.,B;a85;0EIZ\i09P^X:=Fgj2KeQd-)J.^
%W2"5p%i6\oA8HX2kZ("$k6@pqX54:"28Q:A94'kjUJFkG((et\T33LT"[L[,!V+_"=@;k#n%&^fLb[_!3DiB?rC=g;5ch<@U8Eab
%<($C*>(gm`j:F^56jb6uRT3lCO&kRM!i-!&<BtIP`h4&H<!l)A$)Pp`ZkWb;H;SC`)!OZq\@U4a'EB1o==$O_e0C?0n_"!,0uST:
%ZpI6<Ve@e_/<0FtJS$pd2fY*0TJS19!E_=92/EC=g&g8BP'(5(A'h%i3XN\;Z/0s3jS&n8Teffjbm$R2_XL119A-#/fc6\a)7lp^
%e.lCE7Jml&%\"_ti6$W#&'eh.&nE7L>5!n9;;dB;(a8+`-G.s,20+BPR5dgoE2ImgY@I3G@kGf"`[?I?>%&oK.h/n.fQ3T"6raRN
%[m?^41A-ICjN&thNCcV,Mhbf:`]Uoa*;8l&H[)SS][bk%][[j(5S%e@Ijf6CrVaLF\%24H88>II,UK&8c0bmpq9;70SoLn0mO,[:
%BF/[KR_2Vb0oR1Pn?HDNG9,D-Y'tp3?q/0<@T:E&Alu.&;_c0nh,Em\@)l%Q<:h,W7@NR"?BZ^?[`A";i<(9hpYL`_+KlnO[s54^
%fe@$$S+`?k"&)F9lK.+V8blV'>3.%&!'!teYagfB<i4%eVL<H=bPfoPWtil!.c@9RjuPk&Y\DC80/.I/X*5&\:"?:l`Qk^0e>liC
%WL)72U0cfr7(k?k2Grq$B.\PcXRQV)RC/nRI@-ZB#RB-l@+I#UnJl5/\l^s9FYRmibf.GuR>WGb8R/?%R^cHHc6P#kn\!sZR^['l
%nF'QLDJh""7D?u>8bQa7<(Pjs$SEcE^=do%B'$+32LXk&jb2..B62u]B<$@59X0es#;^en)ZUPY!gB4&]`#KO2X<BM2OUuDe]i'`
%`V`%TCZ7+KXG%0`=j*>g<7W^oZhh6nb?R,G]K[O+oL'RoB*DnT-%(8(_sH6$TNuSVjb2^O`+a:>X"p3hr*jDZjjDT712SAGpHl>I
%V+o3ECR1(_bLYlF#oFCtXI[T#b/m0TrP-Zg0jk[5b3P$=q8t.JAK;Z!DTX]<LB2?#A6=+5!4r_,TGs6p7<*.&3-dl8D9OGjAY!^+
%^rV%9lX=;!OCdPP$Eu"5h9!o9Sg%3E+U\s&.ca^pUTAj,[S2sMQ7JRoNqMn*#S;0V%R5Z!=G^i/!D\=gCU`bj!1*#2"0R_qI=?Z]
%]<g.E?fr&[SM7;=:+;fUC'pFVAVA<kZJ,6i0^F/oR*Cp'R!$TJc*^b&A_-g2$8u)k?nJ'f\4Zfkfd-VGDA8<M2@A/=]28Rj!Zbde
%<\Xej<K)L^kf1ar]!8Q8H45a4]67:-Y``T(,#pYQ-OuA.iH4o>0\=r+V]l2KWef)*V]mUsl9d&RW'nF)2pYSB*E0'G(f<"c<`"a^
%V,f;PjpKoW#I_53(+97"gn4B`,i:=Q#Crpo@9ALMnE6/(ETM=h>haN-.!kM0@+M5(p%0uCBL]A**qr*`:D6rnY(_Z^&W9O>Z'#:1
%AY6$ahr+7dT#U_VTB`q$HMVd@INkcZnE]r>\$qUJ<g&a-Z!THSSj"r3^&V2fY7&p-5ePO#$_9]@$L;!r`mhIVFcQXOpN-d;-4Z\E
%6[)2PE!i"5*5+\H7Yo:d#YdB?+:#U;#a(Cf6@h<f.;?(S^.mtDJ^CZR!q!$M@WeTFS;aGo3Q-hh>6$cY%n#!%jKV%aT],2T^92PO
%FjY%+6kU^EO;p\Om23,kNf&')H1SCQ.#-AjUPc\qJ@P1@ZnPD>!EQ!AO*JLk$a)eb&Hj1An.>dF?LSO0T0_tRj;Xb=^e8B-8dc<^
%jK2jd^PD+cS5Im).3JYqoS?C7O>=1_$C/\T3)OPeU=pYV[=&EF-*VX9M'XZHEWpF^0CI_qq1!SYZBpn:p]'7PI9QUo!r0:-nLF],
%#qVZk%/PDq'UWWgG]EfDkFVuZh[r,B"):(hZ63KC.=t\OC@^'Y;Bs,c!U>]%?^+"ork(l[2.q`Eq+g52U"_0UdBbg5kB,QjJ7`JD
%Rh/-lkZ!@.LYjB[8_j_:Mhl'3T`TtGJ0h,]cMB.^BJfV#H+J&?6$VT18^aN:&.@WCXJ[WM//fXs/Pm5AMQlHeJ0S2L5O1Ij>_.dR
%V=EpDA^apXk;Pe6a#bk9)Rm3Ig&o^o!'\L*^!f'=[hehV;PX<9+Q12q/59;sZG8(DPn8BnqQ1_TqTL"k)_m/9/Pq6"hCM)k[Xh=E
%\sK]+*i^Up:]o]KW`kMjF>(P\4o$k,aD_UQmn\pMgUdjp5UdmPCu;On9+$J.ieO=JSij]F#_[qWg(-dL6R%%S?]P`?YZ,is7XQ]*
%*#&0S)A(FqpsVICr4+W1Ycl(!n]_rYA[bJk0B4',kL<-O,KZE;Oq_Pt?;5nAa4*-Y0Y\]7>o"%MaGe>@P_Ya(80K#q_NB+/DQ:dp
%_bpkllN,r4*K)MTn,UB7Nt_u/q=ot:+5^!Il40fK(2eNmht1nm!oUE20mG5pCW]?nRou,u+l*0p3P^d%XG>i_eIE_BFNRtn`)S>7
%/6tEs=*P5'K2?&4>`gErJ2ktl+JWrRjjBdj9d?AN$@]#G2!@:\M;_ID0nS[K`o_!5a`37[JC;/Yp%!\sD:Qlf"7@:n//;.A$X5nl
%@8@k^a'`%n9SgY;Ei^H<WlU)JMH%t+3<BfoZNI`L(<oAZJnkp&^#0e3f-'hoJrd,T9Q[,c6Z,,5@BqU(m.<B]$OY>-Keu!&6R4@n
%YUrRr>6o"1=BdVjl%WQL^8O=.!RE;n!8K$B%6::oWQc.p?Kd23LDQD&90&[cdD\CXL-PN*.J^<2PgU>8]VH5fAP;h4Pf3)d//6$U
%A#Y]mV.,?uXK9FaifS(M`r\=C)3/hQa#@t)".COR6"W`;+bn=!&.)&>8"_;bUZRfYEG!@?X>01X`k7'Fq9H(XdR%%GkM%p2g&*#c
%L&"[1Pi^CnTb=3@;somr"Vulq/G`B;!n32]!N-/,rmk`E!e*VIjKHS=ERPHa`]q%W!td17D#s,W3ID_\-B<kD6@nQUcY91_,)B&/
%K`I]&jKIE(JV]Y_]]9bPV][u)ae-s]+[EJHEW<J3q5:qH$93e*JWJJ2(cnDQ6`h#Z"O"gtV&rS2),).Casc1B+)7BDUg'-#$?`s8
%(,LSo,18"bQ3O&n6WlabmU?d<#W2k.\X])j!"(uP`Omo/9EIeIltEYM#ia,f^l"e@VgFL\S<RgqDk[77K-Ho)2`5NfNmRL4Gr!mm
%!$<8_@0</&pd:dI[oc8BJ>$F$*<h/0>WjeE..DK9<A.RT>6dZl5fX*)&X0Ol!8Q(hc-u[fOQ/n9qu]k,&K[;X*gdieOQmpL)BOti
%r<%]$!qC2>NA"]4B7+0S!f5&uN<h]?lNa!^p;;?PqVf1YrGZ,SXss]%V]g<,;S[^Wq\_TQrPV]j%9Pm-e[1t-e>5)sq3;VT/:c8i
%aFJtdnI.8tSij]F#_Zs+'&:0@ht?1>Tto_J0tgd@CpSH?,P64ud/C5#(q(t09)7:@[i/WB@CWljY&J:0h6C,W7q?)<;IgUg4;u+P
%/U]U\V2rkupA#\'am+3-XgTTMl+qCM,hWuNm-[i$&'DfBrTcLX$,:s;q1/m+;JILK?99":JcegnO8J9;$^dc#<UNLE_SSOm_EYoS
%5LL=)\.AHBMa&0<%+'DGcV[#s:li*6=D_FKD.!K`?pnj>G\phVD.!K`?pnj>'MAUH?j(=S6u?=VD.#bK?j(=S6u?<kD.&$nJ,#ji
%KVa1.V14/pJ,#jiKVa/t6hlE]XScP:<8,ZG%1PJuHZ[4#kQpY)Z$G%XL^ipP=tnC4BV]F5Vu=(l()0&\&DX&=DN&a+^>K@.&)2'8
%/MJV'i^bFQIUJ-u&[28F%3h/R"\F`%WDTo,ib`=C:fP@Pjmj/f-TD@I?bhW![Og7Q,IW2ohM1/\ZiS/rriSqP=eG`tgKa?mM_QS/
%o_2okr+0\pC>Z%O>Zg*&:lE^2LtKTVpb2hSk_g;[@oCEqFo1oW?]>5N])#ST?le3?W+-2t??EPp`CG#]?VFc=LNg($0_qQL>sH3d
%q(Q.SWf3;7'gD@D!1kJ?ac@rY&b0?0^9+</,!PF>iJfHcRuPNCGJaf+B>*sYY9le]J2]!1&QKBl%BI'GGLO$YOi&8-K&'FcO,#q$
%!4saH_60c@,@1K$6OU?51/SL7-I1'Z4PD5S3<D'2q=@:n34=F%+J,+J!5tGs^tgcVW^V-TZ;;f7!)GO!oi`4pSEmjD7&V,@,Bj(U
%E362kZp7.n5_Rpg)NNnfJ!\:YRQO3kTI@VKaJ$44!]Z@(oE5Ho]%$;p;ABcO(*@)i^gdNZh5VZ62GGf8O=;)^^+GYXB"j<m4;ff)
%FM/(a&E!HEAggOlar]L<+\_K]0U[qPm;F%r>B0c&/p/U3pO@(\i"*4Po"gMr,iUI'Vfs:Oo$EC)d$UEtBID!9"*J9/2[q$4.ZY5`
%DK470BcM"PrP#o+.I9I;\TKgr7DZsXS$c+F*2H^?*=oM_Rmc0-RHR0j1u)CP1l2OVL?#.N>1dlN'$;N=e%fq3-"Br]dogu^*5F6/
%O`=0Gb@h6s7?l&Z/:tal8Hbf;++?-X'h+F%80ase!cnVW/9TE\kOPM/hfo)2I?s%\-+TVq6J`/7YoOV\*XPbjCgBI@I;$<8K]$b1
%qaLU>k>/p,?TL;Vo0BTsj;:?olKS)Ab=(7d@IK?c>buf'$jf9klY8YgbS(G_od<@MpX72G_gdgi^(:#5"Umuo`Z\U-%Xl%S/1nI5
%I6rK(BE6g40_F,RhHspd"j*R(cfn2JI<;BkZthWiJU#1K@ahJ1`=/h#Ba&2^;?AKYL:Zs"YZ#hf#+;\UAFR?oHq&)e2YeE'<%<!S
%YldYU8D=P5LmT?4WbDlMn@>2cEA_YU.9P!r1NEBoK>H$cT1GNt8^VIFQn$DtAW*O$R:ep=:0"ZO^dZa8RqCoZ1e%&^g+nETaeV<?
%ASd\#=OEYrU7JkD%HU"W$.l^p[Qp)jEu&iJ*o.>=XFHJN+DDlhJJ.T_NrBO3i.+=d;rd3u:kED)(iji1hB@AAGA%n!JL%k]]XJ8o
%%d>blY;WN6,=.1^,uC!7I6S^u7DqnY/9853CF:J]@BTI?_"U2bhIX;%N+:`Qetp*oI4sY#3e,=Yc<\0.9[dWW)=Bq289%hn<!+&J
%o%W(<0n$^'k]LD#_[Z%j?59nIV<[?aINGe@Od?<SDi,OgLq0<%;!1R%n%&9r'Z#lgk]81"3l0Oq:*[FH"3pKb<X4d%af&XP#77FR
%5f4%GdQ(k'/ru0m)%P>J7$Jbn[%98l8a>Q9G_&hK^b977,%<1lo'p++OsUL*!BCi<`DT6)$&_>'_uU>e!f7Vk)t&2sN.@Ub=9B>S
%BuK"018)`/"[GNseFt#XbX`)V'MT;185o_/8KsfOC4m)N,+Vnt&`M]>N$?O5Ib=7E0CG$6#MdM+]'kN<!83Oj=rAZ;KZTG-GaV+2
%Lj,T_2t(p$MUeh-+SI.E+]E:lKGnZrfp>*]P^Q+uiTHX1Yq12-r_SD$(:kBHcW9*u42Z=H>_33V)5%ka+,&jKH(h8D/7m+5oY*Fm
%_@QWEh,;'lMQb[U`-6^86s&c,[-(&%j^+RDJbSlk5DCW^WTRgO'6@)J.^]1ApV2XIPK_Q_I)H*E%f+Uu7Zh?Pj"%K%lrg0qN6`'j
%`E+HKk'WJqpkX?10,d9li6Qii?P*?gD149k7HCd[`<Rq<Z%fI5J*(_iha7o%S;.c<KtcJ^I%MqXQ'%%j=8"`1a:BmE^hiY[6"h<M
%<8#9?(XWa9gi<Vo_m>!gmauCJ%ZT;`Ck$g+N?-HiU*t+EdmkbHN`.h?i2!-:f+7S]"5Vn#\/NnfZ"A1?AZ>1qCVlI2]Y1&e@9Nkf
%%:oQb_pK@%oA#=W*R_:C/=Suk#h.5iEBF?9@7RI(T]8-bn-Kca?59YMZl[Mm`./7eicO>qH,D?Dhif*F3A2GIo/.bWC#u1TW"4cU
%E\PDaU*HDq=)U)g;[*)<4'$CG`?%4SX[l1lk$uIedU-Na2&7#jI;!&<\t2!sAr;UM9i7$_haHjDW2YbCVBeK5n85)f[R.m!p(CD%
%Z>Uo8\X:LT)>KS7E.0r\.QWLD6EcoL=(T>.R:'e29MX1A+dn/mJXPI+-YG8aP^-(E50BV2n6lQ@$KbKLT2(,'A)$?c7*$l+l;_O#
%Guh(r<O$JiFeFoaXK8'?Vtk6j;:jCK9b]s4:jMqN39tT[;i>^cg2]s[0$gdr<`Z9OCSpDtq)Dr'1*i29g3%klF`nO&et]^`S?cDU
%pPKMHZn9L<DQB1RWWSY]$4KqtZTIN=POuFs[tDrQOFEP$X9JfuO9J\87.ce/<16#'19q?2Cu)cN=_NMsWdW*qehF#0Y3**71L%7O
%^L^BC@@c0Ti)Id<c6H%oAAn!-7M6OQ3aoLD>`(4U:"fqaM`e3MA2nkD"e5p&:3OTQ7Rde.D^9m2+md:W.3fc47U2!!h:Emr^/E$t
%/8(#;jhN:#jeH*'1(&\?)8kqP0BbTi2oc:/33F$o%5>tpk4'1l$KO0,M&*B(L>BAbc5\&R<b+DLe-TU[arVl?0ZRDrMkZ<nr5`l;
%l]=>*]"TrY,+:4-hWFeS27L%,51nXEUYX]RVs\GUe*Lt*'=KjJ7_?E4f!60MT\D!Cl+:DhHf5Y*T%QrP=0?#D@5-$]9KuA0os4nG
%/[IM"(3kc+O4A-!ZYaRsNIIpeWnWA$UY>f^%=N9>*UpMi.BD8R0;s*K=KC<[F*09MoGZY'Tj(!k;9l/o#a]3_^emg=//XbDl&Aj/
%_i(RR]("EB*I)A`OBL-(F'r3%lhZMSYl-Ed(e%dn$;D5^Fo(?e80$t2(pa@ZW4?Ekg8T*UGN_YWb#(U$B*_`o<M`r.>]eZuQZf((
%[uhd"6VXe>d?>ppAGr'3M$o![`?)\?#Z@j'\XW-'1hP9Ff0<oA^N#]=8JFqM-+tmTZ"A1WE?nQ!b]3Gj;I>NrZ@+Qp].Cr+pm-GB
%l08:4QRBQe][#!LC`]7*/X*bon!#;VMDpDkMcYR1$eKK!c^%ghC$5qGD$XL77^.N*BXf$>6Dod,5Tpi^Q"i9Drq>`E@[Ic(5[TA$
%S]=#3Nrl.p`75f@%WJ6>\%!)"m3JRb8PK$D8Ghl:,c2\=H&66VA9T>?OHI3b[4<ceaO?(2[Qk-Cb2u8C_gD8kn7#e$)T$d`A8ksR
%`4)LZSd[r546ksB5H$HHe.SIO7qh.lGn*&78*J.$Gqr>4JP`PJIHQX;\^M+`F5kpWJ?/@u4GWCml(?*SFT:,Y)&a-=ck'"Mm[sL3
%5/VV%6\OuCIQUdNO1'<D59A(17gnA)2G]'^6m+>)dsaEJ+-1;qd/36Xh`"@.G';cg*no:7]1/`EpmO\iGQ3Xu_cQ4m:gSsU/VCVC
%.<#J6Pju+j87$!#6@G6.$h:T6nCRDUcE;ut\BGh"4n)pLUOur,+f%CV_4U,;7;k?WEm[[65WqAT[uOq.Ae.iOS3[n4[7BQhYt":]
%Jj,E[@tD&4,<gcU5'^!QZ5=T;HQ=l6)YQV`%LbQH8]e/?Q(:23^t5O'/mRUpHOSB%;'R.jYKCk[Jh`#,Ke4E#l#buQc5G`^f-Lmq
%c4R,]#KbBQ-kH>m,Rpo5:h[jX"#G=dUGU\6!#LZh,L1E?\=?$IYDg(*`$,g!W%Zj_*#TjK&`[k:=QG@a+,f7ls"o_S;\3G$?!'L(
%+62)]O[S<c\*o?9T?oargZCZqgKn"Cnfr-aZ(N2/]_fZYho"C54Tqq)m3lEUn`+b%OY)SpEo^]B66*'G$IViiY8EMk`aZbD?HJ70
%%+LU;OHV*]0e#uV@mILBMemBTnmXS!*0-E9ke^fl_`.RH@ctG!Tbh2M>1=BN:`LA-*rNAu.(6,M2O2pl'&+,<gZ?+01:AV_HuS.u
%:mC@h`V^a7aboW]/h@&3@D:CYa@-K^f]+d#4E1ga6RDnhh?4j=%h%>""n?RmdmGZPP1;2D`(5GkBhNTlSpgG$b%IWTnkkNGV^pU5
%GO`YqjsXHJ=>^Z9L^9sSgKIDCJ4KZAJ))++"e8nL,M`?#h`gYd\*rhR4#Zh_2][@V^dg^`q$I2j.s,=r'tXC7ptPO5h^+t5Fm%od
%?[MlUS+#gV3Qa9'd(TO@m(NLlht=bCDr:TWqVQ]#gZJKBHi[<<msj(3jVnbEhZ-/ihZ1jWn[It)GMVYU,7i*BBNL[AcL=hobqljA
%*c;,$joq9hJ0W=RiBA+-7\1[E&7)#ZPN,Q2(JAb.)qYO&YQ\a!`RbK$/@9]-d,oS`0B^fHMg!+"G$`rNbP>D!DiS(Y?S&:h/]>\X
%@F!\k$h<2Ei<;Xq!XhR-aL<R8s"5iZ+moUh/1@eaDXB&m"YIY]`&![g74X9J=p\E?'";@^YoP?D4'(@lCN8J*_BQ9n$;X&]Nf<p@
%CoL%Z;O+b?.Z<[mn_9rS[n:5:<@U1`l\1"Q98T.9ZIh:)m)\r-QFN82MnN*3@2p&pWtKVXA[/isIWnfOL"9MgNb`XjoYMdba"-T.
%b$qPTMB`qt(&)XC/B4`DnLBIeMEASYf_H8so.+hD=(5S/$]@P`MOV?nP;VE!(X8"2Tt/+*cO5Y%S>4&L<fSkma.aSE*(I\c/7G"R
%2@+q([b/]Cn[ukOdp1V$MKfp4eJgOr3NPs8o:%^KqLu-.W'MZ)Fq"J$Y*VmCjDHOj]XGeqG702]D/h,?0VGdtA=NG`aDfkjit@r0
%>\/P5-E]<E(8UiX-$Aq`U`LW3[IGVlc;J$1T'>cdQ9#ug#^/UU/+\og4M$VV_'7;o?W^]^0V_&-eKTcZMFf'lmsZ7/3MQh+6XSIb
%HH6GV\i2S?BL_L==2s[1]P2&0HUU'a(fHS2@^-?laoLE=#0;RP;*,mC5uc]'m3R+W[5:Je>b^/^H.iZ"\Knsa#tPV42c$&CNXmSV
%(.tBNH]HIi_b\puR?U6-kQhIH$?BI%BUr*RGlE8Vd6L!$#`UYV@?AJQ%+8725oLmTdTD/g!`Pe%hJ!/<FGb=sKsLhrgdKMhVT9Vd
%:HNKVh>=0FPEc\3OTV&!%+YJ*3>D[L3+[X9I.grq@D<J[]a.Rg`D6d_TnL`-+_DO`cQItr_Tq=XFA],#P+.)#/4?c1R"?H'\#G(2
%@?<N-YR'LB2iqmq!E4ZfI'M._'&,)hPQDHtXt%O98p%qO_!D.GStgN7&mGu6,R#nh[-m@D/sTMRE^2UC,@Wdd!cSN8Zed]X"X5RZ
%AA3Yj+iR"sAAf<^RTfkbF23@S0%mqKD'3p%q?.:BRDBlt'm6Y-0+.^#Q&(L.L"_(Y6-2ii6\aIYR@cbPaB:c,ZF3GYb>cD,(XWP!
%TX'-.".-'B9uF)jO\MRWP*p1.n%3-t:.ela`.pQe"-FR32Bi=8B"=WNF4_/n+b*#fF=VDXg',p4+@W3a'VQY]68kWO`do/AG3MI-
%V3`ceO:q[<V0b!!JM4*mS.KL?S8j9>#K;<\`/)Nc'hepR=VGF9RfmaH;^>jRL^W-kb?>c8(EAYW!T8OI&7Y$[bRe7QjRCM%J=$P_
%+YK3.:h+QYh^e?#6@+HW3hQIci](=Tk.7?++op#GTC[2qRj)"1E%;5(U%*br5$MW'#;IQ"KE+hZNo'hPmA,<p6MbRLRdjC$)"mc*
%WoK;ZLiU`/kh3=U#,\A7lg6[--=):,J%L">cQ/ioN=_lnFZ4Fc6cQbN$?YC>HSOSIU`%_<&^tKrW?[5eL;'+6kp+iHN&`-tK85sM
%[6k]91,DSEIA%T<HX;\q4;)+M`_7#3rE7T?gf29haiX9NMb9j@3[U"46Sp'O&>VXRC#b51,QQn:SW)-a9gZp9gI4C9n4P!6`l?^?
%NJph]j%*h"F:nSj1nP^S!Dr"pJm\n9F@$sd5Uj;4Li7fo'ad^p,p4'E5'RKEA1/(G]^F&*S=$[*<A"CjGRQTZ8_/pGlm92[QI`5r
%WJd-f6L=91H",Li+n5[94"e.)?S#mR"E<!QJI,kZ+Nlo[T-+E66A[j4ZVReo+7`347Xb4rF@\M;-@SKL_,gQ<RL#m->uW-TROOLZ
%rPV.]K;\Mm&CN?+4U!;/GX2fH`Ur1QHY^@Q)MB[B^saDNKm4[r<6Z9G0GAL6C7nYV5/,tUBTRop82:RJcrss4V2#YH9nE^@MTWU_
%[o>4?.OtT.6&#a?P!C<\&>_r/JU/9tWF4Tie9D*.RZh1%e!P@';o&q[OK&@)i*j;nH*X<Ia:sUM;H3_(6Qo&8`[%F]?saF=<<:0l
%&8S<T1sAt9GC*-ocF`/VJ5.kqm7WhH6LFuu'.^nP=,>_aR9LM.oeYu:@#pC\=-B5Dhj)OlUVR(MS=mf>)kieH:+9uL5/\'?dO#'n
%CtSn'&f*1CiQ"3iS&28kq#G+5-tYQ0M_nUj'[DE+F#D4TSI'$MPC+"9P?Hu-"#8Y?GGpBWfEcJ7"YNp=n3tC%ns3XO=JZl8H(*e6
%!:c`ddp+s8p=M_pN@`(,!u,E4Z;E$?fSG$?*;/CA&2FfS\AP)C3Ako=cRf4t?n.es*lK>M"j:hM$Kkl$ca*TYkAoS+1lq&W5:6A@
%Nqh7R8LQrnhmScGRQYNk-RH_/5p\K>+m-,gU6?3#Sba'Eim)S`WsF4g=M/27k`L&n4F.Qs>lGRDSTPVRf-lPOK8^j+MR_uai53?e
%*(pAF=?K+D%&`3c?>-i+%uB)uKS8B9M'WH^Du<F5%7HpIZ.:-6!7,[<,b7f\\S,_725.(*@Vnt2McE"dngom/Luk@#I"C;Mefs6[
%5_AVLV>E@n\VqYF6qLkr[$Rj`-\.^Y:qTeiG(Qa,SU`[Ka\klGNjP/:/ZooLl6qtp8Z/$@!H;Jpd:V@O<#6T42;HtlqsB2h3Zt\Z
%KbnT3\B*7bB<q.<Wkh-3b(HP;E2<6KWpuhAdcY<&Oa/Kq\fD/#b[]U<H!&D4\%0+&aCi&tmB^!/5t%NpQ1;_7@-)S)h8aoL>Ug*l
%It.kWCOeW34.,J7K8TmTVZ.;Ym*'X,S[(W>BVIK?5LCD'T9?hlJ4'9blEEK;jD\>qme1Nm<3nY>$=NS-LiI->*M01d1(n+9o^plK
%9Et7FHXm9Sa@to3Z>qAqZidj&LV/&5.Xj]J+Ro7'IT;29<KMHu(sl\O81feARh+$.,LaMrkbSCSWds-oTJ]k.@0iZc0@Ist!"mX(
%Z7dn:)E7@2-lY%0\M.dbc/rKT$6R3FSU<>)/G!;g=IplZ1%qGBor:jf=)d#1\C6BRJjKADSXBWc8MT(N\g2am4h;In=#`r:Tf.'H
%F(t!rS&n(D'cr1$bEHH]kIu&$?Bl?p-3Q)6keu^_PYT:$"#J$Q:D1YZT#5?=#`G:,;1rjW+%'-jMk*ia6!3q.JhYN<M'2`E$%#[@
%)4;JcOJ/'(_iVuC@[\S&m3`>&.F6t\d?Kp"\s`5rPa/TNWHF>fKbG[[bG<f^atK<o=!_h6.=t520UM&T!gBtm+^)f$Qo^3Y4bq]Y
%Q<(0N-J6>'(-[U+4aAla[/M/A9$:buW7!>iXOlPYX$#+'0ge2sNrejX![29t(RQb4ZV=qGUMT63&>Eu::)@DE3NJWQ)ds[DQ$1_(
%_Y.a%$(-_05E0B3P7YphC<R`lR,dSpGQFlSR>_-ZptQAe=cp?$)HO[*n'gD.fl#5XLbB+>$"eF-4,OtuJZpqscZ&E5$osFp,_5s>
%nkOZijCH4!olu"[R-!FX,k<Es3^oYU_o[uTb'.Za<ADNUT5.i)JE<eXaM7hDj#t8<!bT#C8!m,(XAId?+ff(4\%DB*&Bf8M`a1C?
%qiO5hf-u2eFWK$._]r`U4]4JsEe)mi@>&K\E8$kGZKb1V=j:PM=CJN]c*WrdAM'Ad#s/9$3^\,8-:&J[P9>7_:JeJ$>raIu=W;I:
%A[Z/O:cT:tV]Q"^$%9*/19e43%Am!bPu3f5Q"fkW@'-\@:,N1:[cj+/%[@p=6Z'$W%Y;1e#rCiX0XfUkUCes@e;0>`PTjM7d%S@.
%J[n(%6tfeK#daSC[Yb&=f@VOI$fD9,2HFpNQRZpWar5Z`,*5J;(K&;l.)R]0YjksjK,:/AXA?/dR\h8d9]O*\Rt-Td,5(R_&COQ0
%qst"MNpD7f9J`l+cnhYTaD`CN\laj.Hl:i@QZq?bk!/mhnN[$;O2(_gqu?HMa5?mi$2Dbpqu.*jr:_;Js'Pg'LEGE%o7t).s*oNC
%s8=&>pntlUs48@lcdTYcs5D!?rphlP5J7$>s8:?\?cZ5<$N0$Fs7B[uq;""0+8UdQL&~>
%AI9_PrivateDataEnd
