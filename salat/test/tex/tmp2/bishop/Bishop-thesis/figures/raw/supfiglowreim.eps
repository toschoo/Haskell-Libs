%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: supfiglowreim.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: RSLab
%%CreationDate: 9/14/2008
%%BoundingBox: 0 0 239 189
%%HiResBoundingBox: 0 0 238.4063 188.0938
%%CropBox: 0 0 238.4063 188.0938
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: font Myriad-Roman
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: Myriad-Roman
%%DocumentNeededFonts: Myriad-Roman
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2008-09-12T22:53:33-04:00</xap:CreateDate>
         <xap:ModifyDate>2008-09-14T13:07:34-04:00</xap:ModifyDate>
         <xap:MetadataDate>2008-09-14T13:07:34-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>204</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAzAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYqsmnhgT&#xA;1JpFiTpychRU+5xVQ/S2lf8ALbB/yNT+uKtfpfSv+W2D/kan9cVb/S2lf8tsH/I1P64q79LaV/y2&#xA;wf8AI1P64q0NX0o7i9gp/wAZU/rirf6W0r/ltg/5Gp/XFWv0vpX/AC2wf8jU/rirf6W0r/ltg/5G&#xA;p/XFXfpbSv8Altg/5Gp/XFWv0vpX/LbB/wAjU/rirf6W0r/ltg/5Gp/XFXfpbSv+W2D/AJGp/XFV&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:1A437F9B3C81DD118B16C083D4D1050F</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:A50DDFCC7582DD119997F45A17949884</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:19437F9B3C81DD118B16C083D4D1050F</stRef:instanceID>
            <stRef:documentID>uuid:18437F9B3C81DD118B16C083D4D1050F</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -188.094 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 188.094 li
238.406 188.094 li
238.406 0 li
cp
clp
[1 0 0 1 0 0 ] concat
gsave % PSGState
0 0 mo
0 188.094 li
238.406 188.094 li
238.406 0 li
eclp
-99.9995 -47.1826 mo
200 -47.1826 li
200 192.817 li
-99.9995 192.817 li
-99.9995 -47.1826 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
gsave % PSGState
-.9375 -6.90625 mo
-.9375 111.219 li
146.25 111.219 li
146.25 -6.90625 li
eclp
gsave % PSGState
7 -6.78125 mo
7 110.219 li
138 110.219 li
138 -6.78125 li
eclp
.1875 lw
0 lc
0 lj
3.23931 ml
[] 0 dsh
true sadj
42.75 44.0313 mo
134.438 44.0313 li
0 0 0 rgb
@
gsave % PSGState
42 7.21875 mo
42 81.2188 li
135 81.2188 li
135 7.21875 li
eclp
grestore % PSGState
gsave % PSGState
42 7.21875 mo
42 81.2188 li
135 81.2188 li
135 7.21875 li
eclp
grestore % PSGState
gsave % PSGState
42.6836 7.21875 mo
42.6836 80.5791 li
134 80.5791 li
134 7.21875 li
eclp
.5 lw
2 lc
-5.125 44.0938 mo
-4.75 44.0938 li
-4.3125 44.0938 li
-3.9375 44.0938 li
-3.5 44.0938 li
-3.125 44.0938 li
-2.75 44.0938 li
-2.3125 44.0938 li
-1.9375 44.0938 li
-1.5 44.0938 li
-1.125 44.0938 li
-.75 44.0938 li
-.3125 44.0938 li
.0625 44.0938 li
.4375 44.0938 li
.875 44.0938 li
1.25 44.0938 li
1.6875 44.0938 li
2.0625 44.0938 li
2.4375 44.0938 li
2.875 44.0938 li
3.25 44.0938 li
3.625 44.0938 li
4.0625 44.0938 li
4.4375 44.0938 li
4.875 44.0938 li
5.25 44.0938 li
5.625 44.0938 li
6.0625 44.0938 li
6.4375 44.0938 li
6.875 44.0938 li
7.25 44.0938 li
7.625 44.0938 li
8.0625 44.0938 li
8.4375 44.0938 li
8.8125 44.0938 li
9.25 44.0938 li
9.625 44.0938 li
10.0625 44.0938 li
10.4375 44.0938 li
10.8125 44.0938 li
11.25 44.0938 li
11.625 44.0938 li
12 44.0938 li
12.4375 44.0938 li
12.8125 44.0938 li
13.25 44.0938 li
13.625 44.0938 li
14 44.0938 li
14.4375 44.0938 li
14.8125 44.0938 li
15.25 44.0938 li
15.625 44.0938 li
16 44.0938 li
16.4375 44.0938 li
16.8125 44.0938 li
17.1875 44.0938 li
17.625 44.0938 li
18 44.0938 li
18.4375 44.0938 li
18.8125 44.0938 li
19.1875 44.0938 li
19.625 44.0938 li
20 44.0938 li
20.375 44.0938 li
20.8125 44.0938 li
21.1875 44.0938 li
21.625 44.0938 li
22 44.0938 li
22.375 44.0938 li
22.8125 44.0938 li
23.1875 44.0938 li
23.625 44.0938 li
24 44.0938 li
24.375 44.0938 li
24.8125 44.0938 li
25.1875 44.0938 li
25.5625 44.0938 li
26 44.0938 li
26.375 44.0938 li
26.8125 44.0938 li
27.1875 44.0938 li
27.5625 44.0938 li
28 44.0938 li
28.375 44.0938 li
28.75 44.0938 li
29.1875 44.0938 li
29.5625 44.0938 li
30 44.0938 li
30.375 44.0938 li
30.75 44.0938 li
31.1875 44.0938 li
31.5625 44.0938 li
32 44.0938 li
32.375 44.0938 li
32.75 44.0938 li
33.1875 44.0938 li
33.5625 44.0938 li
33.9375 44.0938 li
34.375 44.0938 li
34.75 44.0938 li
35.1875 44.0938 li
35.5625 44.0938 li
35.9375 44.0938 li
36.375 44.0938 li
36.75 44.0938 li
37.125 44.0938 li
37.5625 44.0938 li
37.9375 44.0938 li
38.375 44.0938 li
38.75 44.0938 li
39.125 44.0938 li
39.5625 44.0938 li
39.9375 44.0938 li
40.375 44.0938 li
40.75 44.0938 li
41.125 44.0938 li
41.5625 44.0938 li
41.9375 44.0938 li
42.3125 44.0938 li
42.75 44.0938 li
43.125 44.0938 li
43.5625 44.0938 li
43.9375 44.0938 li
44.3125 44.0938 li
44.75 44.0938 li
45.125 44.0938 li
45.5 44.0938 li
45.9375 44.0938 li
46.3125 44.0938 li
46.75 44.0938 li
47.125 44.0938 li
47.5 44.0938 li
47.9375 44.0938 li
48.3125 44.0938 li
48.75 44.0938 li
49.125 44.0938 li
49.5 44.0938 li
49.9375 44.0938 li
50.3125 44.0938 li
50.6875 44.0938 li
51.125 44.0938 li
51.5 44.0938 li
51.9375 44.0938 li
52.3125 44.0938 li
52.6875 44.0938 li
53.125 44.0938 li
53.5 44.0938 li
53.875 44.0938 li
54.3125 44.0938 li
54.6875 44.0938 li
55.125 44.0938 li
55.5 44.0938 li
55.875 44.0938 li
56.3125 44.0938 li
56.6875 44.0938 li
57.0625 44.0938 li
57.5 44.0938 li
57.875 44.0938 li
58.3125 44.0938 li
58.6875 44.0938 li
59.0625 44.0938 li
59.5 44.0938 li
59.875 44.0938 li
60.3125 44.0938 li
60.6875 44.0938 li
61.0625 44.0938 li
61.5 44.0938 li
61.875 44.0938 li
62.25 44.0938 li
62.6875 44.0938 li
63.0625 44.0938 li
63.5 44.0938 li
63.875 44.0938 li
64.25 44.0938 li
64.6875 44.0938 li
65.0625 44.0938 li
65.4375 44.0938 li
65.875 44.0938 li
66.25 44.0938 li
66.6875 44.0938 li
67.0625 44.0938 li
67.4375 44.0938 li
67.875 44.0938 li
68.25 44.0313 li
68.6875 44.0313 li
69.0625 44.0313 li
69.4375 44.0313 li
69.875 44.0313 li
70.25 44.0313 li
70.625 44.0313 li
71.0625 44.0313 li
71.4375 44.0313 li
71.875 44.0313 li
72.25 44.0313 li
72.625 44.0313 li
73.0625 44.0313 li
73.4375 44.0313 li
73.8125 44.0313 li
74.25 44.0313 li
74.625 44.0313 li
75.0625 43.9688 li
75.4375 43.9688 li
75.8125 43.9688 li
76.25 43.9688 li
76.625 43.9688 li
77.0625 43.9688 li
77.4375 43.9688 li
77.8125 43.9063 li
78.25 43.9063 li
78.625 43.9063 li
79 43.9063 li
79.4375 43.8438 li
79.8125 43.8438 li
80.25 43.8438 li
80.625 43.7813 li
81 43.7813 li
81.4375 43.7188 li
81.8125 43.6563 li
82.1875 43.5938 li
82.625 43.5313 li
83 43.4688 li
83.4375 43.4063 li
83.8125 43.2813 li
84.1875 43.0938 li
84.625 42.9063 li
85 42.6563 li
85.4375 42.3438 li
85.8125 41.9063 li
86.1875 41.2188 li
86.625 40.2188 li
87 38.6563 li
87.375 36.0938 li
87.8125 31.7813 li
88.1875 25.2813 li
88.625 19.0938 li
89 20.2188 li
89.375 27.0938 li
89.8125 33.0938 li
90.1875 36.8438 li
90.5625 39.0938 li
91 40.4688 li
91.375 41.4063 li
91.8125 42.0313 li
92.1875 42.4063 li
92.5625 42.7188 li
93 42.9688 li
93.375 43.1563 li
93.8125 43.2813 li
94.1875 43.4063 li
94.5625 43.5313 li
95 43.5938 li
95.375 43.6563 li
95.75 43.7188 li
96.1875 43.7188 li
96.5625 43.7813 li
97 43.7813 li
97.375 43.8438 li
97.75 43.8438 li
98.1875 43.8438 li
98.5625 43.9063 li
98.9375 43.9063 li
99.375 43.9063 li
99.75 43.9063 li
100.188 43.9688 li
100.563 43.9688 li
100.938 43.9688 li
101.375 43.9688 li
101.75 43.9688 li
102.188 43.9688 li
102.563 43.9688 li
102.938 44.0313 li
103.375 44.0313 li
103.75 44.0313 li
104.125 44.0313 li
104.563 44.0313 li
104.938 44.0313 li
105.375 44.0313 li
105.75 44.0313 li
106.125 44.0313 li
106.563 44.0313 li
106.938 44.0313 li
107.313 44.0313 li
107.75 44.0313 li
108.125 44.0313 li
108.563 44.0313 li
108.938 44.0313 li
109.313 44.0313 li
109.75 44.0313 li
110.125 44.0938 li
110.563 44.0938 li
110.938 44.0938 li
111.313 44.0938 li
111.75 44.0938 li
112.125 44.0938 li
112.5 44.0938 li
112.938 44.0938 li
113.313 44.0938 li
113.75 44.0938 li
114.125 44.0938 li
114.5 44.0938 li
114.938 44.0938 li
115.313 44.0938 li
115.688 44.0938 li
116.125 44.0938 li
116.5 44.0938 li
116.938 44.0938 li
117.313 44.0938 li
117.688 44.0938 li
118.125 44.0938 li
118.5 44.0938 li
118.938 44.0938 li
119.313 44.0938 li
119.688 44.0938 li
120.125 44.0938 li
120.5 44.0938 li
120.875 44.0938 li
121.313 44.0938 li
121.688 44.0938 li
122.125 44.0938 li
122.5 44.0938 li
122.875 44.0938 li
123.313 44.0938 li
123.688 44.0938 li
124.063 44.0938 li
124.5 44.0938 li
124.875 44.0938 li
125.313 44.0938 li
125.688 44.0938 li
126.063 44.0938 li
126.5 44.0938 li
126.875 44.0938 li
127.313 44.0938 li
127.688 44.0938 li
128.063 44.0938 li
128.5 44.0938 li
128.875 44.0938 li
129.25 44.0938 li
129.688 44.0938 li
130.063 44.0938 li
130.5 44.0938 li
130.875 44.0938 li
131.25 44.0938 li
131.688 44.0938 li
132.063 44.0938 li
132.438 44.0938 li
132.875 44.0938 li
133.25 44.0938 li
133.688 44.0938 li
134.063 44.0938 li
134.438 44.0938 li
134.875 44.0938 li
135.25 44.0938 li
135.688 44.0938 li
136.063 44.0938 li
136.438 44.0938 li
136.875 44.0938 li
137.25 44.0938 li
137.625 44.0938 li
138.063 44.0938 li
138.438 44.0938 li
138.875 44.0938 li
139.25 44.0938 li
139.625 44.0938 li
140.063 44.0938 li
140.438 44.0938 li
140.813 44.0938 li
141.25 44.0938 li
141.625 44.0938 li
142.063 44.0938 li
142.438 44.0938 li
142.813 44.0938 li
143.25 44.0938 li
143.625 44.0938 li
144.063 44.0938 li
144.438 44.0938 li
144.813 44.0938 li
145.25 44.0938 li
145.625 44.0938 li
146 44.0938 li
146.438 44.0938 li
146.813 44.0938 li
147.25 44.0938 li
147.625 44.0938 li
148 44.0938 li
148.438 44.0938 li
148.813 44.0938 li
149.188 44.0938 li
149.625 44.0938 li
150 44.0938 li
150.438 44.0938 li
150.813 44.0938 li
151.188 44.0938 li
151.625 44.0938 li
152 44.0938 li
152.438 44.0938 li
152.813 44.0938 li
153.188 44.0938 li
153.625 44.0938 li
154 44.0938 li
154.375 44.0938 li
1 0 0 rgb
@
-5.125 44.2188 mo
-4.75 44.2188 li
-4.3125 44.2188 li
-3.9375 44.2188 li
-3.5 44.2188 li
-3.125 44.2188 li
-2.75 44.2188 li
-2.3125 44.2188 li
-1.9375 44.2188 li
-1.5 44.2188 li
-1.125 44.2188 li
-.75 44.2188 li
-.3125 44.2188 li
.0625 44.2188 li
.4375 44.2188 li
.875 44.2188 li
1.25 44.2188 li
1.6875 44.2188 li
2.0625 44.2188 li
2.4375 44.2188 li
2.875 44.2188 li
3.25 44.2188 li
3.625 44.2188 li
4.0625 44.2188 li
4.4375 44.2188 li
4.875 44.2188 li
5.25 44.2188 li
5.625 44.2188 li
6.0625 44.2813 li
6.4375 44.2813 li
6.875 44.2813 li
7.25 44.2813 li
7.625 44.2813 li
8.0625 44.2813 li
8.4375 44.2813 li
8.8125 44.2813 li
9.25 44.2813 li
9.625 44.2813 li
10.0625 44.2813 li
10.4375 44.2813 li
10.8125 44.2813 li
11.25 44.2813 li
11.625 44.2813 li
12 44.2813 li
12.4375 44.2813 li
12.8125 44.2813 li
13.25 44.2813 li
13.625 44.2813 li
14 44.2813 li
14.4375 44.2813 li
14.8125 44.2813 li
15.25 44.2813 li
15.625 44.2813 li
16 44.2813 li
16.4375 44.2813 li
16.8125 44.2813 li
17.1875 44.2813 li
17.625 44.2813 li
18 44.2813 li
18.4375 44.2813 li
18.8125 44.2813 li
19.1875 44.2813 li
19.625 44.3438 li
20 44.3438 li
20.375 44.3438 li
20.8125 44.3438 li
21.1875 44.3438 li
21.625 44.3438 li
22 44.3438 li
22.375 44.3438 li
22.8125 44.3438 li
23.1875 44.3438 li
23.625 44.3438 li
24 44.3438 li
24.375 44.3438 li
24.8125 44.3438 li
25.1875 44.3438 li
25.5625 44.3438 li
26 44.3438 li
26.375 44.3438 li
26.8125 44.3438 li
27.1875 44.3438 li
27.5625 44.3438 li
28 44.3438 li
28.375 44.3438 li
28.75 44.3438 li
29.1875 44.4063 li
29.5625 44.4063 li
30 44.4063 li
30.375 44.4063 li
30.75 44.4063 li
31.1875 44.4063 li
31.5625 44.4063 li
32 44.4063 li
32.375 44.4063 li
32.75 44.4063 li
33.1875 44.4063 li
33.5625 44.4063 li
33.9375 44.4063 li
34.375 44.4063 li
34.75 44.4063 li
35.1875 44.4063 li
35.5625 44.4063 li
35.9375 44.4063 li
36.375 44.4063 li
36.75 44.4688 li
37.125 44.4688 li
37.5625 44.4688 li
37.9375 44.4688 li
38.375 44.4688 li
38.75 44.4688 li
39.125 44.4688 li
39.5625 44.4688 li
39.9375 44.4688 li
40.375 44.4688 li
40.75 44.4688 li
41.125 44.4688 li
41.5625 44.4688 li
41.9375 44.4688 li
42.3125 44.5313 li
42.75 44.5313 li
43.125 44.5313 li
43.5625 44.5313 li
43.9375 44.5313 li
44.3125 44.5313 li
44.75 44.5313 li
45.125 44.5313 li
45.5 44.5313 li
45.9375 44.5313 li
46.3125 44.5313 li
46.75 44.5938 li
47.125 44.5938 li
47.5 44.5938 li
47.9375 44.5938 li
48.3125 44.5938 li
48.75 44.5938 li
49.125 44.5938 li
49.5 44.5938 li
49.9375 44.5938 li
50.3125 44.5938 li
50.6875 44.6563 li
51.125 44.6563 li
51.5 44.6563 li
51.9375 44.6563 li
52.3125 44.6563 li
52.6875 44.6563 li
53.125 44.6563 li
53.5 44.6563 li
53.875 44.7188 li
54.3125 44.7188 li
54.6875 44.7188 li
55.125 44.7188 li
55.5 44.7188 li
55.875 44.7188 li
56.3125 44.7188 li
56.6875 44.7813 li
57.0625 44.7813 li
57.5 44.7813 li
57.875 44.7813 li
58.3125 44.7813 li
58.6875 44.8438 li
59.0625 44.8438 li
59.5 44.8438 li
59.875 44.8438 li
60.3125 44.8438 li
60.6875 44.9063 li
61.0625 44.9063 li
61.5 44.9063 li
61.875 44.9063 li
62.25 44.9063 li
62.6875 44.9688 li
63.0625 44.9688 li
63.5 44.9688 li
63.875 44.9688 li
64.25 45.0313 li
64.6875 45.0313 li
65.0625 45.0313 li
65.4375 45.0938 li
65.875 45.0938 li
66.25 45.0938 li
66.6875 45.1563 li
67.0625 45.1563 li
67.4375 45.1563 li
67.875 45.2188 li
68.25 45.2188 li
68.6875 45.2813 li
69.0625 45.2813 li
69.4375 45.2813 li
69.875 45.3438 li
70.25 45.3438 li
70.625 45.4063 li
71.0625 45.4063 li
71.4375 45.4688 li
71.875 45.5313 li
72.25 45.5313 li
72.625 45.5938 li
73.0625 45.5938 li
73.4375 45.6563 li
73.8125 45.7188 li
74.25 45.7813 li
74.625 45.8438 li
75.0625 45.8438 li
75.4375 45.9063 li
75.8125 45.9688 li
76.25 46.0313 li
76.625 46.0938 li
77.0625 46.2188 li
77.4375 46.2813 li
77.8125 46.3438 li
78.25 46.4688 li
78.625 46.5313 li
79 46.6563 li
79.4375 46.7813 li
79.8125 46.9063 li
80.25 47.0313 li
80.625 47.1563 li
81 47.3438 li
81.4375 47.5313 li
81.8125 47.7188 li
82.1875 47.9688 li
82.625 48.2188 li
83 48.4688 li
83.4375 48.7813 li
83.8125 49.1563 li
84.1875 49.5938 li
84.625 50.0938 li
85 50.6563 li
85.4375 51.3438 li
85.8125 52.2188 li
86.1875 53.2188 li
86.625 54.4688 li
87 55.9688 li
87.375 57.5938 li
87.8125 58.5938 li
88.1875 56.9063 li
88.625 48.5938 li
89 36.4063 li
89.375 30.0313 li
89.8125 29.4063 li
90.1875 30.7188 li
90.5625 32.2813 li
91 33.7188 li
91.375 34.9063 li
91.8125 35.8438 li
92.1875 36.6563 li
92.5625 37.3438 li
93 37.9063 li
93.375 38.4063 li
93.8125 38.7813 li
94.1875 39.1563 li
94.5625 39.4688 li
95 39.7188 li
95.375 39.9688 li
95.75 40.2188 li
96.1875 40.4063 li
96.5625 40.5938 li
97 40.7188 li
97.375 40.8438 li
97.75 41.0313 li
98.1875 41.0938 li
98.5625 41.2188 li
98.9375 41.3438 li
99.375 41.4063 li
99.75 41.5313 li
100.188 41.5938 li
100.563 41.6563 li
100.938 41.7813 li
101.375 41.8438 li
101.75 41.9063 li
102.188 41.9688 li
102.563 42.0313 li
102.938 42.0313 li
103.375 42.0938 li
103.75 42.1563 li
104.125 42.2188 li
104.563 42.2188 li
104.938 42.2813 li
105.375 42.3438 li
105.75 42.3438 li
106.125 42.4063 li
106.563 42.4063 li
106.938 42.4688 li
107.313 42.4688 li
107.75 42.5313 li
108.125 42.5313 li
108.563 42.5938 li
108.938 42.5938 li
109.313 42.6563 li
109.75 42.6563 li
110.125 42.6563 li
110.563 42.7188 li
110.938 42.7188 li
111.313 42.7188 li
111.75 42.7813 li
112.125 42.7813 li
112.5 42.7813 li
112.938 42.8438 li
113.313 42.8438 li
113.75 42.8438 li
114.125 42.9063 li
114.5 42.9063 li
114.938 42.9063 li
115.313 42.9063 li
115.688 42.9688 li
116.125 42.9688 li
116.5 42.9688 li
116.938 42.9688 li
117.313 42.9688 li
117.688 43.0313 li
118.125 43.0313 li
118.5 43.0313 li
118.938 43.0313 li
119.313 43.0313 li
119.688 43.0938 li
120.125 43.0938 li
120.5 43.0938 li
120.875 43.0938 li
121.313 43.0938 li
121.688 43.0938 li
122.125 43.1563 li
122.5 43.1563 li
122.875 43.1563 li
123.313 43.1563 li
123.688 43.1563 li
124.063 43.1563 li
124.5 43.1563 li
124.875 43.2188 li
125.313 43.2188 li
125.688 43.2188 li
126.063 43.2188 li
126.5 43.2188 li
126.875 43.2188 li
127.313 43.2188 li
127.688 43.2188 li
128.063 43.2813 li
128.5 43.2813 li
128.875 43.2813 li
129.25 43.2813 li
129.688 43.2813 li
130.063 43.2813 li
130.5 43.2813 li
130.875 43.2813 li
131.25 43.2813 li
131.688 43.2813 li
132.063 43.3438 li
132.438 43.3438 li
132.875 43.3438 li
133.25 43.3438 li
133.688 43.3438 li
134.063 43.3438 li
134.438 43.3438 li
134.875 43.3438 li
135.25 43.3438 li
135.688 43.3438 li
136.063 43.3438 li
136.438 43.3438 li
136.875 43.3438 li
137.25 43.4063 li
137.625 43.4063 li
138.063 43.4063 li
138.438 43.4063 li
138.875 43.4063 li
139.25 43.4063 li
139.625 43.4063 li
140.063 43.4063 li
140.438 43.4063 li
140.813 43.4063 li
141.25 43.4063 li
141.625 43.4063 li
142.063 43.4063 li
142.438 43.4063 li
142.813 43.4063 li
143.25 43.4688 li
143.625 43.4688 li
144.063 43.4688 li
144.438 43.4688 li
144.813 43.4688 li
145.25 43.4688 li
145.625 43.4688 li
146 43.4688 li
146.438 43.4688 li
146.813 43.4688 li
147.25 43.4688 li
147.625 43.4688 li
148 43.4688 li
148.438 43.4688 li
148.813 43.4688 li
149.188 43.4688 li
149.625 43.4688 li
150 43.4688 li
150.438 43.4688 li
150.813 43.4688 li
151.188 43.5313 li
151.625 43.5313 li
152 43.5313 li
152.438 43.5313 li
152.813 43.5313 li
153.188 43.5313 li
153.625 43.5313 li
154 43.5313 li
154.375 43.5313 li
0 0 1 rgb
@
grestore % PSGState
2 lc
134.438 80.7188 mo
42.75 80.7188 li
@
42.75 80.7188 mo
42.75 7.34375 li
@
42.75 7.34375 mo
134.438 7.34375 li
@
134.438 7.34375 mo
134.438 80.7188 li
@
0 lc
54.6875 80.7188 mo
54.6875 78.7188 li
@
gsave % PSGState
53.6875 82.7188 mo
53.6875 94.9688 li
55.6875 94.9688 li
55.6875 82.7188 li
eclp
grestore % PSGState
74.625 80.7188 mo
74.625 78.7188 li
@
gsave % PSGState
66.875 82.7188 mo
66.875 94.9688 li
82.375 94.9688 li
82.375 82.7188 li
eclp
grestore % PSGState
94.5625 80.7188 mo
94.5625 78.7188 li
@
gsave % PSGState
93.5625 82.7188 mo
93.5625 94.9688 li
95.5625 94.9688 li
95.5625 82.7188 li
eclp
grestore % PSGState
114.5 80.7188 mo
114.5 78.7188 li
@
gsave % PSGState
106.75 82.7188 mo
106.75 94.9688 li
122.25 94.9688 li
122.25 82.7188 li
eclp
grestore % PSGState
42.75 74.5938 mo
44.75 74.5938 li
@
gsave % PSGState
27.4375 68.4688 mo
27.4375 80.7188 li
40.75 80.7188 li
40.75 68.4688 li
eclp
%%IncludeResource: font Myriad-Roman
/ANIANM+Myriad-Roman /Myriad-Roman findfont def
/ANIANM+Myriad-Roman*1 
[
49{/.notdef}repeat /one 59{/.notdef}repeat /m 146{/.notdef}repeat
] ANIANM+Myriad-Roman nfnt
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
28.4243 77.5474 mov
(m1) sh
grestore % PSGState
42.75 59.3438 mo
44.75 59.3438 li
@
gsave % PSGState
22.9375 53.2188 mo
22.9375 65.4688 li
40.75 65.4688 li
40.75 53.2188 li
eclp
%%IncludeResource: font Myriad-Roman
/ANIANM+Myriad-Roman*1 
[
48{/.notdef}repeat /zero /one 3{/.notdef}repeat /five 55{/.notdef}repeat /m 146{/.notdef}repeat
] ANIANM+Myriad-Roman nfnt
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
23.9243 62.2603 mov
-0.000305176 0 48 (m05) wsh
grestore % PSGState
42.75 44.0313 mo
44.75 44.0313 li
@
gsave % PSGState
29.75 37.9063 mo
29.75 50.1563 li
40.75 50.1563 li
40.75 37.9063 li
eclp
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
30.7368 46.9727 mov
(00) sh
grestore % PSGState
42.75 28.7188 mo
44.75 28.7188 li
@
gsave % PSGState
29.75 22.5938 mo
29.75 34.8438 li
40.75 34.8438 li
40.75 22.5938 li
eclp
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
30.7368 31.6855 mov
(05) sh
grestore % PSGState
42.75 13.4688 mo
44.75 13.4688 li
@
gsave % PSGState
29.75 7.34375 mo
29.75 19.5938 li
40.75 19.5938 li
40.75 7.34375 li
eclp
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
30.7368 16.3984 mov
(10) sh
grestore % PSGState
54.6875 7.34375 mo
54.6875 9.34375 li
@
gsave % PSGState
53.6875 -6.90625 mo
53.6875 5.34375 li
55.6875 5.34375 li
55.6875 -6.90625 li
eclp
grestore % PSGState
74.625 7.34375 mo
74.625 9.34375 li
@
gsave % PSGState
73.625 -6.90625 mo
73.625 5.34375 li
75.625 5.34375 li
75.625 -6.90625 li
eclp
grestore % PSGState
94.5625 7.34375 mo
94.5625 9.34375 li
@
gsave % PSGState
93.5625 -6.90625 mo
93.5625 5.34375 li
95.5625 5.34375 li
95.5625 -6.90625 li
eclp
grestore % PSGState
114.5 7.34375 mo
114.5 9.34375 li
@
gsave % PSGState
113.5 -6.90625 mo
113.5 5.34375 li
115.5 5.34375 li
115.5 -6.90625 li
eclp
grestore % PSGState
134.438 7.34375 mo
134.438 9.34375 li
@
gsave % PSGState
133.438 -6.90625 mo
133.438 5.34375 li
135.438 5.34375 li
135.438 -6.90625 li
eclp
grestore % PSGState
134.438 74.5938 mo
132.438 74.5938 li
@
gsave % PSGState
136.438 68.4688 mo
136.438 80.7188 li
138.438 80.7188 li
138.438 68.4688 li
eclp
grestore % PSGState
134.438 59.3438 mo
132.438 59.3438 li
@
gsave % PSGState
136.438 53.2188 mo
136.438 65.4688 li
138.438 65.4688 li
138.438 53.2188 li
eclp
grestore % PSGState
134.438 44.0313 mo
132.438 44.0313 li
@
gsave % PSGState
136.438 37.9063 mo
136.438 50.1563 li
138.438 50.1563 li
138.438 37.9063 li
eclp
grestore % PSGState
134.438 28.7188 mo
132.438 28.7188 li
@
gsave % PSGState
136.438 22.5938 mo
136.438 34.8438 li
138.438 34.8438 li
138.438 22.5938 li
eclp
grestore % PSGState
134.438 13.4688 mo
132.438 13.4688 li
@
gsave % PSGState
136.438 7.34375 mo
136.438 19.5938 li
138.438 19.5938 li
138.438 7.34375 li
eclp
grestore % PSGState
gsave % PSGState
83.125 98.9688 mo
83.125 111.219 li
94.125 111.219 li
94.125 98.9688 li
eclp
grestore % PSGState
gsave % PSGState
21.6875 38.5313 mo
21.6875 49.5313 li
33.9375 49.5313 li
33.9375 38.5313 li
eclp
%%IncludeResource: font Myriad-Roman
/ANIANM+Myriad-Roman*1 
[
48{/.notdef}repeat /zero /one /two 2{/.notdef}repeat /five 55{/.notdef}repeat /m 
3{/.notdef}repeat /q 142{/.notdef}repeat
] ANIANM+Myriad-Roman nfnt
ANIANM+Myriad-Roman*1  [0 -9 -9 0 0 0 ]mfnt sfnt
30.7368 48.5352 mov
(q2) sh
grestore % PSGState
gsave % PSGState
42 7.21875 mo
42 81.2188 li
135 81.2188 li
135 7.21875 li
eclp
gsave % PSGState
49.5 10.4063 mo
49.5 22.6563 li
60.0625 22.6563 li
60.0625 10.4063 li
eclp
%%IncludeResource: font Myriad-Roman
/ANIANM+Myriad-Roman*1 
[
48{/.notdef}repeat /zero /one /two 2{/.notdef}repeat /five 43{/.notdef}repeat /a 
11{/.notdef}repeat /m 3{/.notdef}repeat /q 142{/.notdef}repeat
] ANIANM+Myriad-Roman nfnt
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
50.4194 19.4556 mov
(qa) sh
grestore % PSGState
grestore % PSGState
grestore % PSGState
grestore % PSGState
gsave % PSGState
96.5625 -6.90625 mo
96.5625 111.219 li
243.75 111.219 li
243.75 -6.90625 li
eclp
gsave % PSGState
104.563 -6.78125 mo
104.563 110.219 li
235.563 110.219 li
235.563 -6.78125 li
eclp
.1875 lw
0 lc
0 lj
3.23931 ml
[] 0 dsh
true sadj
140.313 44.0313 mo
232.063 44.0313 li
0 0 0 rgb
@
gsave % PSGState
139.563 7.21875 mo
139.563 81.2188 li
232.563 81.2188 li
232.563 7.21875 li
eclp
grestore % PSGState
gsave % PSGState
139.563 7.21875 mo
139.563 81.2188 li
232.563 81.2188 li
232.563 7.21875 li
eclp
grestore % PSGState
gsave % PSGState
140.313 6.71875 mo
140.313 80.7188 li
232.063 80.7188 li
232.063 6.71875 li
eclp
.5 lw
2 lc
92.5 44.2813 mo
92.875 44.2813 li
93.25 44.2813 li
93.6875 44.2813 li
94.0625 44.2813 li
94.4375 44.2813 li
94.875 44.2813 li
95.25 44.2813 li
95.6875 44.2813 li
96.0625 44.2813 li
96.4375 44.2813 li
96.875 44.2813 li
97.25 44.2813 li
97.625 44.2813 li
98.0625 44.2813 li
98.4375 44.2813 li
98.875 44.2813 li
99.25 44.2813 li
99.625 44.2813 li
100.063 44.2813 li
100.438 44.2813 li
100.875 44.2813 li
101.25 44.2813 li
101.625 44.2813 li
102.063 44.2813 li
102.438 44.2813 li
102.813 44.2813 li
103.25 44.2813 li
103.625 44.2813 li
104.063 44.2813 li
104.438 44.2813 li
104.813 44.2813 li
105.25 44.2813 li
105.625 44.2813 li
106 44.2813 li
106.438 44.2813 li
106.813 44.2813 li
107.25 44.2813 li
107.625 44.2813 li
108 44.2813 li
108.438 44.2813 li
108.813 44.2813 li
109.25 44.2813 li
109.625 44.2813 li
110 44.2813 li
110.438 44.2813 li
110.813 44.2813 li
111.188 44.2813 li
111.625 44.2813 li
112 44.2813 li
112.438 44.2813 li
112.813 44.2813 li
113.188 44.2813 li
113.625 44.2813 li
114 44.2813 li
114.375 44.2813 li
114.813 44.2813 li
115.188 44.2813 li
115.625 44.2813 li
116 44.2813 li
116.375 44.2813 li
116.813 44.2813 li
117.188 44.2813 li
117.625 44.2813 li
118 44.2813 li
118.375 44.2813 li
118.813 44.2813 li
119.188 44.2813 li
119.563 44.2813 li
120 44.2813 li
120.375 44.2813 li
120.813 44.2813 li
121.188 44.2813 li
121.563 44.2813 li
122 44.2813 li
122.375 44.2813 li
122.75 44.2813 li
123.188 44.2813 li
123.563 44.2813 li
124 44.2813 li
124.375 44.2813 li
124.75 44.2813 li
125.188 44.2813 li
125.563 44.2813 li
126 44.2813 li
126.375 44.2813 li
126.75 44.2813 li
127.188 44.2813 li
127.563 44.2813 li
127.938 44.2813 li
128.375 44.2813 li
128.75 44.2813 li
129.188 44.2813 li
129.563 44.2813 li
129.938 44.2813 li
130.375 44.2813 li
130.75 44.2813 li
131.125 44.2813 li
131.563 44.2813 li
131.938 44.2813 li
132.375 44.2813 li
132.75 44.2813 li
133.125 44.2813 li
133.563 44.2813 li
133.938 44.2188 li
134.313 44.2188 li
134.75 44.2188 li
135.125 44.2188 li
135.563 44.2188 li
135.938 44.2188 li
136.313 44.2188 li
136.75 44.2188 li
137.125 44.2188 li
137.563 44.2188 li
137.938 44.2188 li
138.313 44.2188 li
138.75 44.2188 li
139.125 44.2188 li
139.5 44.2188 li
139.938 44.2188 li
140.313 44.2188 li
140.75 44.2188 li
141.125 44.2188 li
141.5 44.2188 li
141.938 44.2188 li
142.313 44.2188 li
142.688 44.2188 li
143.125 44.2188 li
143.5 44.2188 li
143.938 44.2188 li
144.313 44.2188 li
144.688 44.2188 li
145.125 44.2188 li
145.5 44.2188 li
145.938 44.2188 li
146.313 44.2188 li
146.688 44.2188 li
147.125 44.2188 li
147.5 44.2188 li
147.875 44.2188 li
148.313 44.2188 li
148.688 44.2188 li
149.125 44.2188 li
149.5 44.2188 li
149.875 44.2188 li
150.313 44.2188 li
150.688 44.2188 li
151.063 44.2188 li
151.5 44.2188 li
151.875 44.2188 li
152.313 44.2188 li
152.688 44.2188 li
153.063 44.2188 li
153.5 44.2188 li
153.875 44.2188 li
154.313 44.2188 li
154.688 44.2188 li
155.063 44.2188 li
155.5 44.2188 li
155.875 44.2188 li
156.25 44.2188 li
156.688 44.2188 li
157.063 44.2188 li
157.5 44.2188 li
157.875 44.2188 li
158.25 44.2188 li
158.688 44.1563 li
159.063 44.1563 li
159.438 44.1563 li
159.875 44.1563 li
160.25 44.1563 li
160.688 44.1563 li
161.063 44.1563 li
161.438 44.1563 li
161.875 44.1563 li
162.25 44.1563 li
162.688 44.1563 li
163.063 44.1563 li
163.438 44.1563 li
163.875 44.1563 li
164.25 44.1563 li
164.625 44.1563 li
165.063 44.1563 li
165.438 44.0938 li
165.875 44.0938 li
166.25 44.0938 li
166.625 44.0938 li
167.063 44.0938 li
167.438 44.0938 li
167.813 44.0938 li
168.25 44.0938 li
168.625 44.0938 li
169.063 44.0313 li
169.438 44.0313 li
169.813 44.0313 li
170.25 44.0313 li
170.625 44.0313 li
171.063 43.9688 li
171.438 43.9688 li
171.813 43.9688 li
172.25 43.9688 li
172.625 43.9063 li
173 43.9063 li
173.438 43.9063 li
173.813 43.8438 li
174.25 43.8438 li
174.625 43.7813 li
175 43.7813 li
175.438 43.7188 li
175.813 43.6563 li
176.188 43.6563 li
176.625 43.5938 li
177 43.5313 li
177.438 43.4688 li
177.813 43.4063 li
178.188 43.2813 li
178.625 43.2188 li
179 43.0938 li
179.438 42.9688 li
179.813 42.7813 li
180.188 42.5938 li
180.625 42.4063 li
181 42.0938 li
181.375 41.7813 li
181.813 41.4063 li
182.188 40.9063 li
182.625 40.2188 li
183 39.4063 li
183.375 38.2813 li
183.813 36.8438 li
184.188 34.9063 li
184.563 32.3438 li
185 28.9688 li
185.375 24.9688 li
185.813 20.9688 li
186.188 18.4688 li
186.563 18.9063 li
187 21.9688 li
187.375 26.0313 li
187.813 29.9688 li
188.188 33.0938 li
188.563 35.4688 li
189 37.2813 li
189.375 38.5938 li
189.75 39.6563 li
190.188 40.4063 li
190.563 41.0313 li
191 41.4688 li
191.375 41.8438 li
191.75 42.1563 li
192.188 42.4688 li
192.563 42.6563 li
192.938 42.8438 li
193.375 42.9688 li
193.75 43.0938 li
194.188 43.2188 li
194.563 43.3438 li
194.938 43.4063 li
195.375 43.4688 li
195.75 43.5313 li
196.188 43.5938 li
196.563 43.6563 li
196.938 43.7188 li
197.375 43.7188 li
197.75 43.7813 li
198.125 43.7813 li
198.563 43.8438 li
198.938 43.8438 li
199.375 43.9063 li
199.75 43.9063 li
200.125 43.9063 li
200.563 43.9688 li
200.938 43.9688 li
201.313 43.9688 li
201.75 43.9688 li
202.125 44.0313 li
202.563 44.0313 li
202.938 44.0313 li
203.313 44.0313 li
203.75 44.0313 li
204.125 44.0313 li
204.563 44.0938 li
204.938 44.0938 li
205.313 44.0938 li
205.75 44.0938 li
206.125 44.0938 li
206.5 44.0938 li
206.938 44.0938 li
207.313 44.0938 li
207.75 44.1563 li
208.125 44.1563 li
208.5 44.1563 li
208.938 44.1563 li
209.313 44.1563 li
209.688 44.1563 li
210.125 44.1563 li
210.5 44.1563 li
210.938 44.1563 li
211.313 44.1563 li
211.688 44.1563 li
212.125 44.1563 li
212.5 44.1563 li
212.938 44.1563 li
213.313 44.1563 li
213.688 44.1563 li
214.125 44.1563 li
214.5 44.2188 li
214.875 44.2188 li
215.313 44.2188 li
215.688 44.2188 li
216.125 44.2188 li
216.5 44.2188 li
216.875 44.2188 li
217.313 44.2188 li
217.688 44.2188 li
218.063 44.2188 li
218.5 44.2188 li
218.875 44.2188 li
219.313 44.2188 li
219.688 44.2188 li
220.063 44.2188 li
220.5 44.2188 li
220.875 44.2188 li
221.313 44.2188 li
221.688 44.2188 li
222.063 44.2188 li
222.5 44.2188 li
222.875 44.2188 li
223.25 44.2188 li
223.688 44.2188 li
224.063 44.2188 li
224.5 44.2188 li
224.875 44.2188 li
225.25 44.2188 li
225.688 44.2188 li
226.063 44.2188 li
226.438 44.2188 li
226.875 44.2188 li
227.25 44.2188 li
227.688 44.2188 li
228.063 44.2188 li
228.438 44.2188 li
228.875 44.2188 li
229.25 44.2188 li
229.688 44.2188 li
230.063 44.2188 li
230.438 44.2188 li
230.875 44.2188 li
231.25 44.2188 li
231.625 44.2188 li
232.063 44.2188 li
232.438 44.2188 li
232.875 44.2188 li
233.25 44.2188 li
233.625 44.2188 li
234.063 44.2188 li
234.438 44.2188 li
234.813 44.2188 li
235.25 44.2188 li
235.625 44.2188 li
236.063 44.2188 li
236.438 44.2188 li
236.813 44.2188 li
237.25 44.2188 li
237.625 44.2188 li
238.063 44.2188 li
238.438 44.2188 li
238.813 44.2188 li
239.25 44.2188 li
239.625 44.2188 li
240 44.2188 li
240.438 44.2813 li
240.813 44.2813 li
241.25 44.2813 li
241.625 44.2813 li
242 44.2813 li
242.438 44.2813 li
242.813 44.2813 li
243.188 44.2813 li
243.625 44.2813 li
244 44.2813 li
244.438 44.2813 li
244.813 44.2813 li
245.188 44.2813 li
245.625 44.2813 li
246 44.2813 li
246.375 44.2813 li
246.813 44.2813 li
247.188 44.2813 li
247.625 44.2813 li
248 44.2813 li
248.375 44.2813 li
248.813 44.2813 li
249.188 44.2813 li
249.625 44.2813 li
250 44.2813 li
250.375 44.2813 li
250.813 44.2813 li
251.188 44.2813 li
251.563 44.2813 li
252 44.2813 li
1 0 0 rgb
@
92.5 44.5938 mo
92.875 44.5938 li
93.25 44.5938 li
93.6875 44.5938 li
94.0625 44.5938 li
94.4375 44.5938 li
94.875 44.5938 li
95.25 44.5938 li
95.6875 44.5938 li
96.0625 44.6563 li
96.4375 44.6563 li
96.875 44.6563 li
97.25 44.6563 li
97.625 44.6563 li
98.0625 44.6563 li
98.4375 44.6563 li
98.875 44.6563 li
99.25 44.6563 li
99.625 44.6563 li
100.063 44.6563 li
100.438 44.6563 li
100.875 44.6563 li
101.25 44.6563 li
101.625 44.7188 li
102.063 44.7188 li
102.438 44.7188 li
102.813 44.7188 li
103.25 44.7188 li
103.625 44.7188 li
104.063 44.7188 li
104.438 44.7188 li
104.813 44.7188 li
105.25 44.7188 li
105.625 44.7188 li
106 44.7188 li
106.438 44.7188 li
106.813 44.7813 li
107.25 44.7813 li
107.625 44.7813 li
108 44.7813 li
108.438 44.7813 li
108.813 44.7813 li
109.25 44.7813 li
109.625 44.7813 li
110 44.7813 li
110.438 44.7813 li
110.813 44.7813 li
111.188 44.8438 li
111.625 44.8438 li
112 44.8438 li
112.438 44.8438 li
112.813 44.8438 li
113.188 44.8438 li
113.625 44.8438 li
114 44.8438 li
114.375 44.8438 li
114.813 44.8438 li
115.188 44.9063 li
115.625 44.9063 li
116 44.9063 li
116.375 44.9063 li
116.813 44.9063 li
117.188 44.9063 li
117.625 44.9063 li
118 44.9063 li
118.375 44.9063 li
118.813 44.9688 li
119.188 44.9688 li
119.563 44.9688 li
120 44.9688 li
120.375 44.9688 li
120.813 44.9688 li
121.188 44.9688 li
121.563 44.9688 li
122 45.0313 li
122.375 45.0313 li
122.75 45.0313 li
123.188 45.0313 li
123.563 45.0313 li
124 45.0313 li
124.375 45.0313 li
124.75 45.0938 li
125.188 45.0938 li
125.563 45.0938 li
126 45.0938 li
126.375 45.0938 li
126.75 45.0938 li
127.188 45.0938 li
127.563 45.1563 li
127.938 45.1563 li
128.375 45.1563 li
128.75 45.1563 li
129.188 45.1563 li
129.563 45.1563 li
129.938 45.2188 li
130.375 45.2188 li
130.75 45.2188 li
131.125 45.2188 li
131.563 45.2188 li
131.938 45.2188 li
132.375 45.2813 li
132.75 45.2813 li
133.125 45.2813 li
133.563 45.2813 li
133.938 45.2813 li
134.313 45.3438 li
134.75 45.3438 li
135.125 45.3438 li
135.563 45.3438 li
135.938 45.3438 li
136.313 45.4063 li
136.75 45.4063 li
137.125 45.4063 li
137.563 45.4063 li
137.938 45.4063 li
138.313 45.4688 li
138.75 45.4688 li
139.125 45.4688 li
139.5 45.4688 li
139.938 45.5313 li
140.313 45.5313 li
140.75 45.5313 li
141.125 45.5313 li
141.5 45.5938 li
141.938 45.5938 li
142.313 45.5938 li
142.688 45.6563 li
143.125 45.6563 li
143.5 45.6563 li
143.938 45.6563 li
144.313 45.7188 li
144.688 45.7188 li
145.125 45.7188 li
145.5 45.7813 li
145.938 45.7813 li
146.313 45.7813 li
146.688 45.8438 li
147.125 45.8438 li
147.5 45.8438 li
147.875 45.9063 li
148.313 45.9063 li
148.688 45.9063 li
149.125 45.9688 li
149.5 45.9688 li
149.875 46.0313 li
150.313 46.0313 li
150.688 46.0313 li
151.063 46.0938 li
151.5 46.0938 li
151.875 46.1563 li
152.313 46.1563 li
152.688 46.2188 li
153.063 46.2188 li
153.5 46.2813 li
153.875 46.2813 li
154.313 46.3438 li
154.688 46.3438 li
155.063 46.4063 li
155.5 46.4063 li
155.875 46.4688 li
156.25 46.4688 li
156.688 46.5313 li
157.063 46.5938 li
157.5 46.5938 li
157.875 46.6563 li
158.25 46.7188 li
158.688 46.7188 li
159.063 46.7813 li
159.438 46.8438 li
159.875 46.8438 li
160.25 46.9063 li
160.688 46.9688 li
161.063 47.0313 li
161.438 47.0938 li
161.875 47.1563 li
162.25 47.1563 li
162.688 47.2188 li
163.063 47.2813 li
163.438 47.3438 li
163.875 47.4063 li
164.25 47.4688 li
164.625 47.5938 li
165.063 47.6563 li
165.438 47.7188 li
165.875 47.7813 li
166.25 47.8438 li
166.625 47.9688 li
167.063 48.0313 li
167.438 48.1563 li
167.813 48.2188 li
168.25 48.3438 li
168.625 48.4063 li
169.063 48.5313 li
169.438 48.6563 li
169.813 48.7813 li
170.25 48.9063 li
170.625 49.0313 li
171.063 49.1563 li
171.438 49.2813 li
171.813 49.4688 li
172.25 49.5938 li
172.625 49.7813 li
173 49.9688 li
173.438 50.1563 li
173.813 50.3438 li
174.25 50.5313 li
174.625 50.7813 li
175 51.0313 li
175.438 51.2813 li
175.813 51.5313 li
176.188 51.8438 li
176.625 52.1563 li
177 52.4688 li
177.438 52.8438 li
177.813 53.2813 li
178.188 53.7188 li
178.625 54.1563 li
179 54.7188 li
179.438 55.2813 li
179.813 55.9063 li
180.188 56.5938 li
180.625 57.3438 li
181 58.2188 li
181.375 59.1563 li
181.813 60.2188 li
182.188 61.4063 li
182.625 62.7813 li
183 64.2188 li
183.375 65.8438 li
183.813 67.4688 li
184.188 68.9063 li
184.563 69.9063 li
185 69.5938 li
185.375 66.6563 li
185.813 59.7188 li
186.188 48.4688 li
186.563 35.5938 li
187 25.3438 li
187.375 19.5938 li
187.813 17.5313 li
188.188 17.6563 li
188.563 18.8438 li
189 20.3438 li
189.375 21.9688 li
189.75 23.5313 li
190.188 24.9688 li
190.563 26.2813 li
191 27.4688 li
191.375 28.4688 li
191.75 29.4063 li
192.188 30.2813 li
192.563 30.9688 li
192.938 31.6563 li
193.375 32.2813 li
193.75 32.8438 li
194.188 33.3438 li
194.563 33.8438 li
194.938 34.2188 li
195.375 34.6563 li
195.75 34.9688 li
196.188 35.3438 li
196.563 35.6563 li
196.938 35.9063 li
197.375 36.2188 li
197.75 36.4688 li
198.125 36.6563 li
198.563 36.9063 li
198.938 37.0938 li
199.375 37.2813 li
199.75 37.4688 li
200.125 37.6563 li
200.563 37.8438 li
200.938 37.9688 li
201.313 38.1563 li
201.75 38.2813 li
202.125 38.4063 li
202.563 38.5313 li
202.938 38.6563 li
203.313 38.7813 li
203.75 38.9063 li
204.125 38.9688 li
204.563 39.0938 li
204.938 39.2188 li
205.313 39.2813 li
205.75 39.4063 li
206.125 39.4688 li
206.5 39.5313 li
206.938 39.5938 li
207.313 39.7188 li
207.75 39.7813 li
208.125 39.8438 li
208.5 39.9063 li
208.938 39.9688 li
209.313 40.0313 li
209.688 40.0938 li
210.125 40.1563 li
210.5 40.2188 li
210.938 40.2813 li
211.313 40.3438 li
211.688 40.4063 li
212.125 40.4063 li
212.5 40.4688 li
212.938 40.5313 li
213.313 40.5938 li
213.688 40.6563 li
214.125 40.6563 li
214.5 40.7188 li
214.875 40.7813 li
215.313 40.7813 li
215.688 40.8438 li
216.125 40.8438 li
216.5 40.9063 li
216.875 40.9688 li
217.313 40.9688 li
217.688 41.0313 li
218.063 41.0313 li
218.5 41.0938 li
218.875 41.0938 li
219.313 41.1563 li
219.688 41.1563 li
220.063 41.2188 li
220.5 41.2188 li
220.875 41.2813 li
221.313 41.2813 li
221.688 41.3438 li
222.063 41.3438 li
222.5 41.3438 li
222.875 41.4063 li
223.25 41.4063 li
223.688 41.4688 li
224.063 41.4688 li
224.5 41.4688 li
224.875 41.5313 li
225.25 41.5313 li
225.688 41.5313 li
226.063 41.5938 li
226.438 41.5938 li
226.875 41.5938 li
227.25 41.6563 li
227.688 41.6563 li
228.063 41.6563 li
228.438 41.7188 li
228.875 41.7188 li
229.25 41.7188 li
229.688 41.7813 li
230.063 41.7813 li
230.438 41.7813 li
230.875 41.7813 li
231.25 41.8438 li
231.625 41.8438 li
232.063 41.8438 li
232.438 41.8438 li
232.875 41.9063 li
233.25 41.9063 li
233.625 41.9063 li
234.063 41.9063 li
234.438 41.9688 li
234.813 41.9688 li
235.25 41.9688 li
235.625 41.9688 li
236.063 42.0313 li
236.438 42.0313 li
236.813 42.0313 li
237.25 42.0313 li
237.625 42.0313 li
238.063 42.0938 li
238.438 42.0938 li
238.813 42.0938 li
239.25 42.0938 li
239.625 42.0938 li
240 42.1563 li
240.438 42.1563 li
240.813 42.1563 li
241.25 42.1563 li
241.625 42.1563 li
242 42.1563 li
242.438 42.2188 li
242.813 42.2188 li
243.188 42.2188 li
243.625 42.2188 li
244 42.2188 li
244.438 42.2188 li
244.813 42.2813 li
245.188 42.2813 li
245.625 42.2813 li
246 42.2813 li
246.375 42.2813 li
246.813 42.2813 li
247.188 42.3438 li
247.625 42.3438 li
248 42.3438 li
248.375 42.3438 li
248.813 42.3438 li
249.188 42.3438 li
249.625 42.3438 li
250 42.4063 li
250.375 42.4063 li
250.813 42.4063 li
251.188 42.4063 li
251.563 42.4063 li
252 42.4063 li
0 0 1 rgb
@
grestore % PSGState
2 lc
232.063 80.7188 mo
140.313 80.7188 li
@
140.313 80.7188 mo
140.313 7.34375 li
@
140.313 7.34375 mo
232.063 7.34375 li
@
232.063 7.34375 mo
232.063 80.7188 li
@
0 lc
152.313 80.7188 mo
152.313 78.7188 li
@
gsave % PSGState
151.313 82.7188 mo
151.313 94.9688 li
153.313 94.9688 li
153.313 82.7188 li
eclp
grestore % PSGState
172.25 80.7188 mo
172.25 78.7188 li
@
192.188 80.7188 mo
192.188 78.7188 li
@
gsave % PSGState
191.188 82.7188 mo
191.188 94.9688 li
193.188 94.9688 li
193.188 82.7188 li
eclp
grestore % PSGState
212.125 80.7188 mo
212.125 78.7188 li
@
140.313 74.5938 mo
142.313 74.5938 li
@
140.313 59.3438 mo
142.313 59.3438 li
@
140.313 44.0313 mo
142.313 44.0313 li
@
140.313 28.7188 mo
142.313 28.7188 li
@
140.313 13.4688 mo
142.313 13.4688 li
@
152.313 7.34375 mo
152.313 9.34375 li
@
gsave % PSGState
151.313 -6.90625 mo
151.313 5.34375 li
153.313 5.34375 li
153.313 -6.90625 li
eclp
grestore % PSGState
172.25 7.34375 mo
172.25 9.34375 li
@
gsave % PSGState
171.25 -6.90625 mo
171.25 5.34375 li
173.25 5.34375 li
173.25 -6.90625 li
eclp
grestore % PSGState
192.188 7.34375 mo
192.188 9.34375 li
@
gsave % PSGState
191.188 -6.90625 mo
191.188 5.34375 li
193.188 5.34375 li
193.188 -6.90625 li
eclp
grestore % PSGState
212.125 7.34375 mo
212.125 9.34375 li
@
gsave % PSGState
211.125 -6.90625 mo
211.125 5.34375 li
213.125 5.34375 li
213.125 -6.90625 li
eclp
grestore % PSGState
232.063 7.34375 mo
232.063 9.34375 li
@
gsave % PSGState
231.063 -6.90625 mo
231.063 5.34375 li
233.063 5.34375 li
233.063 -6.90625 li
eclp
grestore % PSGState
232.063 74.5938 mo
230.063 74.5938 li
@
gsave % PSGState
234.063 68.4688 mo
234.063 80.7188 li
236.063 80.7188 li
236.063 68.4688 li
eclp
grestore % PSGState
232.063 59.3438 mo
230.063 59.3438 li
@
gsave % PSGState
234.063 53.2188 mo
234.063 65.4688 li
236.063 65.4688 li
236.063 53.2188 li
eclp
grestore % PSGState
232.063 44.0313 mo
230.063 44.0313 li
@
gsave % PSGState
234.063 37.9063 mo
234.063 50.1563 li
236.063 50.1563 li
236.063 37.9063 li
eclp
grestore % PSGState
232.063 28.7188 mo
230.063 28.7188 li
@
gsave % PSGState
234.063 22.5938 mo
234.063 34.8438 li
236.063 34.8438 li
236.063 22.5938 li
eclp
grestore % PSGState
232.063 13.4688 mo
230.063 13.4688 li
@
gsave % PSGState
234.063 7.34375 mo
234.063 19.5938 li
236.063 19.5938 li
236.063 7.34375 li
eclp
grestore % PSGState
gsave % PSGState
139.563 7.21875 mo
139.563 81.2188 li
232.563 81.2188 li
232.563 7.21875 li
eclp
gsave % PSGState
146.813 10.4063 mo
146.813 22.6563 li
157.813 22.6563 li
157.813 10.4063 li
eclp
%%IncludeResource: font Myriad-Roman
/ANIANM+Myriad-Roman*1 
[
48{/.notdef}repeat /zero /one /two 2{/.notdef}repeat /five 43{/.notdef}repeat /a 
/b 10{/.notdef}repeat /m 3{/.notdef}repeat /q 142{/.notdef}repeat
] ANIANM+Myriad-Roman nfnt
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
147.789 19.4556 mov
-0.000488281 0 (qb) ash
grestore % PSGState
grestore % PSGState
grestore % PSGState
grestore % PSGState
gsave % PSGState
-.9375 70.9688 mo
-.9375 189.094 li
146.25 189.094 li
146.25 70.9688 li
eclp
gsave % PSGState
7 71.0938 mo
7 188.094 li
138 188.094 li
138 71.0938 li
eclp
.1875 lw
0 lc
0 lj
3.23931 ml
[] 0 dsh
true sadj
42.75 121.906 mo
134.438 121.906 li
0 0 0 rgb
@
gsave % PSGState
42 85.0938 mo
42 159.094 li
135 159.094 li
135 85.0938 li
eclp
grestore % PSGState
gsave % PSGState
42 85.0938 mo
42 159.094 li
135 159.094 li
135 85.0938 li
eclp
grestore % PSGState
gsave % PSGState
42.75 85.0938 mo
42.75 159.094 li
134.438 159.094 li
134.438 85.0938 li
eclp
.5 lw
2 lc
-5.125 122.656 mo
-4.75 122.656 li
-4.3125 122.656 li
-3.9375 122.656 li
-3.5 122.656 li
-3.125 122.656 li
-2.75 122.656 li
-2.3125 122.656 li
-1.9375 122.656 li
-1.5 122.656 li
-1.125 122.656 li
-.75 122.656 li
-.3125 122.656 li
.0625 122.656 li
.4375 122.656 li
.875 122.656 li
1.25 122.656 li
1.6875 122.656 li
2.0625 122.656 li
2.4375 122.656 li
2.875 122.656 li
3.25 122.656 li
3.625 122.656 li
4.0625 122.656 li
4.4375 122.656 li
4.875 122.656 li
5.25 122.656 li
5.625 122.656 li
6.0625 122.656 li
6.4375 122.656 li
6.875 122.656 li
7.25 122.656 li
7.625 122.656 li
8.0625 122.656 li
8.4375 122.656 li
8.8125 122.656 li
9.25 122.656 li
9.625 122.656 li
10.0625 122.656 li
10.4375 122.656 li
10.8125 122.656 li
11.25 122.656 li
11.625 122.656 li
12 122.656 li
12.4375 122.594 li
12.8125 122.594 li
13.25 122.594 li
13.625 122.594 li
14 122.594 li
14.4375 122.594 li
14.8125 122.594 li
15.25 122.594 li
15.625 122.594 li
16 122.594 li
16.4375 122.594 li
16.8125 122.594 li
17.1875 122.594 li
17.625 122.594 li
18 122.594 li
18.4375 122.594 li
18.8125 122.594 li
19.1875 122.594 li
19.625 122.594 li
20 122.594 li
20.375 122.594 li
20.8125 122.594 li
21.1875 122.594 li
21.625 122.594 li
22 122.594 li
22.375 122.594 li
22.8125 122.594 li
23.1875 122.594 li
23.625 122.594 li
24 122.594 li
24.375 122.594 li
24.8125 122.594 li
25.1875 122.594 li
25.5625 122.594 li
26 122.594 li
26.375 122.594 li
26.8125 122.594 li
27.1875 122.594 li
27.5625 122.594 li
28 122.594 li
28.375 122.594 li
28.75 122.594 li
29.1875 122.594 li
29.5625 122.594 li
30 122.594 li
30.375 122.594 li
30.75 122.594 li
31.1875 122.594 li
31.5625 122.594 li
32 122.594 li
32.375 122.594 li
32.75 122.594 li
33.1875 122.594 li
33.5625 122.594 li
33.9375 122.594 li
34.375 122.594 li
34.75 122.594 li
35.1875 122.594 li
35.5625 122.594 li
35.9375 122.594 li
36.375 122.594 li
36.75 122.594 li
37.125 122.594 li
37.5625 122.594 li
37.9375 122.594 li
38.375 122.594 li
38.75 122.594 li
39.125 122.594 li
39.5625 122.594 li
39.9375 122.594 li
40.375 122.594 li
40.75 122.594 li
41.125 122.594 li
41.5625 122.594 li
41.9375 122.594 li
42.3125 122.594 li
42.75 122.594 li
43.125 122.531 li
43.5625 122.531 li
43.9375 122.531 li
44.3125 122.531 li
44.75 122.531 li
45.125 122.531 li
45.5 122.531 li
45.9375 122.531 li
46.3125 122.531 li
46.75 122.531 li
47.125 122.531 li
47.5 122.531 li
47.9375 122.531 li
48.3125 122.531 li
48.75 122.531 li
49.125 122.531 li
49.5 122.531 li
49.9375 122.531 li
50.3125 122.531 li
50.6875 122.531 li
51.125 122.531 li
51.5 122.531 li
51.9375 122.531 li
52.3125 122.531 li
52.6875 122.531 li
53.125 122.469 li
53.5 122.469 li
53.875 122.469 li
54.3125 122.469 li
54.6875 122.469 li
55.125 122.469 li
55.5 122.469 li
55.875 122.469 li
56.3125 122.469 li
56.6875 122.469 li
57.0625 122.469 li
57.5 122.469 li
57.875 122.469 li
58.3125 122.469 li
58.6875 122.406 li
59.0625 122.406 li
59.5 122.406 li
59.875 122.406 li
60.3125 122.406 li
60.6875 122.406 li
61.0625 122.406 li
61.5 122.406 li
61.875 122.406 li
62.25 122.344 li
62.6875 122.344 li
63.0625 122.344 li
63.5 122.344 li
63.875 122.344 li
64.25 122.344 li
64.6875 122.281 li
65.0625 122.281 li
65.4375 122.281 li
65.875 122.281 li
66.25 122.281 li
66.6875 122.219 li
67.0625 122.219 li
67.4375 122.219 li
67.875 122.219 li
68.25 122.156 li
68.6875 122.156 li
69.0625 122.156 li
69.4375 122.094 li
69.875 122.094 li
70.25 122.094 li
70.625 122.031 li
71.0625 122.031 li
71.4375 121.969 li
71.875 121.969 li
72.25 121.969 li
72.625 121.906 li
73.0625 121.844 li
73.4375 121.844 li
73.8125 121.781 li
74.25 121.719 li
74.625 121.719 li
75.0625 121.656 li
75.4375 121.594 li
75.8125 121.531 li
76.25 121.469 li
76.625 121.406 li
77.0625 121.344 li
77.4375 121.219 li
77.8125 121.156 li
78.25 121.031 li
78.625 120.906 li
79 120.844 li
79.4375 120.656 li
79.8125 120.531 li
80.25 120.406 li
80.625 120.219 li
81 120.031 li
81.4375 119.781 li
81.8125 119.531 li
82.1875 119.281 li
82.625 118.969 li
83 118.656 li
83.4375 118.281 li
83.8125 117.906 li
84.1875 117.469 li
84.625 116.969 li
85 116.406 li
85.4375 115.844 li
85.8125 115.281 li
86.1875 114.656 li
86.625 114.031 li
87 113.469 li
87.375 112.969 li
87.8125 112.531 li
88.1875 112.281 li
88.625 112.156 li
89 112.156 li
89.375 112.344 li
89.8125 112.656 li
90.1875 113.156 li
90.5625 113.656 li
91 114.281 li
91.375 114.844 li
91.8125 115.469 li
92.1875 116.031 li
92.5625 116.594 li
93 117.094 li
93.375 117.594 li
93.8125 118.031 li
94.1875 118.406 li
94.5625 118.781 li
95 119.094 li
95.375 119.344 li
95.75 119.594 li
96.1875 119.844 li
96.5625 120.031 li
97 120.219 li
97.375 120.406 li
97.75 120.594 li
98.1875 120.719 li
98.5625 120.844 li
98.9375 120.969 li
99.375 121.094 li
99.75 121.156 li
100.188 121.219 li
100.563 121.344 li
100.938 121.406 li
101.375 121.469 li
101.75 121.531 li
102.188 121.594 li
102.563 121.656 li
102.938 121.719 li
103.375 121.719 li
103.75 121.781 li
104.125 121.844 li
104.563 121.844 li
104.938 121.906 li
105.375 121.969 li
105.75 121.969 li
106.125 122.031 li
106.563 122.031 li
106.938 122.031 li
107.313 122.094 li
107.75 122.094 li
108.125 122.094 li
108.563 122.156 li
108.938 122.156 li
109.313 122.156 li
109.75 122.219 li
110.125 122.219 li
110.563 122.219 li
110.938 122.219 li
111.313 122.281 li
111.75 122.281 li
112.125 122.281 li
112.5 122.281 li
112.938 122.281 li
113.313 122.344 li
113.75 122.344 li
114.125 122.344 li
114.5 122.344 li
114.938 122.344 li
115.313 122.344 li
115.688 122.344 li
116.125 122.406 li
116.5 122.406 li
116.938 122.406 li
117.313 122.406 li
117.688 122.406 li
118.125 122.406 li
118.5 122.406 li
118.938 122.406 li
119.313 122.406 li
119.688 122.469 li
120.125 122.469 li
120.5 122.469 li
120.875 122.469 li
121.313 122.469 li
121.688 122.469 li
122.125 122.469 li
122.5 122.469 li
122.875 122.469 li
123.313 122.469 li
123.688 122.469 li
124.063 122.469 li
124.5 122.469 li
124.875 122.469 li
125.313 122.531 li
125.688 122.531 li
126.063 122.531 li
126.5 122.531 li
126.875 122.531 li
127.313 122.531 li
127.688 122.531 li
128.063 122.531 li
128.5 122.531 li
128.875 122.531 li
129.25 122.531 li
129.688 122.531 li
130.063 122.531 li
130.5 122.531 li
130.875 122.531 li
131.25 122.531 li
131.688 122.531 li
132.063 122.531 li
132.438 122.531 li
132.875 122.531 li
133.25 122.531 li
133.688 122.531 li
134.063 122.531 li
134.438 122.531 li
134.875 122.531 li
135.25 122.531 li
135.688 122.594 li
136.063 122.594 li
136.438 122.594 li
136.875 122.594 li
137.25 122.594 li
137.625 122.594 li
138.063 122.594 li
138.438 122.594 li
138.875 122.594 li
139.25 122.594 li
139.625 122.594 li
140.063 122.594 li
140.438 122.594 li
140.813 122.594 li
141.25 122.594 li
141.625 122.594 li
142.063 122.594 li
142.438 122.594 li
142.813 122.594 li
143.25 122.594 li
143.625 122.594 li
144.063 122.594 li
144.438 122.594 li
144.813 122.594 li
145.25 122.594 li
145.625 122.594 li
146 122.594 li
146.438 122.594 li
146.813 122.594 li
147.25 122.594 li
147.625 122.594 li
148 122.594 li
148.438 122.594 li
148.813 122.594 li
149.188 122.594 li
149.625 122.594 li
150 122.594 li
150.438 122.594 li
150.813 122.594 li
151.188 122.594 li
151.625 122.594 li
152 122.594 li
152.438 122.594 li
152.813 122.594 li
153.188 122.594 li
153.625 122.594 li
154 122.594 li
154.375 122.594 li
1 0 0 rgb
@
-5.125 123.656 mo
-4.75 123.656 li
-4.3125 123.656 li
-3.9375 123.719 li
-3.5 123.719 li
-3.125 123.719 li
-2.75 123.719 li
-2.3125 123.719 li
-1.9375 123.781 li
-1.5 123.781 li
-1.125 123.781 li
-.75 123.781 li
-.3125 123.844 li
.0625 123.844 li
.4375 123.844 li
.875 123.844 li
1.25 123.844 li
1.6875 123.906 li
2.0625 123.906 li
2.4375 123.906 li
2.875 123.906 li
3.25 123.969 li
3.625 123.969 li
4.0625 123.969 li
4.4375 123.969 li
4.875 123.969 li
5.25 124.031 li
5.625 124.031 li
6.0625 124.031 li
6.4375 124.031 li
6.875 124.094 li
7.25 124.094 li
7.625 124.094 li
8.0625 124.094 li
8.4375 124.156 li
8.8125 124.156 li
9.25 124.156 li
9.625 124.219 li
10.0625 124.219 li
10.4375 124.219 li
10.8125 124.219 li
11.25 124.281 li
11.625 124.281 li
12 124.281 li
12.4375 124.344 li
12.8125 124.344 li
13.25 124.344 li
13.625 124.344 li
14 124.406 li
14.4375 124.406 li
14.8125 124.406 li
15.25 124.469 li
15.625 124.469 li
16 124.469 li
16.4375 124.531 li
16.8125 124.531 li
17.1875 124.531 li
17.625 124.594 li
18 124.594 li
18.4375 124.594 li
18.8125 124.656 li
19.1875 124.656 li
19.625 124.656 li
20 124.719 li
20.375 124.719 li
20.8125 124.719 li
21.1875 124.781 li
21.625 124.781 li
22 124.781 li
22.375 124.844 li
22.8125 124.844 li
23.1875 124.906 li
23.625 124.906 li
24 124.906 li
24.375 124.969 li
24.8125 124.969 li
25.1875 125.031 li
25.5625 125.031 li
26 125.031 li
26.375 125.094 li
26.8125 125.094 li
27.1875 125.156 li
27.5625 125.156 li
28 125.219 li
28.375 125.219 li
28.75 125.281 li
29.1875 125.281 li
29.5625 125.344 li
30 125.344 li
30.375 125.406 li
30.75 125.406 li
31.1875 125.469 li
31.5625 125.469 li
32 125.531 li
32.375 125.531 li
32.75 125.594 li
33.1875 125.594 li
33.5625 125.656 li
33.9375 125.656 li
34.375 125.719 li
34.75 125.719 li
35.1875 125.781 li
35.5625 125.844 li
35.9375 125.844 li
36.375 125.906 li
36.75 125.906 li
37.125 125.969 li
37.5625 126.031 li
37.9375 126.031 li
38.375 126.094 li
38.75 126.156 li
39.125 126.156 li
39.5625 126.219 li
39.9375 126.281 li
40.375 126.281 li
40.75 126.344 li
41.125 126.406 li
41.5625 126.406 li
41.9375 126.469 li
42.3125 126.531 li
42.75 126.594 li
43.125 126.656 li
43.5625 126.656 li
43.9375 126.719 li
44.3125 126.781 li
44.75 126.844 li
45.125 126.906 li
45.5 126.969 li
45.9375 126.969 li
46.3125 127.031 li
46.75 127.094 li
47.125 127.156 li
47.5 127.219 li
47.9375 127.281 li
48.3125 127.344 li
48.75 127.406 li
49.125 127.469 li
49.5 127.531 li
49.9375 127.594 li
50.3125 127.656 li
50.6875 127.781 li
51.125 127.844 li
51.5 127.906 li
51.9375 127.969 li
52.3125 128.031 li
52.6875 128.156 li
53.125 128.219 li
53.5 128.281 li
53.875 128.344 li
54.3125 128.469 li
54.6875 128.531 li
55.125 128.656 li
55.5 128.719 li
55.875 128.781 li
56.3125 128.906 li
56.6875 129.031 li
57.0625 129.094 li
57.5 129.219 li
57.875 129.281 li
58.3125 129.406 li
58.6875 129.531 li
59.0625 129.656 li
59.5 129.719 li
59.875 129.844 li
60.3125 129.969 li
60.6875 130.094 li
61.0625 130.219 li
61.5 130.344 li
61.875 130.531 li
62.25 130.656 li
62.6875 130.781 li
63.0625 130.906 li
63.5 131.094 li
63.875 131.219 li
64.25 131.406 li
64.6875 131.531 li
65.0625 131.719 li
65.4375 131.906 li
65.875 132.094 li
66.25 132.281 li
66.6875 132.469 li
67.0625 132.656 li
67.4375 132.844 li
67.875 133.031 li
68.25 133.281 li
68.6875 133.469 li
69.0625 133.719 li
69.4375 133.969 li
69.875 134.219 li
70.25 134.469 li
70.625 134.719 li
71.0625 135.031 li
71.4375 135.281 li
71.875 135.594 li
72.25 135.906 li
72.625 136.219 li
73.0625 136.531 li
73.4375 136.906 li
73.8125 137.281 li
74.25 137.656 li
74.625 138.031 li
75.0625 138.406 li
75.4375 138.844 li
75.8125 139.281 li
76.25 139.781 li
76.625 140.219 li
77.0625 140.719 li
77.4375 141.219 li
77.8125 141.781 li
78.25 142.344 li
78.625 142.906 li
79 143.469 li
79.4375 144.094 li
79.8125 144.719 li
80.25 145.406 li
80.625 146.031 li
81 146.719 li
81.4375 147.344 li
81.8125 148.031 li
82.1875 148.594 li
82.625 149.219 li
83 149.719 li
83.4375 150.156 li
83.8125 150.469 li
84.1875 150.594 li
84.625 150.469 li
85 150.031 li
85.4375 149.281 li
85.8125 148.031 li
86.1875 146.219 li
86.625 143.844 li
87 140.719 li
87.375 136.969 li
87.8125 132.594 li
88.1875 127.719 li
88.625 122.531 li
89 117.219 li
89.375 112.094 li
89.8125 107.406 li
90.1875 103.219 li
90.5625 99.6563 li
91 96.8438 li
91.375 94.6563 li
91.8125 93.0938 li
92.1875 92.0313 li
92.5625 91.3438 li
93 91.0938 li
93.375 91.0313 li
93.8125 91.2813 li
94.1875 91.5938 li
94.5625 92.0938 li
95 92.5938 li
95.375 93.2188 li
95.75 93.8438 li
96.1875 94.5313 li
96.5625 95.1563 li
97 95.8438 li
97.375 96.4688 li
97.75 97.1563 li
98.1875 97.7813 li
98.5625 98.3438 li
98.9375 98.9688 li
99.375 99.5313 li
99.75 100.094 li
100.188 100.594 li
100.563 101.094 li
100.938 101.594 li
101.375 102.094 li
101.75 102.531 li
102.188 102.969 li
102.563 103.344 li
102.938 103.781 li
103.375 104.156 li
103.75 104.531 li
104.125 104.906 li
104.563 105.219 li
104.938 105.531 li
105.375 105.844 li
105.75 106.156 li
106.125 106.469 li
106.563 106.719 li
106.938 107.031 li
107.313 107.281 li
107.75 107.531 li
108.125 107.781 li
108.563 108.031 li
108.938 108.281 li
109.313 108.469 li
109.75 108.656 li
110.125 108.906 li
110.563 109.094 li
110.938 109.281 li
111.313 109.469 li
111.75 109.656 li
112.125 109.844 li
112.5 110.031 li
112.938 110.156 li
113.313 110.344 li
113.75 110.469 li
114.125 110.656 li
114.5 110.781 li
114.938 110.969 li
115.313 111.094 li
115.688 111.219 li
116.125 111.344 li
116.5 111.469 li
116.938 111.594 li
117.313 111.719 li
117.688 111.844 li
118.125 111.969 li
118.5 112.094 li
118.938 112.219 li
119.313 112.281 li
119.688 112.406 li
120.125 112.531 li
120.5 112.594 li
120.875 112.719 li
121.313 112.781 li
121.688 112.906 li
122.125 112.969 li
122.5 113.094 li
122.875 113.156 li
123.313 113.219 li
123.688 113.344 li
124.063 113.406 li
124.5 113.469 li
124.875 113.594 li
125.313 113.656 li
125.688 113.719 li
126.063 113.781 li
126.5 113.844 li
126.875 113.969 li
127.313 114.031 li
127.688 114.094 li
128.063 114.156 li
128.5 114.219 li
128.875 114.281 li
129.25 114.344 li
129.688 114.406 li
130.063 114.469 li
130.5 114.531 li
130.875 114.594 li
131.25 114.656 li
131.688 114.719 li
132.063 114.781 li
132.438 114.781 li
132.875 114.844 li
133.25 114.906 li
133.688 114.969 li
134.063 115.031 li
134.438 115.094 li
134.875 115.094 li
135.25 115.156 li
135.688 115.219 li
136.063 115.281 li
136.438 115.281 li
136.875 115.344 li
137.25 115.406 li
137.625 115.406 li
138.063 115.469 li
138.438 115.531 li
138.875 115.594 li
139.25 115.594 li
139.625 115.656 li
140.063 115.656 li
140.438 115.719 li
140.813 115.781 li
141.25 115.781 li
141.625 115.844 li
142.063 115.906 li
142.438 115.906 li
142.813 115.969 li
143.25 115.969 li
143.625 116.031 li
144.063 116.031 li
144.438 116.094 li
144.813 116.094 li
145.25 116.156 li
145.625 116.156 li
146 116.219 li
146.438 116.219 li
146.813 116.281 li
147.25 116.281 li
147.625 116.344 li
148 116.344 li
148.438 116.406 li
148.813 116.406 li
149.188 116.469 li
149.625 116.469 li
150 116.531 li
150.438 116.531 li
150.813 116.594 li
151.188 116.594 li
151.625 116.656 li
152 116.656 li
152.438 116.656 li
152.813 116.719 li
153.188 116.719 li
153.625 116.781 li
154 116.781 li
154.375 116.781 li
0 0 1 rgb
@
grestore % PSGState
2 lc
134.438 158.594 mo
42.75 158.594 li
@
42.75 158.594 mo
42.75 85.2188 li
@
42.75 85.2188 mo
134.438 85.2188 li
@
134.438 85.2188 mo
134.438 158.594 li
@
0 lc
54.6875 158.594 mo
54.6875 156.594 li
@
gsave % PSGState
53.6875 160.594 mo
53.6875 172.844 li
55.6875 172.844 li
55.6875 160.594 li
eclp
grestore % PSGState
74.625 158.594 mo
74.625 156.594 li
@
gsave % PSGState
66.875 160.594 mo
66.875 172.844 li
82.375 172.844 li
82.375 160.594 li
eclp
%%IncludeResource: font Myriad-Roman
/ANIANM+Myriad-Roman*1 
[
48{/.notdef}repeat /zero /one /two /three /.notdef /five /six 
/seven 41{/.notdef}repeat /a /b 10{/.notdef}repeat /m 3{/.notdef}repeat /q 
142{/.notdef}repeat
] ANIANM+Myriad-Roman nfnt
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
67.8906 169.658 mov
-0.000335693 0 55 (673) wsh
grestore % PSGState
94.5625 158.594 mo
94.5625 156.594 li
@
gsave % PSGState
93.5625 160.594 mo
93.5625 172.844 li
95.5625 172.844 li
95.5625 160.594 li
eclp
grestore % PSGState
114.5 158.594 mo
114.5 156.594 li
@
gsave % PSGState
106.75 160.594 mo
106.75 172.844 li
122.25 172.844 li
122.25 160.594 li
eclp
%%IncludeResource: font Myriad-Roman
/ANIANM+Myriad-Roman*1 
[
48{/.notdef}repeat /zero /one /two /three /four /five /six 
/seven 41{/.notdef}repeat /a /b 10{/.notdef}repeat /m 3{/.notdef}repeat /q 
142{/.notdef}repeat
] ANIANM+Myriad-Roman nfnt
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
107.771 169.658 mov
-0.000335693 0 55 (674) wsh
grestore % PSGState
42.75 152.469 mo
44.75 152.469 li
@
gsave % PSGState
27.4375 146.344 mo
27.4375 158.594 li
40.75 158.594 li
40.75 146.344 li
eclp
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
28.4243 155.418 mov
(m1) sh
grestore % PSGState
42.75 137.219 mo
44.75 137.219 li
@
gsave % PSGState
22.9375 131.094 mo
22.9375 143.344 li
40.75 143.344 li
40.75 131.094 li
eclp
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
23.9243 140.131 mov
-0.000305176 0 48 (m05) wsh
grestore % PSGState
42.75 121.906 mo
44.75 121.906 li
@
gsave % PSGState
29.75 115.781 mo
29.75 128.031 li
40.75 128.031 li
40.75 115.781 li
eclp
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
30.7368 124.844 mov
(00) sh
grestore % PSGState
42.75 106.594 mo
44.75 106.594 li
@
gsave % PSGState
29.75 100.469 mo
29.75 112.719 li
40.75 112.719 li
40.75 100.469 li
eclp
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
30.7368 109.557 mov
(05) sh
grestore % PSGState
42.75 91.3438 mo
44.75 91.3438 li
@
gsave % PSGState
29.75 85.2188 mo
29.75 97.4688 li
40.75 97.4688 li
40.75 85.2188 li
eclp
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
30.7368 94.2695 mov
(10) sh
grestore % PSGState
54.6875 85.2188 mo
54.6875 87.2188 li
@
gsave % PSGState
53.6875 70.9688 mo
53.6875 83.2188 li
55.6875 83.2188 li
55.6875 70.9688 li
eclp
grestore % PSGState
74.625 85.2188 mo
74.625 87.2188 li
@
gsave % PSGState
73.625 70.9688 mo
73.625 83.2188 li
75.625 83.2188 li
75.625 70.9688 li
eclp
grestore % PSGState
94.5625 85.2188 mo
94.5625 87.2188 li
@
gsave % PSGState
93.5625 70.9688 mo
93.5625 83.2188 li
95.5625 83.2188 li
95.5625 70.9688 li
eclp
grestore % PSGState
114.5 85.2188 mo
114.5 87.2188 li
@
gsave % PSGState
113.5 70.9688 mo
113.5 83.2188 li
115.5 83.2188 li
115.5 70.9688 li
eclp
grestore % PSGState
134.438 85.2188 mo
134.438 87.2188 li
@
gsave % PSGState
133.438 70.9688 mo
133.438 83.2188 li
135.438 83.2188 li
135.438 70.9688 li
eclp
grestore % PSGState
134.438 152.469 mo
132.438 152.469 li
@
gsave % PSGState
136.438 146.344 mo
136.438 158.594 li
138.438 158.594 li
138.438 146.344 li
eclp
grestore % PSGState
134.438 137.219 mo
132.438 137.219 li
@
gsave % PSGState
136.438 131.094 mo
136.438 143.344 li
138.438 143.344 li
138.438 131.094 li
eclp
grestore % PSGState
134.438 121.906 mo
132.438 121.906 li
@
gsave % PSGState
136.438 115.781 mo
136.438 128.031 li
138.438 128.031 li
138.438 115.781 li
eclp
grestore % PSGState
134.438 106.594 mo
132.438 106.594 li
@
gsave % PSGState
136.438 100.469 mo
136.438 112.719 li
138.438 112.719 li
138.438 100.469 li
eclp
grestore % PSGState
134.438 91.3438 mo
132.438 91.3438 li
@
gsave % PSGState
136.438 85.2188 mo
136.438 97.4688 li
138.438 97.4688 li
138.438 85.2188 li
eclp
grestore % PSGState
gsave % PSGState
83.125 170.844 mo
83.125 183.094 li
94.125 183.094 li
94.125 170.844 li
eclp
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
84.0986 179.908 mov
(q1) sh
grestore % PSGState
gsave % PSGState
21.6875 116.406 mo
21.6875 127.406 li
33.9375 127.406 li
33.9375 116.406 li
eclp
ANIANM+Myriad-Roman*1  [0 -9 -9 0 0 0 ]mfnt sfnt
30.7368 126.406 mov
0 0.000488281 (q2) ash
grestore % PSGState
gsave % PSGState
42 85.0938 mo
42 159.094 li
135 159.094 li
135 85.0938 li
eclp
gsave % PSGState
49.5625 88.2813 mo
49.5625 100.531 li
60 100.531 li
60 88.2813 li
eclp
%%IncludeResource: font Myriad-Roman
/ANIANM+Myriad-Roman*1 
[
48{/.notdef}repeat /zero /one /two /three /four /five /six 
/seven 41{/.notdef}repeat /a /b /c 9{/.notdef}repeat /m 3{/.notdef}repeat 
/q 142{/.notdef}repeat
] ANIANM+Myriad-Roman nfnt
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
50.4819 97.3262 mov
(qc) sh
grestore % PSGState
grestore % PSGState
grestore % PSGState
grestore % PSGState
gsave % PSGState
96.5625 70.9688 mo
96.5625 189.094 li
243.75 189.094 li
243.75 70.9688 li
eclp
gsave % PSGState
104.563 71.0938 mo
104.563 188.094 li
235.563 188.094 li
235.563 71.0938 li
eclp
.1875 lw
0 lc
0 lj
3.23931 ml
[] 0 dsh
true sadj
140.313 121.906 mo
232.063 121.906 li
0 0 0 rgb
@
gsave % PSGState
139.563 85.0938 mo
139.563 159.094 li
232.563 159.094 li
232.563 85.0938 li
eclp
grestore % PSGState
gsave % PSGState
139.563 85.0938 mo
139.563 159.094 li
232.563 159.094 li
232.563 85.0938 li
eclp
grestore % PSGState
gsave % PSGState
140.313 85.0938 mo
140.313 159.094 li
232.063 159.094 li
232.063 85.0938 li
eclp
.5 lw
2 lc
92.5 124.219 mo
92.875 124.219 li
93.25 124.219 li
93.6875 124.219 li
94.0625 124.219 li
94.4375 124.219 li
94.875 124.219 li
95.25 124.219 li
95.6875 124.219 li
96.0625 124.219 li
96.4375 124.219 li
96.875 124.219 li
97.25 124.219 li
97.625 124.219 li
98.0625 124.219 li
98.4375 124.219 li
98.875 124.219 li
99.25 124.219 li
99.625 124.219 li
100.063 124.219 li
100.438 124.219 li
100.875 124.219 li
101.25 124.219 li
101.625 124.219 li
102.063 124.219 li
102.438 124.219 li
102.813 124.219 li
103.25 124.219 li
103.625 124.219 li
104.063 124.219 li
104.438 124.219 li
104.813 124.219 li
105.25 124.219 li
105.625 124.219 li
106 124.219 li
106.438 124.219 li
106.813 124.219 li
107.25 124.219 li
107.625 124.219 li
108 124.156 li
108.438 124.156 li
108.813 124.156 li
109.25 124.156 li
109.625 124.156 li
110 124.156 li
110.438 124.156 li
110.813 124.156 li
111.188 124.156 li
111.625 124.156 li
112 124.156 li
112.438 124.156 li
112.813 124.156 li
113.188 124.156 li
113.625 124.156 li
114 124.156 li
114.375 124.156 li
114.813 124.156 li
115.188 124.156 li
115.625 124.156 li
116 124.156 li
116.375 124.156 li
116.813 124.156 li
117.188 124.156 li
117.625 124.156 li
118 124.156 li
118.375 124.156 li
118.813 124.156 li
119.188 124.156 li
119.563 124.156 li
120 124.156 li
120.375 124.156 li
120.813 124.156 li
121.188 124.156 li
121.563 124.156 li
122 124.156 li
122.375 124.156 li
122.75 124.156 li
123.188 124.156 li
123.563 124.156 li
124 124.156 li
124.375 124.156 li
124.75 124.094 li
125.188 124.094 li
125.563 124.094 li
126 124.094 li
126.375 124.094 li
126.75 124.094 li
127.188 124.094 li
127.563 124.094 li
127.938 124.094 li
128.375 124.094 li
128.75 124.094 li
129.188 124.094 li
129.563 124.094 li
129.938 124.094 li
130.375 124.094 li
130.75 124.094 li
131.125 124.094 li
131.563 124.094 li
131.938 124.094 li
132.375 124.094 li
132.75 124.094 li
133.125 124.094 li
133.563 124.094 li
133.938 124.094 li
134.313 124.031 li
134.75 124.031 li
135.125 124.031 li
135.563 124.031 li
135.938 124.031 li
136.313 124.031 li
136.75 124.031 li
137.125 124.031 li
137.563 124.031 li
137.938 124.031 li
138.313 124.031 li
138.75 124.031 li
139.125 124.031 li
139.5 124.031 li
139.938 124.031 li
140.313 124.031 li
140.75 123.969 li
141.125 123.969 li
141.5 123.969 li
141.938 123.969 li
142.313 123.969 li
142.688 123.969 li
143.125 123.969 li
143.5 123.969 li
143.938 123.969 li
144.313 123.969 li
144.688 123.969 li
145.125 123.969 li
145.5 123.906 li
145.938 123.906 li
146.313 123.906 li
146.688 123.906 li
147.125 123.906 li
147.5 123.906 li
147.875 123.906 li
148.313 123.906 li
148.688 123.906 li
149.125 123.844 li
149.5 123.844 li
149.875 123.844 li
150.313 123.844 li
150.688 123.844 li
151.063 123.844 li
151.5 123.844 li
151.875 123.781 li
152.313 123.781 li
152.688 123.781 li
153.063 123.781 li
153.5 123.781 li
153.875 123.781 li
154.313 123.719 li
154.688 123.719 li
155.063 123.719 li
155.5 123.719 li
155.875 123.719 li
156.25 123.656 li
156.688 123.656 li
157.063 123.656 li
157.5 123.656 li
157.875 123.594 li
158.25 123.594 li
158.688 123.594 li
159.063 123.594 li
159.438 123.531 li
159.875 123.531 li
160.25 123.531 li
160.688 123.531 li
161.063 123.469 li
161.438 123.469 li
161.875 123.469 li
162.25 123.406 li
162.688 123.406 li
163.063 123.406 li
163.438 123.344 li
163.875 123.344 li
164.25 123.281 li
164.625 123.281 li
165.063 123.281 li
165.438 123.219 li
165.875 123.219 li
166.25 123.156 li
166.625 123.156 li
167.063 123.094 li
167.438 123.094 li
167.813 123.031 li
168.25 123.031 li
168.625 122.969 li
169.063 122.906 li
169.438 122.906 li
169.813 122.844 li
170.25 122.781 li
170.625 122.781 li
171.063 122.719 li
171.438 122.656 li
171.813 122.656 li
172.25 122.594 li
172.625 122.531 li
173 122.469 li
173.438 122.406 li
173.813 122.344 li
174.25 122.344 li
174.625 122.281 li
175 122.219 li
175.438 122.156 li
175.813 122.094 li
176.188 122.031 li
176.625 121.969 li
177 121.906 li
177.438 121.844 li
177.813 121.781 li
178.188 121.719 li
178.625 121.656 li
179 121.594 li
179.438 121.531 li
179.813 121.469 li
180.188 121.406 li
180.625 121.344 li
181 121.281 li
181.375 121.219 li
181.813 121.156 li
182.188 121.094 li
182.625 121.094 li
183 121.031 li
183.375 120.969 li
183.813 120.969 li
184.188 120.906 li
184.563 120.906 li
185 120.906 li
185.375 120.844 li
185.813 120.844 li
186.188 120.844 li
186.563 120.844 li
187 120.844 li
187.375 120.906 li
187.813 120.906 li
188.188 120.906 li
188.563 120.969 li
189 120.969 li
189.375 121.031 li
189.75 121.031 li
190.188 121.094 li
190.563 121.156 li
191 121.219 li
191.375 121.281 li
191.75 121.344 li
192.188 121.406 li
192.563 121.469 li
192.938 121.531 li
193.375 121.594 li
193.75 121.656 li
194.188 121.719 li
194.563 121.781 li
194.938 121.844 li
195.375 121.906 li
195.75 121.969 li
196.188 122.031 li
196.563 122.094 li
196.938 122.156 li
197.375 122.156 li
197.75 122.219 li
198.125 122.281 li
198.563 122.344 li
198.938 122.406 li
199.375 122.469 li
199.75 122.531 li
200.125 122.594 li
200.563 122.594 li
200.938 122.656 li
201.313 122.719 li
201.75 122.719 li
202.125 122.781 li
202.563 122.844 li
202.938 122.844 li
203.313 122.906 li
203.75 122.969 li
204.125 122.969 li
204.563 123.031 li
204.938 123.031 li
205.313 123.094 li
205.75 123.094 li
206.125 123.156 li
206.5 123.156 li
206.938 123.219 li
207.313 123.219 li
207.75 123.281 li
208.125 123.281 li
208.5 123.344 li
208.938 123.344 li
209.313 123.344 li
209.688 123.406 li
210.125 123.406 li
210.5 123.406 li
210.938 123.469 li
211.313 123.469 li
211.688 123.469 li
212.125 123.531 li
212.5 123.531 li
212.938 123.531 li
213.313 123.594 li
213.688 123.594 li
214.125 123.594 li
214.5 123.594 li
214.875 123.656 li
215.313 123.656 li
215.688 123.656 li
216.125 123.656 li
216.5 123.656 li
216.875 123.719 li
217.313 123.719 li
217.688 123.719 li
218.063 123.719 li
218.5 123.719 li
218.875 123.781 li
219.313 123.781 li
219.688 123.781 li
220.063 123.781 li
220.5 123.781 li
220.875 123.781 li
221.313 123.844 li
221.688 123.844 li
222.063 123.844 li
222.5 123.844 li
222.875 123.844 li
223.25 123.844 li
223.688 123.844 li
224.063 123.844 li
224.5 123.906 li
224.875 123.906 li
225.25 123.906 li
225.688 123.906 li
226.063 123.906 li
226.438 123.906 li
226.875 123.906 li
227.25 123.906 li
227.688 123.906 li
228.063 123.969 li
228.438 123.969 li
228.875 123.969 li
229.25 123.969 li
229.688 123.969 li
230.063 123.969 li
230.438 123.969 li
230.875 123.969 li
231.25 123.969 li
231.625 123.969 li
232.063 123.969 li
232.438 123.969 li
232.875 124.031 li
233.25 124.031 li
233.625 124.031 li
234.063 124.031 li
234.438 124.031 li
234.813 124.031 li
235.25 124.031 li
235.625 124.031 li
236.063 124.031 li
236.438 124.031 li
236.813 124.031 li
237.25 124.031 li
237.625 124.031 li
238.063 124.031 li
238.438 124.031 li
238.813 124.031 li
239.25 124.031 li
239.625 124.094 li
240 124.094 li
240.438 124.094 li
240.813 124.094 li
241.25 124.094 li
241.625 124.094 li
242 124.094 li
242.438 124.094 li
242.813 124.094 li
243.188 124.094 li
243.625 124.094 li
244 124.094 li
244.438 124.094 li
244.813 124.094 li
245.188 124.094 li
245.625 124.094 li
246 124.094 li
246.375 124.094 li
246.813 124.094 li
247.188 124.094 li
247.625 124.094 li
248 124.094 li
248.375 124.094 li
248.813 124.094 li
249.188 124.094 li
249.625 124.156 li
250 124.156 li
250.375 124.156 li
250.813 124.156 li
251.188 124.156 li
251.563 124.156 li
252 124.156 li
1 0 0 rgb
@
92.5 127.281 mo
92.875 127.344 li
93.25 127.344 li
93.6875 127.406 li
94.0625 127.406 li
94.4375 127.469 li
94.875 127.469 li
95.25 127.531 li
95.6875 127.594 li
96.0625 127.594 li
96.4375 127.656 li
96.875 127.719 li
97.25 127.719 li
97.625 127.781 li
98.0625 127.781 li
98.4375 127.844 li
98.875 127.906 li
99.25 127.906 li
99.625 127.969 li
100.063 128.031 li
100.438 128.031 li
100.875 128.094 li
101.25 128.156 li
101.625 128.219 li
102.063 128.219 li
102.438 128.281 li
102.813 128.344 li
103.25 128.344 li
103.625 128.406 li
104.063 128.469 li
104.438 128.531 li
104.813 128.531 li
105.25 128.594 li
105.625 128.656 li
106 128.719 li
106.438 128.719 li
106.813 128.781 li
107.25 128.844 li
107.625 128.906 li
108 128.906 li
108.438 128.969 li
108.813 129.031 li
109.25 129.094 li
109.625 129.156 li
110 129.219 li
110.438 129.219 li
110.813 129.281 li
111.188 129.344 li
111.625 129.406 li
112 129.469 li
112.438 129.531 li
112.813 129.594 li
113.188 129.656 li
113.625 129.656 li
114 129.719 li
114.375 129.781 li
114.813 129.844 li
115.188 129.906 li
115.625 129.969 li
116 130.031 li
116.375 130.094 li
116.813 130.156 li
117.188 130.219 li
117.625 130.281 li
118 130.344 li
118.375 130.406 li
118.813 130.469 li
119.188 130.531 li
119.563 130.594 li
120 130.656 li
120.375 130.719 li
120.813 130.844 li
121.188 130.906 li
121.563 130.969 li
122 131.031 li
122.375 131.094 li
122.75 131.156 li
123.188 131.219 li
123.563 131.344 li
124 131.406 li
124.375 131.469 li
124.75 131.531 li
125.188 131.594 li
125.563 131.719 li
126 131.781 li
126.375 131.844 li
126.75 131.906 li
127.188 132.031 li
127.563 132.094 li
127.938 132.156 li
128.375 132.281 li
128.75 132.344 li
129.188 132.406 li
129.563 132.531 li
129.938 132.594 li
130.375 132.719 li
130.75 132.781 li
131.125 132.906 li
131.563 132.969 li
131.938 133.094 li
132.375 133.156 li
132.75 133.281 li
133.125 133.344 li
133.563 133.469 li
133.938 133.531 li
134.313 133.656 li
134.75 133.781 li
135.125 133.844 li
135.563 133.969 li
135.938 134.031 li
136.313 134.156 li
136.75 134.281 li
137.125 134.406 li
137.563 134.469 li
137.938 134.594 li
138.313 134.719 li
138.75 134.844 li
139.125 134.969 li
139.5 135.094 li
139.938 135.219 li
140.313 135.281 li
140.75 135.406 li
141.125 135.531 li
141.5 135.656 li
141.938 135.781 li
142.313 135.906 li
142.688 136.094 li
143.125 136.219 li
143.5 136.344 li
143.938 136.469 li
144.313 136.594 li
144.688 136.719 li
145.125 136.906 li
145.5 137.031 li
145.938 137.156 li
146.313 137.344 li
146.688 137.469 li
147.125 137.594 li
147.5 137.781 li
147.875 137.906 li
148.313 138.094 li
148.688 138.219 li
149.125 138.406 li
149.5 138.531 li
149.875 138.719 li
150.313 138.906 li
150.688 139.031 li
151.063 139.219 li
151.5 139.406 li
151.875 139.594 li
152.313 139.719 li
152.688 139.906 li
153.063 140.094 li
153.5 140.281 li
153.875 140.469 li
154.313 140.656 li
154.688 140.844 li
155.063 141.031 li
155.5 141.219 li
155.875 141.406 li
156.25 141.594 li
156.688 141.781 li
157.063 142.031 li
157.5 142.219 li
157.875 142.406 li
158.25 142.594 li
158.688 142.844 li
159.063 143.031 li
159.438 143.219 li
159.875 143.469 li
160.25 143.656 li
160.688 143.906 li
161.063 144.094 li
161.438 144.281 li
161.875 144.531 li
162.25 144.719 li
162.688 144.969 li
163.063 145.156 li
163.438 145.344 li
163.875 145.594 li
164.25 145.781 li
164.625 146.031 li
165.063 146.219 li
165.438 146.406 li
165.875 146.594 li
166.25 146.781 li
166.625 146.969 li
167.063 147.156 li
167.438 147.344 li
167.813 147.531 li
168.25 147.656 li
168.625 147.844 li
169.063 147.969 li
169.438 148.094 li
169.813 148.219 li
170.25 148.344 li
170.625 148.406 li
171.063 148.469 li
171.438 148.531 li
171.813 148.531 li
172.25 148.531 li
172.625 148.531 li
173 148.469 li
173.438 148.406 li
173.813 148.281 li
174.25 148.156 li
174.625 147.969 li
175 147.781 li
175.438 147.531 li
175.813 147.219 li
176.188 146.844 li
176.625 146.469 li
177 145.969 li
177.438 145.469 li
177.813 144.906 li
178.188 144.281 li
178.625 143.594 li
179 142.781 li
179.438 141.969 li
179.813 141.031 li
180.188 140.094 li
180.625 139.031 li
181 137.906 li
181.375 136.719 li
181.813 135.469 li
182.188 134.156 li
182.625 132.781 li
183 131.281 li
183.375 129.781 li
183.813 128.219 li
184.188 126.656 li
184.563 125.031 li
185 123.344 li
185.375 121.656 li
185.813 119.906 li
186.188 118.219 li
186.563 116.531 li
187 114.781 li
187.375 113.156 li
187.813 111.469 li
188.188 109.906 li
188.563 108.281 li
189 106.781 li
189.375 105.219 li
189.75 103.781 li
190.188 102.344 li
190.563 101.031 li
191 99.7813 li
191.375 98.5938 li
191.75 97.5313 li
192.188 96.4688 li
192.563 95.5313 li
192.938 94.6563 li
193.375 93.7813 li
193.75 93.0313 li
194.188 92.3438 li
194.563 91.7813 li
194.938 91.2188 li
195.375 90.7188 li
195.75 90.2813 li
196.188 89.8438 li
196.563 89.5313 li
196.938 89.2188 li
197.375 88.9688 li
197.75 88.7813 li
198.125 88.5938 li
198.563 88.4688 li
198.938 88.4063 li
199.375 88.3438 li
199.75 88.2813 li
200.125 88.2813 li
200.563 88.2813 li
200.938 88.3438 li
201.313 88.4063 li
201.75 88.4688 li
202.125 88.5938 li
202.563 88.6563 li
202.938 88.7813 li
203.313 88.9063 li
203.75 89.0938 li
204.125 89.2188 li
204.563 89.4063 li
204.938 89.5938 li
205.313 89.7813 li
205.75 89.9688 li
206.125 90.1563 li
206.5 90.3438 li
206.938 90.5313 li
207.313 90.7188 li
207.75 90.9688 li
208.125 91.1563 li
208.5 91.4063 li
208.938 91.5938 li
209.313 91.7813 li
209.688 92.0313 li
210.125 92.2188 li
210.5 92.4688 li
210.938 92.6563 li
211.313 92.9063 li
211.688 93.0938 li
212.125 93.3438 li
212.5 93.5313 li
212.938 93.7188 li
213.313 93.9688 li
213.688 94.1563 li
214.125 94.4063 li
214.5 94.5938 li
214.875 94.7813 li
215.313 94.9688 li
215.688 95.2188 li
216.125 95.4063 li
216.5 95.5938 li
216.875 95.7813 li
217.313 95.9688 li
217.688 96.1563 li
218.063 96.3438 li
218.5 96.5313 li
218.875 96.7188 li
219.313 96.9063 li
219.688 97.0938 li
220.063 97.2813 li
220.5 97.4688 li
220.875 97.6563 li
221.313 97.7813 li
221.688 97.9688 li
222.063 98.1563 li
222.5 98.2813 li
222.875 98.4688 li
223.25 98.6563 li
223.688 98.7813 li
224.063 98.9688 li
224.5 99.0938 li
224.875 99.2813 li
225.25 99.4063 li
225.688 99.5938 li
226.063 99.7188 li
226.438 99.8438 li
226.875 100.031 li
227.25 100.156 li
227.688 100.281 li
228.063 100.406 li
228.438 100.594 li
228.875 100.719 li
229.25 100.844 li
229.688 100.969 li
230.063 101.094 li
230.438 101.219 li
230.875 101.344 li
231.25 101.469 li
231.625 101.594 li
232.063 101.719 li
232.438 101.844 li
232.875 101.969 li
233.25 102.094 li
233.625 102.219 li
234.063 102.344 li
234.438 102.406 li
234.813 102.531 li
235.25 102.656 li
235.625 102.781 li
236.063 102.844 li
236.438 102.969 li
236.813 103.094 li
237.25 103.219 li
237.625 103.281 li
238.063 103.406 li
238.438 103.469 li
238.813 103.594 li
239.25 103.719 li
239.625 103.781 li
240 103.906 li
240.438 103.969 li
240.813 104.094 li
241.25 104.156 li
241.625 104.281 li
242 104.344 li
242.438 104.406 li
242.813 104.531 li
243.188 104.594 li
243.625 104.719 li
244 104.781 li
244.438 104.844 li
244.813 104.969 li
245.188 105.031 li
245.625 105.094 li
246 105.219 li
246.375 105.281 li
246.813 105.344 li
247.188 105.406 li
247.625 105.531 li
248 105.594 li
248.375 105.656 li
248.813 105.719 li
249.188 105.781 li
249.625 105.906 li
250 105.969 li
250.375 106.031 li
250.813 106.094 li
251.188 106.156 li
251.563 106.219 li
252 106.281 li
0 0 1 rgb
@
grestore % PSGState
2 lc
232.063 158.594 mo
140.313 158.594 li
@
140.313 158.594 mo
140.313 85.2188 li
@
140.313 85.2188 mo
232.063 85.2188 li
@
232.063 85.2188 mo
232.063 158.594 li
@
0 lc
152.313 158.594 mo
152.313 156.594 li
@
gsave % PSGState
151.313 160.594 mo
151.313 172.844 li
153.313 172.844 li
153.313 160.594 li
eclp
grestore % PSGState
172.25 158.594 mo
172.25 156.594 li
@
gsave % PSGState
164.5 160.594 mo
164.5 172.844 li
180 172.844 li
180 160.594 li
eclp
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
165.479 169.658 mov
0.000320435 0 (673) ash
grestore % PSGState
192.188 158.594 mo
192.188 156.594 li
@
gsave % PSGState
191.188 160.594 mo
191.188 172.844 li
193.188 172.844 li
193.188 160.594 li
eclp
grestore % PSGState
212.125 158.594 mo
212.125 156.594 li
@
gsave % PSGState
204.375 160.594 mo
204.375 172.844 li
219.875 172.844 li
219.875 160.594 li
eclp
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
205.359 169.658 mov
0.000320435 0 (674) ash
grestore % PSGState
140.313 152.469 mo
142.313 152.469 li
@
140.313 137.219 mo
142.313 137.219 li
@
140.313 121.906 mo
142.313 121.906 li
@
140.313 106.594 mo
142.313 106.594 li
@
140.313 91.3438 mo
142.313 91.3438 li
@
152.313 85.2188 mo
152.313 87.2188 li
@
gsave % PSGState
151.313 70.9688 mo
151.313 83.2188 li
153.313 83.2188 li
153.313 70.9688 li
eclp
grestore % PSGState
172.25 85.2188 mo
172.25 87.2188 li
@
gsave % PSGState
171.25 70.9688 mo
171.25 83.2188 li
173.25 83.2188 li
173.25 70.9688 li
eclp
grestore % PSGState
192.188 85.2188 mo
192.188 87.2188 li
@
gsave % PSGState
191.188 70.9688 mo
191.188 83.2188 li
193.188 83.2188 li
193.188 70.9688 li
eclp
grestore % PSGState
212.125 85.2188 mo
212.125 87.2188 li
@
gsave % PSGState
211.125 70.9688 mo
211.125 83.2188 li
213.125 83.2188 li
213.125 70.9688 li
eclp
grestore % PSGState
232.063 85.2188 mo
232.063 87.2188 li
@
gsave % PSGState
231.063 70.9688 mo
231.063 83.2188 li
233.063 83.2188 li
233.063 70.9688 li
eclp
grestore % PSGState
232.063 152.469 mo
230.063 152.469 li
@
gsave % PSGState
234.063 146.344 mo
234.063 158.594 li
236.063 158.594 li
236.063 146.344 li
eclp
grestore % PSGState
232.063 137.219 mo
230.063 137.219 li
@
gsave % PSGState
234.063 131.094 mo
234.063 143.344 li
236.063 143.344 li
236.063 131.094 li
eclp
grestore % PSGState
232.063 121.906 mo
230.063 121.906 li
@
gsave % PSGState
234.063 115.781 mo
234.063 128.031 li
236.063 128.031 li
236.063 115.781 li
eclp
grestore % PSGState
232.063 106.594 mo
230.063 106.594 li
@
gsave % PSGState
234.063 100.469 mo
234.063 112.719 li
236.063 112.719 li
236.063 100.469 li
eclp
grestore % PSGState
232.063 91.3438 mo
230.063 91.3438 li
@
gsave % PSGState
234.063 85.2188 mo
234.063 97.4688 li
236.063 97.4688 li
236.063 85.2188 li
eclp
grestore % PSGState
gsave % PSGState
180.688 170.844 mo
180.688 183.094 li
191.688 183.094 li
191.688 170.844 li
eclp
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
181.688 179.908 mov
-0.000488281 0 (q1) ash
grestore % PSGState
gsave % PSGState
139.563 85.0938 mo
139.563 159.094 li
232.563 159.094 li
232.563 85.0938 li
eclp
gsave % PSGState
146.813 88.2813 mo
146.813 100.531 li
157.813 100.531 li
157.813 88.2813 li
eclp
%%IncludeResource: font Myriad-Roman
/ANIANM+Myriad-Roman*1 
[
48{/.notdef}repeat /zero /one /two /three /four /five /six 
/seven 41{/.notdef}repeat /a /b /c /d 8{/.notdef}repeat /m 
3{/.notdef}repeat /q 142{/.notdef}repeat
] ANIANM+Myriad-Roman nfnt
ANIANM+Myriad-Roman*1  [9 0 0 -9 0 0 ]mfnt sfnt
147.789 97.3262 mov
-0.000488281 0 (qd) ash
grestore % PSGState
grestore % PSGState
grestore % PSGState
grestore % PSGState
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
] del_res
/ANIANM+Myriad-Roman*1 ufnt
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 12.0.1
%%For: (RSLab) (Yale)
%%Title: (supfiglowreim.eps)
%%CreationDate: 9/14/2008 1:07 PM
%AI9_DataStream
%Gb!Q;B6PO[e*-bCkO9S/&Ssd(TUee2%QNYA3+.AU`[2Pl50pk`mVfk'\s:f?'5$,bpZu#n?*18m8u\OA5@<W%\*M<4>G:ZGQ)Fod
%1JB0rkFK\$oCKT=ZUS;!+J6*LX9hM\e!ae/@F8!9jh'&V%o.GAQU\_sm!Nu&rKV'dGHDlKXM'0D[HMJfo<\%\B]6;ko"fd]dqK=X
%fu)^\B!%Xcla1DDp@V:X;/at7KspaBa.;@*A#IdkeHSlI*sC)Qa23&lZ[VQ&H>`@UU5!8)\G:q1G1d*X!gSDQ4nr@\jn$+@3!"/;
%eG!/)I36/E4ed`'`aAdk!%OYZWh!,s`UEf!dm>Hf[V4(`h-&d?fcTj$K4_$0TC>Za1g8_]g7X!6W7tM0Np=1Xs3ff7-tir;QI8Jh
%SMbK!BZeD#C"p"SW!,G0ehEl-O\\')Q1mJ:XDe$mD#@ol]%a16)a06DgV(FKo7'#@9au38V0V"*n'=JlZJ?LF:"nHF>i$HDlA\RJ
%6_EgpemQDO2X9q<=5ot*HYX&*5j<ZF_fi4Oo,<&_pg:0%DY+bia5'5^U2u#<RPG?!20orF,u$1i=i67<=[XAC+IJCRaPdKBn);k8
%D[uK]$0\,D?Lt;P?:jB^*['%@F?]/(]frOiRW[><3<S20Ih7HYT)%9[s*N9"N?8QID-VQEY_n2M';0Aj%P(@nf8H18lif@bjpPQ:
%[)#`:m(@U^klZ5::jdI3J)*Qm17cY@GA#:d",rk3W0>K=okJt8U:QK5PeVR9W,??DM<A'WOa.-/e82bDqQgP3F0"!]2Z`_J^%V0N
%k^!2YpR.@[%h+TPcc1Gjh*u>PhYHTkg@`\c9<Hf[BAUEt6+B,uYCk&=3N?;lM]2]t54fe5pO,:tU8%G!IJ*LITS#q5?*EqY1Q<1H
%B)j8e,6MOG^!WkQ^oYlS"etG*SOTL5)17%$UC!fOPI[eS)a2R-IPfOBJghSfZW?5M]@Ui*?[dW_D!&:[q.R.-CLE[ufmF!jcb+A2
%^HJ+#qJ2kVCcC,,o:1pDr,9=!522Vok5BMu^!Y-tcu]F5ehaG^$`k+O/*Nd&p[c!-^ARD3#63r[^B)fPSR,pthJ4sh;si[nd)`T.
%_(o\9&?Pj4qB',JCIn'gZN`++g@PbLTiS;qo)4D[Pg@76?f/74p]g_FYC4-r1d#/1W]N[^)iY)QC>5Spc1L/,bMR0bqJFl8b]Z!F
%oW"!%UX(`-oJ+-ZAj.l3n+PO7HS1.<VT^)1;]`SaNY"L,k1KXjf_s`qq;Bo-dkU[$p&-maG!CIhNr,Gf9O-Q]?+M+b1*9kdYAW0_
%([mn9(bH3$]XP^RlXsrbi>QT0NVU0JP-,BB28kMY,P-N?d;V<g\C_bm@t:RF^2(<VRVo)O6_[/p1]TVk0#<QP]S#P"@6Wn"7EB]G
%k2/l=E1-7`IerG0qW@)79tpGj^)eD/r5R[9?Pd9t<ODKB0D]&i=G\)MJ`Q2+BV?la?TN0#?AUkO>Gn]dhIX4+)6TpM$=E^e+KSs&
%_`4FGp!.X=ichljXj)[],H/Hci;3LKV5#YhQ[_-nr!"f)^!:hGYPm13r"V_/7o*lPG9@NKAYYlRH8,(Jl@&f-e`Pa+R'&<YM'49#
%H=0R"l5`+hC:jtjpE"ka3ra(-)IZI5^t$3O5&S!_m!\WcUDKKH-`O+I^jALb%(8n)RstkZ;HQ?f]_qLJ0@mqi#,Xud^%nD>YBWhK
%q0X-9/D(sdf2WO\=+lt=`P7$8AFsZD%:m=()YfP<SQ6P!pX/U,=r2d!aW76hR/3-fY<_kpqA)B?mCsU4SSj(s#m;g?dHau>)i?Yj
%>L/kdB"pc[_Ec320W9LIf41h5*l5UpnD@'KoX!,OoqLXRW=<%!:241E'36UdUM+MSDR(d&.Q)=m*9S9]I0YK*_=(0u_dj82Sc?(E
%;fi1"jpq#b%ID11M.l%MenRU:TZhZpW$i*Q8;eP,58kbshp`e0%/`][/-cIH=ur.r>GdF0BQbF'c^O94Fmlr3D>49[q@0(j_672G
%p7J8u4cJ7RCXIG2]E;gZNB4"qbKSMX?dT:\.K"ac"^&StC,gE4C-WViRkZ1;niT7P74f"Si9#M3lU:F6j9>HgT[b2R8*d!$5g&bY
%gh+%:R"I`Wgm@GNJZ/PYL'(s1e;o2_Brl0;C'-.8jrZAr!!a!]Cq`1.e9\km^s-<\#j@N@;gc%A'aMYFHiV-lB`,Us+I(Is.JTeM
%L1C@Gan\GLJ\Pumhme=Qc0PJJh#"qV/q+8*iEf5aNE0OcX+M0]UDE^Y[J1]^VmY\`BO0j%CMNG/W5q3JO&]BKjW-nY5gdNH`"C6.
%"oE8Bq$][_^/oR0qaP8K9"tQH=?'sm(]&H2[L!\(T7s4\I%fAGHpItA<M.]UeW'T_DS]%EFUrf+nor/uJe?`:GIJ2C,oLa!N^#Ec
%4"h\8H3gCUJP,cWjVMffEn8ff@'UiIQ4.WkEt]G5om^aEfuEscYqaD4naE)GiAi6hU&Xt]s4uM<s4Meqs(a,R/NW?JpKecZ1%d2;
%S5Ah?c2d3le]-pjoi)@'32fjY./3bI.3Z/f\YfpU?HR99NoSd>bZU_7DenHae]mq2U01MXB:.A%AZL9\>P6j'%[5jG1G%p#fdpBX
%<SRN%X:O0C2pJ^h[#rs]s2t%\D>8>BgL,+"s(0rVmZ'0<Ah_4;"O]D=DXZh9Ph99'00*4<[GS]6DiNsPV[Erum\n^XK\bL+U;u/D
%me7iM<eF/nk5QPc<g7pun[;qK+!!99mmB=eR&XlJ=4_0CkXBj^]@>_tQU.McIBJ"Lg+UnJ-@GFUg$D183`'8aD\Tcr4/=P.53_bZ
%rC68E7^Vc2UXt3C/*75C?;@lY)a&=Z]fJFXg$)A*@['Wp>O)?,rFYBmZc4gtl8Qo($4pW.3BY[Sh.BilDSOpDM"GGSc+XI!ebUAt
%lc9RaXju`Z9Pj/d\%`.gdN`9thAnN>c0lFs3VUbi<"569_S6c*^HqK_+a]jm:G@8O)ZLgGbOt"jp>#R^%e+q1[;FCdj`FH,h,k1l
%oW?^f'?2p],O]!l@.4XXb2OFFM.aDM%7U1G06XSTTN>q']/;NViN:_5K5j>+9B4Z_Vg5WU\umr)!0dqg:'R'aBERY0""*Z0l][FQ
%Z;Umj6ZE>5d"<L"p'3:kK!%UO4MGo`ogW4A/#&H,c@CDjXWsLqjcf:LV$ER_T^L/5jK:&n>/ICE\e,)J^'\WXh2(PN1^&S]jUqsk
%).,m%/4:6Krd^f)4dKAMmcs.JNQV%"9eL"V!)(?a+d3ep$Y1-sclFI^I;=8,@6dT&oD4o!-$iu*Zc-9TBi(j"PAEW1OS0NR/:O!N
%:IhT-cd?2,%.AN7BDh](puH'3qR6LVW69AU"`/a7W=gV'H_&dNVl6U%Kj*D]9Iq#jYMSTCC[H:8gf1+:YM\`6i5IR(b^[6=7UT-A
%!$s\^qY.3,rLl2W3WZko-/a602^qs:K\r.sPe-hc9;ap<VEA3pT[7`nN^PuYeR^o`IlBOnBYChZl2LEu?^s\sRJJ;[m@*L*"H-uh
%/rfH6jk1fYj9[C9dd)"1PsH5h$N96P"3(dR2(6L998sj&+1_UX$GH)sklKG3aX3aP3M94Kje^cDC8P46qt]eELioq$VtZMV4%u@B
%+EF*f&Z.?ph2mKedd?bVBK$F&)D&iW>4HG[Qo+_k+e?)a(il'HN[mqj;c7JQ:)c2t]oEF7;%<V'`c\co2&n6?Y2IkK]Jk/qMS?HH
%@i:MgO4*%/&_C%-E7[o^W9EsXLng+u^BE#]5%H,.[)!eDE!;H`FjV_^Lc]:R<u$.IAt>ps'^\I\Q#6!$/K`DY:^TbL6:")&&^.o+
%YjTLBN1W.1SSE`A(0o$eYeU'&(7K]`h09$jd,..5G*h3+n$PM/QOj58J?54`$H%,Kn-eu@?'9sXk#)",nkdhcY4VjA%h&)u#a&P,
%]0KS=[U8RmXecK]\$ktL.hqokokDM4"@!!hj.JF-%(V\89go_bOgof)cd,_noc?fEcWW9G`o%TM%Fioa_;1,dT+-BlBL.SS-2kVW
%h+k^FUrQjtcir8":@E[e'^PCaqCl^k^ho*6/"U0Ab`K\dmH\p"6,O7OL^7Xqmtqffb'&O32_"Ogq-3toef4SM>?bKcc]7l4VI7.N
%34I_73Fk-fQd$Img@F']RkV+&(CKQBR5TZ?ZU1?LUb#f,L6Wae#_@SM2``MF<:18\]p[[C#48CoS;3II%"T?3L,.I1CD79K'c]Q"
%*q/(qXHWM^dDD:'`?;"^oD.')8hof'p.SUC^2P$XN^ED!UakajhBBSd@+bDA!Ni9ODa8]`JC_W4rJtP,/.(]O3=JVS0R/+Yqke8m
%IchT'Yd/,i;6uU%Q>d:iR4HlW>OXMtnqN0Gc8Hr7.mbIud50dRECS_;Q:crWa?7R&"'J+1[Xp<1pbr6hS#?c%6V%Tc'5_rlkrRO7
%,P*kLP\@hS_iY7b'nS1a$f,JjBIL_N@1!Tk_1LT!h``^]mH*_5"&:4sH$R:[I9;uZ:E*JciHu"rDE,7L^ZZ'3O>lda+5,5+[FEZ#
%-[0EBFlp$da%!>cgShM1T3&e!$VuPUgY9iYI_WIn?faqeol$5,;C_,6][rLYF)=!>9Uo:7F7+-qoBJ?2AX3i9C[H4Te_IeS'M>Q(
%j^WN.CqWkqeS[=e>@VsW/GgJmls>(YP4-//A'6Oiq,m3mIMYWq46NmDDBH:k6>k7aeVPkrXEWhj1@G<dURPBOJkGL@]Lpf$$Jqta
%rCte1FJ`u+JR@SGW<d0G5JP[]0]LCF*$>>cV5&bbe%54$p>>FkFT-W4UCpe8qF:Jrj3:ZLldaZin6#JhhqjZ<e#WFRDmfV?GJAHE
%XC\L)33"O($H]f2/,E'-k.R3_;S@Q1m.sW))S\$^5H<&CLWo<H,f:;hW#cZdZ^9LoWetP@p*!Z0UUn'WRVQ7:<"U!9fLjpMYJ(tu
%Wi5X*T2srEo4tTY'if*@gKa?DR[p"mYJ*'cJ6"MY])AVq>SKquD4TAEY07tH&'pJ>/$keH5S_Ta7!N^dC*!.*q6Kbd`RorF',$'N
%1Y:d%4]hiZ=WOJK=6AEPn-GX;/dbm"?0!K-LanclcXi^5III1#q94WZb+jAfJ'1ZgJ.+g?+a%ec9/W&]4^V/e?&L"TrKZKYRd*K4
%!Kuu-Z..S.il8+g6e-W]//B-=2,u/H^V%#/@bM12Y[(J>B>:b0LFT=XcG=52LMD!UhTjlF5#cGBiIKeL>[/\H4&_PO?`5m>09oKe
%Vthi-%du$G@d/*'CAI&5%NK16P@kO,`N:CpnrcC`pT\:Z/Tip92:iSB<qhXB4fYuj\Bn8A->07*5:BsC\N^F)[<7p:;r*r=c<"pk
%nk,q&T8d,K(%r)4p`TOc:&7]">Lq*#?f,Uu#NeBrB4j#tU'ge[@^!?*gYDD<m)>/1eWP*P4ZI2Ve^WqSrGcNd;$CLKk$C3PpO0#I
%`>akD5H9LmF_\7UU'esA_WBnFXaI=NAFbfB`Ifho?S`MKJe-D(=m`rs[#CrXOX;pZkd(#h14PNf;LNf"H1[reBl(fH<)`l98GH#.
%.T]8X-LY4)1H0s84VcLRmjL'Z;11>9_W4jCQHCPK$HVG=R6cO6TiQKsAl41[P7lF+p%[-+q.:"2?1/)!QWH5W8WW.lZUCe0'cI^V
%J%_=k[s+TdX7,Ro`L0aj\uS)r.=%7C9$OcgeIt3U3"S)T0)nNgWi0jqjeT+50%QB&(!<%N.3A!E@Uj[HIrkppAn7ppq3gp1h-E9g
%5=VV=1.]VE$HMUQF#R/qdfP__Fk4_X0%J4iC6ds9khKP6*ONukam,\C^,6+sR'G(g`Zg1Ci-QVZeluGQ>:T_$c\C9FHeSWIiil#3
%$;7:>H_QeWNlu;@8NupSY#Vr)"20uOq]D;2ok`)T]laSPO);"&5KN\L?ITHpf6P-?AaT8(n'(7fUNTuA(gs5_"n%Q-q:0<*mql7?
%fK+ug]sY8kfN4NU(&+2bf)(Kh]E7Z([B!S=`n&tTicMNpp9gs1e>DN5bI"m]G!5#)qgEph?"_>L^UGTEO4i=%hqMMlrQUBL_DJ7-
%c^]1YlS[r$f$PNk=&$H=>M<T\d@kKtOnRGVdn9qScf_^GmQ;AB5&['+otnS`N^)!ach2q>R=1^R?TS&2LXGa>>>OIl^CD%/Ds`>R
%`Tl18LG.,8r^go\Z%%G`)N,R)?2j57/A8['iP$%.6"BC%>I4$QdC53O`RN<RX/!Z"(X%M-s2\IJ>n,(OT"u/A!(L=jTMeQK"a!\8
%hoZ?CM`V`E\_GPnS_K(NO7HHmO9&a+VcZL)'T7[h_(r(N4jAJn)OW3DL@hRXLpTUXi^#`kNimu%_gHf.bH0TK_[1>g(<Y5dAdBC%
%At&&3#r%o^b5M8&apGQTp1B9&ookWPX[#%*=nGjsp,gcV3W`=22i+\\H\2SSWQsk[1VQhN*oo['8A.8!Wc<%tgKa(<.=c.ZjY0["
%$Oa;*.aeb3<>/5PeL6L#:cDLq<%FR\P@rl+<U5$m;?\PFT(]"<F9>Q=1POsXh;G3"Wc`[O9,2EUAI)69)4&B02t3XNFb@7IeV6<=
%r6aa<0;n?b7=p7)ebh$61`lUoSdPE'aCLaG.nQoOka+6f=/7"40"2anS0neI6_Uk"-Z1qgh(Yj3hLrhli14eZO"]?)WA15m<^=Nm
%]?Xg`d^d,h-SP-<q/aUAoRPn^Y?c<P4Y=,dJhp;];`(.C(-8[O7;>Vnp*=M4StAN&@'<nC!jY>TQrKsde\`D,7'KVk1)j!MncV2n
%k.O!e)b-:iCi">#K>MgY]mS_@0F]@o#!u=8hYWL!m'tgog)=:fBcFia/93j`\R3Fj2bN]2%iCV%g0S`h:_@W\nYoQpS94dU/Cd`)
%`)FbMmpN:c15,O2,E_i)CuIs%GRMok1SG>)V%@boOJ*1bh8o<Kj7a1h^8pk(>1b"SC_E5^n8@l4iTbH>;2Uc"**[HH0i)!5%f=Cc
%G<4bWHdubH.I5A20L#4;_'(T?:=#X3dO*mR="n_ZV)uO\"@soP*!J+o7U1Y/7K=?)@;mo\!bN0>/>1t$B&@HG&6p6ghk31TqiJ?g
%_7oKdX-hcgY+D5fihMs6!3@8A-Z!%&<bNK?)ii`Xj!;=r\fqiY"q<b1%<'jMgFf?\r31Z!CQ8>6oq_Q:V&P.J4\bU*Y8f)!JiqXb
%V+c\bL_td,NB_>&rASVr0t>GP_hSY6=+0TVd$<en"P@rR5jq=On(IL,oUC[bi!qS(mJ6IQlR)I7"@D$TP,qK"T-^bNA))PM%S25#
%\eP/6lL(+E:T5n\23M;Z3Gcf(goD)mZ";gMBs5MJ*VSC3/Nl9t8S:?F@XUi(nr`C7G.B4fou\4s'a!d6l2,<rXsaU9O?q;?mGs/7
%`/<;K:_.X$)CSsrkd@t?h'iV0+&7cT@GY/2n8%t_5'5`5.n8KQZ`gMFW=JjDbT$Rsc2-k"[/5IP&8ME!WulD6d`-+e5#_f6Qt[_T
%;;delW'+IA*>+eX=,lTKj(cg.`L4>$D#=Jn*]=hblf-O@oU*W+I$6>QFX@#sH;&r!gt:7A1DmRR$oYhuG)HP[1d;[l*dj<M;'b>6
%?!hF\oo5VYW;#Xakb6Z=WVD:t".>a7Ru`u:9[@#.5rf2lBp(NJn7@\A[sCj[V+q-\@%3-TU[X_G;S3(dGt\`STc$/6Y;O4`#HfC;
%Fob^5n61fi9uqXrkVm"U`<]Z][Vt6L">9bLo!n7ehQR2'I5F*8G<hGYNng+Or"AuQL$D(ni1N-Gp:tuN.gI"l":@?T&*(C]*b,,!
%g)@G`pe?u[Hc'BVTK7(-'WBSjFt-/$T!/q(g',>E"i'cJ/d9`Wi61o3o&;(`\$AcsIKRU-&-5*;]UkoP%c5HTBqR*oIdICmF<e@d
%+'S-,B-ppgW:hiej$r.nf>RSRb^ur7EO#i=bBKhaG#+N5r+&UHPJ+Ab-G-H"8')1I"IaB^1G^6n*@UfPh6XL2TF-^RF):-E3?a&1
%A[im"1eqBdgGo4mTXA]U?<nN\e!bmt+m,<dV2;crJ1\]8W7hJeXu[_pjK6d<QSB^U&A1Ll&oHq2h^Hd)?/WcaNBPcP.%3eVbWG]Q
%[N3nm^mHC/AA_'oRk#ig6..YM0BY^T+8s/pB&7V?GY*6%p2+.$o;_(@18A`H#GRHa*Z"+VkWa!s#Q3.4?K9TMW,^>)5/IXqCEi2$
%I`'uA4T%\Hb%Zgl$cd&2]G8^Q(q:8"8DBc\(iL-+`Z&@L;t;8+bU'OpA.ZNOq(O4]R(EVpcRr+nXuE#3!#uMX-m,VThOLWO)bQq\
%crsa9BoTk*;<,=kgNZb&'e2I\i`QO7Nui1m%NMdYk7[;V#!OgG&keG6+G=</Kn[GQN.<<:H?CKO'LJ$&c#;OH&L(3=E$@e35=Zn@
%9;4?]e3-+Y1i`I"D868+L2T;Z[MD1cK67Rk)Q>lRV#?1bW@o*^S6:eY)RR'V]uEfl"8[h:!T94S&mgCEm?4Vi^3pZ,Fh?pl?/7ga
%mif,2=#[.+!c1e;h>/5U1faY@f,nL"P"1r\:bg8\#-fjt$1D(;'i@#.FTT4c#Z8TCrQi-#QIkY/;Tf<8\Jt7sEfaL^nN^]NZATMh
%k"Q_l&M;+*FU/K+)8faj7IXb^\K8#MqJ_;Yjso"2m(;7,iroFkO_'"AMSWs5IkP]l($E"E6K<50q*>Z5p)K'[)KU2>6XXB>ho4TQ
%mKobaiJ>KP]6Rln6khP\.<n%fW5rKX)kRnU5LsErbMqYdS#J/(%r^kWFaq%6)qYk''LFBf3lWgs5QbiOP5]r[WA[83jYh@nkqb]n
%1Ej68g<ALi[P`S(EdE_'BH"]Y#a%$1G3P`,@-mh(G$6BJ%R'[f\.VREq]gdiM[!G1D2A-&eDtKY.P?X6G(B;`3$_qgr3]RcRri9=
%\aY+nJHGbI@cW9rHmcJ/&VQS8O1e@V0K3YHR$O;'!Xa8F.Q'g8SBis='56u\LBS,/%99Nl_a9f&f[_M<<(>j/2C7]h;D?)rgQWQ&
%F`SM/;hYO;46A$d*Xa[$qTgtjGU]MTb0sId]b"DHX[_:Hi=f]T[V:`__X5Q6-p+faYor`%cq%Nh_sT>JTDLp:^?i)nXV5417+Lie
%.#/:jV&Pqjfm-in;*;L?E6jP)I]n-*eK3+H0g!\9f#,eP`^s<uc53"o-]*K9VXq'\89-=)Q(]R!k6oSsF'[[%8EUB+jeDp(_K<NR
%^g+SZ8R7i?S^3(kQcmE#SWfoA"m>GFB^4Sfl$WJ0@4kp*2g',YFM?[<5%+_UT?\7Cb82<^KbL?T"m>H%`g"Toq1<\`=J'\_W3U\M
%;?bGNBm!`/Ot-&%ADo$uLaI57L_7I)@0]+qW*DdJ+QXEpb0&([?@]X#0,kF7<IfYqA2,t_<q-ACAIMO?<XG81*66'5AE9C$F\3bm
%#S_SaWDK;e-?tK(DIGd7+-gZP7f$/$BJP4O:6PFH,^G#s1>]K8+UhWWXQ#S;:s"')$rj`VqbS=_^;NMj"P#a1e]UI?0.A,MEu5"!
%#]oT)3EY[FRe2[][@aeC'fCK!]Gkere*b),QjcQuo.r1`?m(2<GG-$8JjCm'jPlImKU<2@<WL,fi_(--,F"q>@cR&.!d,P[,N,d4
%W>*ZJ8!#8),I;-pLL$UGNUPeS#bCTkRsCMI&]A+kffkP)42L0GaL='Z%00QaNR82P4O\OZ,F!hE]LAXuGuG1r@t\iJeLLZ)*LDgF
%1`7l0QtB+P_ftS['cA<qE0s>-`7h`23q8@,MsCi0,b,ET2O>X)(jUUYVT9YJ:XC!qGs>2%TtfPLC`hY]!G(tq(`Pc+(/Uu@Jah=i
%rU0e;R][3PD+MOiLeQ9qa##No?o"UI'/GQV(V9oYEcG&s]>Fbs:7d->J<0?94$8cF:]$i2HP+",X:R@GXZ^?\lX:D\hf^Bu#H7\\
%fGlruZ!?[[bI+klMu[!@L>^_Jo3hq+h<i5rZq1d$l5eSOJn%6[h[ir22q`*4]H,-).?@jFNXS_8?#on8_gJAd8_,:j"&Z_lFjJ<W
%W@(6(`dRl(0S1e>5G5iA3g,&(N'oh/GjmbrIp,l4>>Q.smFU3:k!%kT63oS'*33&I+CV3pX2%P4NFiRh2g"kll1peo!pV%6Dcihi
%o^Htg1lCrQ&tJ;IP4^/p:6FMG\,i\jXZ,PJd<YoDU5"D.LU5jEp-Vr#L5*O4F"?dkM6/_.<IK@3_1JffB`of7``_iZ/JOq7]sU)8
%o`fTP@(fth.jO/n%<8?Tef3uPk,6H&1orVi;%RZH_*R/"oACdE6=^<)D:6'>SWO*?mQkf,/=kMI#jE^-+&%.Mg#gHAr6PG2Y^2,9
%H("8"B(`7j@4a_L@ig!:%qs>(`&,opUgOIB^Bp7d2sRY\$JuaonXDj;jua<s13SK56-'1p=^PC2OQYeF3?:/?M1#k<DW-2X./IHT
%CrhD<\+AFG8#C=pi6]\1GHhGn[PrAAT#us!YY@28Du="qOYZN[JmkRER27K!E8o*S8EeRBM)+\T22t2QRs&Bb)prd_AtFff5)PbR
%S/O8*Sk/(h]Z=I&j?0\c-I'c0".CJW^uW.j1\6>\O<\Sug;LT3h!^K0Nj*eETgLI6[NRZF!Y<[Lo/V'u@e4dMNKAC.*mX!bS1f"&
%52^H@U/8mK$um%-7(egKDS+C2IUog=ZHFuK=&gal`S^iY6f]s-PL273D_-b:Z2CpFbenB#*M=e,A7WSJa3<ujOp6Md"JJ/U(V`;]
%+MVE*,%@G$BKDuq?PT7I@u0D(IrQr.*@!t9bt!`3RuG7Z]8%U<V/]"W:Zk$"_@-@W;ST]n>Y/Sf$p,jf-sct^:b[/`]Y(YVRWkFY
%%J-7<P_g%uY%cKd9p32]?BX[JP`fR,ISD1]<hDrX-V5'rRR3/g`%mT'=bp`@8[:%60&/bEl81Q9e#4%bFKZ18L(`\0@o!FSKJ5/!
%,C[\BLRX?5POaBDbr9!C_PB<1U^ApBr^9YU0@QefPS_Ug3H7q<VgHSF.FUo3A''[O.0!sPGr3Sd88&tr.?BT.>ntsmBRK4QBQ,2d
%Id_.%\)MDLPGS&&Lke%60"d9#>7fOjYlBNa3YSR*O5Usc)h_&O_FZYpiXs=CH7%EP3nXPP(fNbl4:Kj89Y__5ZWHpVO2>W<8",L)
%iof\D>Xj/C*CHPDaPO9F5F]j4S(>nq5`D__;YegPD!>>-O!RG3f<ODe_`>AFr?A[lZ(6T`:11VA/9UGq,;ncK,NnGil^\Qpdb%X=
%Vqo;oddBjc)Tu`_r>+p@/+#"8FkCJ=q6[d/oA&#S:BFe\B@%B>%k0d[&CTtRfjc,(fi]pd92)sE#Yt)o`,&Fp]t:$i]j!g'bQnTd
%b\f"U04]A8WG&26B+.c`m;DUgo#QTdrP#X]^!u^Lp9SXTK@92E1gd9:cManqZJYRMk3=tdTBoVeTN]`DI&Zi9Du6jBeHhZ2(]-4^
%^%>fT18q=%$UVVFH(..md4[6XnjhU1i1aPgj4QnhE\kc%0d5K'VeGPrnUo)*LTQk1<'5fL\&l.a_%&I7DKpQ4+P`P>[)CmMh?`G8
%<6%\nl1u<t"9V:B`1:4=_.QW#WKV*q?0G!1A^0s[+"!^t>1`)>Cf(e:CndWTl\4]>`L.;_\cQc,)g^7r(cs_9c$CqA3)lF9)<,8A
%cn4>)HPRjp'aXmA/JLS#II#s^<.h2.1h\[5S_U&_fVNoQ=]MkYWp19A(N6<@CWB!4;cPQh,fre1Z-SJF;bl[Xaf,mPgIfL\lr,bO
%]-<Vn3b`&q.]^nQml>Q#he7k6@jgt)>t(jE':HJ_M1$l0KH8E<9'dK<G!2,/52T(\\qtj/bh\I1p8P@ogt#.VYqIM?BSqXpneeB.
%,(Vc@@jUiJ[Z^tWqdF5rIB%Ejm9Z>3Z&brLQds-F<2Yu5Von;r;G!aRfVe"%_*C,B`'.1%+!/cB?lLRaKm"5mPh6d!hfB-]IB'B_
%.55V[og'fX/TbHo&(@DHfVe;WGT4IU'Dk`7>e@dN'DkamS2%!</$Vm8eJANO0Z+FAOMj<t!b&@%7Uhu>X&#re:F!,?Q.<pY!`M\W
%;s"$II#cJAjiD*rU3Kcbhk]cUqh."=*Du(?%BC_VoVM2RGY'?.#XNk^F8Gg;naoOs;MuNA_s[(0]"n@B2t%)<[E()M/Uj]-gEL(p
%MAUf#?Vp;5lW`*_G,o7h<kXDQHI/)rgpl;Zp+gatMX([jJR@%jGp+EKfCal0Q2dq_U3]@2%DAW?=XV0t"0.V,A,YI!68@YnNssR*
%+ufs+:mpCsVD)U<hol$h$agoMnip.RNI:c`85YFQj1NS8-F.ZF^\lDN<u>uXhZSZQp[Z)@j.ShGroYo)6h;<G^&0MbYGW:bs'NiW
%HMoMsP6Q--=N?OWs,2hT[N4!IB#bl'm!a"0[2b7qJWSY4#e)%TgTR,B,Fdm><.)`j*6]7G4(34im.`7He<%nYSA'h)s18Mnh/b^8
%KLh.3G68+]:i=Kklre4[XJWM/:;\%J`o$T:!NK"D<*oP^C4;QsRZti'[6beJe3^:anH>$[a.l&HM.[ujpCGQRVkSJC7&)+*.T<PO
%U5A?SFg9$Z:_br*!n!t@E;Bg"6#>#kp;MmoZqA95Cu8TZ+l90efk8&<=sR@ekA\fZ@U&D/fRtAfAi'%<%QnZbi[1^?0!h"R,&7!I
%p'sIBa=.g<KtSnRUPtUJ2T<i[0;j-,j5lXU(l56.<G1=7^!T8jWY>fVckR&<kU@4Omcbpa7Y9m1F@>o6L]Zu^j2,8n<PWfBJr(,5
%VN9ag"u;T/*s$3+PU92rnA"g<`;DA4=eC[I#s06L\G&d$e)[S0-JV;.HiGE,e\g8@(C>58i5@'=&U]/f`:G_QhEPFQ)iA=QHiFe<
%%=e'.8D';3;j+YAmer'bpYnpoGQYq!d%6V49`n;NOF2='r'Z:1V$aJ]b0LM2IYa$b@'_1\D#hHmb.Ne_XFi2=F4>#5C)n!#9qLa!
%/L]QD@P]d6nE4Qj/=kCDBA8E38-K*'Uo9j+ZL8MO4%2)oj"bjL$TT:NHboNL,NMaJR;&EC;RoKmbtNKX2u&B.h7H@-%hY!B,1I!$
%lm(<X$umTHc01!`rjq9&0@XEV_22,AnMJsFI:[uWnnpaa!Y_OWbdm!^o5:0Hh^sE`8rP`c4A=UKiMQVA2cPN:d\kfpMs8>Mq=nR-
%dG:#Kh#_DDVeYabc*4k8kPj\3@0SE&>a)&?Ru_8<?"&])gY9M,:e\n><NVA#6G6G3j#rsT)tm]E8^QdYC;8@V#'4+fi4a7?o*d;1
%T<6c:96q\W(`#u?@G7eDF0$_%+B6_b`T>26qYGT#SZ)J:F>Lpoj)b%R%!4r5V?HV,T@,03JFJp*XVl'VfC0)J%`5s=ZIOC,,pN?:
%IApsCY=Ici;urBjIK/iV0+kH1F>[@_S>"*gaRs3')baibR[tL_2nnEXUq&g(?G\oK&9)mMru+'\"Ekd00+fp#4*T72*rPR0mt3Ce
%qA(_O$]0\)jO9AIe\t!?p[4@YR.d?`a8j*-7Gm8$qNi-U?`LB5qpYf$Y71`c8&)^.!+Z_]+8&ZjU5=Zo<dSMjm-N=kq;td-LKtKs
%;>]/gIGVsM1P^Es$fWSChS`XHB"ITi'36I*ImZ.Z?i)T3a=>t:G9p72VI+^Scur]HqUggh5tYib=n:/MmRj5XDY_lj8A_lT6A;c@
%kBuY"+!<DW`AFD&JQoiX?r8Ac.ub=Sji],[rf'U9*k142I>sa<2roi$GuUb>\^j'&D1jUI^_SE'[g<=;$qdrI.0^41.H6gt\iMYP
%5&?dIl+8ChRoTJ*>+4e*LZ7kt=$g6)*m,_\VBc(!`g!B?cL,OI\clmIN2Z<nX'go++4_8q9eK5^9lujC2cb],]2P387^K#/Pf0j)
%ha0:59M(c(+q=,U`?Rq8.+N:L)=dXH!1Q^92[h754funcK=apjll:=0^4od?_^m^RSLJ=%cfRo?ST$9!#Tl+7,*%"HQQiRGngiYb
%rt%(P_>Nkdn"RdU^K3q48WFfs?D6q[1;JCXS*GaNF7(>siURV:*5sU8VUtDf7kserSi7nDBiIs#WtTCq%8'72Rrgo%,/=&:QWr_^
%;"_uXMgn(VQM+:'6DEHo!k)N/Ah5EUP7GAdoHKu*'gmBOYmhfP@@J,]Rj^D-@33eCQo=S/Tok]XO;TEW1&HifrqVA_dq^M".82oL
%2Kt4MOr-)!EL<[g,UJTD-9*)e,WkYn(Cedn4]Y0!=,DHT6nYijoT[:u]bDXCX(.tO1AaCG4sH;/`_8r4RuccN"Cn>T.[m0W>RJiR
%_k\P-`0Etq]9&O0UceR+b6l@Arj.q+#+FqVG?LWSfl!gV'oKi3J*=1)KgYE,>ZSr3Sq$+4_FTL3i21HriNUE#.:#u1Qj0QJ_.A=J
%SJoXbm&eW=DN0B^/-fF)(p"'76C_d*lGCFM$"_SqnBalXS)UDJl3e+m%IG2-_Sb<d%N2V/.-X+iKnmK=o!-u1Ic7!+X/9s<'mnnJ
%E:D$>5in(D*X2jYYtO7J(ENcQo*:Clgp[J@4</*e$>TnQ^@3g9<f2t+/rY;=+l>9LDS'n)S]V<NK1BWDFX>!d(ETRh!2gD;.pR<9
%4G+kEq4:NqpOm-L:+ZXlpU3Fd:)hXl$kjS4Afja+RIJ)2OUf\Us2%-'`T["S8Ld=!1"8'l@I>QQSY@*OgYpL&&GEuYON./h00BZ_
%JhpFS^@75fPF*c^ZZM4Vi?=UTb1dCNilOdP??d<W*TPi%-GT&3fut/c,^hK5KnmLR*F^c;?[,-5[8_1[TWj2D,9,'GQ#,D(FcLq0
%@IS,hdoZe#Knl@,hihDl(lTb-mjXbhjhh&+_\#g=r%C/P0pP/@n8S;i$[VA#VaaCDEY3]R@=We_g4b;\8<4."iF/sl:McSc??jOm
%9N3F\&_3-_*f_DDO)s9R&!j9Aj=2d/iF+F+8;MU"a-hti(3cP`Z'^5>Ab!P&0Pk4BcjLAN")g8#3*$(o4a\nF*'HH&>.6XN[iIs9
%')tJ8n1[t/M@;Xc.cc;=iU/-'OW>G(H9jdU([ifCi53B>/Gtqp_1dXG(;V^X.#$\gGc:+)KfLH.e-ce>c!\J75O!lWWl-F<[Pm)u
%LI*d#m9]"Gd1WW(HXX=/7_##U_S]cb.*JuS/j/3@;nD?M;"sTb`0;&ZNZFiRg4b<u&u2?o9n)&0OMpqL7hN\g\F=G^n?t\cnX.1I
%LVY#R=&bg/Knk4S2jEkpPm\*]!cL.7]M[]rGj&c\ofZu#]F,8KlNFNppi)geY6!VUMMC2p6ng>"MQaD!;[b[S<I;DaabU^@!#'"Q
%&.+3_qSi=>8X/#/l3\jkcp9$JW\Op0o<d:bq1/#L801fKVHrgrMQqH!4Z822hSr]>.l1;^hq%DNkJlN$9F2Gb.:"?kki/DhMp;9,
%?ALnb;/Gc2pH=gKs0]PQ](+l5YH=DP/mgG"3a0)l/#/AZV,jsoK@?!ldqMjjb,LTQWd@6s>.+&"VB(.EhR2rBe'TfARTJ3Ss8>s0
%dKXB2?9PB>CY,Pd\Fq.mRF(AoB9'BTLRVB4n]Vtd:Zforp2h-9mIbee9X"K&ZeG<-gK2)Wa*bP7Qs5)-_V"pdRP(J+p"eZa,Nj48
%lMeh.Ch[>Wk%$*Zq?b-Wq31EmrkeQQr61+`3Ju.3^<H%KcGK,CYFEto'$a./I4)YXd1bd\2Z[iDkMfrWRqpLSm%gC]9>&!<_PIpq
%UYgheY16XSE,.0EA9p0cXqZ9Y[:0/sI",j+CCc8.mjPU1gK$_^9&(u$R>Y;':>qk=mC^1"CR*qT<e'fdq[E(1@iiIGYO_71rod,#
%lo`9qL?,=7^</U5q[^*YE?cpV.QWP53#@o%DXeLMdP?fW]+JHUm#d!(@dV6oV)!s10FbN+Rk*SVZ".<Z$c;UIbGR-dJ.,*V5(`5]
%A#X=O*_RR2m)G@*AjLKR?[6R']D%4%bA\&ae!GsgC9^pbkce?R>H?:V%s?5off73.?ft]Xq=_5tIU.A1++]aRQq=(!brM[Zd'S$Y
%K-&tY)>AUYC+OpsFqZLEf>Xq)ppfZRY/F9.1$(Q!/Iqka%gM-^O"Ua#Z1kWm<i=[/5.J>@#OB4AnZ'0_9@+Jk)`H96R2<9Ai];Nc
%9[OYGiQ(%,H@a.Rlt,BB+HsKUj,]4Co&9[lgAIk7WN7aM(e_G<9JS7<dZqMQ]6blk^u"d+)'GAB)#*u9hr*=YNZQHib8>IdfqQP0
%OmE?]4%WOb$-;"`!a8^aU6l/nCGcW'VIRu`-c[*<O\WL"kLU](>U$gRD?j`Jm``o6q1f8?^AqOn]/C&S/cuIFQBo(`;VjNE1/FS;
%ZTh?a9PnWTjfQ4@\[,>FIW5FR\%l$^:0Hs"X13CAXu^h+$p^f/a11UaP^&H^-klLR;^Yr*fii2sPkOD!jdi&M2``#"(WLJE3WHc+
%hqd$C&tb5kBTRch2%,KhXfo!^m.iUE\Wd5uc*bCJAHkj/nEWQmT<!;FnEWhn`So&4K<aD%)5+a9CF8nsDhLP&q#ZL$Fo``7F+a^)
%%K>(:Il?+_+SjQA7ieWH!:b["bQ;Tcgf#uD1@6s[\?U^a,1q"`QVdQfB(762SK6R4C24(UN#LE_0%Y7f'6a\#g8EnONk6*h2YnLL
%P'V>oS)*p7`[I\OQGJ5\:Z<FHEutYt!*2c\8`dtBZb`8e-T9^@);hA9YVP-f!c9(4&-A`1'o-gX>-#^(.sMu9TSCDXo#&TgL2EVe
%"_EUu06\/`8M_m8IK0,<n2\tSd?EC\<n^pHB_$HLoQ%G<^nRJ(aT*rW8'@jo=G[KD/"R?9p@$"IQU[1U0W"H">/l*_!XhXo]:%gK
%Y8sD1@kY$`k*HEEim,@FafjT*!9r7C,*mif?8*"X3F>Q&B`!FgPdt0C<&;dYj-'D)/`&/@X(r4l.gKR5B`0X-CP?%W=fiL%!+dGI
%!+i7)5Bl!?Y`Y8MlQtlX^31'kD493LjZRjrW<o$Chp?SrF%%o_goP_-foG/bbc,-A-YI"3_74SPNOf;Ra`r%;h2o[DDFr`V2tp`2
%i$tBQIh]BbjHm1c^*3?j]($Kh4@Tb\qq/f@nRN]3W>`Y0k/0&eF"c"LNsk+D<IIkCXrN)F'^lC#QG@XF:VS5n357AqmBt1ikgsXu
%N>f+R5e#rA#Y-cQb'M08`-?o`k%JpV")8-V?c+[(j0`\`e#X7W(K]M=<`a[gj,/P43aMhTB%\%H;,7q?,t;aeACq=4,TjU%`ac&g
%#^4@U'ejmVZ;IW7pDH`DB$.^t>T"T0$0-%"=-3VlaJM*!d\,/erFN=MWUF`$p&KRYnpnK*F0Cp9K8pDnb]@^Qif/X2Zb%-]D'1CD
%7S%DZRbQq';1!^rg`;.mqXscWU"kT_3JG3-<]@LkSW^G]E>OY)mOpp<3i:/GU2#\NZOLCn<]D"S<fgf;JC`Y'eQd?F^%Q95_hKI\
%(+7IPV=\f5dr)u+@R(s8T5uRnXO(Q:oA7S(6;2q9PE$ZPQFX\n,.&?"AF++OV;:f+htbM#^n>&7nYd:`5E2T,K-RTGCKWXMpVG-r
%<oCFnL)(pW0.4s%)OE.:ptJs!>duuBq\"j\X")ZcQYVUD8m;%aNN6AQe)S%=P3S?`(f\nu]!YX[2ZccMis$fM"SJ-:JptQ4/qr=t
%oib-4`_(QRH;f>7B`XfITeXM7S%C[pG,(Jl$KuR5,Z9R%9t&n$RFi9f\jBB:Op*U8/?b\4lWS_N?0_+6?T@]mR5NP*>dGt2C_SOo
%/NW&+D"]CVI>AFW9mZbP?GuC4I.@H*kkmA;U14QqN.#:D+BWIY[Y6:DrCcQ`-Regp[jMjj'Q+`RcAm^ugq0=@c<VE]nHlE'$DF%"
%^[nsK,[,mA'Q`;\jl&pdJoSY[e\7=\bYrMJTb(ljQ`k:MTtjamA2bo(6dC*EXm!sh!2$*il_PNHTU'fWe$#DkNF!miRs1K`/IX%[
%-o&_)$EMZ@-c\A55bl4*[W5Uo_5bdOk<S"TH/+%BEbC4RHoBHC`f7lXa#2U;hRM`\Gnpj+k@!\120kn]J))GgR7rh,f4#b(F8'WH
%\_97mi_a)T13hZBmX""O2@Zd-a)edM\tRh(IPUV_[FNhG2ROfJi/:`#";"eiPsjNu.r10DHC^b-I65@%]GP<KP<@;jfZrsf_T9Q*
%KIupLJsYLb!<MMGnq'u`*tdp,^oC#:I1oEfMM(<R&K7B_XA$tPpC]+s_7ddo36QPa4:8F6O1G!O3SJr7R[le=QlLs+-PR#iAZ-K*
%"s.(S[,'1+1SN@]M^G+"]'.DnMo)H<9H1:12h!V>Sj(;#n7aEY=t<PChjrCnEI0%Rk^^,Rpk='n+C+Gq_X2@]c"\AZ`6tkq:Y9-$
%hUNMd.lgHHKZc#]98BqWMlo&9;Xs/[1a;k5AphR;Khof:U-r@_b'NU)X,qtSg!dsrL0)25jt?MO/EG''m\mS)mX?bkQlU$CJ\&7r
%<.I;-(?iZD/Pd>j3Z"eD(^E!J1n\Vkf.L:7`*?V)SiRU;b\H,'l4@)^KGVr%m5Ku)g!0R\HO"5sV&Kl45$bq$gIif2D"\-N6X-gD
%CmmpJ@cuLr(Z)Za[HlC0FqhO']Cco-rbHLtK/h(eJG.G^g0/6?d0'n;X$F0NF$Sbkh`uf!#d$`7F!5P),E!`+oH!jW'<%+18"!u;
%>(u/&>5HF5#$$@l'(Tu\U=q=<HM7m\]n-+9Hu;rXBa@8e&"pXt",6XTkq?r=cYpu5JDAi(]YDbTN'tgo5sN!sbX/1JjlsLf*[g*E
%"NM^nH\+7`=b9m^,NGgT3JS;%'QP+TB?G"JLXg\9W-!ne]&tLV$o70>?gcQ:Fu&Eee6LH`@fjC?80U'Zd;s"m"j-B<Z\9TYMg<_a
%5&R`119jPfb3B3\cf5!/87nflbhPP5bB+0'.P;W/"rMl6)D/A]?t07J8\j2?PWUM#noUnIGsc3PS4V-c=ut;jL;=!2R<msM^9!b@
%_:+##S&o7HRMJ.E[;u-8fA&QWbGPYBNP#"rEXc=EDkh-]\OemFghM*VcAViZGiRQ46%%P?PPXg,;-nT0FcBQiX4RW6g);_"RF&BA
%e<AE$16VT(=u^bCD/9$p&(#kkJ4h9:9X\=\RtpL.X?$=/.YIQD>_DuOL.7m][cm(tM.$/n&Bps&-"cZtKc$eX&J6@F?(NVTK)s[`
%P#qD&fYYn^$eu3$e7;_FTIr@-e>*0XH`-Toa>:Zbj5JPVYVStQ7SuCX><C3i77(bra`qK1@/$,llhVr7hq)=`/aW*@jp(`A-(0L:
%(o@)!CBB3i.pUB^b!tXenhKM'n=:M?hXJtr%8Ssjh$)PSPIR(G1?j$oOBEi+<juV!5hdOm]\#raEnV/r4g<JbcVeQ";;pchp<!T,
%T)G5ANQOm,Cm)E.AD+X`CEH6=ImUsWH;\N3d0YC_Jlm1,lj@rMMHeeM*6aPn?"tHbnURXS1fja>Aej!r_$[`Yl8$fB3[A$a,$UOE
%lWRKnR+M$tdntpqSsnD<!W9N6"kuYM6H#R`kN/tN"PXLKR6X\u,JNKY:%0ggOet+1\UP>upsmM]/6P99q$C,cA;()T`fdD?,NRE7
%Ng>4h%VEeRgbO3q2jVVCI"^+"Ee^?9Yahh6BEuNE!F3HA>c[]r6%;HZ>'MBdGG3BTk#%_MVi5XKPml$9/'D7c51JBh4gjP54#\:M
%JEcS+a>6<iEVBHo5J)6I31iZ859a7tl]pHU)"(V-4a?QN&>5'7$:m^.pR@*Jk'hLZn?Qsu?d00q'6C(,^hsB\V:JLSS[kue!-'Pm
%XJ!1"^^?g$^i[cfH5-OF'd2Ne>YS)$K"<<b+Dogs*5.I2YaO<t(%T'/e9]W*h(P(UIu[2NF*VhL_:@VG`u;2]@aT<6_Z1cj2fJks
%Y`BO#ka3,JT5ac&'.j_%!ug"H(1!`=WObnZiH^&DM3[puc!+(3D@t]/>Xd>KE:PRLi`/aWka+PTIX506I;i`sE;,iA[ZHWiX,.N$
%]fW7R!LEbVD'Lde2$Clc:HF+B4<)b$?;]q<s4MV`d%qi_1*!sIdeG`Da+/5t?lo"HmeB9K%2n//4T.WZp[/WXfGp^\l,e.UU;*3=
%*$P+c'\V7H9RA/mmiQH)N3e3@m2ptgf^``mNJ^dLEX7bfKJf`R[=l4j_%KeQG\,Y@<qbeMn=:N:B#@?(bXfHEWgET4jkTJ:WL%NH
%',&*-MrH!\lI?n(,C!Wuf`di%k`@<M%3RL-/,V$+j0q%NJ75ti2!O.m6[#CI04"Y(b\`iA)6UR_%/2NASW[qYmHp:q8"18&("cu-
%7WJZ'75&<,4]eQTVStkC8m;Jdol88Do>WU[R:bR>&5GZm$>nn@8%WE,J)bg)@h2>+[>?.Z/3o1W1\.dSC\R?@<'6JDUNfb?os#6m
%Wg-U5*[LF\$H(6dGZiC;kPG%nOqhICi.W\b=-HsoH5BdWW\a2tdPY=7O578dpJJ^ADN/H+OK)liHo-<iXOpY[1B1?)8#HSQV$Y-f
%AVI[GHtt:6/>JGi5uB+uf+(jH)b+;_4G$I4*]a7N'QptRl7JK,7gDk)!Rd:I^?I'uH@6/p/I0F#$ZJ2,DX/r9a)Uhmk9/59g"XH:
%fWk*ihu1I=OmdVGXM*,*XLW"=$__W8B[(\]Zs7NSSRZ06nJ)n_@t8"`#"P,EW#r,?3Lp8o6EYbn-(Q:>X,l;n6#fs-_QX4oK+;8N
%FUf7ps&r*o=`]i>0GT)i!nt&j$g0h$SGu'ANU_60gI?!Ii<C>6Z,K=oG<./'9)<V<]C4%(jcAFBj6?E\$J\Adi!e<pSdr@c_R+8F
%lr08h!RkMg#X_)\S=`0-:RdB:_trqp(@KTg3&<bhh;B,/2SdRM>+iCNC!;OoC#K629Kk7aVZgOu3&;gAPr(9tmaf4#IrX`lWSkuC
%e%u0UmK3n2r/'I_KUDjaSkHRNAl%NViTpVLeP1+Y\'u7/_\ajgKq'%&i+We^c@h]qActm;e2O(6L9#-NZ!h#qJMY2%*r"f?8]Z^_
%;Au2dE?suph@*j\HdOpB$kBTa>Ua9f1`\"PY0\H/BN-Eq56H#,LE5&qM_<+u`[;i=ijZ&oC*<t,K]3aS;hEGI)%=LV#2LoQUr\]D
%-C!8<rqp`JWkF^-=_P/GqV?#e!9n\UY4Js-L1@ds]R>t\Uu[&!A<8:c^1<_QCce5XN^8QI,B.KtJ&3=nTW8'9L6(7!:Ns[1@RpEd
%T4C-=SIB0s:T.8EHg]<J`HO(*aS>n=<fqrkriYedI:at9$F"WCgihnWO9.Vj9d&J4XKTOLg-L#g;ESEX#=rVg9!+qA\aX^PbGuD;
%56MDY/i8C#6fo17!9KYM2BM1BBMlnin[Fu#Gb!5Zp4-2)TA?5h$fic'Ik5WcU"kgSWmEg1'0F8?d\>[7bn`pfHFg[Fs+n@Sc4)F4
%Tg5o_-^c#qhmid/%%SH_D0^GLTnM/M\^TU'W*Fm[ghkrZ!<oFd9b6-lJR`Rb:QP$&DPZ9H;n=uK4.->]>:Dp$dLogWJ]P1&=+]S:
%9g.1s"-pO5aV^hdrIt]"2TnolWpaWu2pXOP?,*gud_3$NLAunnVdMV=3BJH'V!+7*Of<MkX,i69S!k$;]DB/WW)<0pS9-fL']kap
%(Jtqb01F^]05!pcrOc>a+`H6`Y!++R://Lm<A$E4-B,EP&m(]@j^>cMg8k2\%,#Y=cE<$j]m\6kQ%eAT9sE:*V#=PH!j>m2L`8)N
%]cg%i).)sD'ns,8'$89LAAg-]C.q^$.gq<GH]0R[&VXNI4Vl&(XC,eIR'_Ne?%AO@is7@7f&DmZVBf;idrXfCL*0VJ*KpE67hUd=
%#C'OpF,JF'mbf(1r6emn[WGONa4ZGk#bV=@jB&@Wm6C'@_l,pA3Ztk])Y)!TB:c.]]Zq(Z6f9g\^C9VN?-un*,=U_pL6$@RD#-V*
%l#:$2#>Zqip8;Sm!bD;7d2&8q4-ANR%\VohI9cE7G#4VX6!qVQZ4;W\p.Z0O)tD3R%i]:DAtWRc3C6N#2$CM,bIP-:TKpECpRUOf
%BW)rQcB[?B7PPufUQhcqU3Y2h<#9#5-^eRXB:TFH("4%Ora+2+88ln>=*#\T21Dk6Q'SLSaBVf_(qM/r,V-sC8`Qb(3PdY'Xa'(;
%@D%#P\G@E9A\sWj_4`WMpN?.SP"gJ9%t'rST+1Xp/@XSCI=GGjf[#(j^/f5bJ_MHZHaLSln&,X<Os<KjWk&(MP_5FE0j*']OZKU[
%qj$8c='L==^mJK')7>Fb[eOW:It!IG_2SO&B$I)<2bY:Z8d/lOfL!S-YX0r/(o?&+,t)^`+B3V9mY&F@o1pAM3*h>6O0Fsi:GFh7
%LeNl&A(nd'Vf/)1[3r67K$S_QC(k]I<lm2ciW`("Y^CLN_X8<pRB^fl_X8=ub_-Sn+VH_13"O9i&6SU&0BgOQ1"`I<:K*oDB*IMW
%X.l[p0KmW)P*5Yt(kEVc#&lC'>7M(83`b0H/668LX%72-(lQr@o9iWc4Y]Db=*`ae,O6<oR]BP1OGPY:o5$r'Pq'EXB!ir[4Rjt#
%4K.("#-F+]IEa1D[U(;@:oE9+&bfhg580_cSUQGmX5SNBdG<bp,?TLeLm3+E>tKipEI]&hr`1Q603anrIXVbIl5Y/j@t!`HEr*a5
%%fm?Dk]fJE%t@:9n8[D1O8-*<iP[,BVf[qE>m86q3KfQN&TAEf:;NC)ZbmF^BR$4X/-d8*3,s0dOp1Ud_re&.Y&JR"m%\2f[-"[n
%d=__c"!D*UQ(`r;#'fq@Wsl]*#$Ph,[_Oq&hQ1aH%Y<*p3NuH^._FQT"`pXEB%dnZqZ3:][D!)GIe-X[;-(UW$5?q(iP_Pg-NZa#
%Zs`98A'U$4#ZVis2EioA2/HlD#H%\4<AKu!'4Os.Q0TumC-jHeWYULXW*6LRf&c]5>e(34edA:p?&p`$Ef7X4MVN$"I::N_%Kp9e
%X/t^G6FY!u[L8WS>HjMp'mHPkC^ltA3n3R)7VU2m#nD"&%lYHccNCnfDH&u@aH2MaS`@F)XE/>XWdde,5RI`A'1V/`]T8W3"Ma&B
%:H)5Dh5m!uf,&C=cPY#TZ86Jm;ae]5SZ8<7b#>Ck3I2[1AM1%biEfrg6AK^kaaRjt'Pn3h]?k4!VS\1]7iDMN=J/W5YRt.*0K5tq
%H%4@'Go)6Tl4D0$/oJ4f)IT:W)[V$MioNYG_6ZU)^lrOP_Ma4l.g`7jCsB(Xa"d#-S*=],JstX-kXBRaZ<A8IdsqNM'7=I,DcNF$
%VBI3?+iRr=76Kpk!Q^5!L`?*eHCrkEi,M]BHA"Bo2E*3#:q23&KtDYO"Zl\51ZJs%jDGEuN,XXi+>EYo/aW9h_1kgtX.%e(^Xi$L
%ol:5UoTTO*TB@PiAlodpEYW\eiD\_TK<77>H0J1oe.)l[JC[LQ;5$Bo]-iRRDB@26S13n\4!93n`sb/$'X#X9Y;gPiHN>fnbM489
%8^Dd@*hfkE*n02n%$`>oLtXH=F$QieF2Tb^BIFhIFY=^UarD/-\67Y'0DI=k^E9oRM^ie20h]9eP&SZhZO)qDAS[\o9UHu/fqE'O
%4ocX1p&M1_nIBK>*,BL<>5"!TX]udc%ZX;l"_9_8?u\KQ"ac#6Sa<3B>4mk<i@!/4.cO1FP;<XhL?/n^n9F!Q"cG_%4UBb4bbZ!F
%I-B<Je=k(Pq8g%cBgtL,4="6kn(F8l_In<Ucg8+hbQ.$"_DuOPN$/ka#>h"'VMGlC]@87Cm,e'N<7nZ5(KR/cn%")=p;M4Pg-'np
%E4>Jt%cbLN9bY_J(FC#1:M_CC=-Li?_sX5AcY$r;L;:/d49Ug4bdha)*N$mGU3-cZmpJD_m9u.;Y`76fk^'\_(VTFQ\+>Mk1uX"8
%ddb>sc,[++G!1Uu\St@7DU+b'OAighf[Z1/cZ&GMTXLs*b)ld+h<H++"Wqp"S#!@tHuZ!V3TiE9[bs=!Blo@UOD!!+gf^Si&n4oe
%k9MZ6QT&d6#B?"!!L6BR=rf/&r<<I14;4q\pX(^mn1i0=43=u)$pMV=WbM1u!SjI]FJ_U*n<LE.8ZNg(&YO*t5ol2Ghua"Z-J/(.
%5YoI:Q6+;?\fT+dI=F/$a1^V>ZQ02Nf4sBMbk@X2?af9kSR/(2dJ31'e9Uk-2;3]H8i3l&?JO;YgSMn_Vr!4VZ1O!G=-A&i)3[:j
%XWM>XVk$TNg=5DNA?o'J=$Eg:4Vs\":UdfsD>ep+;npJAB'\>.OJc(5rHXH9^#+CA88p,E?Cf6Zmd/VQXn8XLDMUpV@e\ji*mMG-
%c^UPf,p2GsZ)"XG*fKL\@;@"Heih4$4li!FZiQ'-^/>Wm4#XD9`UD69S]2,=H1AUhG*>'=en<>e$X9#_MB1PnAj9&5f3@CTlAo\,
%"#Tr<kOrdOp<:ZjhX$&NNB4NSAYfVo>RoN\W-(.<JZ/J1:/&#4\UAPRo1o9+`7&Bup8/OGhKcm.\@\HG9.CK6d>;.:54<WVY^mjX
%.Z$p5`h2X/f^2gO8*o4s3KF+^_7jjm2=b4EI8O:!+YQa[MhbPi1"[LWfQZ02)u3$l%SQ4`?so=@1>@hPm#*g':0tG>/Qd)1.^A*7
%I_2R"-nZV+mM+L54G/]m/Fqu5A]WY*D\g+3j]9%U4*g$^B_kA:*?MY6RR+ps3&+bupRna1lJ[.O]gR*>k)=Y7HKQ81@gYi'(Ff&/
%ps#p@W\G5Pdr.LPIsJ/^%eaApS8sPa=)j\0E%5M:8F5cG"f#&UMu4<Co!Gu'Vl)[;R;5diJ)oLqcbJY3jWF./\F<hgF;V?ia6eLN
%NkpKJK1tT(RlN67Y2.8<N7)DPk%.n4YV^M4O?_X?!01h8mjcp[1%)haVYc99Q.5E-T/#m[])Vu49th"Nb5H<-?G8$3mM?M.]b@Ua
%A77l=Trb(Dj9:&b0dCLq^3_)@c1JG7hn>-](7BPso\CJ"<FAGRUNFY(QjXFX:^UV:OI:+,CcZY!#Fh7RH7Bsskm$:IfX#0snd!TG
%Z\*Lpi&HkFRU)qhXki@[4qkE36nMoO4WPQ$RrY]sE^Ll-cE52/Mjp8sbnoM7!U&_`1(454kGFtPCG939Oq6/_j(OX.WVg<a:c$AW
%ap&d<(j>S+@CNpDo=,7jrjB-],aT]24?!Gr1KGa]kZONf<lHjq>nMD41KGaeg&:Q=cG3pI'::_pkLr8?LY&=,04"pV*,E3XZ8IDO
%OWi#Xof9ANVf]RcMKBoVnV#5r>rS(_gQ(Xpq"*:o:U'Y!'pgLgc.<3-k%qF;<R;BkpZU:7s3<mm/kp<C/IFI(,Ai#GN*dC9Q9nOP
%S%-s-oU4g_.^9U^OoqZ'`;pKp$d$YLH^KqS"'oc@^]>q4AYoHhh:,-Y#G\3M/;HQKN[t4m^`9=dE&fUtc<A3i>HV2["FR^:*30.\
%%6S5spLmQM$^;E;eJD-olkKh3VdI"s"MCJUS+,LXaoS3h.,=*7bN+WV8`]OM^4,t*b3KZ%fW7:cY;8JXIo9TsqrT=*LZNXuAG(`>
%FY3[^ccPL9W;^GjFgl9AX?S)9_u7S%:@G/e%-;gdP\7=nd`#%s[mD7Ag=.a0o">bFXj@_f$jDV]d#J-$7??PRSM_&]n2p]A2[8/F
%<5a5:1u=\gC@-3I9NjUErhk>Ii8:%<eW"t+Y\il;6YQ-QnlHfrNp;I7[1/3[B"!&=;Y+JHm'LQAhpE/A]/cs!mZjLs;7H0B.(pOY
%K0!_-TK%1]5Sg@i=OY=3?WqOjrjhi#jKC63iu%dC]SaN)DJB`WHa'!sn7a!Bq?::,M-A<EkhWofX[bWJTI$HT-g`mR*ApMPD</!'
%'FY[Ce*(l'I83r0S7-#(pe3jq^eY[l;">@O&lfVWe'^8"d>Y#icK=\`WM:Q(S^2p1Ni"m@;JXq)[%>UsTZUm#0HF!b0VY6j>=KOH
%Fj!Bm=i6!eeP.Q2R4Jo25"B_.2LDR6N2W?"dL^??IF>FbW="d?d\BkZ49A7O3qCm"jKI%R?VWGLLu)A]r6r^MEXHj*0m#L4H;Z+q
%0jn@c<GY7[C#)$*J2Mm@j$$GiK8JL%7l0P"3VJU6bn`-<,R0;tkE4tBp,?2PA!(FE'$]eqnmjHl>t0)MHJ2bUB:1[_LVhtG(b?#X
%6"-XYD_)BN`F5uQ$oWaSAhdgV$s='-QGnqq0]Z=EGn*35_iR[W)4!9sp,DT*c8/D^\Hs<[/3:gJS\nsa?T\[J8&6r[k;]JGoG<S*
%i_cp"eN&r\=o+%HOl]I$ggu($Z:OQY(QX74WUB7H35-:LrKUt"(XGrGkAV7X:CVsUic+B<2,#%ra&KsN^Gm2q:CWf6@AdrX8XBA8
%ORQL4GclWg%S<8kifN5hR;VLV"ck2A;kq*0'ILFoQon$X,DX./^GlqoU1Nm8"cjW1IN^O.^7+BqC@YUeH*2`h%M-T`nAIHMfVR!V
%q$J0'1`UR2QFWm1Tb2P8E+ge__%t4%Md*,3T"c&U^g$a-Dm<QU\6[#3R;DCe[eRPW@_$=.*$.2droT;QGpFr!/WRg.M>b[Ban&&*
%#$W("_%Z^87:Pj-)L,dO-_"VMc0UQNcX!%'/pQI(E;[,3r>PTGbON4KNuSpq]/IQ4n=)#M1D`/o=E<1T@l+#d^Y+3$Hbgq^`o5<!
%*!X0GJm"\]=e<H4S_n`2%YNYT6%dj*Z93K?-BEi=DjKF%emad2gs+P8&t>3h3"BT-/0:Ct=e<CdOi,)A31K[3&>;$U\P-FreLXB,
%R'VJ7"I.A'!WXG(b3:[1!0cp8F;_h:iAY<FV?4N3^i,B!N5@-&J0bl%?&*$J$R5?pLnMd2glDk/7$NmTk@E@.#.LKPj@JGhOK8_.
%KL^pR^^u+NL#bgtP%Ta(oW",,Kh%$Nb[D&KCLNSrp;f&p@*H("lF_rpaV.+5opUtTH81I2?t%:SdD]mbL?IA_;AIW.G+(ZYZs!6&
%(8E0:=rqlqN^/+!AiUQHcJ;33_g?F/i\_CdnfHA`5o\bT>h22:T[U32JE()Ab-1^'@72ah:CG`jh<QZnnTIuebL'0u4bc#/\(>7!
%596:Q*"R:LoTW(n)&TQ:44u>o*d\us=H7?E/f,f+Q"/3=5]Bpq+s8,H@0VU!'@`DqNh,<&S<Kdo.EE9[Y*0M?e,4Rn!<+uSd1V6e
%:,;lkaHXXt-`m@T&7*a5I]lKXAd`AUKK5o3:/<B*,/d:h0GFWu8cXnS?))hj_Bb4s,mOolM[Ls:.Yu^a,.:/jX!!R*&]q&/jG92=
%!Msg^"dQ`X8mXs*;,M<Y.R;bNP\lDDLuC-?r96HI2nAL*RXJu@aG_tM^gf,'9I>P:i\=SMmX`Dh$^ba*9[WMaO"6^^*dCpM!EW%3
%Q03/Ke(b%db7S\R4>)8!]qM:5#Hk#@G!d'BnVfD/`Z#,C9&Md1h7<9mOU43m%pW7go7k&+,:h\]=`7hr>QX'tJb)?;^r<T#4E+k7
%dh@,g0U[Oga^c9-nr,Lfl]Wd%h)#7.Jf2_l=`<kS."Uoc^j&d38=;U/:!Oqo$Cj$YcC9E"b2et/ju?naC!%,LD[I70P@qVO1#M%D
%J!Rls9<e@tK(71Hpi#]b5>,D!-*Z8>b^^JLInMHu$LG5iH_=aXZoJ%h]LgJm1-Yq)JlU1W=E!`2\+7a=!KUV*ZinRF`A?B%R%HJf
%>N!':)meHYLWNqQ$CCsNgSTLXB=Vk65?ZI]3O5XI%F[51=ur"pB8p/\qMq4mJbTdMm*WUt";?]oe<`Ed`59ED`+STb6UYb3LijT?
%Seds;O#.HR-6X`-Kn3>--+mb#J2_20kH%LsOO+mY>!k\n$>=Et&qD9:[3Vi>Lt*9Fg*5*!K@Q.tZOC"=apX;9g(49/T"L"C0;BjM
%NIi,^[j0k_2&Ws-ak3T-K7W82IcC025_ed,^hkK=RhBU;`bc$C$J^pK[k6RIA_^GI;1Ug0^eHBY*)+5@(EO=D'cfme.i\t-pL])u
%4esfA![)/>Lea'FLk*q3*^l6IK[Q)]RNb@^HOs%X&kZ@p8XotfP3!`QS66/2:;WE_E9=\9&SF;P5;O=5[<:c7TeKCY*XQ-W,XQSj
%2tc,`0LL)LE>oO.;h<\&i+BDE!jcD=Q:/Mh&?llPC^#Bk9HZt6\?g]FJli;t:-]N(#GO@R+TfHA:cgFI7m_',,&0aa:g:Meg<q:s
%Q7eqEp3)qBEWUn$#n2W_B4(j,JQW<]Q:/NS$.rqu+Ci_IY`g,N+)-5aBE!`37=[LQd0"@V*<D^pk+?m?[O.ZBIOLDIe83ia$qLF2
%bQPq-*WqVrRkfFk`,?9>!^i?HUS+\jMY8$DLsP'>=W):H_<gPZe=jjt,_5M-dtJ3hi:e?(`D.Pm,QC2ukt;($=Ku:s3kdS@"H^>R
%dc+>%=(8/TA<7Idpagl)@EcZ``:P:*fb?:G_pX54QtN!Q*t*Pe0H.k89c[gcbeqN<n>EeXSqi"'&G/?lFsqY@7aNqFr2GS_qp(RA
%N!JeYe8rXG#]B"$dKs[$qI%>]#Jm@oB9V>p!.l%`8*Vicn.`\[1P6*Ni\<6n:W]K4$&%4`^*oK1`gF%K2fZN>Ig^:p:hQ2V]7`5g
%FK0<lDjcW2lh.&K=GC*m3b=D**_Fg$MO:d#TnnPh8AhBGSVb6X,@_*AbV\[$,!Dl%^DHFWBZ,To%/1\&%sF>.%WMuH;/GTu1B'&X
%U$a8_Kk?oW#Q%oQHl<)l`-LtXJ)t3RR4G(4)/#@O1QF1#V'Yu\9X;o1?^XK3)nX7S-*YNObFjBB!8.$T1@3:"(:_[#npM,=T]^F%
%o<^T8a"1",:;h"8,L.KLK=>]t?@m($WB84C\(Ge>,gJ1bO*'ABZft:1Xtq"-!U)PM22VUM=WCU41@o0\;V)fR9'SI\'.9FL6lfj9
%pC0UPq,W<,Oh/hYPWnW=j?+Mh%fOCLZ/7)[ps!j/M+BaA3Ub?_8=Z[/CPE'0nX2-28^DaH-$+e1R:XhM6BG][1G1KKI&0$5Cmm[Q
%!-QF%PQ:O+THpIOa.O\gVcad"U*lH&)>0>Yl,1$S31,Jl%S>q;_k(Z'/#.VG6(cD#(r=N"#m!qNiXt*V?7FS5Gs[.;&K1d=#^?o9
%U8L09@/L-q4CgQJF?q^c1'XUS)@R%@,.8MEOC2KPKFkpAPN&J_Ta^<t19<Tf)@n"4.F=sU=eI-g&;N>iZ#Llm5Ug(Xe&;`Si2:Hb
%g;tm>L(Ft3aRh7r`'hs.n\pV\mXZl\q\29dW/**e:,D6uiumb[/<%1&3+,c>8Y$S9:kmn(EUPV73u4-Ib#&BV$^1S=G<#j+S-"23
%_,%.tq6UPR?P43!0QEbe<0$M?EBkBcJ#Z-e(uHD;U`Lqsj=rh`#*]oHfFu4(Z=4\E`bii-/IAm<ijNFR=W)Ea`grB6@qQN^\Z)os
%JME_=!i6GX`coM>*1;U-'4G.&*)J!!3#*=(/lA>170[A&W#.!6L5H?&BY<n<-7+709M[Gu8qOo."Uq^`!k(cF.m,;#B,.pt'(29K
%4"i]GE9@tGWOn=IM:c+C-1`Np[l#$bj2.TY!VKqX0LL5b"BZe?5_5eiKW-)&M9fmu_RZ03->%dZ@:X!GUb*)[`#p!lFf$HL&'<WG
%4iPZ?k42)bU[+**$KE^I1Y%;OIP/KNTfc@Fc34cG0ZTIlTe/\Z#[\gp8k1=/OM_cuZLD\C/:4[?Mh2pX:9n_$#l\XdrSZE8f^qJ!
%80EI8b^+%eD4h--Xi\0j(CBRA[Z9R;[!<?"fKKP0j_4fOLc3>Zr?2,J)a0mb[L`NBgBTS`^Ag;$D$uRc%0bZ3Cn!AaF_I4\&V#T(
%\H(E.Tl]^2@Pc4detO%,*$.3X&*=S$a',OKf<.(3$N\pok'YP?r?d'FaBt/hW'5?+b%lmX.g'#>4ND>t!RX?RF!XBXSJ\j8+`=h3
%:s(EbGs$NnA+9pWS=Yhq@R(.&q0MCi!7^r?&+L$c;3YQaT^*FWe"*b2k#r>#9s$i,fL<r%8:iO]\:9<K[R2r_MZo']ZMXhVbM$Zr
%?T*'W@GV:9=jN3$%l)5]:+;rY7,/c;;7QuM7:[I`36uc.)8eZO\`lmGMTAbmIKYhoQS'@'bM`RT4cfP=7%BD`c9Ed`ObR:0@(UHN
%1>k%u5ERkbC`gGWdj?8'O[]pR@&o)Kj`&'ND$CTCAB7!a1/De^RXt>UfIBr<n_3%eOSV>.VrILoC/'ei'AOoJ45mhaO_<A\e+O%F
%e*Y'$+Z5t`!i">YX<c%f(mWsVh+7eIkCbnM:*S<;L)Ro,Lg*=00FFRq(N#EEp<SS*nejAk>:#ueYI0;p`NXm89MF2?^jf1HU+N8%
%'Q('&;>IU9b<HC?YfO_h8d>5mJe59T=D=a=7<-DPQ-:^I)X[n_9Tp_mYS?\_U'mW?Rs2ct=p0q^:0pR&n3./o4dp&^ekKEkq?_>`
%\_tFk[MYC"-\ar#,cZITDZ^n5Ea.nXgYrD;juf83$Nm]aI@A-@HPJ)%4o`Z*9_fO+*8'GqWg\k.EqJD)n:V2GTh8_uYe/`N7loKh
%=2+kDg1dI6-5h^,_:EG83ZG.F.sQ2[W7XWVB+1Q:LC!ie_iGT1Vs'(dKUH?.j;r6IEL:P[CdXF"/KEd3@pj-$%#%8E$]ZMHOKpGX
%><tN:5N=/4/fZm(`fX/4*')up;'aOKMQ@150B8DJBN076b![.Z-B0@7J3c'@[u+E/bto!LV:91YS/P*sWmMM`24C8G+](HnQ!L0,
%kr"nR^IHD(cRK!r'H9d3E!VU5jMbaH!EGGF-M9>$8Ha-0Hr^eT-VcCq*%Xo5@>N5Z&ur[s9bdt'Di71d3_edF@1!@MMLqS#`De<M
%X.Z-NBOrra.[s%(Vpb/D$EB[u-<05'H3Xo9d)9RbKV@[H6e0eCXs,$dar(O!1sM57<'>)c.KYq2X<:om"B6DdAm\DC<d[pZaN=Wb
%rQM-JYs:h!W9A)eR)Og;.&\Qkg/1[$'cg&5[+GX(BaC*+hDTKk&Oi%UEgN8mJr$GI9f\IU.S+%JY&9,2aj@gI'k4eF_IN^N"bEaC
%+=@iD.1"uK"S)m$H&7%r'>V.&$p_[Iana1Bc.ldFE25fe0"#T=q:6f'5_+]jcg[i3bS9RtHIl'e/roV`?ul:1gar^Qj&^?*PuZb/
%]9hSt0`^Go7Ft^g"a[_#/[9@K7m_,EqNfCn+tt>aLk/+tkrV?&g5=ap9a-!NH^WqI!`JZnXls'F<o=e+QV$]kTPRg09$t+aMAHAY
%!7H(:#s6VD`&Pd!Gd0LXq63-Kl`?Bf^L\(m-r<uAam'3_9\L;:));po7E&5'0i_1H"Vj\-@\mX`[Yb??@\V-iRAb1>-GlZ3qoBkJ
%W!fLMU=7\8p3f-L5B.bqc:cYe#:;b[$"5&Dq9264EG2)lSslTVR!:A/KFo+*7ZL2R+9WQ'X#X++B!='VJf`qrB-pLV7S^h_F4.C:
%7\J%uQq2i,F3HX^/<E9p\H)@@2\OufSsd[8jNu6nF.O>5.[Yi%8NE.IL4@Xh!m)7SB:2_M4NU74fa]8BN(LTG\R8S/-V6e$8=9#D
%kVjb1,tGS%*1odhAa&p-4S'Rf/0^'"$";o95b6tg0r[kY8.qXNa@:>qK#pYSadOd%7@qb$)",d&EVi"gM`g;Z'LAX/BuUV-&'NCC
%5b/spR&B%bQeLNRX#P7CTJSB_@=gi`6NH=1:Bqn3&nB@aFF(SDc#hC]+cG#1I2$a]*0P_:Q8@rf7>&BHJr@S^'GF;6^).lP%Sf9/
%T9qt]8^3Y*q'_&h@7ONmO5hJX,,asn$-+*r80A%"XZUY?++_fq(E&=E?o[d$4r-UY:_4e#61VjM\pX(CTojuc31+qEU7jPldEq+!
%E%F[67<;Ar:bgUt(KmDQQCsq>K#Q@E9',-O(CfNr7Jt@NP%SJ+&TS(9DUEmlNp_O\g]NTd-Xb)*`<)*BK;=Cp0H!2fEsd#fGfTq4
%\\oWd@Q[>=a@'^Q(_9RW0bd"aM27iL@]G6O.O(11LrBas&0M7R##-&s@+#ol,\r>@8HA"]S-"+6JNba/dY=>0n`OK]NWQs?j#?&*
%\I:hu9*"3<?,ge2Np&54LNFDgLgN3>b:pkU\dZJU@$_Di1(:F/%CpNhn[pKl:irh%<FBIackIgTRZe"*3nI2MY)ucsOSdXK,Q`k[
%2&3f?b%ImqVVK"bGlAV78@TAICFTg&1Z]*)V%,D[UY#uRdD)Q+*#jRm`R/?kI;DNRZ5KO6MbQVVRoomqWK5;o9L."EVP9!n]Rk[`
%a/1'nYVb<9p&Gqq_XMADP#'3(A/Bl,)<.u[JAT95=:2r%"Nhu@nQA:IiF=PmL$@9pA06G4A]8<(OD7l)++muNCsRh^q\T_l00Um7
%.!uGXV6E$#QL%C&Ce];C.G1Yl[M:D!#aF\lL<XpcLa+I-%p<us,6ZMCN$#D(HY._:!9ne<i4lLAN4+P)RF($1#\HCZYe15co9k/#
%\FL")Gm42[N8Kce3td"f;9T(f$EU"i_K:nElR4)&B%^d(KEMB%UPZcWQSK*YRAD$6.0s#_!k(M4Q3h)U7g3dB3n*[M80>12X9?_)
%cO>7,W$($>"<<h[k8S$)'a.Xr0Ej4qR=[*n$o.N)MO]8(C()k/`284?ih+XC?;&;]XO5i!$\er1MU)De$R>Eq0W1Y,;c(PncO("Q
%Y7dE_9/H_qlR.F4:13ohd8Q-[Sb2t=0H%LWWPhKIpjZG6"Ch4m"VU_IBSk%B!n\1M51.*`cPWe]S7R.YAGD:8apE<KViMlI`]/0F
%+RVQ;-@n\unj!?nLJkruK(sLLO9iZD57U'e0JFBZ61O!l`bo&tA5WaCN07S!Nf9(pL1lgaKkXqFSJI.9'L)a5lkkt`\ES8D=cAn7
%B0e/ioJI"%1tZjb-l%BMEWX0N98-X&*sWqPM%,J+G'T`[Ncm5eo-!gjiccOMK,d8"l$$[E[V-J`0H!4(;]sQ(%#iOU0\XPUa91A:
%@PN:)JP7`'5XGO)BJ3;?pl)s2$a7PA/donG-#!mR>2UH6!;JX]G1fOoZbWYIP+EADT=G4$".es=P4%F_=^2TkSU,H>Qj:F7-a$_j
%Al01$![7b$aJSaS`:7*E49U.)g7/lfoj`B]oN4>t\Z;Y.?ZB0!.Q`YrhZs!Bgm<KVUAQ0-H;%]JJVF:Sn"Cnk8K`4(oF)'%pUOl&
%oc_GT:@@B7R^_"Olt&hqAU,qCRE,qK-XN:!L4P)@RogC_YHMKVJV$LT*-;YN73YTQiC+na=8%6Ckq7eHIe"GRSD-C9[c9*q\>G6V
%c,K%!Bt8Gq#diAKX.N:-)#BY\HWS`ia/.=[[+r:Y&VBHL-3.T3-L1Z3+)$5h1]qRS(jRJqjk]2r^_)B[M)O3Id9gYW<iob0LQLqL
%a"\j=hKb>gm5:5"ah>d'";jY&i?.\u\2dIS`Ui92[PLs/Z&4<Gn!6fs+njo`(XNar-hhMULh61:e>^nTd`hWfpMNsRT_<7MQTYK/
%9hH;rhMn6Hjkd+@G%jT@.^ZKU/pPINRpO&^q//)3U#rsif1sS76[&UVGN7NN:jc>MG#3TgCMKl`X,4A`#hNAh51s#hS\I)MW];I=
%I9/VG./C$W=fM3LY/!@_>)Ik_7M+Y3=]4ltkrL9@GInE7'8@4!ilaV*"^`;Z9q(1.._.KBVaAZ&W%<&fMB4[k=7f0nNcj-[C8*R[
%d\c#NfX't=p`?G/>(]k2:;kY,H%T^=U,f.dF%X0glms=VRQi6#h]ud#9"p4rEIclR$@Z8<OF<=(@RBf`<Z,T%`)`qiWjD,_ls>84
%Rl$96iA^!=%c,b7;l0@<HX9VG:$jY@g"0g78m;QNUS/>J>s)#5':q&oI1m\\-Mm#<6If-N/0t,X.:TTdSg#NY<]c^D8(gGDi@'kh
%G92HB;>%&IK>0+r0'0Rp)(/+,cj<&c/?6:Y&f*"5T`YF\7F)TXYcBm?lp=mW!Z$o>^FFPdh:.Q^pL6_1HEogDB'3o$YjOqYK$eM(
%%]i5EdXc`rOHfg,^`&CF*4EGU!R#Ic)K:`p_uT/FMNnJ&K00:0K*Mt9@Q"3T@!53j!d>L7fd9UJHgjE7`*P$+b9#5LCfpid!,Lt)
%#f%I2*SJ#%J:!B5^qQiZ+D?_='/'=k^cb)+<.YhB%\!Iba%HXME"<u\G)$Pm,Y$RDPTImgkOg2#f>/YO#K^md)52pt(rAZ0C>Gt>
%*Rl5@SG-?/&-9h%=SiFL]c`F.NnE"&%NQ3p:$`u5_38I$fe>=j+iajk)tWdWXI1*i+U#*Y*L[;bfSFMI`8GMf)AnV*I*0/Ad$sIX
%K:Gsk0UfA(NX8q1=9g7kaA7cZjpjJmc1W<n@,Hqa9dRcf#ENT:@uNFimm?Pe0^B"4&GUg@4rR,5:$EBlBAP]?VUhj8nu2*P(qBf&
%@Wud3.;p-.i_/$$j[/"plAK0C+OSG`Kb^J.?=DbPS]_u8r.bZigU-S9*7/Sk\SjI%?`kn,bWM.DZkF#EghS.n_/"4N^s!lTD/VbE
%1k^fuMNnj2QVoJX[\9qg'iK&=>D3'`db!k\k_0bgdB3g+W*Wf+oG"$U@%K^=9U7frc7O;o4VLMUkWBNcZ'iFIgN7k8k,?-k4%C#k
%i\F=Ro\9Y.(Ob[(Gk6=BeU7J3a9F+HD3Z`(k@Mi[bt8b6$B_f5i'h5:?)UX5H<r5\QaORUXXLg_0;-p]O#N^-D'2VIpNVt2$^)Y@
%notmt"*mbcSir7.QYf+h4:9,2A_FN$Ti[Qk*Md"bSscbGKu,B_M>9F!G_3WSFA:k-&$LRK2-j.[bl!co%+\CX/*qDUCU8Xh=4VS3
%I8hurX]6*<r^pb6!afWPV@r2TWrbLE>uT-a3ia1ODIYJ/5d)qKZYjEj:!NOiFA6>P?Ao%XU/XRMOEXFN^=c:us)pU]I@A#8`<;Wb
%(tFR\n3(EhQZu9io3/F?,::11'pFD*T_EiT."d1?CP8u6HR'?s"n5D3Z8MgM36^D;&fHIF<EE8pC&,2kq:g5\$P0!krHeD=U_pjg
%s,U?<rQll%iR3*5`1>&<?)p3.4;EW<)Xa:R*d:dXicQSSB&_o1`oBhgOn_*P8)Mf>qf&?SO8*",>DMtj[TFp2FeW/3g23L"aYX+n
%M05FmpQ7<BXD)3.-Iu[94\"!bYi_(U9WVf7NSKpFoeselaYGg-1:J)I<')oog+mZOI7.8Wi+t-:$dmqlDEeAtIGd]+53dA&q`4-c
%"&G^K/af!`r>_3I^f1Q9g+f^Rqg!7Wp"g?j_R%3%d:tmmU7n_E[FsQ"BXaTsd88M`a)#b\Qk'#H1C_mJ%b6Q,b`%JYm$Z#@US4tJ
%<uLOO\"=\eG'BNpW,#'uB"ZjDSnIG8L8r8+@uG-3G@0=`hN88t]a`MOR7`G83c>[i)<I>H^c#.O7ehr>>2QnpO1E.Dp0>#ggA@>r
%]:.WDNb]^dIU<:34l$\H^O/.1R,"eE"Ha=Y*l\BngSBZfh8X[`5%`ea,gI'C^5_YN>\;tN'%_uMhSsdc:A9S^F+5367d@A9`d"4a
%BBjW:AfD'o_Uns@)GeF/Cm.?:F;r)*LLVMk-IU,9WK88Cp*^Si&Shf.0u(2Q`d$/#:pV#r;Ia<W%up+hdi+9LL7eu`,:S1-l8RUI
%3jf^0`?UMl+?X`T)YZ=2lNiS6Ni"-:6=qFZ:*k.I"$+kEK[aZ>`B-g_KgD3#bMVKCP/&e([tjam7&9H?CF5*p"E.Cf,OYs>X9@6e
%>&tY:<8<,T-R'".5U,MH#eYsZMn;(n6)ut9E7s>H?34Nb-K%=hkLN\&rtG!A%o"e$ob#0XBHp5s_M$Z2'<'&:89&N%g\0P5HW`NQ
%p@3@6Q6r54WpQL:Cm\p`BMMgVZTU:[Y&'^?:"(V+0?sC3,hoD2*9Pmcc9Ek^bqc3lQSW#`U:E%VmUBpJei[KeXNd34=^%##V&N),
%Ub#NiX3G_o_S"U(^)jUqZgQMpg+2JQ.^b=&b8@=.m>8EqqE-O1dq6,ne`B`\)X`tcS!!ZM$`bDq'l$Lp!Z9.UbqTU<DI7n%+-#Xt
%S;kHmUQH$\f>Np,6W5]),AKG\EC%RPBCV,'_u/-h'-!&=Z>6aX]3Ji@XBj4j9'd/]")G9e_2LQ)_t)*h6s*T0`DkJ78!(>%o<AdP
%.GaC'?j\H'nHC^VXWMehbQbEea^&iU=Fq!&!bpk`(<h/+ht:*94X7N'!10)Eb"e*K]FFruB*sDpDH"=)KNABg0QRQ<r?/RZ?l'T"
%,24naBsV(WPah],QEt]CR-!%1Pp6RT\gQGLZWqh[oEKl;cpDbJP?o#d'3T8&7dFmm85<tGHR=ofGeX\,m'e,@/!)T-VIADh`-bT)
%.kTq;ec>cWYWNBG(//E/YVPg:OhY/jf*hR=%UU=D1A\iNEmA@cj)L]&*5O8n1,H*Io6MA9EM%)[hIbnu*-3e!IN.<eV_l)3/?;rQ
%R$)`T9u+,C^>R<Rr8iOFN;R8L7q0f,M1*"^m+_Is!RlM@aM'5Bm-=he-2@t=G29"tC_m?/0+P3n*+5BLOJW+^lScPI(-nM3gXNAX
%c@(Ff8-j*E,TQE->8[]^:Y=h6\X:`p+n[i@#\.GDLHWI716+rZIE]k%I9Le9o<S8732L9.r9W8fB_NZ;]-%$!,TDrSHf$1IcmF,0
%h]pgAVqoB]m67mJ])1rI/rbjQL(kht(F`\hpII6O7+t,ATe4^\^Ujp/s20p($Iq<i<#QlXTeZnQ1TkM0!gSPG$\7o9LNjcH=Mu'f
%oHm=U1%kWg^Z?%-DZar;.Gj)5Ll7&U:/Z2P^RRkk3[#U[1@2@OBq/Zi+QHat!([EhFE%XS$j..[!?@mL!_snuo^TQL:\"&7DtIlY
%1^5O:`LS9MF_r0A%H(nZ(``XZ&C>IE'!rSAOVc*m7jQ=Z^_sq2)oAA.pW%1^RWd*s"@BX%"=5*Q$(M!U/g.&-G*>i4PiM3#TV-.1
%Z(IbL(joN283VZdI\VZT`RW$@V]5[eOG0K6o`\5;CEJ+m0h;E!aJhTZi$>W&&NFbA[1SKg<j"60Qt"Fi7mS([:nA8&7tru;YRE"B
%#U^L9M?=IN*%OSi!bla)GQ/+A>_jP;)6f2X$:S5naSH/T,ENfV^_q!"6ju9EmW_2<["D@D+",Lr8tjmkU_M?3!XDi\h]B6-#\f!I
%-_$P2m7cWb+>d+%O5D]DJbmn?NKm.q.=l4+2H6mjBgCDX8sg64'Z2s;`,W(^`8j)pU=dnP@TqJZ;65Dc$Y1V<g*AL0pk_6Je+2_"
%Lb[.F5to?c;H.i'@;"F*;O@k\RM<be<`HrCgmUhP-Er16-IWOi@*FBa),.+..>(('NZ+:NCJt>!<sUW:/Dk=PR.@I\^poc$!grP/
%&AXH0GD?0akhU1b?qEB9:r!\`6m.$%#64g-d^nmD^ll"FVZ`m-P9GK'AKRUs,qT+P#aXNq!Ym9:Lq`lLb3r0BP#C(s^s&MQ5Eg-J
%i(nC55;f[`"l<*>#q8Y,N%FgF"f-3j2QjR.,j9N',cnP:HT*D>h`@2OAH4l/dOJll09YCMo-p2Mr&hH$`j6+.PEMD3^QNW*8*DCY
%3QWLDgI^);8?J^8/Y.1.2!\J).1cb/aX/<&_._j?l![[=r<V@4ak6g6=(7I;\l[m9*dU97W&:A(ffh7g.re5s8k%a\!X`&Xitr,*
%dc3&-0_frNq803T,'P^##7+^/>p]+Oo6>d8@$V9s">fe,O?&JAAB80@^Api7LH>cP%WapL3gdGlKFfKZ!9dfoK+B,AT7en&PMCgF
%/t!+c%-p604Cp3pC]QS!o@&Ht-C`AZJ=4Sc-t)0A<gHN:WIb1@1FMBnAsif#CQ#B)K_Vs[o-i@kNV>NA0:Rh/m;&Kq!MlnNFGpdF
%CkIqDB+PM_:.LD[r&j#JP8.4K?i9[dajrMHHR4Mcd5WT3c67KSFJ9,eb7[nfc&3)q87"dh-X5!i%=2+7>[b]Z7GVT^5#j_T6gUgb
%YoCs:Ad(QeWY-9oF]CsiFo,.-daKh3.`iEG=-_eHjK9Et%(*0`QDm%X*.Kfq7+7`sdT'/pOLhGuN$*:D%DBNJ=iE'L['%OP;j4em
%`Y_OaWh/U>]*b.7OLt,cnW:A?*a2;0.d,iHE`^@ZUsLG+@3_RWeJb8(L`V,D1a-iRI=;>D=/#!k,d(V60+!W=R.4,h\Ve(*L<*B=
%iY=4MOTQtQY%!u_TlUtF4uJb/R)<:p>Xa*'OL_alR4;8mdlF@3`S>U)e5a_^.J0cP2Js)>ME/%0oZHl1,)BQ.(.q<mb%@moU/s7r
%.]?[a,&Gb@R0Lb`b;$+J?J3'd'8fl2.&Q67=^;a7Y&',4d(;&mVOHA,ZOYO>1M8f#6RTufT*E[nb6&*O=3_)t:<#J-*h$0-A:#e4
%=lLt8YD`i.C0-_B$F)*[5n0eD9,p*[Y1Dc5jN=>JU?,VbN+[&eh((lGRrm"VY)M.MBO$ruS#LC=F$##qQ1Y-2b,#sc:$'g<k73r6
%5`%#WqacgY12gSL>hQiOF@of,=ojI1j"!Y3\86K/!eDlFK+@`Y[bfum[k\VhTl+Fi`!t^lc1@U<Q.re4TPJ-)@SU2Z/!UpV<q^([
%3A/IseY2di[g#\[.tMkY>1rbTd'PRV?VSnQR48oXZHW$8B4Wk.LRpA2YpY&RfQeK&c,s3E%l#T(-T&cC]HJgASYP[j%a0s<Z5Fd[
%rS4UOi8bp!@Sc?XKAE)NNtEjPk:%41-c:NuiYpS\K7pXnZ.+;TfcWu!@I6"-CI!IZ^e/dY#_]>]"$O3'gB7Wo>7HbIJ-A*Q?uBCg
%8pgPkkg_u>V^t1r-so-e8Bq1<a^5,_bh0%>!GRh60'!`_:U[>0FD,*;V#*0u8KkVb"*X_QM$X;:YCs7m+aG(10;4BL"pHq=QF%1]
%/Z8\Ug:FZ`)&J;r!j!5sL*+9FX2oa$q\D8I>OqB\nn5`SQ%bdM+%GTi<tO8,K"m8bB+9<FN"_50(^?g<X8>feRucA#\IXYBOHE)u
%%:G/]ol%Mf2]fLX<.o[f^26a6G.B":p%$,.fU+FLHA[fl;Sj6"LgO.RGaCcL+b&#7G^VrA&@2d&]`GdG<,K.(1:?>42#R34L4?iM
%=i3bN3XN.K0n*+;[=0B[ik@Z!OC.QKWbM9"26BE*/Qhk@qbF/fU&'RWn?8gg`-(4ERaU#<g2F-kqhM1#7[GQrFVGEPbSo$[LFnYe
%ROYTHih82gX2D]OP3RhfW4i/MJFa-K;f"e.)Z^nQ^8A?]EjMbq+7GZ@a6T^8qGahJj%FJnaq,@9-sfhB/R-=h@e0'l[?Nm^9/_04
%5a;t-^PZkFp06,^^Q"q.'Jso/f;#hH]2EE/J@dVR_'.S;ZnUt@U2c\<P/u*-7b5D5#XlYRkq1t=jeLSA$7P+P#s%KQ&II8V$3)@E
%\l,t&R(nR_n?dknjN>U]J;WngF'\l#/D7?gXnTuIiM.;l6t02q/NprL#%c?#ObpPelo:='(rghh0XP?0C'%^"ggg/C3=Dr0oNq@I
%!):FDDO?-GOOoH?-JojtgcJh+SuLLiSROLQkqno$It>:PPf9q;TZ)MK-SMnZObQ=T\0M9EB80_O7UcZa9O\ThOjY1[m!>_J1mVR,
%/thr.38ZbX>Hcp'T:1b)YaIV;Wa?UPVqXE6?Ej"j=#o7*(V$C+9*o@,2&_ffBef[d?d=b0I"*`3\+K(,^pcjLaKT"S'q9Sn+/178
%p@@9oOk!N^493^dh:H^cf;X3]rd&A#+7MQ,4aR5.YTT"A%`*K&gL&cdNS_S(D:<=jh/8^bG['?of4pU`GXM7dZ.a-6qGFl5oBY0d
%=\k[QeiJJA70AF.@100uE+E).&9D"`8-<^tBTJ#DQtVPC2@m0"2uoUFXCYim,AS<%k9V/cCHO3bH/&Yap_\2cN'-E"^!>,29L*81
%\[REBC-$fr]8%a$1ifLNqrjfCp6]Rc83=9;j1F'$cfUWskjYY-*B((K_)JhD>4+a;F5'#%@9O&ufYkK6i<B+)_7j3ZD_q8SKXZec
%^E?;gjCor*L2\J(0$*VfH(N.$&C0>Q%;Mqi*(qORH6:"\ID'=BoqG%J_<h_:LN$jDl!6e3)AF:Jm]_*FBC8m1fE*lU_o<PPTjNe7
%OTi:na?9^X+)p44+'DEeT%`ecNX'?F(g2BsO,0<<>C)b2ejgKl*R30aCd!anIer,j4<Rlpl;5iN(m]@Q4"_"^9F&Z1!V421o#1XP
%`<",'J3"dFhBlW>hsWAuNWlC?:F3G(A;ifK8?650i`];HgI/a2`d"67BBjoB:(qaWC-6le25i2dW+4j3>(",&J0n[XX^'5>$[O_p
%8mhp7QN5IDC7*nh2?[o&NXT@_Tnt,)b1X"/g28.E@hUQ`VoD+hR+.LVP1Tqtn[R$[CQ*I)^aq%#g9Cs?r?<j[c1'rsY9YEE`QO][
%`&?-9ffOEf3Mrq.NWt'lTJ@X*Y]ID*Tp?CiQ?3Q-6:qdT6-^?RET@U-4$!R`*fb)/"Du8YAXFlg&2!D`L,/isp_'g7UE?'PNIou@
%q;Ll;U`j'*JNri:D`jM9$\pj"A7UL:cm$e0LbVo4_dI,u0Sm*_H?8ZpRcN.t@f#05$7PYOL2cHCCj'jZ+GCdEfbF#!CE[N-bkF[m
%H)/]Um?G0BEJ)B_O'ehDj!tu.R:4[a.1`bpl'1@<dB7!a<93Vhg4ENMVi3jqo'?b?Ka(o>@j*QWLN[q\iCOs8k+7(t(q%#upb?N=
%@)8_JHi+S#LQ*Ie<s#$!EfaEpDkHars"<7*nh=2o9WVKhZ&I@<YhDV*<qXtsJ7&[\<+hIN)sb6khEk4ZL'(GcZ=/r>^(dS`fm%2@
%ZLPf3Zt3a;qb*.PH+JO,CtX'(<uJ=FOY%MJC@l)<(H3BeoaZY=K,S"fHDnUG.kSG6D_c"T7['_dh"B/O<LC+dg@1MEoPONEZibI7
%,Pcn)Ff"VRBa<kb73`$Um%NJ%LSYHBV&.ApmVlb_&Zs^p!B&+=mP8Gh7U%O!=i#Z_+RL#k01cZS7^>.gb^l$F\U4&04444AO*,n?
%g5np9+lasP+-@V;#lln6K'mq*7!:gGaHJn'!-2Kefa2a&2gdU=j$"B9O8NDXJ;qH?Hn]ks-D2HtnpAbIFGsFhEHKu"(#?pJaI?Oq
%*jBWpcgO:5fE=nF/]/M6^D1V,3kUT^01C*DYQp\S'T\d]`4>UqB)"K1#JlMCOi]XuPq.u,(r&*im@'pTjGO,=.9V^#r.<(AeD!"c
%_](>F^XPUqpN@Xh[q4KX:I7.KcID/Rc,O;7\"Pf&3CZOkl58_*/'GHYBJbFh6$L[l2T;jc&(l8[4<5Qj#:LAn-l3+:(C-nf!NI#B
%4[';!?XQ9((>E`;Fb*JmqUJNG4U#ks%%Uq\YF]:n8Q&?I3g)kFDU*7o*4b7R*CnM\Nhc4d[HEn[KZCQiqf#6^o#o5t2CG!i?02X_
%P0O";UV!Djh5N8!gk.=IBR:MTME8/Y%`/pF\@`sP#tVn%"G"&%#AFd&PH46bO93KhW]2DCiVItW5YN;6d=[1`f)`^>;(C*Z?Vu5!
%ZX]!-7Ha&Jju*eFjDI>)YD:i5-=<bnG84t56JUndi/r6U:2ZZ]:2XG;%W5Y**XKV*i]G6[0`)iiHT_L8X\@&,X#P@3n@f;SM+LT9
%XGX3@(r=<t3akgu4Oj%MW0-e3f['.[0HQ"JBD+J!;(pTHpQ`tE0Mi"YO]Ukt2_a!LF`[J3SsNuR69Qu9!IZ/u<pM+eF2-`IBp&?+
%b_R1:0=d.X;t`M=naOf>'.PaOJr#c!ePm\J%p_bs$qinBJG&=o6kJi#4\)I.-)MBLhO-/3e[qXD^q+teQ3R]cY0A:%h(DhC!4n^P
%N@<O-^A+nD>9#r997#]<R[n^F/J.=_hY88MaT^oPh^*WW%h12^c+_;EAs,P60A1\7"MJE<6pWKZ97*U`AuHEl?K)nbe@jp<"),+!
%V]#+9#c03-]YAeiCWUjcNfp51U&--I=J>\i#c$K4ZeGUJZYtF&Qo'4*NMh._`5#ooF!uX^ZMR?.9VtF8,+,<f5S'(o']m,P+U9?X
%FdjA<bUjsu^uXVXBM1,d5^UofTTG]!-+L3U"nNr!&`\(Fe2hs_JEB98!ar>,oUu73><@=,JB=.o0-o-VpQb*ZGeFu5`=hcU7p@Tp
%\rLLd2]C(EFJB;M()ugOdLti,s3(nPl$pf;=ePd@)<aos9D=p;7]s:o+o\>8NU[mci*elo\"f_kmKcV>>sj=mr60>bWIDHBb%($K
%:M(Si\*#<<^YKs2./9scjB6uE4oV/jG!+O+QFi_n\1DfM-pdab$c;'&L"ZgcDqC`cpY'MG!m#gP4+=,W]63FPpER:(aF:bod]FVI
%dJopC2b,T[I_0a#k9F_CIP[RV]Ch'g:1OcofE<0kiO^O2M2#Q8N`IuNY.9]uVh?f$DQ5CD^ZKB&d;QM.,uhY84aBhk8.K<4rH<;s
%&H-dYm==E0dsNB.^E!e%/]G$M*?Rj61K1(2-dseBI_.U!6tU_b4l,\a]6PGcVL;fnen@ObJYDqfYDpEVDFR8nptP7<hdJ$j<t";B
%]A=MMqsAT\c*^:?E0L2X%cg"Hg[(Mdi4!DC&&E1j3uro[LTS$'3C[]JW&IUMRbq`G,Ydsdm.D]I5:_2`<@MjC26DMSFH/kTl.elV
%)Nq_oa!F+4bR72cd)SrY@!"\`q840`])0A`d)B$BTS\\J#]s&qqX*Lni"0S8Bj&$m4`io8r]p3N.Ka3G*uot-k@:BpSRYQOe#NNa
%5^UbO!bbmb;uk1RVc_fIqO`UA;uj%IVZpgi_q2HD1?J&J/9;cI8$d"Ga3S@caGS;Uq=+e3afH9CBs=HG:2SdcXl?`C*5)J$7a\]j
%`3A@^H`*FO\dn2O9aRnEL!rmq="bQtf5@q$gsp8a2`Lm(Gc-9qm;YFA6(KnS#%oftRZ<fo?FU;UJ-7oX%e:p0Q@nmk$Uq:7VuZ-L
%]srjlT]H8B&?MtF_W;Ab2Q=MKb(5h+B)?/?,bP>O:q--BYhDrO&[^SP,cHoY,`)&h*a"[MTd"13V'];%nd8*q[^lC2#HA]A#M*AI
%Za7(BLsDY/4'$,h^@jo/XEq-iWaO(1Kf(Igaf;$^kopF2Y\#U[1EOR6344(b3>Z"N!CXWR2+h#u]JguA<XuI).TiYR;\Z;[lp;Gg
%VS5A4X:[oH;Ns9I_0R71<`?uaK$l'?#Zf-uL+$0s^=IDB](NXBoreUn&`qdY=g6%/5?,J1)Y;X>l]"d.,%e4@H8Fc@5"R+B8YN`N
%KUe`NUg9@1;2(Y\(TV4+j14Z7EaY/pAWm5(2@aJ0eaSH2TK/36&$-a[:_5/rLbq]-fR4g8@*pR]<5E$&/9J^;2_:1Z3M/3DYZ1Na
%pF(3\F(AYEDM9QBE48.H/:9s^,$<4864YV>e:erGm/D\[=L+J_lqt'ZJsKINM#BkEK7%5=C+r!aCaQ;a!Xg(u:]_$1@3Gah5.r*B
%_YBBO?t$'n113Cg$S#OEF=OEc%Kn/5H3hTAI#q;).sa.Lph*(&+oW5B8OE>*2Z3a;?f>N+/pu2;%OcfQ_U`t#=qR31Z&'1Ar//aD
%i6#0HAUriC0Zg!PI7:hKN94tno?dDmWQ'1D.I+qrrY67LbW$CG@+!p.+TiK^=AfGVf'>U31qR%.Jd%]RW.IG[=8D^(>-)MX>AiDd
%;P4R:qs[0$/T7&=$;:8:aaVn;%ru*`:Q@[r/1\mX=k$pZD.Fs:#P]Gb(3I?SqC'L.;+E1<8m"Zd@TF&HS^RHF=%&]n$)&`4[>!!;
%RfbCA`5:-jLQYd#Uj-SVa@%+N.3d?K`:G7/n:c%9FpbKF?)Pb4l94j;.p(p.2o8q56M[Jlr+.u,f'.BPM"0s7SiO_PdV<VPR%FD@
%h-&Ig6=/def9-Lm=l^JbDT9&5a<p>FCW2/l,LoArpVG&<"ttD+*<8mi*MY"u#Cm.Y\$qH#PmnsN'FjRcB_`0!6U'@Z2QJCIXI7*o
%Zs3Vb]*coaR,&-jT:Oer<#,5+:^Xa?F]30E_Ne'UC3FJe%hEJh*Zj*-2Ak)hD(sUX\a+sRkKY^H]?I%*R/-9V8%ZWEkg@lU0eXu;
%kN0q2D(&s<<h<p"I=]&8I-?F"KYj=IOo:E-P*hMl^!mej]!A&Gng?;gV^6b%$\jS*ONR3?q0rcu@4@fX8DYl[(?0o^PaE2$gR_f&
%K<hLMjbrAE#;*Y)ase&2#&SaoRt-hcBX)r2'!Qc0*OJq;YW-36RG_O_-KI#o>*J?2([`:o()FsX8N4mhS7gtj?nZWK;J%/F^.P"[
%)#u.-+`gKr>Y@ssSf)jFK,.,$T`^5Je3Surl?]M%3Pr&K/tcS-60eW5<!tlV71Uson[Mf+U3E08^=a"l"/h/ALY5K91Zt_@e,-;P
%pH5F(".(6]Ppm-B(uLIT]83%==@()M"42ReC"4FcQ&";rLYY=Y][s8Jq!L,4Eng''2FQ?k/[?Jurk%'9s*+L1rq6#8qR7PrqVTU`
%s7!p-i;8$'l&VJ:jl`98j$,d.r8$i@pm7WPqt$_Xrq**Qs7N;)If?OSIsq1Rc_(7.oqM6ZkqE)9kPofMO.EeupYZ#MTDmf]hu+Ynrj@d~>
%AI9_PrivateDataEnd
