%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: blochspheretoymodel.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: RSLab
%%CreationDate: 5/29/2009
%%BoundingBox: 0 0 929 833
%%HiResBoundingBox: 0 0 928.5000 832.5000
%%CropBox: 0 0 928.5000 832.5000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">sphrere</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2008-09-24T09:26:30-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-05-29T16:40:45-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-05-29T16:40:45-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>232</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA6AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FUntPNGnXPmrUPLUbD69p1rbXc243W5aVeIHX4BEpP+uMVRmlfpf6p/uW+r/X&#xA;PVmp9U5+l6Xqt6H958XP0uPPtyrTbFUZirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;aZlVSzEKo3JOwAxVBy63pUdOVyjV6FKuPvQNiqGk8z6arUUSSD+ZVFP+GK4qoSebIB/d27t/rEL+&#xA;rliqk3m1v2bUD5vX/jUYqpN5rvP2YYx8+R/iMVWHzTqJGyRD3Ct/FsVWHzNqZ6cB8l/qcVWt5j1U&#xA;9JFX5Kv8cVWnzDqx/wB3Af7BP6Yq1/iDV/8Af/8Awif804q7/EGr/wC//wDhE/5pxVJ7W8lj816h&#xA;qEaQpfzWlqk12sMQldecwozheR2RfuHgMVTj/EGr/wC//wDhE/5pxV3+INX/AN//APCJ/wA04quH&#xA;mLVgP74H34L/AExVtfMmqjq6n5qP4YqvHmbUx14H5r/Q4quHmnUB1jiP0N/zViqovmu6/agQ/Ikf&#xA;1xVUXzaf2rX7n/5txVWTzXan+8gdf9Uhv18cVV4/MumOfiLx+7L/AM08sVRUWr6ZL9i5QezHgf8A&#xA;hqYqiwQRUbg9DirsVdirsVdirsVdirsVeA/mb+Y+pL+Zb2WnyLLpehQLFNbkh4pLub4nb4aEPEvw&#xA;exr7jJAIJX2X5p6fIALuyliboTEyyD578Djwo4k4t/Pvlmalbloiezxv+tQwx4SniCPi8yaDL9i/&#xA;h3/mcL/xKmCitolNR0+T7F1C/f4ZFO30HGk2rq6N9lgadaGuBV2KuxV2KuxV2KuxVAQ/8dy7/wCY&#xA;W2/5OT4qj8VdirsVdirsVdirsVaJA64aKLWtNEvVhh4SvEFCTUbVOpJ+QP8AHDwFHEEvu/MaxKfR&#xA;hLN2Lmg+4Vw+GjjTL8ovM9zd3ut6FesPUgkS/sFAAUW9wOMkagf77mQsf9cZGQosgbD0rIpdirsV&#xA;dirsVdiqH1G/g0/T7q/uK+haQyTzcRU8IlLtQbdhir45tLy41BrnVrpud1qs8t7NJQDkZmqpoKfs&#xA;cctDAouPChEx9cUIqLFUZFhVFx4qjoZploQ7CngTiqPhu7odJnHj8R/rhpbR0N5df7+k/wCCP9ca&#xA;C2mEFzcHrK5+bE48IRZTK2d2IqxOPCFsptBDGVFVBwGIWyo21vCdfvAUH+8tr2/4suMjQZWmq2lt&#xA;/vtfuxoLa8Wdt/vpfuxoLbf1W2/30n/AjGltr6tAOkaj/YjGltY0MY6IB9Aw0hTZFHQDCqHlGxyT&#xA;FL5hucKoGYYqgJxgVK7tdjilBeW9R/Q/5gaDfluEVzK2l3P+Ul7RY1/6SEiyuYZwfQOVM3Yq7FXY&#xA;q7FXYqwL89NXbTPyw1gxSmG6vUSytiOrPO4Vl+mPlhCvnOKNIokiQUSNQqj2AoMta1ePqMVREeKE&#xA;VFiqLi7YVRcZxQi4j0wpRkR6YoR0JwqmNsemKE2tDuMKp3bn4RgKhTtf+O/ef8wlr/ycuMgyTZcU&#xA;rxgVs4q0cVUmwoUWwoQ8uFUun65JCAmxVAzd8CpbddMUsW8zeumnzT25C3NuBPbs3QSwkSIT/slG&#xA;RlyZR5vpOxvIb2yt7yA1guYkmiPisihl/A5Q2K+KuxV2KuxV2KvH/wDnJW9iHlvRNNP95d6pFMo3&#xA;+zbKzN2p1cd8lFBeM5YwXx9sVRKYoRMZxVFxnFUVGemFCKiOFKMiOKEbC3TFUxt26YVTa1fcYUJ3&#xA;aPVRgKhban/c/ef8wlr/AMnLjIsk2U4FVAcCW64qtJwqpscUKLnChDTNQHJBCWzt1wqgZjiqBmPX&#xA;AlLrk4qkWqKHidSKgggj54Cl7N+Vl0Lj8uvLzBzJ6NlFbcyalvqw9CpPifT3zHbWU4q7FXYq7FXY&#xA;q8P/AOcljW68nL1/0i9Yj2EC/wASMlFBeU5YwXpiqIQ74oREZ6YqioziqLjO2FUTE2+FUXE2KEbC&#xA;2Ko+3ffCqZ20nTFCb2k9CMKr7e5iTXbsu6rW0taciBX95ceOVkgc2yGOUvpBKare2v8Av5P+CH9c&#xA;HHHvbPy+T+bL5FuW5tZInj+sqnNSvNHAYVFKqexGDjj3r+XyfzZfIobRoNP0rSbTTYbszRWkSxJN&#xA;PIryuFFOTsONWPfbHij3pOnyfzZfIos3tr/v5P8Agh/XHjHej8vk/my+RYjcfmhoFjrk+jaxy06e&#xA;Nv3Nw37y3ljb7DrIo2qOvIUBqK7ZhnXwjMxl6fuegj7K6nLgjnwfvIkbx+mUT1FH9e/OmSw3trdQ&#xA;JcWsyTwSCscsTB0YeIZag5nRkJCwbDzmbDPFIxmDGQ6EUUPcy9ssDUl0z4qgpXxVJ7q2u21SC6S7&#xA;KWscUkc1nxBWRmKlX5V2KcT275FKlct1wqkt+djgSzDyF+Ynl/yh+W3l9/MTy2tjeXepWsWpCMyW&#xA;8ckWoXASOUpydWdVJB402NSMoLaHqelaxpOr2SX2lXkN9ZyfYuLeRZUP+yUkVwKjMVUEvrKS7ks4&#xA;7iJ7uEBprdXUyIrfZLIDyAPauKq+Koa90vTL7h9etIbr06+n60aSceVK8eQNK0GKvDP+cjNF0i0u&#xA;/KJtbG3gEs96kgjiROQ9BWFeIFacclFBeXfUrL/lnj/4Bf6ZNha5bKy/5Z4/+AX+mK2rpY2O3+jx&#xA;f8Av9MVtXSwsP+WaL/gF/pitomOw0/8A5Zov+Ra/0w0tomPT9O/5ZYf+Ra/0xW0Smm6b/wAskP8A&#xA;yLT+mGkWiY9N0v8A5Y4P+Raf0xpbRcWmaV/yxwf8ik/phpbRkWl6R/yxW/8AyKT+mNLaPg0rRtv9&#xA;Bt/+RSf0xpFplb6TonfT7b/kTH/TDS2kHnzy7aWI07zNbafb3NpZkw6jp5hTg8BYnmBTqvI79uvS&#xA;ua3sPNi1PaGq0WaIP0ShI9DwC4+7rt/S7wubXarRxjn0+ScOkgCRYvn8Ps+bK9M8seQNRsYL200e&#xA;xkt7hBJG/oJ0PjtsR3GZeXs7HCRjKAsO2x+0uunESGadHzRo8jeSv+rJZf8AIhP6ZX+Sw/zQz/0R&#xA;a/8A1afzb/wL5J/6sll/yIT+mP5LF/NC/wCiLX/6tP5tHyN5K/6sdl/yIT+mP5LD/NC/6Itf/q0/&#xA;mw+7/J3TNR1ya/vWjstPBC22m6eixjgvQySEfabq1F/2W2YZ7KjKZJ2j3B6OHtvkw6eOPGDkyfxT&#xA;yG9/Idw6b/BOLf8AL7yXbrNFLolhcwiStqbiCO4kRPTQEF5lZt3Vj1zY4dNDGKiKeS1/auo1chLN&#xA;MyI+Q9wGylL5H8iDp5c0sf8ARlb/APNGXcIcDiKEk8k+SO3l7TB/0Z2//NGDhC8RQsnkvyX20DTR&#xA;/wBGkH/NGPCE8RQsvk7ycOmhacP+jSD/AJox4QvEUDP5S8pDpolgP+jWH/mnBwheIpVeeWPLCg8d&#xA;Ish8raIf8a40E2WTeU/yQ8tedPy+0JrmODTIEu9QmvZ7O0gS+uQL6dIE+tFSyRpF+zQ1+HpxGUFt&#xA;Ben+Vvyp/L3y16ttpWj2wDRx+oZ0+sTEgv8AE0kvNvi8Bttitp//AIX8tf8AVpsv+keL/mnFCXJ+&#xA;W/kNNe/T66HafpYBAlyYweHp/ZMaH4EYV+0qg4racXGj6bcapZ6pNDyv7BJY7Sbkw4LOFEg4ghTy&#xA;4DqPliqMxV47/wA5K2AbRPL+qV/3k1IQU/5ioytfvTJRQXjeWMGx1xVWQ4qrxnFCIjbFUVG2FUTG&#xA;2KomN8KoqN6YoRcUmKo2GWmFUdDPihOZGjk0eJZVDxyM6OjCoKnYgjOQ7NJHbepI/mY/9zFycgBw&#xA;xB82E+Xb2Tyl5iby/cOf0NqLGXSZmNeDk7xEn32+dD+1npWoiNVh8Uf3kPq/X+P0PP4D+Xy+Efol&#xA;9P6vx+l6Kl545pKduqfW1xpbaa7XGlUJLv3wqlkTxrPeMsvNpJgzr/IfSjXj9yhvpwK1JLhVCySY&#xA;FQ0kmKUHNJiqAuHwKk19J8LHAl7d+Utslv8AlxoAT7E1qLpDvutyxnB38RJXKG1k6FPrsoCUcRxl&#xA;pK9QWegp7b/fiqtirsVdirsVedf85Aact3+V+pz0Jm014L2ADu8Uqj/iLHCFfPqsrKGU1VhUH2OW&#xA;tbeKqiHFVdDvihXRsVRMbYqiY2wqiEbFCJjfClExyYoRcUuKouKamFU8klpodo3jI+cf2d/xtan+&#xA;pD/cxcmf91H4pF5j0iDW9Le1c8J1+O1m7pIOhr4Hoc7vRao4cgl06jydZq9MM0OHr096zyb5nn1C&#xA;zezv6pq1gfSu0bq1Ng/0039/oy7tDSjHISh/dz3H6mrQ6k5I8Mvrjsf1skF175r3Ocbg+OKrGn98&#xA;VQUE9v6936QIf1R65PQv6UdKf7DjgS282KqDyYqhpJcVQksmBUBcybH3xSx7X55E0+49JTJKyFYo&#xA;x1Z2+FVHzJpkZckx5vqHR9Oj0zSLHTYv7uyt4rZP9WJAg/4jlLYrr631mSv9xwTgNvt1bl79OOKq&#xA;mKuxV2KuxVB61pkeq6PfaZI3GO+t5bdnpy4iVClad6VxV8daYk0Nr9UnVkuLJ3tZkcEMGgYpuD3I&#xA;AOWhgUXhQ2pxVWQ4qro2KEQjYqiI3xVExvhVXRsUIiOTClERyYoRUcuKp9PJTy5YnxlkzkOz/wDj&#xA;a1P9SH+5i5M/7qKASf3zsHGY35mt59PvovMunrWaCi38Q/3bDsCTTwH8D2zcdn5Y5YHTz5H6T3H8&#xA;fjd1WtxnHIZ4cx9XmPx+Nk+0W/murVrtrpbmC4dpLXinD04jssbbmrLTc+OavLiljkYy5h2WPJGc&#xA;RKPIpj658crZrTMfHFUNDcq010BGIykoUt/vw+mh5dB48fowKuabCqi8uKoeSTAqEllxVL55euKW&#xA;vK2nHWPPWg6dQmMXa3lxToI7IfWPi9mkRE+nK5llF9L5WzUEEf12Uhj6hijDLTYKGk4mvvviqvir&#xA;sVdirsVdir5h/N3Qf0F+Zl6UULZ6/GuowULECcfu7gEn9pivOg7ZOJYli+TYuxVUVsVVlbFCujYq&#xA;rxviqIR8VRCPhVWR8UK6SYUq6SUxQyC5k/51fTz4zS/rzkOz/wDja1P9SH+5i5M/7qKWLLnXuMqc&#xA;1ZSrAMrCjA9CD44Qa3Ui2M6bM3l3WTpsjH9FXzF7J2O0cndKn7vu983ecfm8PiD+8h9XmO/8ebqM&#xA;P+DZfDP93P6fI9zK/WzSO3d62KqEU85knEgogkAgPinBSf8Ah+WBW2lxVSeXFUPJLiqEmlxSl13c&#xA;xxj43C18TTArO/yB0iO7v9Z8zsAyxU0qyboRTjNcnfxb0l/2JyqR3bANntGRSpKT9bkHp0Hpx/va&#xA;fa+J/hr/AJP8cVVcVdirsVdirsVebfnx5Ql1zyadSsk56t5fY39qP54gKXEW7KPijFa7nag64QVf&#xA;P1vcRXEEc8RrHKodD7EVyxrVMKtg0xVVVsVVUbFCujYqro+Kq6PhVXR8VVVfFCskmFLIrt/+dS00&#xA;+M836znIdn/8bWp/qQ+6LkT/ALqKULLnXuMqLLiqD1nT4dUsHtpKBvtRSfyuOh/rmVo9UcGQSHx8&#xA;w4+q0wzQMT8Peh/LmsTXED2d58OoWZ4TA9WA2D+/v/bmR2jpRCQnD+7nuP1NGg1BmDCf95DY/rTj&#xA;1s1rnqMTSLJOXfkruGjFfsrwUU/4IE/TiltpffFCk82KoSe6VNidz9lRuT8hgSg5ZJn6n018Bu33&#xA;9BiqRape3H1iLTNJh+s6xfOkNtF1+OVuEZduu7HYfwBIiTTIC31H5I8q2nlXyvYaHbHn9Vj/ANIn&#xA;3rNO55zSmtTV5GZvbplTNPMVUlDfW5D6gK+mlIq7qavVqf5X8MVVcVdirsVdirsVdir5U/MDydJ5&#xA;M84T6ciFdF1Rnu9Feh4rU8pbapLVaMmo3qQa5ZEsSEkyTF2KrlOKqitiqsrYoVkfFVZJMVV0fFVV&#xA;JMKqyuMUMjvnp5N0s/8AF836znIdn/8AG1qf6kPui5M/7qPvSNZc7Bx1QS4qvEuKpHr0E1vPHrNm&#xA;P39uKXCDYPF3r8v8+mbfs7NGcTgyfTL6fI/j8bur12KUCM0Pqjz8x+Pxsm9rqEV1bR3ELVjkFR7e&#xA;IPyzW5sMsczCXMOfiyxyREo8itheNZbko/JnkDSD+VvTQU/4EA5S2tyXCqCzEADqTsMKod55ZPsf&#xA;An87D4voU9Pp+7AqkSiVp1P2mO5PzOKpLe6pNcSSWunkckPGe7IrHEe6j+eT26D9rwMbTTP/AMhP&#xA;I0d3q8vmmeMtY6c0kOmvJu094w4T3JJ+16S1jU9KlunEZCRZh75kUuxVQQxfXZQAfV9KPke3HlJx&#xA;p9NcVV8VdirsVdirsVdirFvzH8i2fnPyzPpkhEV9H+/0u83BguU3RqgH4T0YUO30YQr5eUXkNxc2&#xA;GoQ/VtTsJDBfWx/ZkU0qPFW6qcsBYEKmFDsVXK2Kqitiqqr4oVVfFVZZMVVlkxVUWTFWT3z08k6S&#xA;fG4n/Wc5Hs//AI2tT/Uh90XJn/dR96QCQZ17jLxJ74ob9TFWy9RQ9D1GG1SK3dtH1I2xNNPuzWE9&#xA;kc/s/wCf9c3mX/C8HGP73Hz8x3/jz8nUY702bgP93Pl5Hu/H60yS5i9a4SFSZRIPV7Dl6akGu9Ph&#xA;oM0TuF21eTnm46dgPkMVUrm8ihiaWZ1jjQVZ2IAA9ycbVJpp7vUuhe10/ud0nmHt0Maf8Mf8nvFP&#xA;JMfLnlu98ya1a+XNJX6ujDnd3CABbW1U0eSnTkfsxju3sDgkaSBb6k0fSbDR9LtdL0+IQ2VnGsME&#xA;YJNFUU3J3JPUk7k5WzReKuxVTX1PrMlVAi4JxfuWq3IfQKYqqYq7FXYq7FXYq7FXYq8t/OT8rH1+&#xA;EeY9AiVfM1mnGWIfCt7Av+6n/wCLF/3W30dKUIKCHg1tcpcRllDIysUliccXR1NGR1PRlPXLAWBC&#xA;rhV2KthsVVFbFVRXxVUWTFCqsmKqqyYqyjUH/wCdF0c+NxP+s5yOg/42tT/wuH3Rcmf91H3seEoz&#xA;rnGXCX3xVv1cKuacKKsaAd8bVB30Ivrdon+BDuhIq3Lsfb/PpmTpNVLDkEx/aHH1WnjmgYn+wobR&#xA;L4yQSROF9WFuLuvRu3Kvc/DmR2lghGQnjPonv7u8NGgzSkDCf1w29/cVS91aO3YRKpmunFY7eOhc&#xA;j+Y12Vf8ptvpzW27ABBrbSSyrcagwllQ8ooF/uYj2IB+23+U30AYFtEQw6jqN/b6ZpcBu9TvG4W1&#xA;su1T3Zj+yiDdmOwGJNJAt9Ifl35CsfJ2im1Rhc6ndES6pqFKNNKBQAd1jjBoi9h7kk1M2VYq7FXY&#xA;qooF+uSnnVjHGDH4AM9G/wBl/DFVbFXYq7FXYq7FXYq7FXYq8k/NX8mW1a4l8yeVVSDXSOV9YEhI&#xA;b4AePRJvBuh/a8cIKKeHxTF3lhkjeC6t3MV1azKUlikXZkkQ7gjLAWBCrhV2KuBpiq8Niq9XxVeH&#xA;NNtz2GKutp5XhRpo/SlYAvHUNxPhyHXArL9Sf/nQNGP/AC83H6znI6D/AI2tT/wuH3Rcif8AdR97&#xA;GhL7517jLhLiq1rgA8R8Tnoo/WcUqU1zHCokmJZyaIqgkliOiKO9P86Yq55ZFlaWSYJbov2KAD3Z&#xA;mPh2pT6cVS2a8ubvi2mr6UKDj9aIpyT+WFCPi9mPw+HIZdinfoO0T9h7/wBbRmhR4wLkOneO79I8&#xA;1e0itreKsG5ko0krHk7n+ZmO5yqUDEkHmG2ExMAjkVeytdT1bU4dJ0i3a81O53jgXYKlaGWVt+Ea&#xA;1+Jj8hU0GRJpmA+ivy3/AC3sPJ9g0kjLd69dqP0hqFKCg3EMIO6xKfpY7n2rJZsywK7FXYq7FVFC&#xA;v1yUcKMI4yZPEFnov+x/jiqtirsVdirsVdirsVdirsVdirAvzG/KPRPNytf27fozzIigQ6pGtQ4X&#xA;YR3MewlQjb+ZdqHamEFXz9r2ja95Z1L9GeY7Q2VwzFba6WrWl1xp8VvMQAeo+BqMK7jJgsCEPkkO&#xA;xV2Ktg4q2GxVeHOKss1R/wDkHmiHxurj9ZzkNB/xtaj/AIXD7ouRP+6j72LiTOvcdb6zMaIdu7/0&#xA;wKsS4HqPCitVRVpSPh5GlNzTkflitId9QS2/0dC95dncxihbfu52VF/zFcVpYLSSdhJqDiUg1S2W&#xA;voqe1Qf7w+7fQBjSUW0tBuaAYUI3yz5X1nzHeWq2Y+paNe3Atv07OjNbrKQTwhAp6rsVIXcJy2LV&#xA;NMulLxI7fVEb+79n3e5x4xGKW/0yO3kf1H7/AHvpTyX5F0DyhpzWmlxEzTENe30tGuLh1FA0j0Gw&#xA;/ZUUVewGYbmMhxV2KuxV2KuxVTX1PrMlWBi4JxTuGq3I/SKYqqYq7FXYq7FXYq7FXYq7FXYq7FUF&#xA;rOi6TrenTabq1pFe2NwpWW3mUMpr336EdiNx2xV4z5s/5x8vbT1bvyZe+rCKsND1ByQPtNxt7ujM&#xA;P2VVZQfdxkhJBDyzUor7R736hrtlPpF9UhYbteCvxPEmKUVilWo2KMcmCxIdhQ7FXYqmGgX9vY6v&#xA;bXFzEs9qH43MLqHVom+F9jUdDUe+a7tXSzz6acIExyVcSDREhuN/sPkzxyAlZe16joPlOy0ITz2q&#xA;SaZpwku4YWYtHVxyNKk8uXYHbfPGNL2lr82pqEyM2bhgTyO23QbV1I3dnKEBHlsHg15dvdTzXLLx&#xA;WRmkKRilamvFVHRR2Ge5YMQx44wBJ4QBvzNd/m6omzaDuLmFIomuWaCp+GBTVmPZQEqzH2X8ctVZ&#xA;y1C761s7c9gQZ2Hud1j+ip+WKoiGG3tYisSiOMVZj4nuzMdyfc4oTPy9oHmPzNJw8vadLqCVIa8/&#xA;urNSOvK4eiGncJyb2wGSRF675Q/IHTLYpeebZ11i6FGGnRApYIfBlb47j/Z0X/IyBNswKenaho+n&#xA;32lSaVNEFspIxEI4/g4BacDHT7JQgFSOhGSx5DCQkOYYZMYnExPIoLy3qd3IJtJ1NgdY03is7gUE&#xA;8TV9K5UeEgX4h2cMMtz4wKlH6ZfZ3j4fc1afITcZfXH7e4/H706zHch2KuxV2KuxVQQRfXZSCfV9&#xA;KPkO3HlJxp9NcVV8VdirsVdirsVdirsVdirsVdirsVdiqH1DTtP1G0ez1C1hvLSWnq21xGssbUNR&#xA;yRwVO4xV5xrX/OPfki75SaPJdaDMQeKWknqW3M7gtbziRQP8mMphtWF6j+QPnu1kb9H6jp2qwKtV&#xA;9YTWMxPhxAuo6/7IfRkuJjwsZvPy8/Mmxi9W78r3ZQbVtZLa7P8AwEMrSf8ACYeJeFLTofmhQTJ5&#xA;d1lKbmumXpH3rEwx4gjhKfax5x1i98oWPliHStSm1GFlN9EtldFvqyki3qvplvjZSF8TGd85LR+z&#xA;0cXamTU/wEXH+tL6v0/6bycmWQnGIsTj8teermZjB5Z1i19TZpJdPujL8h6iCJB/siPbOs4nH4WQ&#xA;6V+T/wCYssgaHy9JC8mz3t/c2yE/PjJNKB7BKeAx4gtMw0r/AJx68zT0bWNatLBa/FDYxPdOR7TT&#xA;egqn/nkcHEnhDOtB/I78vtKdJri0fWbtNxPqb+uKg1BEACW4IPcR1wWlnsccccaxxqEjQBURRQAD&#xA;YAAdsCt4q7FUj8y6dd8oNa0xOeq6byKwjY3Nu1DNbE+LU5JXo4HauZGCY3hL6ZfYeh/X5ONqMZ2n&#xA;H6o/aOo/V5pppuoWmo2MF9aP6ltcIHjboaHsQehHQg9DlU4GJIPMN2OYnESHIojIM3Yq7FXYqpKW&#xA;+tyD0wF9NKS03Y1eq1/yf44qq4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxnT//ACZe&#xA;vf8AbG0f/qK1TFWTYq7FXYq7FXYq7FXYq7FWNf8AKPa/4aJrc3+xt9Qf9SXP/Jz/AF8y/wC9h/Th&#xA;9sf+O/d7nD/usn9CZ+Uv+Pff72S5iOY7FXYq7FVJQfrch9So9OP91X7PxP8AFT/K/hiqrirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirGdP8A/Jl69/2xtH/6itUxVk2KuxV2KuxV2KuxV2Ku&#xA;xVD6jp9pqNjPY3aepbXCFJF6Gh7gjcEdQexyUJmJBHMMMkBOJieRSvy1qN3WfRdTfnqum8QZjsbm&#xA;3aohuR7tTi/g4PamXZ4Dacfpl9h6j9Xk06eZ3hL6o/aOh/X5p5mO5LsVdiqghj+uygKfUEUZZq7F&#xA;S0nEU9t8VV8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVYzp//ky9e/7Y2j/9RWqYqybF&#xA;XYq7FXYq7FXYq7FXYq7FUl8y6bdyLDqulqDrGm1eBTsJ4mp61sx8JQPhPZwp7ZkYMgFxl9Mvs7j8&#xA;PucfUYyalH64/b3j4/emGlanaapp0GoWjFre4XknIcWB6MrKfssrAqw7HKsmMwkYnmG3HkE4iQ5F&#xA;FZBm7FVNfW+syV/uOCcDt9urcvfpxxVUxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoNdSD&#xA;avJpn1W4BjgS4+uGM/Vm5uyemstaGReNWXwIOKpLp/8A5MvXv+2No/8A1FapirJsVdirsVdirsVd&#xA;irsVdirsVdirGpv+dd1z6wBTRNamAuf5be+eirJ7JcfZb/Lof2jmWP3sK/jj9sf2fd7nDP7qd/wT&#xA;Pyl+37/eyXMRzHYqoIsf12Vg1ZDFGGSnRQ0nE196n7sVV8VdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVYzp//AJMvXv8AtjaP/wBRWqYqybFXYq7FXYq7FXYq7FXYq7FXYqoahYWmoWU9leRi&#xA;W2uEMc0Z7qwof9vJQmYkEcwxnASiYnkUp8t391FLPoOpSGTUtPVWiuG63NoxpFP/AKwpwk/yhXow&#xA;y/PAECcfpl9h7v1eTRgmQTjl9UftHf8Ar809zGclRU/6ZKPTofTj/e/zfE/w/wCx/jiqtirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirGdP8A/Jl69/2xtH/6itUxVk2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KpN5k0q6uY4NQ02g1jTWMtnyNFlVhSW3c/ySqKezcW7ZfgyAXGX0y5/oPwcfUYyalH64&#xA;8v0j4/tRukara6rp8N9ak+lKDVHHF0dSVeN17MjAqw8cryYzCXCWzFkE4iQV1D/WpCXBj4JxjruD&#xA;V6kj32+7INirirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVablxPEAtTYE0Ffnvirxny5+dH&#xA;l/U/zRubC1srz9M6nb6fpTabJGFe3nsLnUHvTM9SvCGOUNVa8ulOtFNPZ8UOxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxVjV0P8Pa4b9fh0XVpFTUB0W3u2okdx7JNskn+VxPdsy4/vYcP8ceXmO74cx8XDl+6n&#xA;xfwS5+R7/jyPwTXTdS02/urp7OX1WhP1edh9kPFJIhX5hg1cx5wMefvcmGQS5d9fJMMgzdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVefaR+WOlaT+besedgOT6paxR20Kxuwinc8blywUqvMR&#xA;oa1/abFNs8F1EWkXjJWMEtWOQA0/lJX4voxQtN5CIhJxl4k0A9KTl/wPHl+GKr/rEfrCKj8iKg8H&#xA;49K7vTj+OKrReRFHfjJRKAgxSA77bLxq30Yq5ruIBCVk/efZpFIf+Covw/Tiq76xH6jR0fkoqT6b&#xA;8foanE/QcVWfXIfS9XjLxrxp6UnKvX7PHlT3piq43MYdEo9XAKn03pv4tSi/TirQu4j6nwyfu/tf&#xA;upBX/V+H4voxVo3sIjVysvFqgARSk7eKhaj6cVX+unrejR+fWvB+PSv26cfxxVYLyExtIFl4qQCD&#xA;FIG38FK8j9AxVIvOuhSeYdHNhb6hc6dLcIyq8cTPE6yDiUuIytOJ9yCMydLnGKdkcX46OLq9OcsO&#xA;ESMfx1Y5+TWieYvL9vrWh6zAym3uVnt7ujGOYTKVYxyMByAMVfEct+uZPaWaGWUZw7qcXsvBkxRl&#xA;Cfffvt6Pmtdo7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:DB47C4A1378ADD118D1A80E330ACC243</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:E91467048E4CDE11B5B98A3128031B06</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:DA47C4A1378ADD118D1A80E330ACC243</stRef:instanceID>
            <stRef:documentID>uuid:D947C4A1378ADD118D1A80E330ACC243</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=1
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -832.5 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 832.5 li
928.5 832.5 li
928.5 0 li
cp
clp
[1 0 0 1 0 0 ] concat
gsave % PSGState
928.25 832.25 mo
.25 832.25 li
.25 .25 li
928.25 .25 li
928.25 832.25 li
cp
clp
gsave % PSGState
44.1572 204.631 mo
43.9946 194.723 44.3906 181.461 45.6685 171.635 cv
46.8232 162.757 47.9902 150.863 49.5376 142.045 cv
51.2148 132.488 53.9404 119.823 56.4082 110.438 cv
58.6284 101.995 62.0151 90.8428 64.9355 82.6152 cv
68.1685 73.5098 73.2632 61.6636 76.9009 52.7119 cv
80.6401 43.5107 86.8096 31.7295 91.8677 23.1816 cv
100.423 8.72461 113.022 -9.84717 122.993 -23.3672 cv
129.095 -31.6416 138.048 -42.1035 145.351 -49.3389 cv
151.108 -55.043 158.541 -62.9111 164.595 -68.2979 cv
173.093 -75.8584 184.827 -85.4873 193.815 -92.457 cv
199.786 -97.0869 208.158 -102.716 214.509 -106.809 cv
220.845 -110.893 229.564 -115.906 236.082 -119.695 cv
247.116 -126.111 262.542 -133.484 274.438 -138.111 cv
282.187 -141.125 292.555 -145.069 300.465 -147.626 cv
308.527 -150.232 319.429 -153.229 327.641 -155.312 cv
335.343 -157.266 345.75 -159.317 353.575 -160.694 cv
361.743 -162.132 368.429 -162.912 375.508 -163.737 cv
378.107 -164.041 388.09 -164.966 393.479 -165.235 cv
396.008 -165.361 399.379 -165.57 401.91 -165.635 cv
406.762 -165.758 413.232 -165.889 418.085 -165.86 cv
426.459 -165.81 435.354 -165.416 442.546 -164.86 cv
448.791 -164.378 455.868 -163.832 469.372 -161.901 cv
477.61 -160.723 487.167 -158.887 491.582 -157.939 cv
499.127 -156.321 509.103 -153.779 516.556 -151.779 cv
522.137 -150.282 529.491 -147.958 534.939 -146.033 cv
542.61 -143.322 552.761 -139.478 560.265 -136.332 cv
571.988 -131.417 587.011 -123.49 598.241 -117.533 cv
598.241 -117.533 li
688.845 -66.0581 748.552 35.6802 748.318 160.449 cv
747.949 357.29 598.527 536.923 414.561 561.666 cv
598.527 536.923 747.949 357.29 748.318 160.448 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
607.041 -112.394 618.8 -105.502 626.977 -99.4209 cv
633.126 -94.8467 641.503 -88.9736 647.438 -84.125 cv
654.908 -78.0234 664.898 -69.8574 671.627 -62.9468 cv
677.344 -57.0742 685.219 -49.4785 690.679 -43.3662 cv
697.028 -36.2578 705.202 -26.5059 710.963 -18.9116 cv
716.05 -12.2046 722.544 -3.03223 727.083 4.05811 cv
732.178 12.0171 738.712 22.8164 743.051 31.2114 cv
748.934 42.5952 757.825 59.7983 766.887 86.4468 cv
772.545 103.087 777.781 126.021 781.155 143.27 cv
783.028 152.849 784.336 165.832 785.135 175.56 cv
785.88 184.627 786.001 196.771 786.3 205.864 cv
786.663 216.927 785.753 231.724 784.421 242.712 cv
783.346 251.584 781.889 263.423 780.253 272.208 cv
778.479 281.741 775.622 294.367 773.063 303.719 cv
770.761 312.128 767.264 323.23 764.263 331.416 cv
760.936 340.491 755.731 352.294 751.989 361.206 cv
748.682 369.082 743.241 379.129 739.017 386.554 cv
734.153 395.103 726.983 406.095 721.721 414.404 cv
716.088 423.299 707.336 434.343 700.563 442.404 cv
690.125 454.829 675.242 470.667 663.034 481.357 cv
654.4 488.919 642.451 498.503 633.291 505.419 cv
627.303 509.94 618.876 515.36 612.583 519.448 cv
605.955 523.753 596.746 528.903 589.802 532.676 cv
584.217 535.71 576.65 539.546 570.842 542.125 cv
562.543 545.811 551.397 550.565 542.878 553.707 cv
534.884 556.655 524.045 560.102 515.842 562.406 cv
499.593 566.973 485.64 569.712 476.796 571.206 cv
466.959 572.868 461.394 573.501 454.949 574.233 cv
451.156 574.664 441.938 575.482 436.978 575.73 cv
429.945 576.082 425.3 576.314 420.417 576.332 cv
418.003 576.341 414.785 576.375 412.372 576.355 cv
409.959 576.337 406.742 576.25 404.33 576.205 cv
401.899 576.159 398.66 576.02 396.233 575.877 cv
391.2 575.583 384.496 575.07 379.472 574.637 cv
376.72 574.398 373.064 573.949 370.32 573.638 cv
368.359 573.414 361.131 572.542 350.451 570.674 cv
332.646 567.559 317.275 563.303 310.865 561.398 cv
306.235 560.022 300.065 558.158 295.519 556.528 cv
287.859 553.785 277.691 549.986 270.193 546.827 cv
258.478 541.893 243.299 534.257 232.216 528.028 cv
222.029 522.304 208.711 514.105 199.401 507.044 cv
191.551 501.09 180.808 493.451 173.56 486.778 cv
167.613 481.304 159.459 474.236 153.759 468.505 cv
146.999 461.707 138.296 452.326 132.057 445.048 cv
121.149 432.323 108.474 413.824 99.2139 399.854 cv
93.9238 391.874 88.0068 380.519 83.6343 372.001 cv
79.3145 363.586 73.8594 352.164 70.6597 343.262 cv
64.7593 326.846 57.3564 304.727 53.3516 287.748 cv
49.6729 272.149 47.084 250.863 45.3218 234.935 cv
44.3218 225.892 44.3066 213.728 44.1572 204.631 cv
cp
clp
44.1572 204.631 mo
44.4541 222.678 46.1807 246.763 48.8721 264.611 cv
51.2334 280.266 56.0776 300.92 60.9507 315.983 cv
66.5308 333.234 75.4888 355.804 83.6343 372.001 cv
91.7109 388.061 104.728 408.293 114.845 423.151 cv
124.756 437.706 132.653 446.092 153.759 468.505 cv
160.851 476.035 171.151 485.304 179.333 491.632 cv
202.387 509.463 207.865 513.7 232.216 528.028 cv
239.307 532.2 254.925 540.705 279.869 550.788 cv
309.477 562.758 347.595 571.891 379.346 574.624 cv
395.676 576.03 411.284 577.083 436.978 575.73 cv
456.009 574.729 477.034 571.542 489.429 568.828 cv
517.85 562.605 604.338 543.669 682.419 462.651 cv
710.554 433.457 728.497 405.003 736.688 390.641 cv
741.619 381.995 748.147 370.387 751.989 361.206 cv
759.08 344.262 767.575 321.248 773.063 303.719 cv
778.625 285.953 781.761 261.138 784.421 242.712 cv
785.717 233.739 785.739 221.6 786.229 212.547 cv
786.826 201.462 785.906 186.634 785.135 175.56 cv
784.512 166.615 782.872 154.756 781.585 145.883 cv
778.947 127.705 773.476 103.592 766.887 86.4468 cv
763.484 77.5938 759.622 65.4966 755.496 56.957 cv
747.659 40.7368 737.373 18.8433 727.083 4.05811 cv
721.548 -3.89404 714.558 -14.8071 708.38 -22.271 cv
697.894 -34.9409 683.588 -51.6592 671.627 -62.9468 cv
641.536 -91.3442 617.969 -106.013 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
747.949 357.29 598.527 536.923 414.561 561.666 cv
598.527 536.923 747.949 357.29 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
575.151 -129.78 569.666 -132.69 550.589 -140.292 cv
532.826 -147.372 520.69 -150.627 503.894 -155.133 cv
499.907 -156.203 463.634 -165.588 418.091 -165.86 cv
378.634 -166.096 347.125 -160.254 327.641 -155.312 cv
301.817 -148.762 290.925 -144.525 274.438 -138.111 cv
262.542 -133.484 247.116 -126.111 236.082 -119.695 cv
223.041 -112.113 205.736 -101.701 193.815 -92.457 cv
171.07 -74.8198 171.07 -74.8198 145.351 -49.3389 cv
138.048 -42.1035 129.095 -31.6416 122.993 -23.3672 cv
113.022 -9.84717 100.423 8.72461 91.8677 23.1816 cv
88.1064 29.5381 68.7192 63.6172 56.4082 110.438 cv
44.0474 157.449 44.0342 197.15 44.1572 204.631 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.521569 .545098 .580392 rgb
f
748.318 160.449 mo
747.949 357.29 598.527 536.923 414.561 561.666 cv
117.751 584.427 -45.9316 241.804 111.439 63.8516 cv
268.725 -114.005 598.657 36.1294 615.764 293.344 cv
620.146 359.239 609.313 517.295 414.561 561.666 cv
598.527 536.923 747.949 357.29 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
73.2695 61.666 68.1729 73.5112 64.9355 82.6152 cv
56.4082 110.438 li
54.3096 119.912 51.2197 132.489 49.5376 142.045 cv
45.6685 171.635 li
45.1792 181.532 44.2119 194.722 44.1572 204.631 cv
45.3218 234.935 li
47.2256 250.847 50.3057 272.014 53.3516 287.748 cv
60.9507 315.983 li
64.1538 324.984 68.1567 337.089 71.7466 345.942 cv
83.6343 372.001 li
88.2686 380.379 94.2227 391.684 99.2139 399.854 cv
114.845 423.151 li
120.895 430.848 128.793 441.251 135.174 448.674 cv
153.759 468.505 li
161.361 475.52 171.416 484.976 179.333 491.632 cv
199.401 507.044 li
209.126 513.522 222.167 522.066 232.216 528.028 cv
251.19 538.093 li
259.739 542.022 271.161 547.224 279.869 550.788 cv
295.519 556.528 li
301.026 558.276 308.35 560.672 313.901 562.275 cv
326.564 565.629 li
330.557 566.539 335.868 567.808 339.877 568.645 cv
350.451 570.674 li
353.641 571.191 357.888 571.924 361.085 572.396 cv
370.32 573.638 li
373.065 573.938 376.723 574.37 379.472 574.637 cv
387.911 575.355 li
390.419 575.513 393.762 575.752 396.271 575.879 cv
404.33 576.205 li
406.742 576.25 409.959 576.328 412.372 576.355 cv
420.417 576.332 li
422.856 576.271 426.109 576.207 428.548 576.13 cv
436.978 575.73 li
439.577 575.547 443.045 575.335 445.642 575.119 cv
454.949 574.233 li
457.881 573.878 461.796 573.442 464.723 573.049 cv
476.796 571.206 li
504.329 566.023 521.703 561.771 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
748.318 160.449 mo
747.987 337.232 627.432 500.136 469.601 549.423 cv
469.601 549.423 li
428.022 564.06 414.737 561.708 414.615 561.681 cv
414.588 561.721 li
277.076 617.195 -43.6494 376.224 71.6714 119.891 cv
174.276 -108.176 507.492 -50.6885 603.822 211.698 cv
655.905 353.563 598.203 498.753 469.601 549.423 cv
627.432 500.136 747.987 337.232 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
73.2695 61.666 68.1729 73.5112 64.9355 82.6152 cv
56.4082 110.438 li
54.3096 119.912 51.2197 132.489 49.5376 142.045 cv
45.6685 171.635 li
45.1792 181.532 44.2119 194.722 44.1572 204.631 cv
45.3218 234.935 li
47.2256 250.847 50.3057 272.014 53.3516 287.748 cv
60.9507 315.983 li
64.1538 324.984 68.1567 337.089 71.7466 345.942 cv
83.6343 372.001 li
88.2686 380.379 94.2227 391.684 99.2139 399.854 cv
114.845 423.151 li
120.895 430.848 128.793 441.251 135.174 448.674 cv
153.759 468.505 li
161.361 475.52 171.416 484.976 179.333 491.632 cv
199.401 507.044 li
209.126 513.522 222.167 522.066 232.216 528.028 cv
251.19 538.093 li
259.739 542.022 271.161 547.224 279.869 550.788 cv
295.519 556.528 li
301.026 558.276 308.35 560.672 313.901 562.275 cv
326.564 565.629 li
330.557 566.539 335.868 567.808 339.877 568.645 cv
350.451 570.674 li
353.641 571.191 357.888 571.924 361.085 572.396 cv
370.32 573.638 li
373.065 573.938 376.723 574.37 379.472 574.637 cv
387.911 575.355 li
390.419 575.513 393.762 575.752 396.271 575.879 cv
404.33 576.205 li
406.742 576.25 409.959 576.328 412.372 576.355 cv
420.417 576.332 li
422.856 576.271 426.109 576.207 428.548 576.13 cv
436.978 575.73 li
439.577 575.547 443.045 575.335 445.642 575.119 cv
454.949 574.233 li
457.881 573.878 461.796 573.442 464.723 573.049 cv
476.796 571.206 li
504.329 566.023 521.703 561.771 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
.517647 .537255 .572549 rgb
f
748.318 160.449 mo
748.013 323.769 645.097 475.242 504.977 536.229 cv
500.163 538.765 493.745 542.146 488.932 544.683 cv
242.465 648.428 -31.4092 368.777 70.2944 117.218 cv
151.7 -84.1353 487.939 -76.1782 600.974 186.253 cv
660.646 324.796 620.273 471.981 504.977 536.229 cv
645.097 475.242 748.013 323.769 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
73.2695 61.666 68.1729 73.5112 64.9355 82.6152 cv
56.4082 110.438 li
54.3096 119.912 51.2197 132.489 49.5376 142.045 cv
45.6685 171.635 li
45.1792 181.532 44.2119 194.722 44.1572 204.631 cv
45.3218 234.935 li
47.2256 250.847 50.3057 272.014 53.3516 287.748 cv
60.9507 315.983 li
64.1538 324.984 68.1567 337.089 71.7466 345.942 cv
83.6343 372.001 li
88.2686 380.379 94.2227 391.684 99.2139 399.854 cv
114.845 423.151 li
120.895 430.848 128.793 441.251 135.174 448.674 cv
153.759 468.505 li
161.361 475.52 171.416 484.976 179.333 491.632 cv
199.401 507.044 li
209.126 513.522 222.167 522.066 232.216 528.028 cv
251.19 538.093 li
259.739 542.022 271.161 547.224 279.869 550.788 cv
295.519 556.528 li
301.026 558.276 308.35 560.672 313.901 562.275 cv
326.564 565.629 li
330.557 566.539 335.868 567.808 339.877 568.645 cv
350.451 570.674 li
353.641 571.191 357.888 571.924 361.085 572.396 cv
370.32 573.638 li
373.065 573.938 376.723 574.37 379.472 574.637 cv
387.911 575.355 li
390.419 575.513 393.762 575.752 396.271 575.879 cv
404.33 576.205 li
406.742 576.25 409.959 576.328 412.372 576.355 cv
420.417 576.332 li
422.856 576.271 426.109 576.207 428.548 576.13 cv
436.978 575.73 li
439.577 575.547 443.045 575.335 445.642 575.119 cv
454.949 574.233 li
457.881 573.878 461.796 573.442 464.723 573.049 cv
476.796 571.206 li
504.329 566.023 521.703 561.771 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
.509804 .529412 .564706 rgb
f
102.493 405.068 mo
-51.8018 142.704 143.476 -87.7983 378.486 -19.9941 cv
632.533 53.3027 725.147 383.568 530.943 523.675 cv
657.63 456.152 748.031 313.502 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
73.2695 61.666 68.1729 73.5112 64.9355 82.6152 cv
56.4082 110.438 li
54.3096 119.912 51.2197 132.489 49.5376 142.045 cv
45.6685 171.635 li
45.1792 181.532 44.2119 194.722 44.1572 204.631 cv
45.3218 234.935 li
47.2256 250.847 50.3057 272.014 53.3516 287.748 cv
60.9507 315.983 li
64.1538 324.984 68.1567 337.089 71.7466 345.942 cv
83.6343 372.001 li
88.2686 380.379 94.2227 391.684 99.2139 399.854 cv
100.712 402.214 102.709 405.359 104.207 407.719 cv
103.693 406.924 102.99 405.874 102.493 405.068 cv
.501961 .521569 .556863 rgb
f
748.318 160.449 mo
748.031 313.502 657.63 456.152 530.943 523.675 cv
526.183 526.876 519.836 531.144 515.077 534.345 cv
473.78 557.902 326.016 623.105 158.442 473.07 cv
178.512 490.953 li
179.333 491.632 li
199.401 507.044 li
209.126 513.522 222.167 522.066 232.216 528.028 cv
251.19 538.093 li
259.739 542.022 271.161 547.224 279.869 550.788 cv
295.519 556.528 li
301.026 558.276 308.35 560.672 313.901 562.275 cv
326.564 565.629 li
330.557 566.539 335.868 567.808 339.877 568.645 cv
350.451 570.674 li
353.641 571.191 357.888 571.924 361.085 572.396 cv
370.32 573.638 li
373.065 573.938 376.723 574.37 379.472 574.637 cv
387.911 575.355 li
390.419 575.513 393.762 575.752 396.271 575.879 cv
404.33 576.205 li
406.742 576.25 409.959 576.328 412.372 576.355 cv
420.417 576.332 li
422.856 576.271 426.109 576.207 428.548 576.13 cv
436.978 575.73 li
439.577 575.547 443.045 575.335 445.642 575.119 cv
454.949 574.233 li
457.881 573.878 461.796 573.442 464.723 573.049 cv
476.796 571.206 li
504.329 566.023 521.703 561.771 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
72.0298 346.631 mo
-29.9482 68.2173 202.361 -108.973 425.319 -9.94043 cv
623.151 77.9316 724.276 356.817 552.874 511.017 cv
667.936 439.364 748.049 304.516 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
73.2695 61.666 68.1729 73.5112 64.9355 82.6152 cv
56.4082 110.438 li
54.3096 119.912 51.2197 132.489 49.5376 142.045 cv
45.6685 171.635 li
45.1792 181.532 44.2119 194.722 44.1572 204.631 cv
45.3218 234.935 li
47.2256 250.847 50.3057 272.014 53.3516 287.748 cv
60.9507 315.983 li
64.1538 324.984 68.1567 337.089 71.7466 345.942 cv
72.1938 347.017 72.7896 348.449 73.2368 349.523 cv
72.8745 348.655 72.3726 347.506 72.0298 346.631 cv
.494118 .513726 .54902 rgb
f
748.318 160.449 mo
748.049 304.516 667.936 439.364 552.874 511.017 cv
552.874 511.017 li
437.406 606.884 294.342 571.614 206.916 512.282 cv
227.937 525.559 li
232.216 528.028 li
251.19 538.093 li
259.739 542.022 271.161 547.224 279.869 550.788 cv
295.519 556.528 li
301.026 558.276 308.35 560.672 313.901 562.275 cv
326.564 565.629 li
330.557 566.539 335.868 567.808 339.877 568.645 cv
350.451 570.674 li
353.641 571.191 357.888 571.924 361.085 572.396 cv
370.32 573.638 li
373.065 573.938 376.723 574.37 379.472 574.637 cv
387.911 575.355 li
390.419 575.513 393.762 575.752 396.271 575.879 cv
404.33 576.205 li
406.742 576.25 409.959 576.328 412.372 576.355 cv
420.417 576.332 li
422.856 576.271 426.109 576.207 428.548 576.13 cv
436.978 575.73 li
439.577 575.547 443.045 575.335 445.642 575.119 cv
454.949 574.233 li
457.881 573.878 461.796 573.442 464.723 573.049 cv
476.796 571.206 li
504.329 566.023 521.703 561.771 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
60.0303 312.991 mo
-16.0176 18.958 249.911 -129.51 471.88 7.59863 cv
654.041 120.118 704.789 367.605 572.437 497.99 cv
676.917 423.769 748.064 296.201 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
73.2695 61.666 68.1729 73.5112 64.9355 82.6152 cv
56.4082 110.438 li
54.3096 119.912 51.2197 132.489 49.5376 142.045 cv
45.6685 171.635 li
45.1792 181.532 44.2119 194.722 44.1572 204.631 cv
45.3218 234.935 li
47.2256 250.847 50.3057 272.014 53.3516 287.748 cv
55.459 295.661 58.2686 306.212 60.3755 314.125 cv
60.272 313.785 60.127 313.334 60.0303 312.991 cv
.490196 .509804 .541176 rgb
f
748.318 160.449 mo
748.064 296.201 676.917 423.769 572.437 497.99 cv
570.682 499.812 568.341 502.241 566.585 504.063 cv
479.947 582.145 358.917 593.272 242.829 533.83 cv
261.848 543.15 li
279.869 550.788 li
295.519 556.528 li
301.026 558.276 308.35 560.672 313.901 562.275 cv
326.564 565.629 li
330.557 566.539 335.868 567.808 339.877 568.645 cv
350.451 570.674 li
353.641 571.191 357.888 571.924 361.085 572.396 cv
370.32 573.638 li
373.065 573.938 376.723 574.37 379.472 574.637 cv
387.911 575.355 li
390.419 575.513 393.762 575.752 396.271 575.879 cv
404.33 576.205 li
406.742 576.25 409.959 576.328 412.372 576.355 cv
420.417 576.332 li
422.856 576.271 426.109 576.207 428.548 576.13 cv
436.978 575.73 li
439.577 575.547 443.045 575.335 445.642 575.119 cv
454.949 574.233 li
457.881 573.878 461.796 573.442 464.723 573.049 cv
476.796 571.206 li
504.329 566.023 521.703 561.771 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
51.1558 277.352 mo
-.90625 -3.69189 279.593 -133.435 485.472 8.30664 cv
676.193 139.613 693.742 364.706 590.206 484.599 cv
684.901 409 748.079 288.357 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
73.2695 61.666 68.1729 73.5112 64.9355 82.6152 cv
56.4082 110.438 li
54.3096 119.912 51.2197 132.489 49.5376 142.045 cv
45.6685 171.635 li
45.1792 181.532 44.2119 194.722 44.1572 204.631 cv
45.3218 234.935 li
47.1162 249.933 49.874 269.903 52.6836 284.744 cv
51.1558 277.352 li
.482353 .501961 .533333 rgb
f
748.318 160.449 mo
748.079 288.357 684.901 409 590.206 484.599 cv
590.206 484.599 li
474.472 616.907 317.458 566.294 272.091 547.63 cv
279.057 550.459 288.46 553.939 295.519 556.528 cv
301.026 558.276 308.35 560.672 313.901 562.275 cv
326.564 565.629 li
330.557 566.539 335.868 567.808 339.877 568.645 cv
350.451 570.674 li
353.641 571.191 357.888 571.924 361.085 572.396 cv
370.32 573.638 li
373.065 573.938 376.723 574.37 379.472 574.637 cv
387.911 575.355 li
390.419 575.513 393.762 575.752 396.271 575.879 cv
404.33 576.205 li
406.742 576.25 409.959 576.328 412.372 576.355 cv
420.417 576.332 li
422.856 576.271 426.109 576.207 428.548 576.13 cv
436.978 575.73 li
439.577 575.547 443.045 575.335 445.642 575.119 cv
454.949 574.233 li
457.881 573.878 461.796 573.442 464.723 573.049 cv
476.796 571.206 li
504.329 566.023 521.703 561.771 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
47.7549 257.178 mo
13.7505 -40.2891 311.634 -142.765 520.572 25.1938 cv
644.117 124.508 712.063 323.175 606.403 470.958 cv
692.038 394.941 748.093 280.918 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
73.2695 61.666 68.1729 73.5112 64.9355 82.6152 cv
56.4082 110.438 li
54.3096 119.912 51.2197 132.489 49.5376 142.045 cv
45.6685 171.635 li
45.1792 181.532 44.2119 194.722 44.1572 204.631 cv
45.3218 234.935 li
47.8057 257.539 li
47.7549 257.178 li
.47451 .494118 .52549 rgb
f
748.318 160.449 mo
748.093 280.918 692.038 394.941 606.403 470.958 cv
603.047 475.45 598.57 481.439 595.214 485.932 cv
493.844 597.483 366.506 578.906 299.624 557.903 cv
307.663 560.365 318.436 563.477 326.564 565.629 cv
330.557 566.539 335.868 567.808 339.877 568.645 cv
350.451 570.674 li
353.641 571.191 357.888 571.924 361.085 572.396 cv
370.32 573.638 li
373.065 573.938 376.723 574.37 379.472 574.637 cv
387.911 575.355 li
390.419 575.513 393.762 575.752 396.271 575.879 cv
404.33 576.205 li
406.742 576.25 409.959 576.328 412.372 576.355 cv
420.417 576.332 li
422.856 576.271 426.109 576.207 428.548 576.13 cv
436.978 575.73 li
439.577 575.547 443.045 575.335 445.642 575.119 cv
454.949 574.233 li
457.881 573.878 461.796 573.442 464.723 573.049 cv
476.796 571.206 li
504.329 566.023 521.703 561.771 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
44.3154 201.682 mo
56.2588 -87.5435 388.774 -136.533 568.212 60.5947 cv
659.063 160.402 706.619 328.49 621.729 456.639 cv
698.665 381.015 748.106 273.573 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
73.2695 61.666 68.1729 73.5112 64.9355 82.6152 cv
56.4082 110.438 li
54.3096 119.912 51.2197 132.489 49.5376 142.045 cv
45.6685 171.635 li
45.1792 181.532 44.2119 194.722 44.1572 204.631 cv
44.4238 212.603 44.7793 223.23 45.0459 231.202 cv
44.8198 222.726 44.519 211.425 44.2935 202.949 cv
44.3174 202.569 44.2998 202.062 44.3154 201.682 cv
.466667 .486275 .517647 rgb
f
748.318 160.449 mo
748.106 273.573 698.665 381.015 621.729 456.639 cv
620.6 458.524 619.093 461.039 617.963 462.925 cv
524.136 596.083 382.16 578.919 325.474 565.358 cv
337.821 568.212 li
339.877 568.645 li
350.451 570.674 li
353.641 571.191 357.888 571.924 361.085 572.396 cv
370.32 573.638 li
373.065 573.938 376.723 574.37 379.472 574.637 cv
387.911 575.355 li
390.419 575.513 393.762 575.752 396.271 575.879 cv
404.33 576.205 li
406.742 576.25 409.959 576.328 412.372 576.355 cv
420.417 576.332 li
422.856 576.271 426.109 576.207 428.548 576.13 cv
436.978 575.73 li
439.577 575.547 443.045 575.335 445.642 575.119 cv
454.949 574.233 li
457.881 573.878 461.796 573.442 464.723 573.049 cv
476.796 571.206 li
504.329 566.023 521.703 561.771 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
47.0322 162.421 mo
82.2285 -101.035 420.575 -150.827 595.563 81.6982 cv
664.915 173.853 704.358 320.923 636.142 441.752 cv
704.785 367.254 748.12 266.342 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
73.2695 61.666 68.1729 73.5112 64.9355 82.6152 cv
56.4082 110.438 li
54.3096 119.912 51.2197 132.489 49.5376 142.045 cv
45.6685 171.635 li
45.1938 181.229 44.2261 194.013 44.1606 203.619 cv
45.4678 176.227 li
45.937 172.085 46.4805 166.552 47.0322 162.421 cv
.458824 .478431 .509804 rgb
f
748.318 160.449 mo
748.12 266.341 704.785 367.254 636.142 441.752 cv
632.982 447.403 628.77 454.939 625.609 460.592 cv
603.988 493.354 520.303 598.124 351.22 570.809 cv
356.938 571.729 364.579 572.866 370.32 573.638 cv
373.065 573.938 376.723 574.37 379.472 574.637 cv
387.911 575.355 li
390.419 575.513 393.762 575.752 396.271 575.879 cv
404.33 576.205 li
406.742 576.25 409.959 576.328 412.372 576.355 cv
420.417 576.332 li
422.856 576.271 426.109 576.207 428.548 576.13 cv
436.978 575.73 li
439.577 575.547 443.045 575.335 445.642 575.119 cv
454.949 574.233 li
457.881 573.878 461.796 573.442 464.723 573.049 cv
476.796 571.206 li
504.329 566.023 521.703 561.771 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
46.2598 165.974 mo
93.3369 -134.079 438.744 -143.873 605.911 83.3813 cv
626.654 111.581 726.263 260.629 649.899 426.063 cv
710.525 353.393 748.134 259.081 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
73.2695 61.666 68.1729 73.5112 64.9355 82.6152 cv
56.4082 110.438 li
54.3096 119.912 51.2197 132.489 49.5376 142.045 cv
45.6685 171.635 li
45.0654 179.182 li
46.2598 165.974 li
.454902 .470588 .501961 rgb
f
748.318 160.449 mo
748.134 259.081 710.525 353.393 649.899 426.063 cv
649.898 426.063 li
613.297 506.343 522.592 587.488 377.789 574.47 cv
387.911 575.355 li
390.419 575.513 393.762 575.752 396.271 575.879 cv
404.33 576.205 li
406.742 576.25 409.959 576.328 412.372 576.355 cv
420.417 576.332 li
422.856 576.271 426.109 576.207 428.548 576.13 cv
436.978 575.73 li
439.577 575.547 443.045 575.335 445.642 575.119 cv
454.949 574.233 li
457.881 573.878 461.796 573.442 464.723 573.049 cv
476.796 571.206 li
504.329 566.023 521.703 561.771 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
52.5977 127.442 mo
120.518 -139.039 472.959 -149.561 632.771 110.121 cv
677.813 183.313 709.408 300.408 663 409.546 cv
715.896 339.382 748.147 251.767 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
73.2695 61.666 68.1729 73.5112 64.9355 82.6152 cv
56.4082 110.438 li
54.3096 119.912 51.2197 132.489 49.5376 142.045 cv
48.9429 145.91 48.1504 151.062 47.5557 154.926 cv
48.9556 147.173 50.8228 136.836 52.2227 129.083 cv
52.3364 128.591 52.4839 127.934 52.5977 127.442 cv
.447059 .462745 .494118 rgb
f
748.318 160.449 mo
748.147 251.767 715.896 339.382 663 409.546 cv
662.628 410.633 662.133 412.081 661.761 413.168 cv
616.946 519.166 519.782 580.084 401.847 576.123 cv
409.895 576.328 li
412.372 576.355 li
420.417 576.332 li
422.856 576.271 426.109 576.207 428.548 576.13 cv
436.978 575.73 li
439.577 575.547 443.045 575.335 445.642 575.119 cv
454.949 574.233 li
457.881 573.878 461.796 573.442 464.723 573.049 cv
476.796 571.206 li
504.329 566.023 521.703 561.771 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
56.1655 111.813 mo
147.645 -178.352 524.143 -127.355 650.487 125.942 cv
696.596 218.381 705.062 307.847 675.649 391.854 cv
720.994 324.918 748.161 244.242 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
73.2695 61.666 68.1729 73.5112 64.9355 82.6152 cv
56.4082 110.438 li
52.0137 129.041 li
56.1655 111.813 li
.439216 .458824 .486275 rgb
f
748.318 160.449 mo
748.161 244.242 720.994 324.918 675.649 391.854 cv
673.548 398.353 670.746 407.018 668.646 413.517 cv
607.858 542.466 504.052 573.137 427.673 576.16 cv
436.978 575.73 li
439.577 575.547 443.045 575.335 445.642 575.119 cv
454.949 574.233 li
457.881 573.878 461.796 573.442 464.723 573.049 cv
476.796 571.206 li
504.329 566.023 521.703 561.771 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
60.1689 97.2856 mo
165.518 -191.17 534.417 -130.252 661.863 128.657 cv
721.157 249.115 696.138 342.115 687.915 372.676 cv
725.851 309.765 748.176 236.387 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
73.2695 61.666 68.1729 73.5112 64.9355 82.6152 cv
62.7671 89.5249 59.8755 98.7373 57.707 105.646 cv
58.4453 103.138 59.4053 99.7861 60.1689 97.2856 cv
.431373 .45098 .478431 rgb
f
748.318 160.449 mo
748.176 236.387 725.85 309.765 687.915 372.676 cv
686.877 377.231 685.492 383.305 684.454 387.86 cv
632.2 539.222 506.363 568.639 454.686 574.262 cv
464.324 573.103 li
464.723 573.049 li
476.796 571.206 li
504.329 566.023 521.703 561.771 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
74.2188 59.2432 mo
210.31 -211.496 590.715 -106.707 684.286 159.681 cv
694.283 188.142 720.84 263.746 699.68 351.884 cv
730.425 293.846 748.191 228.165 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
66.2417 78.9492 li
74.2188 59.2432 li
.427451 .443137 .470588 rgb
f
748.318 160.449 mo
748.191 228.165 730.425 293.846 699.68 351.884 cv
699.68 351.884 li
690.388 426.14 623.403 545.819 476.947 571.181 cv
489.586 568.796 li
513.147 563.501 527.009 559.758 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
91.0459 25.4395 mo
238.562 -223.062 636.436 -108.484 708.039 203.117 cv
714.519 231.313 720.321 275.952 711.175 328.494 cv
734.812 276.456 748.208 219.219 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
101.466 7.58984 94.4033 18.6235 89.6309 27.2031 cv
76.9009 52.7119 li
76.8076 52.9185 li
87.5254 31.606 li
88.5815 29.7559 89.9585 27.271 91.0459 25.4395 cv
.419608 .435294 .462745 rgb
f
748.318 160.449 mo
748.208 219.219 734.812 276.456 711.175 328.494 cv
710.462 335.671 709.511 345.241 708.798 352.418 cv
694.101 436.898 621.771 540.092 497.698 567.028 cv
510.96 563.742 li
522.094 560.557 535.949 556.592 551.878 550.28 cv
570.842 542.125 li
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
106.942 -.677734 mo
271.079 -231.966 673.046 -88.4521 721.377 218.694 cv
725.534 245.116 726.634 262.333 722.678 300.578 cv
739.112 256.278 748.228 208.884 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
106.613 -.770508 li
92.6021 21.8872 li
104.629 2.66162 li
105.323 1.65967 106.237 .315918 106.942 -.677734 cv
.411765 .427451 .454902 rgb
f
748.318 160.449 mo
748.228 208.884 739.112 256.278 722.678 300.578 cv
722.643 307.891 722.595 317.64 722.56 324.952 cv
718.466 383.051 674.81 505.929 538.884 555.139 cv
548.58 551.513 561.332 546.215 570.842 542.125 cv
595.229 529.971 597.22 528.979 612.583 519.448 cv
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
122.906 -23.1982 mo
321.951 -260.788 719.491 -49.7876 734.271 224.737 cv
734.445 227.994 734.95 240.527 734.084 265.059 cv
743.279 231.304 748.252 196.159 748.318 160.449 cv
748.552 35.6802 688.845 -66.0581 598.241 -117.533 cv
598.241 -117.533 li
574.428 -130.164 571.369 -131.787 550.589 -140.292 cv
534.939 -146.033 li
529.432 -147.781 522.107 -150.177 516.556 -151.779 cv
503.894 -155.133 li
499.901 -156.043 494.589 -157.313 490.58 -158.148 cv
480.006 -160.178 li
476.816 -160.696 472.569 -161.429 469.372 -161.901 cv
460.137 -163.142 li
457.392 -163.442 453.734 -163.875 450.985 -164.141 cv
442.546 -164.86 li
440.038 -165.018 436.695 -165.256 434.186 -165.384 cv
426.127 -165.709 li
423.715 -165.755 420.498 -165.833 418.085 -165.86 cv
410.04 -165.836 li
407.601 -165.776 404.343 -165.794 401.909 -165.634 cv
393.479 -165.235 li
390.88 -165.052 387.412 -164.837 384.815 -164.623 cv
375.508 -163.737 li
372.576 -163.383 368.661 -162.947 365.734 -162.553 cv
353.575 -160.694 li
318.312 -154.029 301.365 -148.578 274.438 -138.111 cv
255.235 -129.566 li
230.379 -116.757 228.892 -115.99 214.509 -106.809 cv
193.815 -92.457 li
184.93 -85.356 173.108 -75.8413 164.595 -68.2979 cv
145.351 -49.3389 li
138.571 -41.6108 129.411 -31.3989 122.993 -23.3672 cv
121.361 -21.2329 119.186 -18.3867 117.554 -16.2524 cv
119.16 -18.3359 121.258 -21.1475 122.906 -23.1982 cv
.403922 .419608 .447059 rgb
f
748.318 160.449 mo
748.252 196.159 743.279 231.304 734.084 265.059 cv
734.084 265.059 li
748.387 391.907 664.801 495.041 581.085 537.187 cv
599.951 527.049 li
612.583 519.448 li
633.291 505.419 li
642.338 498.355 654.362 488.875 663.034 481.357 cv
682.419 462.651 li
689.31 454.962 698.609 444.799 705.138 436.8 cv
721.721 414.404 li
726.963 406.082 734.148 395.1 739.017 386.554 cv
751.989 361.206 li
755.714 352.286 760.932 340.489 764.263 331.416 cv
773.063 303.719 li
775.258 294.274 778.475 281.74 780.253 272.208 cv
784.421 242.712 li
785.083 231.663 786.181 216.932 786.3 205.864 cv
785.135 175.56 li
783.976 165.869 782.738 152.901 781.155 143.27 cv
775.113 114.42 li
772.41 105.229 769.086 92.8809 765.986 83.8149 cv
755.496 56.957 li
751.34 48.3599 746.04 36.771 741.518 28.3608 cv
727.083 4.05811 li
721.517 -3.87256 714.285 -14.5898 708.38 -22.271 cv
690.679 -43.3662 li
683.635 -50.6055 674.357 -60.3823 666.994 -67.2964 cv
647.438 -84.125 li
621.539 -103.485 618.832 -105.509 598.241 -117.533 cv
688.845 -66.0581 748.552 35.6802 748.318 160.448 cv
f
347.296 560.983 mo
590.97 580.121 697.91 313.03 528.925 107.354 cv
383.725 -69.373 85.4053 -45.043 54.3931 199.953 cv
33.0117 368.867 178.094 547.695 347.296 560.983 cv
.529412 .552941 .588235 rgb
f
313.559 554.31 mo
551.646 600.11 692.589 354.824 549.198 144.221 cv
406.338 -65.6001 114.636 -48.999 61.5078 171.976 cv
18.3022 351.679 161.522 525.062 313.559 554.31 cv
.537255 .556863 .596078 rgb
f
312.108 552.456 mo
542.324 601.106 683.595 348.771 541.137 143.365 cv
394.553 -67.9902 96.9893 -34.3472 58.7231 197.908 cv
33.1934 352.859 151.598 518.536 312.108 552.456 cv
.545098 .564706 .603922 rgb
f
279.59 542.22 mo
523.498 617.72 663.424 379.253 556.529 179.963 cv
436.728 -43.3892 140.208 -52.5415 68.4126 164.896 cv
20.3765 310.378 123.004 493.75 279.59 542.22 cv
.552941 .572549 .611765 rgb
f
278.748 540.377 mo
520.706 615.13 659.094 374.092 549.466 179.149 cv
416.499 -57.2979 120.242 -26.5352 68.4316 174.2 cv
25.3643 341.064 142.409 498.255 278.748 540.377 cv
.556863 .580392 .619608 rgb
f
247.62 526.723 mo
475.625 625.28 639.955 415.459 559.805 215.159 cv
475.287 3.93994 173.721 -69.0386 79.0815 152.433 cv
22.1777 285.598 102.509 463.997 247.62 526.723 cv
.564706 .588235 .627451 rgb
f
246.641 524.619 mo
473.792 622.861 634.992 413.936 553.658 214.409 cv
462.48 -9.2666 156.373 -43.9556 78.9683 160.615 cv
28.3545 294.383 103.572 457.674 246.641 524.619 cv
.572549 .596078 .635294 rgb
f
247.112 523.05 mo
471.82 619.491 631.558 408.467 547.463 213.691 cv
454.353 -1.96777 159.207 -36.8633 83.0415 158.782 cv
24.4092 309.392 120.541 468.727 247.112 523.05 cv
.580392 .603922 .643137 rgb
f
217.8 506.099 mo
413.311 616.739 611.045 465.293 553.635 248.88 cv
501.387 51.9297 217.859 -52.708 101.593 131.412 cv
19.3369 261.673 95.103 436.664 217.8 506.099 cv
.584314 .607843 .65098 rgb
f
218.031 504.28 mo
410.913 613.167 605.606 463.817 548.701 250.623 cv
494.445 47.3545 199.084 -47.8848 92.8457 153.679 cv
33.3345 266.589 93.002 433.697 218.031 504.28 cv
.592157 .615686 .658824 rgb
f
218.479 502.469 mo
423.39 620.745 601.162 441.38 542.7 247.592 cv
479.141 36.9102 192.707 -25.3711 98.519 151.011 cv
36.0767 267.945 91.0117 428.893 218.479 502.469 cv
.6 .623529 .666667 rgb
f
191.34 482.33 mo
367.053 608.896 575.083 490.796 544.66 281.748 cv
514.363 73.5615 233.787 -25.1123 115.781 130.918 cv
30.0928 244.217 86.8281 407.051 191.34 482.33 cv
.607843 .631373 .67451 rgb
f
192.121 480.491 mo
380.231 615.708 569.556 473.319 539.656 281.162 cv
507.458 74.2363 234.005 -17.8315 115.605 138.39 cv
41.8857 235.658 78.3555 398.716 192.121 480.491 cv
.615686 .639216 .682353 rgb
f
193.096 478.663 mo
376.713 610.288 565.733 467.212 534.619 280.598 cv
497.611 58.6328 209.567 -1.00781 115.56 146.031 cv
40.5361 263.377 97.3926 410.059 193.096 478.663 cv
.619608 .647059 .690196 rgb
f
194.265 476.845 mo
385.149 613.208 558.93 445.252 529.551 280.057 cv
490.572 60.8799 210.545 5.46582 115.656 153.985 cv
45.6709 263.524 99.8003 409.361 194.265 476.845 cv
.627451 .65098 .694118 rgb
f
195.625 475.039 mo
382.075 611.167 555.104 442.23 524.453 279.539 cv
483.672 63.0723 207.589 13.105 115.896 161.926 cv
55.1538 260.513 90.1753 398.049 195.625 475.039 cv
.635294 .658824 .701961 rgb
f
197.246 473.172 mo
384.458 604.642 550.374 439.766 519.326 279.044 cv
479.889 74.8906 219.981 4.47656 116.28 169.851 cv
59.1206 261.004 96.9551 402.743 197.246 473.172 cv
.643137 .666667 .709804 rgb
f
173.079 449.948 mo
329.246 591.674 521.094 486.415 517.521 311.963 cv
512.999 91.1738 254.611 28.4707 147.821 137.57 cv
58.0679 229.263 88.4194 373.118 173.079 449.948 cv
.647059 .67451 .717647 rgb
f
174.985 448.086 mo
338.313 595.905 515.955 468.256 512.569 311.492 cv
507.851 93.0112 256.624 35.793 148.878 144.066 cv
61.061 232.312 91.479 372.51 174.985 448.086 cv
.654902 .682353 .72549 rgb
f
177.077 446.241 mo
336.08 589.665 510.236 464.073 507.59 311.044 cv
503.813 92.6035 255.278 41.3604 148.141 152.24 cv
73.1694 229.831 86.4204 364.467 177.077 446.241 cv
.662745 .690196 .733333 rgb
f
179.352 444.412 mo
335.28 586.173 525.086 456.444 503.059 277.642 cv
481.923 106.073 237.139 34.2246 139.283 170.868 cv
72.4805 264.148 110.069 381.425 179.352 444.412 cv
.670588 .698039 .741176 rgb
f
158.969 418.521 mo
310.132 584.807 493.541 470.951 500.533 310.451 cv
507.969 139.739 295.026 38.8188 165.46 151.65 cv
72.5293 232.579 106.648 358.739 158.969 418.521 cv
.678431 .701961 .74902 rgb
f
184.815 440.573 mo
343.691 579.793 516.961 428.706 496.205 277.125 cv
473.837 113.772 247.001 46.7222 149.47 174.634 cv
71.229 277.249 129.626 392.212 184.815 440.573 cv
.682353 .709804 .756863 rgb
f
187.939 438.638 mo
341.025 571.74 513.645 422.126 492.763 276.882 cv
469.485 114.97 248.786 53.8145 150.52 182.048 cv
86.0205 266.216 118.895 378.606 187.939 438.638 cv
.690196 .717647 .764706 rgb
f
191.276 436.729 mo
338.672 565.131 510.409 416.734 489.312 276.649 cv
466.64 126.109 257.215 48.2002 150.994 190.27 cv
97.3296 262.045 115.023 370.303 191.276 436.729 cv
.698039 .72549 .772549 rgb
f
171.009 410.511 mo
297.479 558.21 477.788 450.192 486.909 309.446 cv
496.611 159.73 297.349 60.6523 186.613 160.131 cv
83.7842 252.506 131.442 364.303 171.009 410.511 cv
.705882 .733333 .780392 rgb
f
174.646 408.609 mo
297.514 549.229 473.996 444.242 483.478 309.221 cv
494.148 157.285 300.2 63.7192 187.015 166.199 cv
95.8335 248.756 131.038 358.701 174.646 408.609 cv
.709804 .741176 .788235 rgb
f
178.861 406.557 mo
297.851 541.487 470.181 439.268 480.038 309.006 cv
490.582 169.661 308.698 60.2451 187.479 172.259 cv
105.679 247.847 133.195 354.773 178.861 406.557 cv
.717647 .745098 .796078 rgb
f
183.31 404.539 mo
298.385 533.724 466.408 434.271 476.588 308.803 cv
487.925 169.075 311.58 64.8193 188.004 178.311 cv
125.462 235.749 123.356 337.234 183.31 404.539 cv
.72549 .752941 .803922 rgb
f
187.991 402.558 mo
299.085 526.308 462.656 429.52 473.13 308.609 cv
484.046 182.591 319.732 62.3008 188.591 184.353 cv
144.838 225.073 119.449 326.208 187.991 402.558 cv
.733333 .760784 .811765 rgb
f
192.902 400.616 mo
290.61 511.549 458.01 435.151 469.664 308.427 cv
481.527 179.41 327.07 77.4834 207.946 174.175 cv
126.708 240.114 139.563 340.057 192.902 400.616 cv
.741176 .768627 .819608 rgb
f
198.352 398.604 mo
298.796 502.42 455.414 430.062 466.189 308.254 cv
478.641 167.498 317.274 86.2568 208.484 178.512 cv
132.796 242.696 144.293 342.729 198.352 398.604 cv
.745098 .776471 .827451 rgb
f
204.101 396.623 mo
295.542 487.736 463.507 434.566 463.86 280.341 cv
464.121 166.547 293.169 87.8252 199.06 191.104 cv
146.261 249.048 148.522 341.243 204.101 396.623 cv
.752941 .784314 .835294 rgb
f
210.104 394.692 mo
307.37 490.417 476.565 409.984 461.548 275.161 cv
448.038 153.872 287.613 100.459 205.348 189.86 cv
151.152 248.757 153.241 338.73 210.104 394.692 cv
.760784 .792157 .843137 rgb
f
193.789 366.066 mo
274.525 486.015 443.547 429.034 458.886 307.929 cv
473.968 188.858 335.354 107.022 230.707 173.214 cv
163.778 215.548 156.015 309.946 193.789 366.066 cv
.768627 .796078 .85098 rgb
f
199.488 364.341 mo
271.203 471.407 439.337 434.439 456.493 307.833 cv
466.986 230.395 410.565 185.235 375.999 165.208 cv
373.28 163.633 308.527 127.208 231.029 177.204 cv
172.67 214.852 157.932 302.3 199.488 364.341 cv
.772549 .803922 .858824 rgb
f
204.469 362.912 mo
275.529 465.203 436.505 429.626 454.097 307.742 cv
462.176 251.765 433.729 200.863 376.047 168.089 cv
360.346 159.167 303.508 133.745 231.372 181.189 cv
195.864 204.543 149.873 284.323 204.469 362.912 cv
.780392 .811765 .866667 rgb
f
208.93 361.69 mo
235.179 397.247 287.888 429.752 357.1 414.347 cv
357.91 414.167 438.918 391.105 451.697 307.656 cv
459.93 253.895 430.962 201.52 376.099 170.969 cv
339.448 150.56 276.398 148.602 231.737 185.171 cv
169.084 236.472 172.84 312.804 208.93 361.69 cv
.788235 .819608 .87451 rgb
f
213.496 360.493 mo
285.657 452.588 431.104 419.947 449.295 307.575 cv
464.31 214.829 351.69 111.821 238.487 184.164 cv
182.605 219.875 170.46 305.568 213.496 360.493 cv
.796078 .827451 .882353 rgb
f
218.167 359.32 mo
289.641 446.269 428.585 414.789 446.89 307.499 cv
463.456 210.403 345.803 119.751 245.419 183.137 cv
175.235 227.455 182.245 315.62 218.167 359.32 cv
.811765 .839216 .890196 rgb
f
222.94 358.172 mo
298.436 448.554 427.178 403.938 444.482 307.429 cv
461.309 213.579 349.518 122.832 252.744 181.995 cv
206.616 210.195 201.6 239.848 197.937 261.5 cv
191.707 298.326 200.12 330.852 222.94 358.172 cv
.819608 .847059 .894118 rgb
f
227.817 357.051 mo
300.214 442.477 424.809 399.222 442.071 307.363 cv
460.334 210.183 344.371 130.003 259.6 181.197 cv
211.117 210.477 207.707 229.342 202.058 260.597 cv
195.437 297.235 203.862 328.785 227.817 357.051 cv
.823529 .85098 .898039 rgb
f
230.797 353.39 mo
281.383 428.403 418.962 412.63 439.658 307.303 cv
452.978 239.522 397.302 198.619 376.342 183.221 cv
364.419 174.461 306.955 156.422 266.778 180.294 cv
219.229 208.546 212.35 223.753 204.813 260.009 cv
196.099 301.935 216.154 331.675 230.797 353.39 cv
.827451 .854902 .901961 rgb
f
224.409 337.127 mo
255.304 385.031 294.93 402.766 352.895 394.628 cv
380.852 390.703 426.975 357.328 437.243 307.248 cv
450.327 243.432 397.859 202.354 380.617 188.854 cv
355.771 169.403 295.855 166.638 273.992 179.437 cv
223.441 209.03 221.637 214.768 207.594 259.429 cv
207.485 259.776 200.497 300.05 224.409 337.127 cv
.831373 .858824 .901961 rgb
f
239.341 354.588 mo
258.861 375.48 285.227 388.705 317.705 393.896 cv
327.988 395.539 342.219 394.347 352.364 391.997 cv
363.041 389.523 375.978 382.183 386.126 378.045 cv
386.735 377.797 444.99 338.644 436.078 274.382 cv
425.446 197.723 356.357 180.277 326.854 172.828 cv
307.635 167.975 246.341 187.288 225.498 221.208 cv
182.744 290.785 238.764 353.97 239.341 354.588 cv
.835294 .858824 .905882 rgb
f
242.824 353.893 mo
274.633 386.555 334.167 396.716 351.837 389.353 cv
396.259 370.844 397.107 370.49 419.632 338.862 cv
429.23 325.385 437.162 298.893 433.749 274.338 cv
428.733 238.247 404.438 213.244 397.111 206.44 cv
377.902 188.603 377.902 188.603 326.957 175.17 cv
294.848 166.704 239.083 205.608 229.602 220.511 cv
184.026 292.154 240.402 351.405 242.824 353.893 cv
.839216 .862745 .905882 rgb
f
226.197 324.123 mo
242.257 356.093 277.001 392.899 351.315 386.697 cv
373.517 384.844 420.898 350.777 429.983 307.113 cv
442.586 246.541 394.654 206.873 394.168 206.479 cv
378.14 193.489 367.551 184.906 327.05 177.234 cv
312.683 174.512 292.348 178.96 278.873 184.638 cv
278.639 184.737 240.166 212.359 233.75 219.828 cv
225.577 229.343 220.521 245.994 216.09 257.729 cv
215.99 257.993 210.778 293.431 226.197 324.123 cv
.843137 .866667 .909804 rgb
f
228.88 323.576 mo
244.919 354.44 279.09 389.982 350.797 384.028 cv
373.019 382.184 419.293 346.667 427.559 307.078 cv
440.13 246.87 393.227 208.145 391.224 206.525 cv
370.386 189.68 321.524 168.699 279.056 187.031 cv
264.632 193.257 247.948 207.261 237.728 219.192 cv
234.855 222.546 219.076 256.895 218.973 257.177 cv
218.871 257.454 212.817 292.666 228.88 323.576 cv
f
231.589 323.037 mo
244.673 347.396 277.491 387.361 350.283 381.348 cv
385.168 366.067 li
411.233 340.194 420.014 331.479 425.133 307.049 cv
437.461 248.218 393.35 210.667 388.28 206.579 cv
364.491 187.398 328.754 181.597 327.245 181.36 cv
312.82 179.09 292.627 183.581 279.245 189.422 cv
266.136 195.144 250.827 207.722 241.542 218.601 cv
235.648 225.506 221.973 256.374 221.881 256.632 cv
221.777 256.922 214.916 291.996 231.589 323.037 cv
.847059 .870588 .909804 rgb
f
234.323 322.505 mo
244.794 341.379 277.005 384.632 349.773 378.655 cv
352.657 378.419 408.648 363.587 422.782 307.025 cv
436.704 251.315 394.03 213.627 385.335 206.638 cv
367.154 192.025 327.699 183.471 327.346 183.421 cv
312.896 181.398 292.788 185.92 279.438 191.812 cv
267.934 196.889 239.582 213.316 224.814 256.094 cv
223.746 259.19 218.681 294.31 234.323 322.505 cv
.85098 .87451 .913725 rgb
f
237.083 321.979 mo
237.233 322.242 257.893 350.995 268.256 355.981 cv
315.495 378.707 315.495 378.707 349.269 375.951 cv
384.756 360.691 li
400.393 345.564 413.897 332.5 420.534 307.008 cv
431.616 264.444 408.096 227.287 382.39 206.705 cv
367.978 195.166 327.786 185.522 327.45 185.481 cv
312.977 183.72 292.953 188.258 279.639 194.199 cv
236.129 213.614 208.686 272.385 237.083 321.979 cv
f
239.869 321.462 mo
243.364 327.381 276.119 379.126 348.768 373.235 cv
384.553 357.987 li
394.593 348.421 411.397 332.408 418.285 306.994 cv
427.946 271.343 413.426 233.879 379.444 206.778 cv
372.911 201.567 327.875 187.574 327.557 187.541 cv
313.064 186.058 293.124 190.595 279.844 196.585 cv
242.348 213.5 209.001 269.19 239.869 321.462 cv
.854902 .878431 .917647 rgb
f
242.679 320.951 mo
242.784 321.126 264.571 346.698 268.319 349.407 cv
279.782 357.692 297.886 364.07 310.68 370.1 cv
320.894 374.914 337.058 371.641 348.313 370.734 cv
360.04 369.789 375.786 363.338 384.352 355.274 cv
406.563 334.366 413.907 314.539 416.034 306.985 cv
420.786 290.107 426.489 246.603 376.943 207.245 cv
364.647 197.479 343.312 190.936 327.667 189.6 cv
313.162 188.361 293.3 192.929 280.055 198.97 cv
255.365 210.23 207.994 263.048 242.679 320.951 cv
f
245.515 320.448 mo
257.571 340.499 286.906 373.406 347.915 368.523 cv
359.758 367.575 375.472 360.661 384.153 352.551 cv
406.345 331.815 413.489 307.985 413.782 306.981 cv
423.721 272.94 409.635 235.765 377.021 209.962 cv
372.744 206.578 328.072 191.683 327.778 191.657 cv
313.29 190.368 293.488 195.278 280.271 201.353 cv
262.625 209.462 209.082 259.857 245.515 320.448 cv
.858824 .878431 .917647 rgb
f
248.375 319.953 mo
260.029 339.281 288.406 371.005 347.521 366.305 cv
359.48 365.354 375.156 357.973 383.956 349.817 cv
401.797 333.282 411.456 307.221 411.529 306.981 cv
421.492 274.022 407.978 237.005 377.101 212.676 cv
372.841 209.319 333.75 194.255 327.893 193.713 cv
313.42 192.374 293.684 197.629 280.493 203.733 cv
279.694 204.103 207.169 251.611 248.375 319.953 cv
.858824 .882353 .917647 rgb
f
251.261 319.465 mo
260.316 334.44 287.786 368.766 347.128 364.079 cv
359.207 363.125 374.838 355.271 383.76 347.074 cv
398.321 333.697 409.202 307.219 409.275 306.985 cv
420.101 272.34 400.82 233.934 377.183 215.387 cv
371.523 210.946 335.218 196.461 328.01 195.768 cv
313.555 194.378 293.884 199.979 280.72 206.112 cv
262.822 214.452 242.819 252.728 242.732 253.061 cv
238.031 271.148 235.369 293.184 251.261 319.465 cv
.862745 .882353 .921569 rgb
f
254.171 318.984 mo
267.428 340.842 290.772 351.65 307.817 359.543 cv
318.432 364.458 335.078 362.761 346.74 361.846 cv
358.938 360.89 374.518 352.556 383.567 344.321 cv
393.677 335.122 406.947 307.221 407.02 306.995 cv
418.005 272.936 399.889 235.771 377.267 218.095 cv
370.733 212.99 335.832 198.59 328.13 197.822 cv
313.691 196.382 294.089 202.326 280.953 208.489 cv
268.29 214.431 245.516 252.327 245.441 252.637 cv
240.889 271.419 237.813 292.014 254.171 318.984 cv
.862745 .886275 .921569 rgb
f
255.456 314.605 mo
261.065 328.461 278.446 342.684 307.118 356.878 cv
317.692 362.113 334.57 360.206 346.354 359.606 cv
358.693 358.979 374.194 349.827 383.375 341.56 cv
387.762 337.61 404.691 307.227 404.764 307.009 cv
416.585 271.454 395.852 235.193 377.353 220.801 cv
370.766 215.675 335.432 200.616 328.252 199.875 cv
313.831 198.384 294.3 204.671 281.191 210.864 cv
274.408 214.069 248.241 251.928 248.168 252.22 cv
245.648 262.377 243.588 276.547 244.803 286.941 cv
245.834 295.774 252.119 306.362 255.456 314.605 cv
.866667 .886275 .921569 rgb
f
249.697 292.392 mo
252.623 300.134 254.098 312.008 259.694 318.105 cv
260.012 318.452 291.683 352.792 306.425 354.203 cv
318.272 355.338 335.288 362.604 345.971 357.359 cv
383.181 338.706 li
391.496 331.304 398.914 317.563 402.507 307.026 cv
415.573 268.712 391.262 234.209 377.441 223.503 cv
370.127 217.837 335.736 202.713 328.378 201.926 cv
313.974 200.386 293.66 205.466 281.435 213.237 cv
268.981 221.152 256.406 238.113 250.915 251.809 cv
250.829 252.021 244.088 277.554 249.697 292.392 cv
.866667 .890196 .92549 rgb
f
262.358 317.696 mo
262.508 317.907 283.519 341.532 305.74 351.52 cv
316.688 356.44 333.623 356.029 345.591 355.105 cv
345.755 355.093 378.117 339.695 382.961 335.437 cv
390.45 328.853 397.013 316.48 400.25 307.049 cv
414.406 265.803 385.456 232.288 377.531 226.203 cv
373.278 222.937 336.121 204.784 328.505 203.976 cv
325.45 203.651 284.356 214.239 281.729 216.028 cv
270.533 223.65 256.214 238.099 253.679 251.403 cv
249.866 271.418 245.543 294.104 262.358 317.696 cv
.870588 .890196 .92549 rgb
f
265.041 317.293 mo
265.191 317.497 289.776 342.048 305.061 348.825 cv
316.127 353.732 333.144 353.771 345.214 352.844 cv
348.719 352.574 377.48 336.719 382.744 332.154 cv
389.396 326.386 395.118 315.399 397.992 307.076 cv
413.857 261.142 377.998 229.185 377.623 228.899 cv
377.353 228.693 335.106 206.705 328.636 206.024 cv
314.215 204.506 294.036 210.706 282.032 218.839 cv
260.631 233.338 236.663 278.565 265.041 317.293 cv
f
267.744 316.896 mo
267.892 317.093 300.024 344.215 304.388 346.122 cv
315.576 351.01 332.667 351.507 344.84 350.576 cv
348.994 350.259 375.06 335.24 382.529 328.86 cv
388.334 323.902 393.291 314.341 395.734 307.108 cv
411.169 261.42 378.064 231.854 377.717 231.592 cv
377.434 231.378 331.585 208.365 328.769 208.071 cv
327.043 207.891 284.089 220.452 282.343 221.646 cv
258.124 238.223 242.283 283.057 267.744 316.896 cv
.87451 .894118 .92549 rgb
f
270.466 316.506 mo
278.234 326.664 291.929 338.179 303.679 343.228 cv
304.736 343.682 342.859 348.424 344.47 348.302 cv
344.829 348.274 383.238 337.249 393.475 307.145 cv
408.569 262.757 378.135 234.522 377.813 234.282 cv
364.717 224.509 345.169 211.963 328.915 210.284 cv
314.479 208.792 294.625 216.235 282.662 224.451 cv
252.665 245.05 251.462 291.653 270.466 316.506 cv
.87451 .894118 .929412 rgb
f
273.208 316.122 mo
280.189 325.206 292.369 335.655 302.925 340.107 cv
305.301 341.109 341.09 346.248 344.102 346.021 cv
346.928 345.807 374.279 328.69 382.109 322.235 cv
386.182 318.879 389.507 312.179 391.216 307.186 cv
394.435 297.782 396.926 284.046 395.076 274.28 cv
395.021 273.994 384.33 241.709 377.911 236.968 cv
364.749 227.247 345.354 214.344 329.077 212.678 cv
314.651 211.202 294.895 218.975 282.987 227.251 cv
253.713 247.601 254.807 292.174 273.208 316.122 cv
.878431 .894118 .929412 rgb
f
275.97 315.744 mo
282.153 323.755 292.828 333.112 302.181 336.976 cv
304.641 337.991 341.148 343.928 343.737 343.732 cv
346.661 343.513 381.604 319.147 381.904 318.905 cv
385.088 316.336 387.624 311.1 388.957 307.231 cv
392.197 297.825 394.567 284.134 392.977 274.313 cv
392.933 274.044 380.298 241.322 378.01 239.651 cv
364.781 229.985 345.543 216.724 329.243 215.071 cv
314.826 213.608 295.18 221.721 283.321 230.049 cv
264.345 243.375 251.735 284.35 275.97 315.744 cv
.878431 .898039 .929412 rgb
f
278.746 315.374 mo
284.122 322.313 293.306 330.549 301.446 333.832 cv
343.376 341.438 li
343.824 341.404 381.378 315.818 381.701 315.564 cv
383.98 313.768 385.747 310.023 386.698 307.281 cv
389.959 297.872 392.458 284.183 390.877 274.35 cv
390.836 274.095 379.213 243.365 376.056 241.083 cv
363.342 231.898 345.036 218.854 329.412 217.461 cv
314.989 216.174 295.477 224.471 283.662 232.842 cv
265.962 245.383 254.974 284.696 278.746 315.374 cv
f
281.529 315.013 mo
286.093 320.878 293.792 327.986 300.72 330.677 cv
312.758 335.353 330.347 341.568 342.978 338.881 cv
356.726 335.956 370.315 320.724 381.501 312.213 cv
382.86 311.179 383.953 308.974 384.438 307.336 cv
389.391 290.632 394.354 259.829 371.938 241.213 cv
360.99 232.121 343.787 220.75 329.585 219.849 cv
315.145 218.932 297.423 230.206 284.01 235.632 cv
268.752 241.804 267.149 283.188 267.203 283.579 cv
268.609 293.846 275.165 306.833 281.529 315.013 cv
.882353 .898039 .933333 rgb
f
284.318 314.658 mo
288.065 319.451 294.3 325.394 300.003 327.51 cv
312.229 332.048 329.823 338.992 342.579 336.28 cv
342.917 336.208 381.846 308.648 382.179 307.396 cv
386.307 291.871 393.991 262.975 367.821 241.357 cv
357.969 233.219 342.515 223.024 329.761 222.234 cv
315.331 221.34 297.35 232.059 284.366 238.418 cv
280.913 240.109 278.026 244.952 276.33 248.402 cv
270.013 261.251 262.65 286.945 284.318 314.658 cv
.882353 .901961 .933333 rgb
f
287.114 314.313 mo
290.037 318.034 294.832 322.764 299.296 324.332 cv
311.719 328.699 329.293 336.36 342.183 333.672 cv
355.377 330.919 368.377 316.164 378.698 307.496 cv
380.232 306.207 380.413 303.13 380.868 301.179 cv
382.707 293.305 386.813 282.254 384.578 274.483 cv
381.342 263.233 372.75 248.946 363.705 241.515 cv
354.953 234.324 341.249 225.258 329.94 224.617 cv
315.517 223.8 297.843 235.14 284.729 241.2 cv
282.328 242.309 280.336 245.675 279.197 248.062 cv
263.276 281.408 280.647 306.082 287.114 314.313 cv
.886275 .901961 .933333 rgb
f
289.916 313.976 mo
292.009 316.627 295.39 320.088 298.598 321.144 cv
311.226 325.301 328.76 333.687 341.792 331.055 cv
353.578 328.675 366.068 316.383 374.321 307.638 cv
378.102 303.631 379.203 295.671 380.279 290.268 cv
381.667 283.298 381.91 273.146 379.125 266.607 cv
375.404 257.867 366.972 247.667 359.591 241.687 cv
351.916 235.469 339.988 227.505 330.124 226.998 cv
329.748 226.979 285.817 239.623 282.07 247.729 cv
277.588 257.424 273.514 271.969 274.771 282.576 cv
276 292.962 283.436 305.767 289.916 313.976 cv
f
292.724 313.646 mo
293.979 315.229 295.976 317.357 297.91 317.944 cv
310.752 321.845 328.231 331.004 341.404 328.431 cv
351.773 326.405 363.451 316.131 369.945 307.797 cv
375.508 300.658 378.269 288.191 379.722 279.259 cv
380.06 277.182 380.53 274.019 379.386 272.253 cv
373.076 262.522 364.51 249.149 355.479 241.873 cv
349.035 236.68 339.033 230.079 330.771 229.599 cv
330.402 229.578 286.041 244.99 284.948 247.403 cv
280.534 257.155 276.057 271.624 277.305 282.256 cv
278.528 292.676 286.204 305.426 292.724 313.646 cv
.886275 .905882 .933333 rgb
f
295.538 313.326 mo
297.994 316.408 340.712 325.857 341.021 325.799 cv
349.964 324.109 360.313 315.402 365.571 307.974 cv
371.684 299.338 378.86 285.131 377.204 274.682 cv
375.25 262.355 360.559 250.52 351.371 242.074 cv
346.228 237.347 337.477 232.096 330.5 231.752 cv
318.104 231.141 303.135 241.36 291.909 246.65 cv
289.692 247.695 287.261 250.333 286.295 252.585 cv
282.743 260.873 278.487 273.026 279.843 281.94 cv
281.427 292.348 288.977 305.093 295.538 313.326 cv
.890196 .905882 .937255 rgb
f
296.006 308.803 mo
297.143 310.243 298.92 312.201 300.667 312.764 cv
312.463 316.558 328.456 325.407 340.642 323.159 cv
348.148 321.775 356.932 314.496 361.2 308.168 cv
367.151 299.346 374.884 285.323 373.254 274.807 cv
371.342 262.466 356.293 250.917 347.266 242.288 cv
343.259 238.458 336.229 234.392 330.693 234.125 cv
319.859 233.602 254.293 255.922 296.006 308.803 cv
f
294.313 300.263 mo
297.634 304.535 303.05 309.826 308.001 312.008 cv
317.162 316.045 330.42 322.317 340.266 320.513 cv
346.326 319.401 353.522 313.575 356.833 308.38 cv
362.586 299.353 370.91 285.531 369.306 274.946 cv
367.433 262.591 351.996 251.357 343.164 242.517 cv
340.265 239.616 334.986 236.691 330.89 236.495 cv
319.509 235.95 264.397 261.777 294.313 300.263 cv
.890196 .909804 .937255 rgb
f
292.688 291.657 mo
298.182 298.789 307.503 306.926 315.368 311.308 cv
321.923 314.96 332.149 319.082 339.535 317.758 cv
344.213 316.919 350.008 312.676 352.469 308.609 cv
358.047 299.396 366.938 285.754 365.358 275.099 cv
363.525 262.73 347.657 251.845 339.065 242.76 cv
337.236 240.825 333.75 238.993 331.089 238.862 cv
326.35 238.63 319.966 241.414 316.266 244.385 cv
307.177 251.683 296.192 262.965 289.336 272.391 cv
285.885 277.135 289.107 287.01 292.688 291.657 cv
.894118 .909804 .937255 rgb
f
291.131 282.988 mo
298.796 292.999 312.268 303.675 322.764 310.66 cv
327.102 313.547 334.408 316.16 339.528 315.197 cv
342.674 314.605 346.572 311.664 348.11 308.857 cv
353.319 299.352 362.969 285.992 361.413 275.265 cv
361.366 274.938 336.765 241.501 331.293 241.227 cv
321.229 240.723 312.473 255.464 305.489 262.727 cv
288.858 280.02 288.858 280.02 291.131 282.988 cv
f
330.186 310.066 mo
332.644 311.395 336.42 313.044 339.166 312.528 cv
340.851 312.213 342.997 310.66 343.756 309.122 cv
348.584 299.34 359.003 286.245 357.47 275.445 cv
355.753 263.356 343.737 244.697 331.542 244.071 cv
316.297 243.288 294.894 264.89 295.647 280.136 cv
296.324 293.83 318.122 303.553 330.186 310.066 cv
.894118 .909804 .941176 rgb
f
337.63 309.526 mo
337.953 309.7 338.447 309.921 338.808 309.854 cv
340.505 309.536 353.572 275.945 353.53 275.639 cv
352.142 265.652 342.13 250.27 332.059 249.782 cv
319.484 249.172 301.72 266.875 302.377 279.447 cv
303.103 293.33 325.385 302.943 337.63 309.526 cv
.898039 .913725 .941176 rgb
f
337.977 303.505 mo
346.742 301.463 350.842 284.758 349.593 275.846 cv
348.487 267.963 340.545 255.863 332.595 255.475 cv
322.681 254.989 308.649 268.887 309.132 278.801 cv
309.686 290.181 326.881 306.09 337.977 303.505 cv
f
337.09 296.465 mo
343.559 294.978 346.651 282.629 345.659 276.066 cv
344.786 270.292 338.984 261.42 333.15 261.147 cv
325.884 260.809 315.662 270.928 315.91 278.197 cv
316.197 286.583 328.912 298.344 337.09 296.465 cv
f
336.232 289.381 mo
340.377 288.415 342.37 280.509 341.729 276.301 cv
341.168 272.617 337.447 266.975 333.725 266.801 cv
329.094 266.584 322.566 273.004 322.71 277.637 cv
322.877 283.007 330.999 290.6 336.232 289.381 cv
.901961 .917647 .941176 rgb
f
335.404 282.257 mo
337.213 281.839 338.085 278.385 337.804 276.549 cv
337.558 274.95 335.935 272.508 334.318 272.433 cv
332.31 272.338 329.473 275.11 329.529 277.119 cv
329.595 279.459 333.123 282.784 335.404 282.257 cv
.901961 .917647 .945098 rgb
f
grestore % PSGState
gsave % PSGState
232.216 528.028 mo
225.787 524.297 217.214 519.291 211.09 515.076 cv
201.335 508.363 188.577 499.033 179.333 491.632 cv
166.699 481.516 151.494 466.08 140.276 454.412 cv
132.898 446.737 123.776 435.774 117.704 427.03 cv
112.08 418.93 104.444 408.214 99.2139 399.854 cv
94.6953 392.633 89.2129 382.672 85.2349 375.14 cv
80.729 366.607 75.4463 354.854 71.7466 345.942 cv
68.4189 337.928 64.8057 326.919 61.8315 318.767 cv
58.5249 309.704 55.2275 297.211 53.3516 287.748 cv
49.8809 270.236 46.1338 246.654 44.8906 228.845 cv
43.752 212.531 43.4492 190.568 45.4351 174.335 cv
46.6211 164.643 47.5068 151.597 49.5376 142.045 cv
51.375 133.402 53.4648 121.793 55.6812 113.239 cv
58.0884 103.949 61.4307 91.5498 64.9355 82.6152 cv
68.0894 74.5767 71.9897 63.729 75.5049 55.8413 cv
79.4043 47.0908 85.0283 35.6045 89.6309 27.2031 cv
93.6899 19.793 99.4443 10.0923 104.097 3.04004 cv
109.461 -5.09131 116.785 -15.8604 122.993 -23.3672 cv
133.387 -35.9346 147.685 -52.4136 159.557 -63.5957 cv
166.666 -70.291 176.526 -78.814 184.104 -84.9736 cv
190.007 -89.7729 198.136 -95.8672 204.459 -100.098 cv
212.951 -105.78 224.517 -112.996 233.333 -118.162 cv
238.927 -121.439 246.59 -125.47 252.46 -128.222 cv
258.193 -130.91 265.845 -134.48 271.671 -136.96 cv
276.526 -139.027 283.117 -141.499 288.05 -143.372 cv
296.11 -146.431 307.118 -149.806 315.422 -152.121 cv
319.446 -153.243 324.823 -154.708 328.9 -155.617 cv
336.625 -157.34 346.96 -159.49 354.749 -160.893 cv
360.545 -161.937 374.218 -163.814 384.815 -164.623 cv
389.928 -165.014 396.754 -165.443 401.879 -165.633 cv
409.69 -165.923 417.054 -165.88 418.083 -165.86 cv
418.084 -165.86 418.085 -165.86 418.085 -165.86 cv
422.914 -165.717 429.354 -165.581 434.18 -165.384 cv
436.681 -165.282 440.009 -165.024 442.507 -164.863 cv
444.86 -164.711 452.535 -164.071 460.008 -163.157 cv
477.658 -160.999 490.58 -158.148 490.58 -158.148 cv
498.088 -156.468 508.065 -154.073 515.496 -152.079 cv
520.442 -150.751 526.956 -148.688 531.818 -147.083 cv
537.505 -145.206 545.017 -142.486 550.589 -140.292 cv
556.33 -138.032 563.878 -134.749 569.516 -132.241 cv
578.361 -128.305 589.752 -122.188 598.241 -117.533 cv
545.903 -147.268 483.255 -160.229 415.896 -151.17 cv
483.255 -160.229 545.903 -147.268 598.241 -117.533 cv
598.241 -117.533 li
611.143 -109.615 628.436 -99.0635 640.323 -89.6924 cv
648.528 -83.2241 659.244 -74.3042 666.994 -67.2964 cv
673.062 -61.8105 680.837 -54.1357 686.339 -48.084 cv
693.189 -40.5498 702.064 -30.2583 708.38 -22.271 cv
713.596 -15.6748 720.089 -6.51563 724.744 .487305 cv
730.146 8.61523 736.813 19.8105 741.518 28.3608 cv
745.65 35.8701 750.483 46.2388 754.178 53.9727 cv
758.328 62.6602 762.801 74.729 765.986 83.8149 cv
768.878 92.0615 771.891 103.333 774.418 111.698 cv
777.219 120.969 779.922 133.664 781.155 143.27 cv
782.295 152.153 784.181 163.959 784.914 172.885 cv
785.725 182.754 786.283 195.961 786.3 205.864 cv
786.33 223.91 783.975 247.958 781.363 265.813 cv
779.805 276.468 776.944 290.6 773.824 300.905 cv
771.295 309.258 768.166 320.479 765.233 328.699 cv
762.045 337.636 757.616 349.527 753.437 358.047 cv
749.671 365.724 744.837 376.063 740.689 383.54 cv
736.098 391.822 729.574 402.65 724.332 410.535 cv
708.994 433.603 693.876 450.498 687.349 457.438 cv
681.797 463.34 674.243 471.08 668.276 476.562 cv
661.071 483.181 651.186 491.716 643.477 497.739 cv
637.519 502.395 629.413 508.41 623.103 512.575 cv
614.537 518.228 602.81 525.299 593.927 530.438 cv
588.4 533.637 580.771 537.443 574.997 540.168 cv
568.151 543.398 558.952 547.585 551.878 550.28 cv
543.856 553.335 533.078 557.21 524.879 559.75 cv
516.944 562.208 506.23 565.062 498.136 566.928 cv
483.083 570.399 470.74 572.253 464.723 573.049 cv
449.152 575.108 438.462 575.732 428.578 576.129 cv
418.659 576.526 406.28 576.431 396.271 575.879 cv
386.788 575.356 375.977 574.575 361.217 572.416 cv
353.304 571.258 350.015 570.619 340.251 568.722 cv
336.433 567.979 331.385 566.779 327.6 565.882 cv
312.98 562.416 298.773 557.625 298.639 557.578 cv
284.379 552.672 278.291 550.455 260.942 542.736 cv
252.096 538.801 240.59 532.888 232.216 528.028 cv
cp
clp
232.216 528.028 mo
219.567 520.688 205.23 512.368 179.333 491.632 cv
166.699 481.516 151.494 466.08 140.276 454.412 cv
132.898 446.737 123.776 435.774 117.704 427.03 cv
96.5435 396.554 96.5435 396.554 85.2349 375.14 cv
67.9072 342.328 56.541 303.36 54.0161 290.621 cv
50.374 272.245 46.2695 247.528 44.8906 228.845 cv
43.687 212.536 43.4492 190.568 45.4351 174.335 cv
47.6919 155.888 51.1099 131.253 55.6812 113.239 cv
60.1621 95.5815 68.8516 72.8003 75.5049 55.8413 cv
82.1348 38.9414 103.93 -.316895 122.993 -23.3672 cv
133.387 -35.9346 147.685 -52.4136 159.557 -63.5957 cv
161.98 -65.8779 183.829 -86.2944 204.459 -100.098 cv
221.993 -111.83 258.477 -136.241 315.422 -152.121 cv
362.924 -165.368 411.57 -169.081 460.008 -163.157 cv
530.855 -154.493 578.077 -128.593 598.241 -117.533 cv
545.903 -147.268 483.255 -160.229 415.896 -151.17 cv
483.255 -160.229 545.903 -147.268 598.241 -117.533 cv
611.143 -109.615 628.436 -99.0635 640.323 -89.6924 cv
651.13 -81.1729 669.219 -66.9141 686.339 -48.084 cv
698.04 -35.2148 709.092 -23.0601 724.744 .487305 cv
738.55 21.2578 743.125 30.8345 754.178 53.9727 cv
762.088 70.5317 769.825 93.9312 774.418 111.698 cv
779.078 129.73 782.543 154.413 784.914 172.885 cv
786.07 181.896 786.642 194.06 786.295 203.139 cv
785.575 221.985 784.093 247.151 781.363 265.813 cv
776.344 300.135 761.731 341.14 753.437 358.047 cv
745.506 374.212 734.301 395.542 724.332 410.535 cv
710.109 431.924 696.37 447.847 687.349 457.438 cv
674.159 471.461 662.219 483.094 643.477 497.739 cv
623.615 513.259 612.44 519.726 593.927 530.438 cv
579.626 538.714 555.887 548.753 551.878 550.28 cv
540.605 554.574 523.571 561.063 498.136 566.928 cv
369.673 596.552 269.375 549.593 232.216 528.028 cv
false sop
.521569 .545098 .580392 rgb
f
598.241 -117.533 mo
622.757 -102.486 638.953 -92.5464 666.994 -67.2964 cv
686.339 -48.084 li
693.019 -40.3975 702.059 -30.2539 708.38 -22.271 cv
724.744 .487305 li
729.824 8.82031 736.809 19.813 741.518 28.3608 cv
754.178 53.9727 li
757.761 62.9092 762.797 74.7305 765.986 83.8149 cv
774.418 111.698 li
776.476 121.162 779.513 133.726 781.155 143.27 cv
784.914 172.885 li
785.365 182.777 786.282 195.961 786.3 205.864 cv
785.021 236.16 li
783.686 246.986 782.118 261.46 780.253 272.208 cv
773.824 300.905 li
770.991 310.07 767.49 322.383 764.263 331.416 cv
753.437 358.047 li
749.15 366.619 743.669 378.175 739.017 386.554 cv
724.332 410.535 li
718.623 418.45 711.188 429.142 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
312.482 -151.694 329.903 -157.138 365.734 -162.553 cv
375.385 -163.724 li
378.214 -163.994 381.982 -164.389 384.815 -164.623 cv
393.449 -165.233 li
395.986 -165.354 399.369 -165.546 401.909 -165.634 cv
410.038 -165.836 li
412.452 -165.844 415.672 -165.942 418.085 -165.86 cv
426.122 -165.709 li
428.541 -165.612 431.769 -165.522 434.186 -165.384 cv
442.507 -164.863 li
445.05 -164.646 448.444 -164.384 450.985 -164.141 cv
460.008 -163.157 li
462.817 -162.781 466.568 -162.314 469.372 -161.901 cv
479.641 -160.242 li
482.923 -159.616 487.308 -158.824 490.58 -158.148 cv
502.857 -155.386 li
506.969 -154.311 512.466 -152.934 516.556 -151.779 cv
531.818 -147.083 li
537.459 -145.072 545.005 -142.456 550.589 -140.292 cv
569.516 -132.241 li
578.198 -127.957 589.752 -122.188 598.241 -117.533 cv
545.903 -147.268 483.255 -160.229 415.896 -151.17 cv
415.896 -151.17 li
128.694 -88.3955 175.99 250.406 372.335 373.404 cv
609.873 522.206 827.515 335.308 771.406 109.506 cv
742.936 -5.06934 624.764 -169.042 415.896 -151.17 cv
483.255 -160.229 545.903 -147.268 598.241 -117.533 cv
f
598.241 -117.533 mo
622.108 -103.434 641.01 -90.6943 666.994 -67.2964 cv
686.339 -48.084 li
693.019 -40.3975 702.059 -30.2539 708.38 -22.271 cv
724.744 .487305 li
729.824 8.82031 736.809 19.813 741.518 28.3608 cv
754.178 53.9727 li
757.761 62.9092 762.797 74.7305 765.986 83.8149 cv
774.418 111.698 li
776.476 121.162 779.513 133.726 781.155 143.27 cv
784.914 172.885 li
785.365 182.777 786.282 195.961 786.3 205.864 cv
785.021 236.16 li
783.686 246.986 782.118 261.46 780.253 272.208 cv
773.824 300.905 li
770.991 310.07 767.49 322.383 764.263 331.416 cv
753.437 358.047 li
749.15 366.619 743.669 378.175 739.017 386.554 cv
724.332 410.535 li
718.623 418.45 711.188 429.142 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
312.482 -151.694 329.903 -157.138 365.734 -162.553 cv
375.385 -163.724 li
378.214 -163.994 381.982 -164.389 384.815 -164.623 cv
393.449 -165.233 li
395.986 -165.354 399.369 -165.546 401.909 -165.634 cv
410.038 -165.836 li
412.452 -165.844 415.672 -165.942 418.085 -165.86 cv
426.122 -165.709 li
428.541 -165.612 431.769 -165.522 434.186 -165.384 cv
442.507 -164.863 li
445.05 -164.646 448.444 -164.384 450.985 -164.141 cv
460.008 -163.157 li
462.817 -162.781 466.568 -162.314 469.372 -161.901 cv
479.641 -160.242 li
482.923 -159.616 487.308 -158.824 490.58 -158.148 cv
502.857 -155.386 li
506.969 -154.311 512.466 -152.934 516.556 -151.779 cv
531.818 -147.083 li
537.459 -145.072 545.005 -142.456 550.589 -140.292 cv
569.516 -132.241 li
578.198 -127.957 589.752 -122.188 598.241 -117.533 cv
570.365 -133.37 539.564 -144.449 506.686 -149.977 cv
506.686 -149.977 li
432.531 -161.628 416.042 -151.278 415.896 -151.17 cv
415.896 -151.17 li
257.014 -157.348 97.2554 110.745 307.203 328.45 cv
491.311 519.361 779.024 432.958 780.824 186.218 cv
781.977 28.2803 661.561 -119.394 506.686 -149.977 cv
539.564 -144.449 570.365 -133.37 598.241 -117.533 cv
.517647 .537255 .572549 rgb
f
598.241 -117.533 mo
622.757 -102.486 638.953 -92.5464 666.994 -67.2964 cv
686.339 -48.084 li
693.019 -40.3975 702.059 -30.2539 708.38 -22.271 cv
724.744 .487305 li
729.824 8.82031 736.809 19.813 741.518 28.3608 cv
754.178 53.9727 li
757.761 62.9092 762.797 74.7305 765.986 83.8149 cv
774.418 111.698 li
776.476 121.162 779.513 133.726 781.155 143.27 cv
784.914 172.885 li
785.365 182.777 786.282 195.961 786.3 205.864 cv
785.021 236.16 li
783.686 246.986 782.118 261.46 780.253 272.208 cv
773.824 300.905 li
770.991 310.07 767.49 322.383 764.263 331.416 cv
753.437 358.047 li
749.15 366.619 743.669 378.175 739.017 386.554 cv
724.332 410.535 li
718.623 418.45 711.188 429.142 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
312.482 -151.694 329.903 -157.138 365.734 -162.553 cv
375.385 -163.724 li
378.214 -163.994 381.982 -164.389 384.815 -164.623 cv
393.449 -165.233 li
395.986 -165.354 399.369 -165.546 401.909 -165.634 cv
410.038 -165.836 li
412.452 -165.844 415.672 -165.942 418.085 -165.86 cv
426.122 -165.709 li
428.541 -165.612 431.769 -165.522 434.186 -165.384 cv
442.507 -164.863 li
445.05 -164.646 448.444 -164.384 450.985 -164.141 cv
460.008 -163.157 li
462.817 -162.781 466.568 -162.314 469.372 -161.901 cv
479.641 -160.242 li
482.923 -159.616 487.308 -158.824 490.58 -158.148 cv
502.857 -155.386 li
506.969 -154.311 512.466 -152.934 516.556 -151.779 cv
531.818 -147.083 li
537.459 -145.072 545.005 -142.456 550.589 -140.292 cv
569.516 -132.241 li
578.198 -127.957 589.752 -122.188 598.241 -117.533 cv
580.103 -127.838 560.725 -136.128 540.343 -142.186 cv
539.691 -142.398 538.823 -142.682 538.171 -142.894 cv
265.972 -218.667 122.174 46.7808 248.758 262.196 cv
390.876 504.048 720.944 492.616 775.881 243.939 cv
810.765 86.0376 705.103 -87.1777 540.343 -142.186 cv
560.725 -136.128 580.102 -127.838 598.241 -117.533 cv
.509804 .529412 .564706 rgb
f
741.518 28.3608 mo
758.125 61.959 758.773 63.2705 765.986 83.8149 cv
774.418 111.698 li
776.476 121.162 779.513 133.726 781.155 143.27 cv
784.914 172.885 li
785.365 182.777 786.282 195.961 786.3 205.864 cv
785.021 236.16 li
783.686 246.986 782.118 261.46 780.253 272.208 cv
773.824 300.905 li
770.991 310.07 767.49 322.383 764.263 331.416 cv
753.437 358.047 li
749.15 366.619 743.669 378.175 739.017 386.554 cv
724.332 410.535 li
718.623 418.45 711.188 429.142 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
312.482 -151.694 329.903 -157.138 365.734 -162.553 cv
375.385 -163.724 li
378.214 -163.994 381.982 -164.389 384.815 -164.623 cv
393.449 -165.233 li
395.986 -165.354 399.369 -165.546 401.909 -165.634 cv
410.038 -165.836 li
412.452 -165.844 415.672 -165.942 418.085 -165.86 cv
426.122 -165.709 li
428.541 -165.612 431.769 -165.522 434.186 -165.384 cv
442.507 -164.863 li
445.05 -164.646 448.444 -164.384 450.985 -164.141 cv
460.008 -163.157 li
462.817 -162.781 466.568 -162.314 469.372 -161.901 cv
479.641 -160.242 li
482.923 -159.616 487.308 -158.824 490.58 -158.148 cv
502.857 -155.386 li
506.969 -154.311 512.466 -152.934 516.556 -151.779 cv
531.818 -147.083 li
537.459 -145.072 545.005 -142.456 550.589 -140.292 cv
569.516 -132.241 li
578.198 -127.957 589.752 -122.188 598.241 -117.533 cv
587.715 -123.513 576.772 -128.814 565.458 -133.396 cv
565.458 -133.396 li
303.815 -234.209 126.64 -1.08789 221.027 219.987 cv
333.05 482.367 674.226 522.873 765.89 284.675 cv
778.338 252.328 812.203 136.308 725.378 1.44678 cv
740.006 25.6074 li
741.518 28.3608 li
.501961 .521569 .556863 rgb
f
765.986 83.8149 mo
768.949 92.4414 775.887 112.643 781.155 143.27 cv
784.914 172.885 li
785.365 182.777 786.282 195.961 786.3 205.864 cv
785.021 236.16 li
783.686 246.986 782.118 261.46 780.253 272.208 cv
773.824 300.905 li
770.991 310.07 767.49 322.383 764.263 331.416 cv
753.437 358.047 li
749.15 366.619 743.669 378.175 739.017 386.554 cv
724.332 410.535 li
718.623 418.45 711.188 429.142 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
312.482 -151.694 329.903 -157.138 365.734 -162.553 cv
375.385 -163.724 li
378.214 -163.994 381.982 -164.389 384.815 -164.623 cv
393.449 -165.233 li
395.986 -165.354 399.369 -165.546 401.909 -165.634 cv
410.038 -165.836 li
412.452 -165.844 415.672 -165.942 418.085 -165.86 cv
426.122 -165.709 li
428.541 -165.612 431.769 -165.522 434.186 -165.384 cv
442.507 -164.863 li
445.05 -164.646 448.444 -164.384 450.985 -164.141 cv
460.008 -163.157 li
462.817 -162.781 466.568 -162.314 469.372 -161.901 cv
479.641 -160.242 li
482.923 -159.616 487.308 -158.824 490.58 -158.148 cv
502.857 -155.386 li
506.969 -154.311 512.466 -152.934 516.556 -151.779 cv
531.818 -147.083 li
537.459 -145.072 545.005 -142.456 550.589 -140.292 cv
569.516 -132.241 li
578.198 -127.957 589.752 -122.188 598.241 -117.533 cv
594.244 -119.804 590.187 -121.977 586.071 -124.05 cv
586.071 -124.05 li
324.341 -247.191 127.673 -22.5967 210.182 210.573 cv
303.699 474.854 657.737 536.905 759.197 306.798 cv
802.016 209.688 781.517 118.952 756.779 59.9336 cv
759.542 67.0981 763.492 76.5527 765.986 83.8149 cv
.494118 .513726 .54902 rgb
f
781.155 143.27 mo
786.069 181.992 786.262 183.503 786.3 205.864 cv
785.021 236.16 li
783.686 246.986 782.118 261.46 780.253 272.208 cv
773.824 300.905 li
770.991 310.07 767.49 322.383 764.263 331.416 cv
753.437 358.047 li
749.15 366.619 743.669 378.175 739.017 386.554 cv
724.332 410.535 li
718.623 418.45 711.188 429.142 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
312.482 -151.694 329.903 -157.138 365.734 -162.553 cv
375.385 -163.724 li
378.214 -163.994 381.982 -164.389 384.815 -164.623 cv
393.449 -165.233 li
395.986 -165.354 399.369 -165.546 401.909 -165.634 cv
410.038 -165.836 li
412.452 -165.844 415.672 -165.942 418.085 -165.86 cv
426.122 -165.709 li
428.541 -165.612 431.769 -165.522 434.186 -165.384 cv
442.507 -164.863 li
445.05 -164.646 448.444 -164.384 450.985 -164.141 cv
460.008 -163.157 li
462.817 -162.781 466.568 -162.314 469.372 -161.901 cv
479.641 -160.242 li
482.923 -159.616 487.308 -158.824 490.58 -158.148 cv
502.857 -155.386 li
506.969 -154.311 512.466 -152.934 516.556 -151.779 cv
531.818 -147.083 li
537.459 -145.072 545.005 -142.456 550.589 -140.292 cv
569.516 -132.241 li
575.272 -129.4 583.03 -125.771 588.704 -122.767 cv
566.753 -133.466 li
305.018 -245.558 115.113 -7.43652 206.375 220.068 cv
313.841 487.971 662.279 540.481 762.835 303.93 cv
798.458 220.129 782.722 138.102 770.172 96.6655 cv
777.604 124.977 li
781.155 143.27 li
.490196 .509804 .541176 rgb
f
781.155 143.27 mo
782.935 154.391 786.247 175.092 786.3 205.864 cv
785.021 236.16 li
783.686 246.986 782.118 261.46 780.253 272.208 cv
773.824 300.905 li
770.991 310.07 767.49 322.383 764.263 331.416 cv
753.437 358.047 li
749.15 366.619 743.669 378.175 739.017 386.554 cv
724.332 410.535 li
718.623 418.45 711.188 429.142 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
312.482 -151.694 329.903 -157.138 365.734 -162.553 cv
375.385 -163.724 li
378.214 -163.994 381.982 -164.389 384.815 -164.623 cv
393.449 -165.233 li
395.986 -165.354 399.369 -165.546 401.909 -165.634 cv
410.038 -165.836 li
412.452 -165.844 415.672 -165.942 418.085 -165.86 cv
426.122 -165.709 li
428.541 -165.612 431.769 -165.522 434.186 -165.384 cv
442.507 -164.863 li
445.05 -164.646 448.444 -164.384 450.985 -164.141 cv
460.008 -163.157 li
462.817 -162.781 466.568 -162.314 469.372 -161.901 cv
479.641 -160.242 li
482.923 -159.616 487.308 -158.824 490.58 -158.148 cv
502.857 -155.386 li
506.969 -154.311 512.466 -152.934 516.556 -151.779 cv
531.818 -147.083 li
537.459 -145.072 545.005 -142.456 550.589 -140.292 cv
552.94 -139.337 556.075 -138.064 558.427 -137.109 cv
557.669 -137.424 556.658 -137.844 555.9 -138.159 cv
278.83 -240.97 102.939 10.7832 210.083 244.827 cv
329.379 505.417 672.504 539.705 766.36 300.416 cv
787.023 247.735 790.843 188.873 777.711 125.465 cv
778.744 130.807 780.296 137.898 781.155 143.27 cv
.482353 .501961 .533333 rgb
f
786.3 205.864 mo
784.645 245.121 784.545 247.471 780.253 272.208 cv
773.824 300.905 li
770.991 310.07 767.49 322.383 764.263 331.416 cv
753.437 358.047 li
749.15 366.619 743.669 378.175 739.017 386.554 cv
724.332 410.535 li
718.623 418.45 711.188 429.142 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
312.482 -151.694 329.903 -157.138 365.734 -162.553 cv
375.385 -163.724 li
378.214 -163.994 381.982 -164.389 384.815 -164.623 cv
393.449 -165.233 li
395.986 -165.354 399.369 -165.546 401.909 -165.634 cv
410.038 -165.836 li
412.452 -165.844 415.672 -165.942 418.085 -165.86 cv
426.122 -165.709 li
428.541 -165.612 431.769 -165.522 434.186 -165.384 cv
442.507 -164.863 li
445.05 -164.646 448.444 -164.384 450.985 -164.141 cv
460.008 -163.157 li
462.817 -162.781 466.568 -162.314 469.372 -161.901 cv
479.641 -160.242 li
482.923 -159.616 487.308 -158.824 490.58 -158.148 cv
502.857 -155.386 li
506.969 -154.311 512.466 -152.934 516.556 -151.779 cv
520.839 -150.468 526.55 -148.719 530.833 -147.408 cv
528.233 -148.225 524.766 -149.313 522.166 -150.13 cv
263.163 -224.197 80.8164 29.6909 217.305 274.339 cv
360.151 530.383 710.94 527.564 777.521 269.837 cv
789.667 222.821 785.965 176.542 782.678 153.141 cv
785.647 182.984 li
786.3 205.864 li
.47451 .494118 .52549 rgb
f
786.3 205.864 mo
786.25 217.159 786.156 238.183 780.253 272.208 cv
773.824 300.905 li
770.991 310.07 767.49 322.383 764.263 331.416 cv
753.437 358.047 li
749.15 366.619 743.669 378.175 739.017 386.554 cv
724.332 410.535 li
718.623 418.45 711.188 429.142 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
312.482 -151.694 329.903 -157.138 365.734 -162.553 cv
375.385 -163.724 li
378.214 -163.994 381.982 -164.389 384.815 -164.623 cv
393.449 -165.233 li
395.986 -165.354 399.369 -165.546 401.909 -165.634 cv
410.038 -165.836 li
412.452 -165.844 415.672 -165.942 418.085 -165.86 cv
426.122 -165.709 li
428.541 -165.612 431.769 -165.522 434.186 -165.384 cv
442.507 -164.863 li
445.05 -164.646 448.444 -164.384 450.985 -164.141 cv
460.008 -163.157 li
462.817 -162.781 466.568 -162.314 469.372 -161.901 cv
479.641 -160.242 li
482.923 -159.616 487.308 -158.824 490.58 -158.148 cv
502.857 -155.386 li
504.984 -154.863 li
498.646 -156.379 li
216.785 -214.678 82.9312 71.7266 219.553 292.476 cv
373.817 541.729 718.866 526.949 778.952 268.514 cv
781.854 256.029 788.295 222.353 785.418 179.384 cv
785.683 187.328 786.335 197.916 786.3 205.864 cv
.466667 .486275 .517647 rgb
f
780.253 272.208 mo
771.734 310.232 771.572 310.959 764.263 331.416 cv
753.437 358.047 li
749.15 366.619 743.669 378.175 739.017 386.554 cv
724.332 410.535 li
718.623 418.45 711.188 429.142 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
312.482 -151.694 329.903 -157.138 365.734 -162.553 cv
375.385 -163.724 li
378.214 -163.994 381.982 -164.389 384.815 -164.623 cv
393.449 -165.233 li
395.986 -165.354 399.369 -165.546 401.909 -165.634 cv
410.038 -165.836 li
412.452 -165.844 415.672 -165.942 418.085 -165.86 cv
426.122 -165.709 li
428.541 -165.612 431.769 -165.522 434.186 -165.384 cv
442.507 -164.863 li
445.05 -164.646 448.444 -164.384 450.985 -164.141 cv
460.008 -163.157 li
462.817 -162.781 466.568 -162.314 469.372 -161.901 cv
472.332 -161.425 476.278 -160.79 479.237 -160.313 cv
475.71 -160.865 471.008 -161.602 467.481 -162.154 cv
200.649 -195.026 60.7612 97.543 233.606 326.985 cv
411.555 563.201 750.695 514.527 783.425 248.074 cv
784.936 235.777 785.967 219.262 786.297 206.877 cv
784.938 237.153 li
783.611 247.68 782.328 261.803 780.253 272.208 cv
.458824 .478431 .509804 rgb
f
780.253 272.208 mo
771.734 310.232 771.572 310.959 764.263 331.416 cv
753.437 358.047 li
749.15 366.619 743.669 378.175 739.017 386.554 cv
724.332 410.535 li
718.623 418.45 711.188 429.142 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
312.482 -151.694 329.903 -157.138 365.734 -162.553 cv
375.385 -163.724 li
378.214 -163.994 381.982 -164.389 384.815 -164.623 cv
393.449 -165.233 li
395.986 -165.354 399.369 -165.546 401.909 -165.634 cv
410.038 -165.836 li
412.452 -165.844 415.672 -165.942 418.085 -165.86 cv
426.122 -165.709 li
428.541 -165.612 431.769 -165.522 434.186 -165.384 cv
442.507 -164.863 li
445.05 -164.646 448.444 -164.384 450.985 -164.141 cv
446.354 -164.547 li
170.063 -183.105 51.7568 142.629 254.554 363.537 cv
434.025 559.037 759.563 516.75 785.391 231.331 cv
782.107 261.096 li
780.253 272.208 li
.454902 .470588 .501961 rgb
f
780.253 272.208 mo
778.024 283.853 774.294 303.341 764.263 331.416 cv
753.437 358.047 li
749.15 366.619 743.669 378.175 739.017 386.554 cv
724.332 410.535 li
718.623 418.45 711.188 429.142 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
312.482 -151.694 329.903 -157.138 365.734 -162.553 cv
375.385 -163.724 li
378.214 -163.994 381.982 -164.389 384.815 -164.623 cv
393.449 -165.233 li
395.986 -165.354 399.369 -165.546 401.909 -165.634 cv
410.038 -165.836 li
412.452 -165.844 415.672 -165.942 418.085 -165.86 cv
426.122 -165.709 li
428.61 -165.627 li
428.476 -165.632 li
157.701 -171.968 46.2241 143.468 242.101 361.737 cv
433.697 575.237 747.056 513.735 782.897 255.596 cv
782.104 260.58 781.202 267.252 780.253 272.208 cv
.447059 .462745 .494118 rgb
f
764.263 331.416 mo
750.141 366.154 749.59 367.511 739.017 386.554 cv
724.332 410.535 li
718.623 418.45 711.188 429.142 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
312.482 -151.694 329.903 -157.138 365.734 -162.553 cv
375.385 -163.724 li
378.214 -163.994 381.982 -164.389 384.815 -164.623 cv
393.449 -165.233 li
395.986 -165.354 399.369 -165.546 401.909 -165.634 cv
395.106 -165.313 li
103.475 -146.352 61.458 220.014 267.044 397.646 cv
465.231 568.883 723.324 510.226 778.451 281.417 cv
771.323 309.84 li
764.263 331.416 li
.439216 .458824 .486275 rgb
f
764.263 331.416 mo
761.503 339.03 754.173 359.256 739.017 386.554 cv
724.332 410.535 li
718.623 418.45 711.188 429.142 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
312.482 -151.694 329.903 -157.138 365.734 -162.553 cv
375.385 -163.724 li
375.771 -163.766 li
374.479 -163.625 li
95.1641 -128.832 40.1431 239.846 286.61 425.158 cv
475.377 567.088 711.629 508.629 772.744 304.869 cv
770.2 312.833 767.111 323.556 764.263 331.416 cv
.431373 .45098 .478431 rgb
f
739.017 386.554 mo
719.727 418.056 718.973 419.286 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
314.555 -152.4 327.453 -155.806 353.767 -160.727 cv
345.019 -159.173 li
85.8022 -106.261 23.2427 262.707 312.137 453.403 cv
445.407 541.373 676.669 547.933 764.253 331.441 cv
753.426 358.071 li
749.143 366.636 743.843 378.282 739.017 386.554 cv
.427451 .443137 .470588 rgb
f
739.017 386.554 mo
719.727 418.056 718.973 419.286 705.138 436.8 cv
687.349 457.438 li
680.123 464.684 670.583 474.45 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
302.676 -148.354 313.244 -151.953 333.43 -156.677 cv
331.918 -156.351 li
68.8486 -95.7305 13.5962 279.732 312.558 465.086 cv
458.974 555.863 671.153 534.329 753.645 357.587 cv
740.931 383.102 li
739.017 386.554 li
.419608 .435294 .462745 rgb
f
705.138 436.8 mo
682.386 463.195 680.527 465.352 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
258.295 -131.291 259.27 -131.804 274.438 -138.111 cv
288.05 -143.372 li
294.035 -145.484 li
285.039 -142.277 li
13.5337 -33.1323 52.1909 365.669 346.775 494.615 cv
528.41 574.12 674.11 498.593 737.933 388.473 cv
723.114 412.353 li
717.745 419.704 710.942 429.787 705.138 436.8 cv
.411765 .427451 .454902 rgb
f
705.138 436.8 mo
696.464 447.425 685.668 460.647 663.034 481.357 cv
643.477 497.739 li
634.319 504.407 622.065 513.252 612.583 519.448 cv
593.927 530.438 li
569.462 543.013 567.998 543.766 551.878 550.28 cv
538.416 555.303 li
519.654 561.467 500.253 567.84 464.723 573.049 cv
455.072 574.22 li
452.243 574.49 448.475 574.885 445.642 575.119 cv
437.008 575.729 li
434.471 575.85 431.088 576.039 428.548 576.13 cv
420.419 576.332 li
418.005 576.339 414.786 576.355 412.372 576.355 cv
404.335 576.205 li
401.916 576.107 398.689 576.004 396.271 575.879 cv
387.95 575.358 li
385.407 575.143 382.013 574.882 379.472 574.637 cv
370.449 573.653 li
367.64 573.276 363.89 572.809 361.085 572.396 cv
350.816 570.738 li
347.534 570.111 343.149 569.32 339.877 568.645 cv
327.6 565.882 li
323.489 564.806 317.991 563.43 313.901 562.275 cv
298.639 557.578 li
292.999 555.567 285.452 552.951 279.869 550.788 cv
260.942 542.736 li
252.26 538.452 240.705 532.685 232.216 528.028 cv
211.09 515.076 li
201.43 508.228 188.618 498.982 179.333 491.632 cv
159.221 473.813 li
151.93 466.347 142.109 456.474 135.174 448.674 cv
117.704 427.03 li
112.104 418.914 104.449 408.211 99.2139 399.854 cv
85.2349 375.14 li
81.1465 366.4 75.4502 354.853 71.7466 345.942 cv
61.8315 318.767 li
59.2505 309.471 55.5249 297.146 53.3516 287.748 cv
47.9648 258.658 li
46.2983 242.496 44.6489 220.872 44.1572 204.631 cv
45.4351 174.335 li
46.6309 164.644 47.918 151.675 49.5376 142.045 cv
55.6812 113.239 li
58.4219 104.042 61.7983 91.6855 64.9355 82.6152 cv
75.5049 55.8413 li
79.7031 47.2305 85.0645 35.6245 89.6309 27.2031 cv
104.097 3.04004 li
109.718 -4.9165 117.031 -15.6636 122.993 -23.3672 cv
140.622 -44.2354 li
147.747 -51.52 157.146 -61.3447 164.595 -68.2979 cv
184.104 -84.9736 li
193.118 -91.6714 205.17 -100.572 214.509 -106.809 cv
233.333 -118.162 li
249.171 -126.592 li
246.463 -125.227 li
-10.2661 12.3398 67.0918 415.281 370.005 518.277 cv
505.117 564.218 633.272 530.043 712.819 426.859 cv
710.516 429.842 707.521 433.88 705.138 436.8 cv
.403922 .419608 .447059 rgb
f
546.289 -137.254 mo
797.266 -50.5239 862.179 287.796 648.432 395.103 cv
434.463 502.519 160.289 257.339 229.335 20.3271 cv
269.64 -118.023 405.9 -185.768 546.289 -137.254 cv
.529412 .552941 .588235 rgb
f
578.591 -123.593 mo
832.742 -4.14258 831.491 320.314 632.436 397.489 cv
406.432 485.11 149.03 216.392 244.52 -7.48193 cv
305.264 -149.895 462.078 -178.354 578.591 -123.593 cv
.537255 .556863 .596078 rgb
f
580.08 -121.733 mo
829.971 -3.9043 829.251 315.72 633.801 391.62 cv
414.192 476.903 162.434 218.009 248.971 -4.11719 cv
304.621 -146.96 464.17 -176.387 580.08 -121.733 cv
.545098 .564706 .603922 rgb
f
610.489 -104.75 mo
849.451 40.4014 803.159 357.801 593.1 398.047 cv
370.095 440.773 136.331 165.003 280.82 -52.7305 cv
347.725 -153.55 492.533 -176.399 610.489 -104.75 cv
.552941 .572549 .611765 rgb
f
611.372 -102.918 mo
847.006 40.5337 801.283 353.059 594.114 392.271 cv
349.624 438.548 144.055 137.325 288.616 -55.3789 cv
371.12 -165.359 513.434 -162.543 611.372 -102.918 cv
.556863 .580392 .619608 rgb
f
639.686 -82.7754 mo
847.287 75.9067 790.031 348.893 595.031 386.669 cv
379.627 428.397 152.473 160.969 291.231 -50.5522 cv
360.724 -156.485 523.553 -171.543 639.686 -82.7754 cv
.564706 .588235 .627451 rgb
f
640.078 -80.9263 mo
828.281 60.1362 801.435 340.782 595.884 381.06 cv
383.927 422.593 160.145 159.316 296.527 -49.4951 cv
357.71 -143.171 510.358 -178.155 640.078 -80.9263 cv
.572549 .596078 .635294 rgb
f
640.271 -79.0977 mo
839.398 73.8789 784.005 338.254 596.684 375.384 cv
388.169 416.714 167.848 157.623 301.913 -48.4482 cv
369.061 -151.662 527.172 -165.983 640.271 -79.0977 cv
.580392 .603922 .643137 rgb
f
665.93 -55.8999 mo
851.146 121.432 750.41 374.341 551.117 374.292 cv
318.615 374.235 173.206 81.4463 328.85 -73.2563 cv
425.51 -169.333 579.08 -139.053 665.93 -55.8999 cv
.584314 .607843 .65098 rgb
f
665.689 -54.0723 mo
833.477 107.192 763.117 367.842 551.623 368.497 cv
320.514 369.213 178.575 80.8335 334.66 -72.3115 cv
431.316 -167.148 578.874 -137.512 665.689 -54.0723 cv
.592157 .615686 .658824 rgb
f
665.275 -52.2495 mo
832.966 109.435 764.191 361.674 552.062 362.975 cv
327.154 364.354 188.81 80.1626 340.592 -71.4326 cv
433.063 -163.79 581.125 -133.385 665.275 -52.2495 cv
.6 .623529 .666667 rgb
f
687.868 -26.0767 mo
829.834 146.278 732.594 374.383 525.295 355.285 cv
303.326 334.837 215.68 55.9053 345.111 -69.0049 cv
447.555 -167.871 605.047 -126.626 687.868 -26.0767 cv
.607843 .631373 .67451 rgb
f
687.024 -24.2344 mo
825.966 145.376 729.395 369.028 525.568 349.684 cv
299.089 328.188 218.597 56.2275 353.115 -69.8398 cv
451.978 -162.492 608.438 -120.168 687.024 -24.2344 cv
.615686 .639216 .682353 rgb
f
686.021 -22.3999 mo
822.026 144.44 726.2 363.611 525.811 344.025 cv
292.988 321.27 221.175 36.4766 371.046 -78.6099 cv
473.291 -157.125 614.15 -110.565 686.021 -22.3999 cv
.619608 .647059 .690196 rgb
f
684.857 -20.5747 mo
825.685 152.94 714.504 373.246 504.61 336.589 cv
292.929 299.619 219.883 21.7695 392.955 -88.1235 cv
479.223 -142.9 610.17 -112.598 684.857 -20.5747 cv
.627451 .65098 .694118 rgb
f
683.535 -18.7593 mo
819.103 148.92 707.132 368.488 504.717 331.895 cv
300.726 295.016 229.14 32.0684 392.076 -81.8599 cv
475.339 -140.08 608.812 -111.184 683.535 -18.7593 cv
.635294 .658824 .701961 rgb
f
682.038 -16.9351 mo
825.493 161.385 688.663 361.341 504.808 327.165 cv
292.975 287.788 246.652 23.0098 390.428 -74.7017 cv
505.888 -153.17 630.569 -80.9126 682.038 -16.9351 cv
.643137 .666667 .709804 rgb
f
700.063 12.2231 mo
808.371 190.367 672.223 354.121 504.883 322.399 cv
300.174 283.594 254.919 40.6758 388.438 -67.0181 cv
487.986 -147.313 637.696 -90.354 700.063 12.2231 cv
.647059 .67451 .717647 rgb
f
698.085 14.0908 mo
803.245 188.444 668.82 348.673 504.942 317.6 cv
300.641 278.86 259.969 35.8447 396.917 -66.6724 cv
496.463 -141.192 638.021 -85.4941 698.085 14.0908 cv
.654902 .682353 .72549 rgb
f
695.95 15.9443 mo
797.855 186.175 665.257 342.915 504.984 312.765 cv
284.163 271.224 277.354 10.3921 411.261 -70.4209 cv
516.979 -134.222 641.349 -75.2671 695.95 15.9443 cv
.662745 .690196 .733333 rgb
f
693.658 17.7827 mo
789.438 179.014 659.156 336.472 505.01 307.895 cv
300.746 270.026 270.322 41.4302 411.015 -63.9922 cv
494.269 -126.375 631.629 -86.6338 693.658 17.7827 cv
.670588 .698039 .741176 rgb
f
672.209 -7.13574 mo
794.177 156.716 673.558 326.662 505.019 303.705 cv
324.783 279.155 265.763 53.2231 410.762 -57.1118 cv
494.09 -120.52 615.428 -81.665 672.209 -7.13574 cv
.678431 .701961 .74902 rgb
f
688.333 21.5947 mo
786.561 190.445 640.176 337.433 477.547 292.995 cv
293.731 242.769 291.554 14.9912 433.902 -65.4399 cv
515.61 -111.607 634.503 -70.937 688.333 21.5947 cv
.682353 .709804 .756863 rgb
f
685.324 23.5288 mo
772.737 174.536 650.647 317.489 505.007 296.777 cv
347.684 274.405 267.754 78.0537 409.621 -42.2607 cv
491.544 -111.739 625.53 -79.7661 685.324 23.5288 cv
.690196 .717647 .764706 rgb
f
682.137 25.4409 mo
765.867 170.711 644.485 313.42 504.989 293.313 cv
351.629 271.206 273.817 83.749 410.037 -35.8467 cv
490.85 -106.797 623.085 -77.0127 682.137 25.4409 cv
.698039 .72549 .772549 rgb
f
693.462 57.5439 mo
748.733 201.979 599.303 337.879 454.819 274.578 cv
293.026 203.693 318.846 -2.05664 458.987 -59.1821 cv
546.455 -94.8374 656.023 -40.2925 693.462 57.5439 cv
.705882 .733333 .780392 rgb
f
689.563 59.521 mo
740.961 205.92 598.342 334.542 454.791 271.252 cv
299.498 202.786 325.431 2.2832 460.568 -53.8623 cv
555.065 -93.1226 659.404 -26.3818 689.563 59.521 cv
.709804 .741176 .788235 rgb
f
685.346 61.5322 mo
734.471 204.009 594.397 329.655 454.764 268.365 cv
302.317 201.451 328.871 6.1001 462.13 -48.4409 cv
557.824 -87.6074 656.572 -21.9189 685.346 61.5322 cv
.717647 .745098 .796078 rgb
f
680.931 63.5127 mo
727.893 202.112 590.483 324.802 454.734 265.479 cv
307.049 200.939 334.296 5.2876 463.636 -43.0469 cv
577.287 -85.5181 661.24 5.39893 680.931 63.5127 cv
.72549 .752941 .803922 rgb
f
676.32 65.4624 mo
723.787 207.932 573.656 315.075 454.702 262.592 cv
310.294 198.879 337.771 10.7866 464.932 -38.272 cv
557.27 -73.896 650.447 -12.1943 676.32 65.4624 cv
.733333 .760784 .811765 rgb
f
671.516 67.3789 mo
718.535 206.542 571.554 311.051 454.667 259.706 cv
324.351 202.462 331.579 18.9106 466.211 -33.4287 cv
546.843 -64.7744 642.779 -17.668 671.516 67.3789 cv
.741176 .768627 .819608 rgb
f
666.693 69.1978 mo
711.865 204.91 568.243 306.87 454.63 256.821 cv
328.587 201.296 336.63 22.626 467.476 -28.5176 cv
537.104 -55.7334 637.095 -19.7271 666.693 69.1978 cv
.745098 .776471 .827451 rgb
f
661.805 70.9448 mo
706.318 204.224 565.927 303.535 454.591 253.936 cv
340.978 203.322 330.34 28.9492 468.723 -23.5405 cv
536.397 -49.2095 633.348 -14.2559 661.805 70.9448 cv
.752941 .784314 .835294 rgb
f
656.746 72.6597 mo
700.613 203.345 563.56 300.054 454.549 251.052 cv
341.816 200.377 331.42 28.4131 468.761 -17.8442 cv
556.222 -47.3018 634.437 6.19824 656.746 72.6597 cv
.760784 .792157 .843137 rgb
f
658.557 107.272 mo
665.516 206.58 597.132 238.59 574.661 249.109 cv
494.985 286.406 436.698 236.494 417.544 220.093 cv
324.956 140.809 375.866 -7.45361 500.081 -20.2715 cv
587.573 -29.2998 653.821 39.6997 658.557 107.272 cv
.768627 .796078 .85098 rgb
f
651.503 100.841 mo
674.279 200.409 567.877 297.185 454.458 245.287 cv
450.35 243.407 413.406 225.306 381.871 169.43 cv
380.021 166.153 370.948 147.533 373.964 102.662 cv
375.846 74.665 402.21 10.0078 471.693 -11.1509 cv
502.142 -20.4233 621.895 -28.5898 651.503 100.841 cv
.772549 .803922 .858824 rgb
f
649.772 109.794 mo
659.259 184.443 599.694 228.917 599.085 229.306 cv
560.564 253.865 560.564 253.865 504.322 257.247 cv
504.044 257.264 459.591 246.703 448.08 238.386 cv
308.365 137.442 398.481 15 472.529 -7.51611 cv
543.322 -29.0425 638.169 18.4854 649.772 109.794 cv
.780392 .811765 .866667 rgb
f
646.064 110.802 mo
654.764 183.53 599.355 224.896 598.791 225.269 cv
561.618 249.735 560.247 249.857 525.143 252.977 cv
481.184 256.883 456.824 241.418 452.387 238.278 cv
301.938 131.812 410.104 15.354 473.357 -3.85156 cv
542.847 -24.9507 635.381 21.4873 646.064 110.802 cv
.788235 .819608 .87451 rgb
f
642.292 111.794 mo
653.153 208.628 539.141 304.265 431.704 219.384 cv
322.434 133.055 405.097 -4.25049 505.834 -4.37793 cv
548.867 -4.43262 633.071 29.5879 642.292 111.794 cv
.796078 .827451 .882353 rgb
f
638.456 112.772 mo
650.303 225.921 510.194 303.271 415.707 204.146 cv
341.705 126.513 399.015 -1.51367 507.232 -.312988 cv
563.765 .314453 631.561 46.9106 638.456 112.772 cv
.811765 .839216 .890196 rgb
f
634.557 113.734 mo
646.086 232.292 502.816 292.286 418.644 204.148 cv
345.095 127.135 401.431 1.67578 508.613 3.7876 cv
569.048 4.97852 629.077 57.3828 634.557 113.734 cv
.819608 .847059 .894118 rgb
f
630.595 114.681 mo
635.862 172.615 609.579 214.382 552.477 238.823 cv
529.858 248.504 468.103 252.765 421.582 204.143 cv
347.068 126.265 402.349 3.18115 509.865 7.57666 cv
575.518 10.2607 626.185 66.1768 630.595 114.681 cv
.823529 .85098 .898039 rgb
f
626.569 115.612 mo
634.42 200.071 572.611 227.149 552.3 236.048 cv
537.855 242.376 473.835 255.506 424.521 204.131 cv
344.491 120.758 413.396 4.20313 510.836 10.5669 cv
580.402 15.1104 622.748 74.4922 626.569 115.612 cv
.827451 .854902 .901961 rgb
f
622.482 116.527 mo
626.435 156.855 621.165 202.264 552.116 233.274 cv
534.121 241.356 471.15 249.457 427.461 204.112 cv
347.686 121.314 415.997 5.05664 511.799 13.5747 cv
588.472 20.3916 619.479 85.8804 622.482 116.527 cv
.831373 .858824 .901961 rgb
f
619.247 117.23 mo
631.473 197.876 543.41 269.592 454.008 222.467 cv
451.223 220.999 385.917 185.571 395.632 103.298 cv
397.981 83.4023 425.046 30.7446 478.093 18.4985 cv
512.794 10.4883 605.734 28.0952 619.247 117.23 cv
.835294 .858824 .905882 rgb
f
616.789 117.752 mo
626.283 181.428 586.692 206.303 551.762 228.251 cv
551.387 228.486 507.851 248.455 453.952 220.065 cv
447.19 216.504 388.177 182.972 398.052 103.343 cv
400.365 84.6895 427.728 32.8496 478.62 21.1426 cv
520.806 11.438 605.307 40.7461 616.789 117.752 cv
.839216 .862745 .905882 rgb
f
614.367 152.766 mo
611.591 164.999 604.881 181.152 596.707 190.667 cv
594.153 193.641 584.252 202.159 551.584 225.857 cv
539.748 234.443 517.979 232.038 503.407 233.261 cv
487.888 234.564 466.786 226.402 453.894 217.665 cv
425.111 198.156 411.432 172.76 409.966 169.929 cv
377.534 107.246 416.794 67.1606 442.774 40.6353 cv
446.881 36.4409 478.926 23.8164 479.143 23.7988 cv
514.145 20.896 514.145 20.896 544.893 32.167 cv
608.074 55.3267 621.318 122.142 614.367 152.766 cv
.843137 .866667 .909804 rgb
f
611.484 153.318 mo
611.43 153.542 596.451 186.957 592.729 191.303 cv
582.509 203.234 564.151 214.285 551.401 223.464 cv
539.542 232.002 517.873 229.983 503.311 231.198 cv
487.771 232.494 466.773 223.97 453.835 215.267 cv
428.854 198.461 412.393 170.209 412.251 169.941 cv
378.091 104.992 430.288 13.9644 515.56 25.7759 cv
576.289 34.188 624.7 98.5552 611.484 153.318 cv
f
608.576 153.863 mo
591.528 221.814 527.366 227.133 503.212 229.135 cv
487.652 230.425 466.761 221.537 453.774 212.869 cv
433.924 199.62 414.677 170.209 414.538 169.949 cv
380.189 105.685 431.591 16.4902 516.477 28.8682 cv
570.423 36.7339 623.534 94.2441 608.576 153.863 cv
.847059 .870588 .909804 rgb
f
605.643 154.401 mo
588.541 220.037 526.476 225.149 503.111 227.074 cv
487.53 228.357 466.749 219.104 453.712 210.474 cv
437.007 199.415 416.962 170.205 416.825 169.954 cv
382.209 106.35 432.797 18.9961 517.385 31.9761 cv
560.524 38.5957 584.575 71.958 596.134 87.9907 cv
602.875 97.3428 611.527 131.817 605.643 154.401 cv
.85098 .87451 .913725 rgb
f
602.684 154.931 mo
585.709 218.246 527.754 222.988 503.007 225.014 cv
487.404 226.291 466.736 216.67 453.648 208.08 cv
444.146 201.844 419.249 170.197 419.114 169.953 cv
387.108 112.367 428.356 20.6191 518.285 35.1001 cv
519.184 35.2451 561.977 54.3545 562.201 54.5142 cv
567.608 58.3608 578.849 67.8936 593.374 88.5156 cv
610.931 113.444 602.787 154.546 602.684 154.931 cv
f
599.7 155.454 mo
582.948 216.446 526.854 221.007 502.9 222.954 cv
487.276 224.224 466.724 214.235 453.583 205.688 cv
449.217 202.849 421.536 170.184 421.403 169.949 cv
416.599 161.482 394.332 116.95 427.831 71.6064 cv
461.882 25.5161 516.728 37.2598 519.046 37.7822 cv
519.265 37.832 560.836 56.9507 565.798 60.5054 cv
575.016 67.1084 584.178 79.6816 590.589 89.0337 cv
609.278 116.301 599.805 155.074 599.7 155.454 cv
.854902 .878431 .917647 rgb
f
596.691 155.969 mo
588.467 185.206 561.792 203.649 550.402 211.525 cv
538.429 219.805 517.301 219.724 502.791 220.896 cv
487.387 222.14 467.249 211.997 454.257 203.628 cv
442.786 196.238 430.522 181.755 423.693 169.94 cv
415.005 154.907 398.292 115.229 430.67 71.5757 cv
442.758 55.2769 446.822 52.1211 482.144 39.7612 cv
492.802 36.0317 508.792 37.7832 519.778 40.3955 cv
533.537 43.6675 550.675 52.8032 562.138 61.0879 cv
565.535 63.5435 587.65 89.353 587.778 89.5439 cv
606.633 117.876 597.765 152.153 596.691 155.969 cv
f
593.657 156.476 mo
593.322 157.64 585.049 185.246 550.186 209.143 cv
538.188 217.367 517.178 217.675 502.679 218.838 cv
502.496 218.853 460.611 205.109 453.437 200.534 cv
443.037 193.901 432.19 180.586 425.984 169.927 cv
412.824 147.322 403.446 111.902 433.51 71.5371 cv
451.37 47.5571 488.769 35.2969 520.503 43.019 cv
532.844 46.0225 548.264 54.1572 558.524 61.6445 cv
567.924 68.5049 578.637 80.2671 584.942 90.0469 cv
602.316 116.993 596.825 145.479 593.657 156.476 cv
.858824 .878431 .917647 rgb
f
590.599 156.976 mo
590.518 157.253 581.538 185.313 549.964 206.762 cv
537.942 214.929 517.053 215.628 502.564 216.782 cv
502.394 216.796 465.89 205.728 453.356 197.82 cv
443.836 191.813 433.971 179.62 428.276 169.91 cv
399.471 120.793 427.229 83.6846 436.351 71.4902 cv
440.152 66.4077 449.056 54.5049 482.937 44.1904 cv
493.933 40.8433 510.068 42.8779 521.222 45.6533 cv
522.174 45.8906 614.511 75.8774 590.599 156.976 cv
.858824 .882353 .917647 rgb
f
588.265 152.547 mo
588.234 152.808 580.351 182.201 549.737 204.383 cv
537.977 212.904 516.882 213.14 502.447 214.727 cv
502.021 214.774 453.491 208.693 430.569 169.889 cv
401.804 121.192 428.966 85.0444 439.192 71.4365 cv
450.354 56.582 483.008 46.5059 483.329 46.416 cv
494.496 43.2935 510.697 45.4399 521.935 48.2979 cv
555.139 56.7427 578.982 90.6943 579.196 91.0303 cv
592.902 112.571 592.552 115.59 588.265 152.547 cv
.862745 .882353 .921569 rgb
f
586.515 143.782 mo
586.101 148.009 587.084 154.149 585.016 157.858 cv
578.104 170.251 568.274 187.196 557.293 196.183 cv
550.173 202.009 546.251 205.218 502.327 212.673 cv
501.927 212.741 454.119 205.591 432.862 169.863 cv
404.132 121.575 430.691 86.3965 442.033 71.3745 cv
450.573 60.0635 483.414 48.7261 483.718 48.6494 cv
495.057 45.7764 511.319 48.0117 522.64 50.9526 cv
552.633 58.7437 576.063 91.1865 576.286 91.5107 cv
589.722 111.037 588.783 120.623 586.515 143.782 cv
.862745 .886275 .921569 rgb
f
584.669 135.071 mo
581.969 163.775 581.969 163.775 553.261 196.655 cv
546.935 203.901 531.998 203.95 522.629 206.128 cv
509.889 209.09 491.25 207.674 479.169 202.662 cv
455.074 192.664 446.958 189.296 435.155 169.833 cv
406.265 122.188 432.343 87.8208 444.875 71.3047 cv
448.998 65.8706 483.817 50.9536 484.104 50.8892 cv
495.614 48.2944 511.936 50.5869 523.339 53.6172 cv
553.827 61.7183 587.981 99.8584 584.669 135.071 cv
.866667 .886275 .921569 rgb
f
582.727 126.417 mo
581.874 136.107 583.709 149.896 579.542 158.687 cv
573.253 171.957 563.29 192.911 549.219 197.112 cv
535.274 201.277 516.217 212.024 502.08 208.569 cv
490.787 205.81 452.753 194.858 437.449 169.798 cv
408.577 122.522 433.752 89.5195 447.276 71.7891 cv
447.558 71.4199 483.725 53.29 484.486 53.1362 cv
496.152 50.7808 512.548 53.165 524.032 56.292 cv
551.859 63.8691 584.773 103.191 582.727 126.417 cv
.866667 .890196 .92549 rgb
f
576.778 159.092 mo
571.58 171.599 560.168 187.216 548.729 194.467 cv
545.901 196.26 507.868 206.059 501.952 206.52 cv
501.574 206.549 455.41 195.231 439.744 169.76 cv
410.869 122.812 438.437 86.8696 447.496 75.0586 cv
448.814 73.3403 481.644 56.0615 484.866 55.3901 cv
496.618 52.9429 513.155 55.752 524.718 58.9761 cv
545.893 64.8809 597.126 110.133 576.778 159.092 cv
.870588 .890196 .92549 rgb
f
573.995 159.491 mo
569.177 170.838 558.887 185.136 548.425 191.656 cv
536.12 199.326 516.278 203.351 501.821 204.471 cv
501.457 204.5 455.505 191.458 442.038 169.717 cv
413.172 123.113 439.17 89.4146 447.713 78.3408 cv
449.897 75.5107 480.412 58.688 485.243 57.6514 cv
497.08 55.1113 513.755 58.3477 525.396 61.6699 cv
529.955 62.9707 598.751 101.181 573.995 159.491 cv
f
571.193 159.884 mo
566.775 170.078 557.591 183.049 548.114 188.849 cv
545.667 190.347 503.58 202.653 501.688 202.424 cv
498.597 202.049 452.974 179.107 452.74 178.903 cv
443.62 170.944 438.279 154.511 433.873 143.237 cv
424.477 119.195 438.229 89.9316 447.928 81.6353 cv
454.634 75.8989 480.347 61.0835 485.617 59.9189 cv
497.539 57.2856 514.349 60.9531 526.069 64.3735 cv
529.692 65.4312 562.611 93.3843 562.713 93.5991 cv
567.08 102.841 574.308 115 575.604 125.139 cv
576.938 135.561 575.371 150.243 571.193 159.884 cv
.87451 .894118 .92549 rgb
f
568.373 160.271 mo
564.372 169.32 556.289 180.969 547.795 186.044 cv
535.338 193.489 515.83 202.752 501.542 200.211 cv
485.454 197.35 464.568 187.387 452.645 176.214 cv
439.265 163.676 433.315 136.493 433.283 136.244 cv
430.732 116.777 439.466 91.3398 448.139 84.9419 cv
472.957 66.6328 485.887 62.2163 485.987 62.1938 cv
526.778 67.2681 li
538.438 72.5215 554.77 82.3159 559.991 93.9897 cv
564.174 103.344 571.879 115.338 573.165 125.504 cv
574.486 135.95 572.63 150.642 568.373 160.271 cv
.87451 .894118 .929412 rgb
f
565.537 160.65 mo
561.971 168.563 554.979 178.894 547.47 183.244 cv
534.921 190.513 515.632 200.493 501.38 197.817 cv
485.299 194.798 464.508 184.692 452.547 173.527 cv
443.578 165.156 435.413 136.458 435.381 136.215 cv
435.335 135.861 435.104 97.7197 448.348 88.2598 cv
448.659 88.0376 479.547 66.0117 486.355 64.4751 cv
488.289 64.0386 525.232 69.3438 527.532 70.3882 cv
537.963 75.125 549.999 85.5029 557.249 94.3735 cv
562.649 100.981 565.181 112.639 568.493 120.505 cv
574.566 134.931 565.639 160.423 565.537 160.65 cv
.878431 .894118 .929412 rgb
f
562.693 161.023 mo
559.588 167.812 553.651 176.801 547.136 180.447 cv
534.49 187.522 515.428 198.245 501.214 195.425 cv
485.144 192.236 464.447 181.999 452.447 170.845 cv
449.516 168.12 437.512 136.418 437.48 136.182 cv
437.436 135.843 437.609 99.1426 448.553 91.5894 cv
483.454 67.5029 485.498 67.0396 486.72 66.7627 cv
488.206 66.4258 526.267 72.6147 528.276 73.52 cv
537.502 77.6768 548.373 86.6875 554.487 94.751 cv
560.713 102.96 564.469 116.633 568.24 126.221 cv
572.11 136.06 567.092 151.409 562.693 161.023 cv
.878431 .898039 .929412 rgb
f
559.844 161.387 mo
557.213 167.063 552.304 174.688 546.795 177.653 cv
534.045 184.516 515.216 196.009 501.045 193.035 cv
485.694 189.813 465.913 180.066 454.401 169.412 cv
450.329 165.643 439.609 136.368 439.58 136.145 cv
439.538 135.822 439.945 100.791 448.756 94.9307 cv
454.774 90.9277 462.925 85.7817 468.916 81.7373 cv
474.424 78.0186 480.601 70.5322 487.081 69.0571 cv
487.395 68.9858 528.541 76.4497 529.011 76.6636 cv
548.151 85.3555 553.302 92.3521 565.755 126.571 cv
569.378 136.527 564.3 151.775 559.844 161.387 cv
f
556.989 161.744 mo
554.842 166.314 550.936 172.551 546.447 174.863 cv
533.584 181.488 514.997 193.787 500.873 190.646 cv
486.98 187.558 468.985 178.925 458.519 169.282 cv
450.311 161.718 443.144 147.17 441.68 136.104 cv
441.649 135.872 441.662 108.554 448.956 98.2827 cv
457.095 86.8228 473.735 74.561 487.479 71.6143 cv
500.106 68.9072 517.699 75.1426 529.737 79.8184 cv
536.665 82.5093 544.39 89.5981 548.928 95.4829 cv
555.257 103.689 562.003 116.629 563.254 126.917 cv
564.536 137.455 561.501 152.135 556.989 161.744 cv
.882353 .898039 .933333 rgb
f
554.127 162.093 mo
552.475 165.564 549.545 170.386 546.092 172.078 cv
533.107 178.437 515.124 189.209 500.696 188.261 cv
487.946 187.423 473.225 176.292 462.636 169.138 cv
458.26 166.182 454.528 159.782 451.827 155.243 cv
448.636 149.88 444.09 142.293 443.779 136.061 cv
443.766 135.788 447.381 103.523 449.153 101.646 cv
458.924 91.2915 473.957 77.1953 487.878 74.2148 cv
500.63 71.4854 518.228 78.4478 530.454 82.9854 cv
536.157 85.1016 542.477 90.979 546.139 95.8364 cv
552.396 104.136 559.495 116.938 560.739 127.257 cv
562.012 137.817 558.697 152.487 554.127 162.093 cv
.882353 .901961 .933333 rgb
f
551.26 162.434 mo
550.112 164.815 548.129 168.187 545.729 169.296 cv
532.614 175.355 514.937 186.762 500.517 185.878 cv
489.211 185.185 475.847 175.731 466.752 168.98 cv
460.815 164.573 455.333 155.928 451.583 149.556 cv
438.848 127.908 451.604 103.205 451.759 103 cv
459.889 92.249 475.086 79.6079 488.274 76.8237 cv
501.158 74.1035 518.739 81.7959 531.161 86.1626 cv
535.625 87.7319 540.539 92.3706 543.343 96.1821 cv
549.521 104.58 556.979 117.239 558.215 127.591 cv
559.48 138.175 555.888 152.832 551.26 162.434 cv
.886275 .901961 .933333 rgb
f
548.387 162.767 mo
544.401 170.933 500.703 183.519 500.334 183.497 cv
493.025 183.082 468.335 174.912 451.332 143.888 cv
442.557 127.878 455.979 103.068 456.136 102.857 cv
463.361 93.2451 476.89 81.8711 488.666 79.4404 cv
501.686 76.7529 519.231 85.1938 531.859 89.3516 cv
535.067 90.4077 538.574 93.7739 540.541 96.5195 cv
546.634 105.02 554.457 117.533 555.687 127.918 cv
556.943 138.526 553.073 153.168 548.387 162.767 cv
f
545.509 163.092 mo
544.474 165.185 500.502 181.138 500.147 181.119 cv
491.881 180.685 481.664 174.299 475.43 168.853 cv
466.592 161.131 456.365 148.716 451.071 138.242 cv
447.462 131.101 460.35 102.919 460.512 102.698 cv
466.768 94.1836 478.696 84.1543 489.053 82.0645 cv
502.21 79.4102 519.705 88.6504 532.547 92.5508 cv
534.481 93.1382 536.578 95.1909 537.733 96.8486 cv
543.731 105.457 551.93 117.819 553.153 128.24 cv
554.4 138.871 550.252 153.496 545.509 163.092 cv
.886275 .905882 .933333 rgb
f
544.162 157.91 mo
542.991 160.063 540.765 162.8 538.548 163.845 cv
527.322 169.136 512.351 179.393 499.958 178.744 cv
492.982 178.378 484.229 173.149 479.086 168.422 cv
469.898 159.976 455.242 148.134 453.253 135.813 cv
451.567 125.369 458.773 111.157 464.886 102.521 cv
470.145 95.0928 480.507 86.457 489.437 84.6963 cv
489.751 84.6343 532.568 94.0234 534.92 97.1694 cv
541.223 105.602 549.03 118.147 550.614 128.555 cv
551.97 137.469 548.47 149.989 544.162 157.91 cv
.890196 .905882 .937255 rgb
f
543.189 151.28 mo
532.787 170.905 500.057 176.386 499.764 176.371 cv
494.23 176.075 487.198 172.037 483.191 168.207 cv
474.164 159.578 459.153 148.023 457.203 135.688 cv
455.541 125.177 463.306 111.149 469.257 102.327 cv
473.525 95.999 482.324 88.8018 489.815 87.3359 cv
501.977 84.9561 517.994 93.938 529.79 97.7319 cv
531.537 98.2939 533.275 100.284 534.451 101.692 cv
540.293 108.692 546.488 119.883 548.07 128.863 cv
549.265 135.641 546.412 145.199 543.189 151.28 cv
f
542.175 144.678 mo
534.909 158.398 511.415 174.567 499.567 174 cv
495.471 173.804 490.192 170.88 487.293 167.978 cv
478.461 159.138 463.064 147.898 461.151 135.549 cv
459.513 124.97 467.871 111.143 473.625 102.115 cv
476.935 96.9204 484.136 91.1172 490.191 89.9824 cv
500.03 88.1392 513.295 94.4507 522.456 98.4868 cv
527.407 100.669 532.417 106.31 536.144 110.232 cv
543.372 117.836 547.085 135.407 542.175 144.678 cv
.890196 .909804 .937255 rgb
f
541.121 138.105 mo
535.701 148.423 523.28 158.812 514.192 166.11 cv
510.491 169.081 504.108 171.865 499.368 171.633 cv
496.708 171.502 493.221 169.67 491.392 167.735 cv
482.8 158.65 466.976 147.758 465.099 135.396 cv
463.482 124.747 472.477 111.14 477.988 101.886 cv
480.384 97.8623 485.96 93.5049 490.562 92.6367 cv
505.5 89.8184 516.962 100.126 537.77 118.838 cv
542.132 122.761 543.849 132.911 541.121 138.105 cv
.894118 .909804 .937255 rgb
f
540.027 131.563 mo
533.245 144.583 516.803 156.791 506.013 166.746 cv
504.404 168.231 501.351 169.378 499.164 169.268 cv
493.719 168.995 469.093 135.558 469.044 135.23 cv
467.449 124.509 477.138 111.143 482.347 101.638 cv
483.885 98.8311 487.783 95.8901 490.929 95.2983 cv
496.049 94.3345 503.502 96.7393 507.693 99.835 cv
517.835 107.326 530.327 118.676 539.326 127.507 cv
540.208 128.372 540.598 130.467 540.027 131.563 cv
f
498.915 166.425 mo
486.722 165.768 474.748 147.133 472.987 135.05 cv
471.414 124.255 481.873 111.155 486.701 101.373 cv
487.46 99.835 489.606 98.2827 491.292 97.9668 cv
494.037 97.4517 498.031 98.7607 500.271 100.429 cv
511.27 108.615 534.126 116.665 534.81 130.359 cv
535.571 145.605 514.158 167.247 498.915 166.425 cv
.894118 .909804 .941176 rgb
f
498.398 160.714 mo
488.331 160.161 478.344 144.84 476.927 134.857 cv
476.884 134.55 490.247 100.904 491.65 100.642 cv
492.01 100.575 492.545 100.734 492.827 100.969 cv
503.5 109.877 527.394 117.163 528.081 131.048 cv
528.703 143.623 510.969 161.404 498.398 160.714 cv
.898039 .913725 .941176 rgb
f
497.862 155.021 mo
489.915 154.578 482.036 142.522 480.864 134.65 cv
479.54 125.748 483.74 109.138 492.48 106.99 cv
503.544 104.272 520.824 120.312 521.326 131.695 cv
521.763 141.611 507.772 155.573 497.862 155.021 cv
f
497.307 149.348 mo
491.473 149.076 485.671 140.204 484.798 134.429 cv
483.806 127.866 486.905 115.548 493.367 114.031 cv
501.536 112.113 514.224 123.913 514.547 132.298 cv
514.827 139.566 504.573 149.687 497.307 149.348 cv
f
496.732 143.695 mo
493.01 143.521 489.289 137.879 488.728 134.194 cv
488.087 129.986 490.08 122.08 494.225 121.114 cv
499.458 119.895 507.58 127.488 507.747 132.858 cv
507.891 137.491 501.363 143.911 496.732 143.695 cv
.901961 .917647 .941176 rgb
f
496.139 138.063 mo
494.522 137.987 492.899 135.546 492.653 133.946 cv
492.372 132.11 493.244 128.656 495.053 128.238 cv
497.334 127.711 500.862 131.036 500.928 133.376 cv
500.984 135.386 498.147 138.157 496.139 138.063 cv
.901961 .917647 .945098 rgb
f
grestore % PSGState
2 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
14.582 205.25 mo
883.526 205.25 li
false sop
.137255 .121569 .12549 rgb
@
888.25 203.201 mo
884.943 202.203 882.794 201.283 880.142 200.216 cv
880.142 210.306 li
881.091 209.855 884.943 208.322 888.25 207.324 cv
891.789 206.253 894.998 205.523 897.079 205.261 cv
894.998 205 891.789 204.269 888.25 203.201 cv
cp
f
4 lw
418.694 205.25 mo
418.694 779.702 li
@
418.694 802.296 mo
405.686 770.457 li
418.694 778.013 li
431.7 770.457 li
418.694 802.296 li
cp
f
418.694 205.25 mo
806.25 205.25 li
@
828.844 205.25 mo
797.005 218.257 li
804.561 205.25 li
797.005 192.243 li
828.844 205.25 li
cp
f
423.348 212.138 mo
813.869 790.174 li
.223529 .439216 .717647 rgb
@
826.518 808.896 mo
797.915 789.795 li
812.924 788.774 li
819.471 775.232 li
826.518 808.896 li
cp
f
2 lw
[12 12 ] 0 dsh
420.957 572.049 mo
590.507 458.748 li
.137255 .121569 .12549 rgb
@
590.317 461.071 mo
590.317 208.976 li
@
1 lw
[12 9 ] 0 dsh
418.694 806.231 mo
824.27 806.231 li
@
824.27 806.231 mo
824.27 205.25 li
@
[] 0 dsh
758.507 344.866 mo
744.665 339.832 657.617 387.404 564.076 451.122 cv
470.537 514.839 405.93 570.572 419.771 575.606 cv
433.612 580.64 520.661 533.067 614.2 469.35 cv
707.738 405.634 772.347 349.9 758.507 344.866 cv
cp
@
4 lw
789.016 205.25 mo
789.016 409.772 623.217 575.571 418.694 575.571 cv
214.171 575.571 48.3721 409.772 48.3721 205.25 cv
48.3721 .726563 214.171 -165.072 418.694 -165.072 cv
623.217 -165.072 789.016 .726563 789.016 205.25 cv
cp
@
3 lw
421.493 574.383 mo
435.334 579.416 522.384 531.844 615.923 468.126 cv
709.461 404.41 774.069 348.677 760.229 343.643 cv
@
8 lw
418.694 206.25 mo
418.694 540.25 li
1 1 0 rgb
@
397.957 524.521 mo
418.694 533.329 li
439.437 524.521 li
418.694 573.678 li
397.957 524.521 li
cp
f
5 lw
421.167 205.25 mo
566.25 205.25 li
1 0 0 rgb
@
594.492 205.25 mo
554.693 221.509 li
564.139 205.25 li
554.693 188.992 li
594.492 205.25 li
cp
f
.13725 .12157 .12549 rgb
%ADOBeginSubsetFont: Myriad-Roman Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /Myriad-Roman def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1992, 1994 Adobe Systems Incorporated.  All Rights Reserved.Myriad is a trademark of Adobe Systems Incorporated may be registered in certain jurisdictions.) def
/Weight (Regular) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 120 /x put
def
/UniqueID 41987 def
/FontBBox {-46 -250 1126 831} def
end
systemdict begin
dup /Private
16 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 0 674 685 484 496 650 661 710 721] def
/OtherBlues [261 266 -200 -194 -221 -212] def
/FamilyBlues [-11 0 674 685 484 496 650 661 710 721] def
/FamilyOtherBlues [261 266 -200 -194 -221 -212] def
/BlueScale 0.0604583 def
/BlueShift 7.1 def
/StdHW [67] def
/StdVW [88] def
/StemSnapH [67 73] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
7 dict dup begin
/a <1C60D8A8C9B759462DD3040289328E0F683F711B3894968D96516BD44867
7C9FAA746D5350AF3B117B4AC08A2D715CA85E807BE8FDCC75A5D4F542F38F55
0E802EEAE548F2FF8506F9AD572646E7A47C57311AB7620557585596A5F6F3A5
51832222EBEC5B08135E3A2160C305A55CF05AE83FFE02EF308999F5FC49FAB1
E4709190FF594124A9626360300AD05498BBB95EF9BD55E7C80D9F3F68B61D3D
CA5974A75DB1D3D3AE73A6A3AA> |-
/b <1C60D8A8C9B7E2CE04450FE67267486674AF8C0F70BF9FE7EBEF3CCBFD60
FE21DD3835CA061B8556F5B08C11724582E14129531E0ADFE9B1341AA1586A74
E953908F695DF17481D304283D3EC8B4FB105E0A182EB4B4B988C16515939A78
A9BE5BF78590194367D3BEFBA6EAE7272EC593C249DD5CA5D2A9503802028F70
CCADDFDC7FB8262DD25D4B1A63222F5A1ED774D199B349DF11160F7E12994460
971E902615F09315> |-
/c <1C60D8A8C9B77BBBEC320BF45033662E0846C6D7DAF600F43B542B038E20
8CBA971F48BE27B2158BB1E2C3D179B771A57E9F9ECF2E72DD7D02E301A82C16
6FDB33A21A23FED2727F41D73D06BBBFA1087DD1> |-
/d <1C60D8A8C9B7E7C1E9415B382C0EF9C60E6021BB1E95C03A2DD89F360B56
63D6551C4C39C5506F0B5916330D8761AFD7B1B7AFD2B01F3C1D7C981BD3EEF9
982FF295D03CBFC77917EEBB4B17167D69AC6077ECAAE3BA44137709C4EEBB4C
2CD3A2B93DCED388AD49D33DBB886AABFB9E38F70AFD27773BBB85AE81FFFF3F
F60B6F91C615C0CD7E0629A20701802295AB92AB907BAA81A72F666D01972B6C
079C75CFEFD41DFFB9EA> |-
/e <1C60D8A8C9B7A66FB4E9209DE48656974FCFF6918874F1136043F0EE8172
F4D638772B3B7F4B5346ABF7A80D482099561C97EACC6F77A33F735C7F526F3A
D9C6597D65CC687E05FF3F3D831F11A36D65E3B2668B0C94721274A694DE1BF9
4BC567A2314B6F8010DDBF586B4DD5CDAA4D122F00> |-
/x <1C60D8A8C9B74CDDFD10D5FAA113AA85554B21944464AFD1B3751649A117
7E4D7315A00174FB11ABCC0416A1CEC561D8F56F441A29946A3C2F85FC7B5140
8D59F42F44BC1CF8A39531C523628F595BBA584EE35459E174065775D39DC04B
03693F> |-
/.notdef <1C60D8A8C9B896187A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/OLKCBK+Myriad-Roman /Myriad-Roman findfont def
/OLKCBK+Myriad-Roman*1 
[
97{/.notdef}repeat /a /b /c /d /e 18{/.notdef}repeat /x 
135{/.notdef}repeat
] OLKCBK+Myriad-Roman nfnt
OLKCBK+Myriad-Roman*1  [12 0 0 -12 0 0 ]mfnt sfnt
388.25 694.25 mov
(a) sh
710.25 188.25 mov
(b) sh
376.25 486.25 mov
(c) sh
490.25 183.25 mov
(d) sh
913.25 209.25 mov
(x) sh
OLKCBK+Myriad-Roman*1  [6.68478 9.96563 9.96563 -6.68478 0 0 ]mfnt sfnt
498.931 299.964 mov
(e) sh
9 lw
420.389 207.759 mo
591.306 460.745 li
.2 .4 .8 rgb
@
72.2676 -177.75 mo
766.25 -177.75 li
766.25 63.0742 li
766.25 49.0132 610.896 37.6152 419.26 37.6152 cv
227.621 37.6152 72.2676 49.0132 72.2676 63.0742 cv
72.2676 -177.75 li
cp
1 1 1 rgb
f
1 lw
72.2676 -177.75 mo
766.25 -177.75 li
766.25 63.0742 li
766.25 49.0132 610.896 37.6152 419.26 37.6152 cv
227.621 37.6152 72.2676 49.0132 72.2676 63.0742 cv
72.2676 -177.75 li
cp
@
.13725 .12157 .12549 rgb
%ADOBeginSubsetFont: Myriad-Roman AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
OLKCBK+Myriad-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/z <1C60D8A8C9B76F05C2A10BBA370C3E3C8D18619F2252373EF5D4F86E1884
BDB6A8328916ACC1FCF2299B27DD5504EAE84C347840346B244F11842628DA3F
859196E347613F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OLKCBK+Myriad-Roman /Encoding get
dup 122 /z put
pop
%ADOEndSubsetFont
/OLKCBK+Myriad-Roman*1 
[
97{/.notdef}repeat /a /b /c /d /e 18{/.notdef}repeat /x 
/.notdef /z 133{/.notdef}repeat
] OLKCBK+Myriad-Roman nfnt
OLKCBK+Myriad-Roman*1  [12 0 0 -12 0 0 ]mfnt sfnt
437.25 17.25 mov
(z) sh
760.498 63.8945 mo
760.498 79.083 607.607 91.396 419.007 91.396 cv
230.406 91.396 77.5151 79.083 77.5151 63.8945 cv
77.5151 48.7056 230.406 36.3931 419.007 36.3931 cv
607.607 36.3931 760.498 48.7056 760.498 63.8945 cv
cp
.8 .8 .8 rgb
f
2 lw
418.694 205.25 mo
418.694 28.25 li
.137255 .121569 .12549 rgb
@
416.645 23.5264 mo
415.647 26.833 414.727 28.9824 413.661 31.6348 cv
423.75 31.6348 li
423.299 30.6855 421.766 26.833 420.768 23.5264 cv
419.698 19.9873 418.967 16.7783 418.706 14.6973 cv
418.444 16.7783 417.713 19.9873 416.645 23.5264 cv
cp
f
grestore % PSGState
.5 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
928.25 832.25 mo
.25 832.25 li
.25 .25 li
928.25 .25 li
928.25 832.25 li
cp
false sop
1 1 1 rgb
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
] del_res
/OLKCBK+Myriad-Roman*1 ufnt
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 12.0.1
%%For: (RSLab) (Yale)
%%Title: (blochspheretoymodel.eps)
%%CreationDate: 5/29/2009 4:40 PM
%AI9_DataStream
%Gb"-6f6/CLOskXKHS,0u.8*5hl&E?N]_A9K'qHV9.$C=hmb/37gM]J&4k%gN9[=-nS6\j#+p1(Q4<f<DRB8rf?EVl:[i0`L,r1(L
%,r3+]-59$BW#S%la3;bVos3$>2H-r6N%KabW,NA+kOF,GEEQVt(&VmG;<iU1lCINIUJts:[i;_EX1abMr`uHM:($IZVN?&$e7suX
%&mMb1l-oIQDPQ'>[O8goeNu9;g%[&HSZf6.c"=(].Jl'Y4HNooX0p)fU\.XN,d]*m%sd,VX';]k:V0uQ8o#k!E&'Qm?YO14D&<op
%%t>PE&*fup[p1qKd8e<o?gtd(Dq%kbj/UPl!(L>rKVlr+XmL#<e+b*u9*pXX0D0EiH*=Y<X[8r>W'ATITW]kQc!$f>+`n(&QB`,H
%^h#r/=$1u$+2EQ.Z'a'aNKY$MR[""I:WPShQ$J?bBUk=;,tTmVYgHhRZWd0?.C!5/PUe<f5F\e#<V8R1?Wi`%JuU(Q=?oS>hHkA@
%Q.A[CMT?OrREgn9dO813Cq^+<h-'h6^a@5Ds+UJ/>$MkIn!+C0:SZK0">%ACc$-B'a+`E9<ndbU^Rd;5p$9ULNAmWUEe<Ic4f]`,
%35CBR"/Q</6;Ud.6A"A'UM$0E2b/UQ&<,:nMCWcYMg![O^/sVnpo.XPk$G)l[b"Cl&fUY&As:abs3o6m)8h0MG<2##3I[X*m1UEO
%nA<9^p7&7P[i8\a(e?kI><iaBi/1^uh0<`8614eA[lO!!e&3?&T)7q63gDTgXAonEP'_*^riEof[9UH#C*\%dF0m>2g6LG4XAcOP
%SsG<$)6d8Ofrd[9\T6[-^!\\8"7L<-C'uHOX]G6Zf;u>?+,t0M:bV"78qg<@SpL^.+kX3F>:4W\:[jOk@,h?>8&#)(+!%CTC23aa
%?5:*A[$.Q?bD#X[Y4>$]kl<YCEkiUTb#b8?![-+gFNQdb<-%(iVZoJ`RK.ZT4d<"4(<j:ZaL.MQRgED`Ei!ZS<N2=6_]MLRfP5e7
%lGWgd40N<XZ[K"+B`9nt[`WNRYA1aSLX/sD#PbKg$FP2TPPb.2r2A+d/`L"0YakS?P]0`T<`l/&Zds!2Qechfo2h^C"f,-;X^(%a
%<N0)M'h[:W-25qan=#`>BB9c-5=#B[;Q\IV!3&i)^OQ?5(##L%NCK^Xq!u%$BYcY&o:o-/@so1)gBh1&EgoH-!,@_j\ER,?9nqP"
%C\F5WJ_Xj$[quNsQ`&/NH28ANj;jlUXmZa%WrpqlJYUJ@eL'2LaIQ4a!9T5gE5k($F*qrH`cPg@pXQBgWm08dgf_7D1i[##k_=M5
%j7rDhqW`XF]`)TOJ6FEFkNbBJm9G3b>VP>>E-tr!>o,%7"[Y_QOt2saW3FSu%!onl(dM*&n#EHhQ*mVQ\u8eL.Y*O?l`e3o2p=!6
%*$7"r-J!D&lCV((^lZrTT6=@5?.X>4ei1@slOG)u\+t:.O6\nAL@X<hFW5G=;W8Ara\WKnB_(go"-r^\imk"q4UUj2kB`V=2.aZ!
%qJh+[Jh/]d-8s&,@cdH1ZXS`$lL>UDE"7-]&1a;0l(.No?L,JO]iLo_4K-"P-N6Q`f89)ck6%df&0($4K^k$"R:)Z&e)T_ck/2#/
%g743(H//OrJDm%6IoT)]ptg7's17Jr4-_duc;FGIl=Y5tbZ;4OOgo9cC=Z4@#0&0/`1T$A2uf=AXN#]0^rq3\nEg:U2IMa28%%C_
%hrh]';8BY\\cqJW=SM./rQ=E,pPXMk5D\O4C)p!c";/A-\].\aNW-lH8"kd#Z/r-`AXr;Z<8PCtGH<AZc.Duse/HShrS2]#Jin$S
%BJj9CkP&&_;6..?Cn*JV=MNmH!_]]X(_6KNs*_fb`o>EMTjDCYk_1l4P"b$BOEM[Z7F,eS1<N=hAB\R.A`b,mkj0>Drghq(FCoP`
%ou:?]qCAh(PGpKKOL`iW=!`tuX.n*pnQPC&-;B#;Kf"OVCk'62'!)Cd4ASQmB=(8-Is0?CQS7@)X[9X'Ed`RP?2-nkrD>Xl)3#6R
%::5bh8"oT;Ylp8+J3Qp5F/r39\#c8X7u%b!s*N`9/o_03I_iA*&lR^7nat$OaqO:4'&UNTb6YiQQ<6mUr/jN15g:P?jTP7I=GE0Q
%F"l?rVmY?ZQ[tc\Aeb5!:,W05iR:9sp>jP-?<KQl3>qc8?I1"fPdi7l902[OZDt'H.QKnK.`jgPcid2]'DD[K8UTmp?L1f>+l'mR
%[Qo'`;E*u8rm+48XBZ7TBfM+i2i9\Rr7`1TI,9jVPdj*)#U"pt0mI*35g&V"m^`a382O*;7.(&"*^9N9m.;d5'Kd*Fkk)/YJ16%B
%hPgBUfgMa`4kXTKcYC'qXB"sDNHkUAqrXs+GnicS[J`cQT#%F@Y3.o1cZ!#YL;e8KiT?ouOKgjLTtb^+BKqsT1thP:VqQH=&'On1
%hE:se%#Cn4gXXSfA(77:"nl?<dCjJdrO[>/k^ks*PKO5hL$V:L"N_%W$_JDW][11"ncT/Nf,RVGm^!nR],L:23D[)<bsJK#e[D`0
%:p5&BKj+.6Q*PbAgE2Eip8d:qV1-s3]n%E_G#,=F1tX:J!t@+<,`'^s6sV,OrEX8M=GG\sk.=*<i_AUo$<0&V'bf>jM\%kNQ^gIX
%pDIn4Qm?F0$\7.;^^mC%`fMqIm6]8%N&&B&,O_(9^&%t*l_Mm<#]_Q?@rH:UBMtk'Wc#%W*%mZ"PK^q;%^.@FM@r[J6s_'GVjdaL
%kB)]In;"qL]A\HLqkHuj:eZk'A>-D5!CLP8Js8q^A8;68FE+HEQ)9=/$tPsC]tmUY$*9!,hZ<u<Cin<2WTi[3S@Fd;Cc9TI21RsL
%Y(D`kIY*dd/VXa5C8]d'edB1FT562^Vj5"YX_t\T;e^D=f\0N4g5M?lC5k.;;t@X`5mu5=#]kQXEQW,o2oZ)l?c?cVhXPUs@*kVS
%'2jNp[B2nLRNoc5rs%]i1<BF:R#FUsU&iF#gkKCRTUnlLMl5XX5oiQpDmB!(f1^22S.-W@P@>Nqmn/Gr[Ho2jn@'/HOsJ-Kf1j7X
%P-&+KBkS@*L9)L(,(OMUTIhIH]"hem>@hj;IPXNH83X)qs)0_PLTn/c@9[`X>Y]+D>)g9\.Kp5DGn!7;qdAI3$R`(\WS%og<%oXJ
%(t,<\W7G8_#h5[qYm8>0YuFW@;@0.^.e'`qnjd8G$^Xj%?S8D<!uYqo;&*X<@5\<W=jk>7C+Q+!,3kd7;<h7OrF7$D(lP?mlQV5L
%Ht8HuQ;N(P-uCN1`\M9[UW,(Sh^bHUj?/`*@omS"UW0In^J[I6U-*VlBEOR\FbMbTL1P0+9-.q$H2b!?*n<dO-tCBJQfK#GE5qmk
%\X0LNjeF9U+pA>sGq=LFY7%#.kqfgLH@k=6DQWNs'L5aMY@c#p5b*sbPH]tT=DH)FkgB1!JN#B,=LtYV>*M"9YEp8DZdJTXk<LR=
%/GHs*c\j?p9[a,<+jr&1JF\XQERGc"[o/;!ErR4LUpl$H]EJ8hZH$DHemALJ0`Z?u;t"7"P6(97H&fRKRFhf1s"g8L0^mJ`*fNCS
%oo(td%M6_*CX.<XA;#Fn\:YjXT,aI]aqaVOC8u),G9f0HrDfmcM[]S`#6H3WT6^*Jn7SHG2-ZG^G0]iQhbE]b%O=cbIi)OX:8&(P
%(r[ouJOf6CTiEZYCKSF,rn!+ih_C5mC4%SeX\'\c>.IY4S#s=;m:]\e^^,hRNfc&Rn'ZZK>&"jMg`k)B2lq-DF7Te[5AMqN)*Qj+
%Cq]cSCY)l&B^6YLnDCH$p/Lr*LgJ)kAVl;fs5!9gru";*K@<;l;>S4)l:@_%s&8a&@`t9p0@ptC^oXFjPK6<2X)olps)4I,F#*bX
%D=k_As*gpZ+(H?K[,:lZn("<&>.+";99mqaXr?+sWBs+Kr/2rc)>T%b9Fs'dT&[X7Z"eXb<UB3`(I[o>n#pIDCCm5;V[IaLb.hq:
%`WZ5%p,dS,p)-!m`ju$XY^9j'b;a"qh`.[OrF],HFML4)Y.So0.5N]'cA\+gX/=K1O+3MY#5.])7<+AhB8pdINc9iE:cAo05&kJi
%PpNR`Is2P$Ej\go<bl;EkKKtNbG&f\J+Gp$'O%&:UX1J<8m(SKi"PR]MD_c^`\#A1Q3Bk,Jt!,G2!o&a7@U;$!>g)3&DM>2KmL@6
%?tU1e\#SOX]D<VU+m21qM>K]Kh7uCp&le^?(?#G*riC`NdHG`R3h8TF[P`d>9s'KpSM6<g0%AdjL%e4!][=)M&FG,r*;3OEdfbc!
%"[!-kqB$&1-LC?:9_+9N+.ZBb+-E/uiimWmHD4PU<a($YYAUK#!7F6cB''d-C,s=(&'N44edK.HD"Q)!TiQ#WgO0gjT-f;odc+l4
%>deoio,t<km51o$>;GO/Uf+@=^Do4XG).fdPq`aaK.4,6hScCScG2\[ilu4@W`>O=5`GI8S\W.D)O;M?,VtVmSDU\eW0ok#V%1ji
%Ytut#92YYT7AYj\T9WFjA$nJ@npCHp8Z,a75[)*Bg87"j>9N$tHQA]#n(A)*IW&^\B1p!EX5%H&=d[1J!F+f[B',30D%EE7Zip%*
%r*/lV]sHDLc"s@V#AeS9ZpPti9c_<^.GWAdA=SG@6nY-HX/Drcgm`-B&bC`X5d[,;%`..AMtOHZ8d*'NO2P>fKX\fV/NbK-RR]W\
%HKDhJe^XK*HE27qj]]"`f!&jnnX[Spf4Pk[Y\Q2ShQi\A1O`gr/'f8'5\m$b9%aY77UnC@?6!?_'"GnI.hqa1YiXMhMJClKSPlT)
%29^4R1VTc(\akI`n+;2/R?LhSC(rb>E?!_sZ12&+(:M$.d_h^V<*F%%Za9h)rA/=YF#pU&a4REFBNHF_M9Q#`c&Y?[57u-Y/Zb%p
%>+SWoQ*nPR&Pl\lBPbg;lMptcVQ_[UJlub'X.?GGfD=uRgPArPX'sB]\:h:A=5)4!\d&7"ldK[YZ6'PQY_96(J&Q6e$;[V#Ss9Id
%Jqp4'4?5=C4=l[]F?JP>r.C<1"$Qdr/L5S"%"pQ_#RN`GKFQ+@HT78Qg7=\KEm83`Wl&ua4M,#U88.Su/kXAIWn,W9Br06u]@W`$
%?lrK_RNl1UY7H_[[0i<:%VmVMLj(FoN:tQ)%P^oiom.iV^,%RA>;*rO6Tt-n",d0q6_dfP7^Zo"_C.9.edAOM>1KE\ePD>p'=ZX5
%BGZ37WJ;&i1b)PR@PmJ;!&Fc(&W&1[g>-4"N2r=SJWq0^S%GUI7XHKt"fqZ(,>;(k&0li]'Daj=A0B+)Q":Z2d5ogHmIL*^Of@&4
%]cB"*eu2_%r=218e"H/qEY!$Z&_7ud9ZOa@ZPR(%K"jjY:rjb_8O]+Dd)sb.WWt!bQQf@['ofOqhaN8X/k9[0MB$&NeY_"TJUX&[
%0CRr-"jnBKj[(?;OD%Y`/@Go&CPC+L2JmqERp[2c59gsV%:*)2pPSDj%i[r",LSSBeW)CNZi'Wa&M2#Z1(Sa_ci[p_cOBRCb2j]=
%[bJf(^pXg_\9,[ki^>"&6s'`33=R.:Gn><<e2Vaee82'D&;6EJ'Ko<3fYNM7[8'R5[*GencL@-NT=l#3,Rs/2`)7B?no_CCcY,ki
%3,q(P(;HU-BuF)SZP]=Fa%2c?(a9be@b5dN61>NSR5a]SHg%0$!>e-,Nc+8d=j'P5TDQCm^Kpd##63'aWVOL2*OT,t^.aAFS]Y#t
%&`90)kSY[=;GRP*>*n#I+P/p'56!SL,3XDep[t=ZDj3FhNN^K"j0(Me_<O>"+=eTXk\)rgo\mq&,l.fuZb76>G>&G*nh?R#6Bak$
%X-M$SL'`\W,e"/V#D2iRdJCMaC]ko'^_iT@](Q.+69aNZ#(OK,)1S4lrpCFm5iKI@8.+a($Z2:`V^9<;0'!`aEYZ0Fj:XW!&0580
%OoHn3ap6\Uk:L^m_n9#sl,X;o!W2oNhOY(3R[@Gf\#Ng1adl@ALJc.$&K-4$NR8Y!CD6/6[2ro]RNLLJ)t;b@E5175Ic/tm8eF:F
%1E[CmT]`LC\mNF&Tj!A,>(a\p*IBI<HUC*[H5^\<Gr]pZN9t)J_ep_S^6<ph[n\YeY6!H>ZWV*H+\O8M"PU9dU5i4^-PR+T^2*0Z
%BFag?Q^%_=#;4s#T%QR?9E0j'M_+U8(Ys[1G_JrEbo_AZebsJp;oMQ0T;h!(cU@Z[A<&kN;^BD,XJrrF[j!%FJY-7<\A;Kk)FpfX
%0cIMMOk<]ZI,,DL5R%IRY^*#g4-%rTE&I>3,,2KIo>@MZNM:058muQgPH`YFNFa&.lTIr()\<>X^jM=ef-L(ak`-M:#]iH>J70;.
%=&HSW&`5ZdB(.dRTeSmW:pjX'R_Ff6-;R&>G03Eo&AIrQCI[9:o+@G@Roe>L#F`:-Yfg"u27'e>msIanB0Y"Xo'Fm2rOJfo:]I_-
%Lg-=H.?DX'j%AIsDF;)N\[(8%rR]28X0l!,n'u<*'t8X`>\n;TlhpAF3e+3t9U357T?Y[Trf:]@@8j;OamJm3W@^kP/?[kGF'NVQ
%7$(G%QBoM_ld"),S%eX-5BXM?fQlKueuZ?tip*B2Odp2nIj`\e^\3kLV<gl2rE=YBVM3j,A88l=Zb\""=n,Ti0!;<7B8g^l3oX=a
%I\d@'55[/??+AZFIf2B6VqGU%D>>-">r?tt^^SuODZ*a0kmu7i%A8TVM4E7/C].q]CXBK??!Q,Wc:VrII:C(Dp;FT)WAjTnY6NlJ
%m$L^9DRWfmmDmfLo(a/iPHIe?=R$X5@3+h,5G\1;j0Wa.cgP*8J\<PMY?Wi]f4+%l[toL$VdlLRe#iGFRqD'?YLiKtMm=)Ili,Ul
%>/0b&9&3=ades('Ep;r/YLchLk>H&'AgR9%Y?,V.>@.^#<LK<,QJZdRcp#pD*e&(?f39'*F.M*'0$Tnd:G.'Bh4&.!H[7RFL,tnf
%4I/`oOF5OR;%aADfD-HrmnMYq1NI+<5*HmJlaep4,[b_A4u_Y->3T5HX&6(9<Q2V_fB:`VD=KBSf;2REVYm$lH\H>W*PZ-f:BPrD
%F)P-$rk5H[k?I>M`O:9"kNWFu@ut]VFPCkP%t$XGo#L[`<b9Ul=)%YZEFnsh0j!_]\[2Ncl<EMEq";es*aNRcoVtU0aI9a_d-JS"
%'(g)%qV$/)PC(cZZcA>l)rFur0!s@U%.DMSP1^AsC];B;/lJ,Oacl>`\W&EhH(h.frRW^uH_JPIYA2P@lg_gUZdJ)+-KUXGFJI"3
%m%`CACV#R2h!s!MlJLpDA61jA-u$E/T%,=fG-AD6mZ*@6hp$7.Y>:)3ea[k8^Xj_#j`kun4mCQKY0HW*ocS4b=!u/`c_+Tg\6JAi
%p[@c71NcuP?!*t1Tc<HBDdQQ"J\Bp;.^.*i?;J)CbkdW4YL!`#S6rq`cs#2<8:F6>^BF9,C\%=H/"kK9$MRg#\OaCHV0SqbH;jcI
%RQ4+>pA4?#ru0O*UU$J;pZiR*_2_=$TD@LfIjFL>n<<U;MZ^_#>HQAuPgO8DSG+_`U:u^*WE8;<02-Q_g_+A$eJ5PRlo!VJle-%<
%q^$a,!PPYE4M<@"2'118YFkZCh()*2m!.[[Bp,H>@I&J/E6F,3/q<`)LV7;G[HqU>\h5V-6a,5b08B)o?WlZZeg?YXHfX0kH-q^M
%iq1[mO]sG=(0@om-gW_BgT*(c\b`PF&%s#2m9[%:1:)Y9ZO\tMoqdSJ#Ka_!X8,QBlh\lrYoCTb\A(3GUh.BJ3o>+p'fo\n@B!Qi
%9oe'7h:\T+rbD;EQ0*XCf&THMgD3W(8_&:U&Y7@f3L=)5bHhC9p;,c=GJ#(+oX7iX5H](JQg9gl>=Qu#S(r#Z8.#-?Rla3uBgH\/
%gf`n"1?e*UGI@D&0p1&Ai$loVh+f8KhIa=aNK[>g>FE)pIV8&W?@A$u>2>uh2!C3.qqUR5Eg=?2ZCCK.aPFRCf)=G\Ucf`>GLQD#
%d-%=^SW_k?H@*q#:8uQ*DgucQpQ#[tdWui0:q>arDs<q(3qm[$/-`fDi*M[Mh1"[d[+?(c>r[uL4ti^VrMOTIn?t<qDp?#_"s^6p
%`?/AZ*X7!uC@J-n68d\<H(KN\FYrFa<dq#T0<]I="-Fq;c]`GALSscFQs35N]AIKQZhk\Wm&a=r$Ct@@76:?X^I=r8B,3+j5$Ft6
%]suU+T/%;*4?+d<M%XP2W3<MgkFNS%kW1r7OmC5.mp<2u%m,ia&(`n(q3<LQ"-:"KmB(2=H[@8e[-2W%Ia6G^6mCsDdIi_`8)>F]
%4S48tCak`5dHYdXDY:`%%.XOQnnl?3![gpWl=t;[fP*+ueh396?/i=N.EnocB:)jg5KG#?S\</fkQ`t-^!bV2a3qjgFmRlKjDHso
%fIQb`!PO*8$[tpgAZ%Pd.m<e=l#eYS4*iL)c;*'+P&Fb$.T3IoNA?TS^;7,.lX%hijN3Xm=6XJRmM/tr4r`-)q$'SU:%V*qI=iX@
%]h/f2J\;,>^B@?9d#A^\i#;gmMS;A:W7OX\YM/6[^"Z;':R;KLJ6oX31c/NkHG/gL.s-uU:+`<%+j_lpig4s^^q\]GN-9q9GT7*e
%1k3g)0tAGI/+*t3Mh?5ci/c2ID;2mk_W;ONG>-;LppGBsK2:CoC$VB=Vb[g/8%^aN>kN0CNW:]66!OseT?fE7JD560c&O/kL[rXt
%rI_.sk;89[*mUkGm%A^892.O2.d1J=hn(n(-aPVK5D=H>2/U:a9Fcfs:HNt'\\70nYVg)JWq%sc5O"@9_iEi\RDRXK"-DNN$\qLD
%Drj/44#?XBOQANI&3_FU@d';3@AWR0p5ac&hCjD(JQVAq@i`1dY]!3ugi)'fSgU:G8H2q@f$NdudP?C`IH%_pc8C":/ssOh5*+S0
%)qHd&<m2n:)$=K\]GQ8n9r(3F9+OD]enc2Vml`Kt6XSUf5P\]^Sts0[fXEo#i#lRV8:5DEi2c)KFT'EA4G!jM:,cHA=Obs#'I&S<
%-F2fbiRfPt8>5i^,#<^\4et0u__LfnrF;L]_Q?#cbQ#(H"po:!p102E++(k7roeUJa^q>3PI&l\Kl4&6St0Fs&O)S:$(l]9cYJik
%b:sqpftZUY9)J3tf_'"5$H$7Id@]FmNb1G/]PFKiE\Zd>&4:gYN18F,`Q_CD2`ZM</:qL%9)q9H(#))@F.32XZ\SF8_RJL]%*a=7
%(ihYC>YVY$e=?[dn0DjBW)S:</F3_ih5qo;_?!;erto6YiTgm+(3!!r/J;@9dT\/19[82@"qHT=gWi!Nq_u2E4hL3icGGl9qX.LP
%:T[(W@U"*VOuKNXJpH1]K@CSk,r#ZCAkh!;]]U$7?8WJ+_Cfa9g6_R/_XuX_#`PcZ4_`BLHaD@UYLR)3P46V@_UbK2kW^D03;APe
%Dh<a%'rX:_jU5E_dj"joISPZ%)cO#nd)XKhOVVFE4o""dL"Dg(']IcbonW7AE]YCl\\d/,1q/&S$lT6@2YVVa3i':q^1!/t[Zl(X
%*R[d"%1LJeK:+H`cJ#bph%Cl@pgNLf,u>l[@l_<m#C;<82BGZ3?YAif%aBGra2_sY=R<S@s#E(Pp>!\/PbW1ilZ&ic!tceR0-;4T
%Ei/q"B$@,b7.EE-?h4W/o9tZ'cjiDfBJr`I_)7C+\,[!c^/kt-&ka9*r0m`6,/bLYF)?4.'.s9tcK!?^^V]9;[>@$K25$T-:>;9+
%r$Crm%#rAhK>VYW*Ip7#jMQU!SfRsM+2W*2*YJB:Dp9S"Jf*V$6'Nr62C=b0"iKV!NC4I#GXOi*>Tf%TpiR-L'\IDV5f@j^kPC=u
%^11XK#3[5IJFF2T@Hi,qG<N@_i>8qOm<WBc1:m<0XcM,)BhAE\HhT/Qg>7nZU%(Rm_V+S'lll-2jE*WRfo%LBZY+WQrTfQ44j]1p
%]8;ILMUP4^PC3TTD"K`pkLX-u/(fp/Z-K[p6B#;EF<DAHa3V_q>d,FI3Y^1aY>:n*k-.+,33@[O?JdOa((t.W*C;]oN>PSL,d_d;
%*#.Hg]_`3PXn.<Rb-Q'pp]5@Z7n*`siKA`\c=(C&a%n*C65!h^\1R+@V=T_fdMCGQAn&\#K?\3;h_^DLQM)Hb>JK-0r.]j[oW&mk
%]N2=&=ZH(`0]+^Jgo>@uafWk;jQmo\4sZ@U'!F2%,'W0o"B#*F7FJ:G#Fj/#'JDKa.LM2^e6ak<$n2aA)is.Q`D)_fCY8cF+LgnL
%5Ys!fG7M3UR^4qq%>*Gka/Ko,nn:8^rlT.p_q-=GNL'%(J+^#Em,5Pf[)&KDI\<@'Tt(`&LQ<gV6V/%pDE]odiB'S<IUQ=g+t/@u
%:oo%q4ohGV+&:."'EQAK[r2hN#ROHgT#hR_T4<>af+Pd3[^RV843]9?@L)B&>."-7hHC?6%*'-hCZN6/B[,FID9B1OXN`;O@2^KK
%^orm`%>$dO]7J!q0eBsSdd>&?DLlR:8%RM7i_$Zs_0^hnXE:ds:Ok>)l.5hJ7j/%T?[i'Le4XMh#o/(`2h^1P-18ISIK=$?%OYd'
%QN6+Kh>c8#@r^%p-%Gg-(%0(a>7B7eEpQ'RHu0ZEO3CuLoS=9/U[%V6c=01[j_hto"(-?71tA?Q[enhK4lJY_l^KO-d/(3HK*R.a
%'Z%DkE@&mt1PWrp2Y+a&)ct>1R2SmaQm=AmiQn/"\U0pp:c+i]ghq<i"TcS:CC95p#0LDp\G9j4qQV`b\*-hPKumh[cf5LZpT#D)
%i[-R;3ecdON@+G>#TB@qb52/.mACs&,.HOl`_T(BB4@mK_W8fEe/CU:g%60scmY'@#S8qXH1Bb$^qfdY(G-:AL[JM6/u?u;rJ8dO
%9`nJBD%-@K,C/Rmb0.(h4(/$g)j31h@'A+79q*qk[d_(pTEP:W"M#+J+Hq-d5o`(<D8e8^>so?X1hAKR.'2QJVOo]T!&8mD)Y7QO
%@Af1+)HKP;k[?5&f'1R]_UeZQ`hTMZOtlf0;r3J9qhHk"'dkm,bVcVcA4T6KR*Y]pANT5D4:RP/MpPq4)P=\bG@?F:D,dmToe8BF
%.h:sYZ-]hGOdWqd*VKKA0=JbRI@Xm\3$q.sPD0el:l_(^CF_@s\,3`Ji-6+)^s7s#qq.t*(1-70QsG,dj(7t2m6'i=c50g1f4,:#
%>0c<47-^o9ZYenLbPB"jq:O9m#g2t[C\_du*jV;S0sm6b_CAh2ZCES@=/2)-+ZbB/k6nKTS$5O%LF_NqmM0O5-3?gVq^gn<YN>A;
%^u4=%iO+%H<__P7ja?$pHq#f$pi=+<>!D,@F=P_lI+n*`U'^GVN(PA1bkq"bn*hTkfOM4=#_<II(dYEA(#8niT]B.O%3;e`n?h5a
%NMB>c&g0B199'3VmXUO?%TH\4H'Ees*h1=tZOWGo0*u_H!l_#d5>\.o_J(k#$puN>Cs0gUahV=R(,P`HW@.VJe$Bu-M>4k@`<^R>
%TZSj0@MSA)k!6n\gR!:pq'?&:+UnB%cnFi<^EcU[ju<D$(uaVDI(7pHHdWK`C-SSi*OXg]4A33&ZFb?1-4sg56"/n>!lS2a(OO'>
%'9JZ%eDfV#UmOR<<WHTVnk0s_7k@0L$-caG&aJs)*e=]fVj*o(1d%(X-ckXEmVsOp;<Wb<6gUQ!_W:$YPsHC62`i.'FuR((P4mK'
%L]LoE;Wp?lk!ke$eqeKgg)X&D6epa4fGJTd]uk[FWm4V*(0QTnF[fM4psKW':_WfW'Lpbd$dKTUCJ=0?qmk6L?kH-B1YYnS(RfW!
%G3Mp])I/pMQ$M7g9jr#!4mj5Wq#V9**#b7L.dI,sB+)Y5(;0\8!G.TJKKtGDpurH+r907)XYL_'C#Y4FF2s3lJX<N%WqZH?6f)BM
%U(dm;^A"BqM+tF>XP93M.`$uC,>.Y@POic$1#M_\p'5F:Wj<bgkGDN*:s671)\.Cm*"amUg?u>$OQ?th#q>,;U>EsknnbE&l5Rpt
%#qWNCjP*4Io[FH]J<B&9h$(7U)7=[G;j.!6)L0M"\*pl!g1bg`9]<P\hW_om%45c8VgS_."t8!-*=oVT)dJ[D0,>8B:A]/f)W!tH
%c,R!:ih=LJ(??W=6OH5UWkVY4E1e_[9J8@N&Mg5Tk`+%?N(om[9`7@t-Gk]>qMO-_N+jKI(,l@rmc_o1`uD_.ZDbjOlZggHYJV4)
%S&dEGEI'&k4`p>9LoMPW/6VK.E"pDc0KCT4ItY\N_u=d<I.RUZh@mSBDQNJ1%i;LImYTef>Mj=a3?1K["q(T/[2PW)*aK#3#`;J"
%'W.\^L30TMODZ+nQc@a\D$D/9%-aPGO$-]S\sS=JJ;NTIM!I!7E&"C*<KA("3Z@M?1H.V;r8pLH`n$=^dA(X>Q2($!m$Z2V)O:)W
%THnTuOiB.qMW.LW!g]h$=Jr(B00!tjai7A/cA^PQ^mt#aahk@iMMS2+m]Rs,Epd=GAKDLCERXUcY0?Ll`<BqMY07hI)7H`k]Wbr!
%&Q\&5b8hS612e@[l/GO)Gtsdi.*`cSAY(]Ql[$?-&KcJo<p$sJW4qRc@TV\dr8CkMk?XQc/+[S/[YbU"33Ven]SI$X$"r)JcrpYH
%SaWX-S98VP;_J/T7#eATLI>hW-Z:-7i%:Wd$I>m7D0gof9ARN^\;UV+lhHHqc!gb8p9FpoQbS5=d9f2mc%+uXqE#bQi<L@CW+5<N
%,7A_!/U7(Gs'n,1L[c!<?mUUHS`umOeosQIJXCceYu7:Y^12.ZcnRKnhFb!NHqN:=ogtDc^f8AN`K;-_9RqlX7h^crN)A9ad=>\O
%g_8YEo+7SiL4>lHD[;ieShkA\%a#.%Q[fs"6=(<ph-+(044NZ;3iG^/_MLHfg>,;XAFDuh,^VJE,2"'qUFDAf-SqMHOp+)q.$@"I
%,:SdE5U._@`Cd^d#@74ndCC(<p;26e=/3*q]_qQYl:E,:B,39u"<HA@O!!Btja#?Z@(jpK7<tJd.TY!r'1I1t8/lDC?G$`hTo8JH
%^1VA1b,C3gSDEg[."?_8H$5?>R*dlq;4b[7A1hbmd9(4?G]8)$IW$Y!#OcZS_j1"FH4P/bh85)<Z\?c?_tT33;.hDZ*Y<QcBUotM
%>s-<m_0^k+J3+FGQEGE6a:V+&Fn.6/p0<C`%+#`?l(^3hc]RAgQ1u6._Gu`57E:MbFQgAO4`rcei_A`?8MHp"P8PtDRTqgUk*,&#
%bI_<]p>lYM>/*fb>]2+elQ"Yr-Sn8r1:^9VT;nTW<Z@[V6(<3Ym]sH(8D2gENcUrJXF?WmDC]SM9fJTo`4F.[;T7nDc[Z),q&a$H
%ke1Lh[Xb:BDG)ttkZ+$keRj*MmU!bgrUuD[hfOjiU\@q&<j1A;Y`R&p<g(e#8hWshg;V(.UK:7Eh/_oF1n[qG@q"D8Tc$u!-TsSF
%Q/0,pJ\?*9chkPtIP[V,gYtV?Z!SZMf0+"#Yh)qQrG]p.l\)Us0DT*M\HtTC3c(r(Z^u;.^<KLSoZJEZmBg(-DecX@S#XD@2gMj#
%oH[ZG1i7AB5FiPW39qV!e`:-52P'CefSJ#7U@W^p`pNTgQT$q^*J?::WWO%-1]rA0ScHr%N'"^2_U"s:1F<l8SSa@`A1d:]+%JfP
%W34bDMa^>C<"h],Y8;9UjsKuLkR+jL0(QFcDslPF2sWJ$jT=Q74_*9K(OLo)o:EX`pHA`]+Z&bfU^)q%#cWOf.l(fp`gE.WN4MtA
%5,sX>++@^gYV+f):TYY1Yg76D'949i&Jb!C+`5/OI=?A)7.>&iK,41V:!VOOE"M<=KmeDMIDPfP!uL\(=,8kU@@q&/X=3a<iGS\4
%5!RrC8^J\3m#+WN*_BdITTU@5@:-*Tp[ElbIT:f42Bsg?$d0G,@:<Lr%@-Z76>P3Y.dZb*-PP(a%jNUko96N[gT*[Vp:81R<:r7=
%WZs"[o;h.48kDKTf]T_uScJ:/$N'b$qFlJ^!a;B7'mm9sYJS"5oq!BVm.7:C)ZeA2Xq0e2BsA'C!g#>*_EP_?(demoZEVXc!/h5D
%['7l;aW2PT;&/g#<V9(>*1.<@,GMEg%tI1&N2!Q&YH#n^LE8lmT3kTj>7-=bYg9NPB-Q9dS3W&*k9G9`CNN?dnA7B8QqSULG8E3@
%O1<^-.3D1Lpt?a[UqW3RI6lJ0#*q:FRiDZ1GBnM#+SbdlisJ##P@LOqr;80`RtuDm7.`'[@E!<5]sWKk><QJklGK[M_dlsGjJ"<o
%Fc7b#Y;=0%IW<D=Ul9t6f,GN+_-CiHl7l-NGtkL2R!aPr$qhI'I_$%V&Z><JSF%t(QrSAPQ`2pQ.8JMHnFF?n;QU/;r6MSGVYC))
%^9SecP;=ik)_/uBs7/CL>Tr,+^EEY;m..pMo:]Z"rl7E>AA.$-QiBe<oi.(Js2@*t2u)sY*eKE;le(snIhR7#D$OfbC-[YqlC4Q2
%eT`p34N1#9j0l.3qk]3J<"g:kb3t.d_+`;3+g\e#iT"HF@lI7BI7%ZH2ii?nk?tfV;'$PB"qX1a3Zo@\O]tU];l\H?`Z+dZf6hH<
%W`"*7^&5"iqD-/3;B@sNMEHKQV-;::"N)S,;^(;M>_r4Ti>)'pW?).<^P0D9-!1.\kW<`$P[6QG9,rijW8Dq]K+l9:g*itL9ud@2
%&uhI;hd;Y)h5L,!B>5qO7(dilB[[Kc/HcD=:D13*R0@1-?I`Ooe*1R!3^%2LXR4d!h-k]^G6ru<_nOrjO"t*kfa'6T]G]tqN].'3
%@,R:O[uI(7pSNl4r(8A"JZa6JqCeQ+ofX1c;&#BMp)FZ..%lZK`a!5_%Oht1O2*.eDYbKF`F+o&nfp79[\V#a4G'd9la+;V^t*^A
%VSqT:!UfpXaL'g)s+XLM`k?jhRd+n]rL8UcJ`+m$9bZXmJj]->ke2He[2''^^jH*/KT5lo^V6@$E_W[Q%D):PUA&!LOX+jAmYeak
%6c_*gqBG4dD<#7Ql7>qg(99VXeG-<B#QU;MZtfaLYP?[soG8Od6HjnZII66k(XV[%^3:V'gaR(9"r.)bXUrm*(OEMqIt^jh!7R.>
%1L0Ud:Wgs@bN65?f4Zo7n[0*<n(C2_Pu3t#D]oi_>$toF0f\+CQZpc;p(8Ms0h//Z%dYtmHcERYm(WKdWaO`U[2&!]^$n@gV,Wa;
%DkJ]/?em;m.C>1O_Ju`)bduP<ce^6:$aghr,k<p;[p/UgD@id8>ghf5Upm\JV=M0pl-/Q:[dFp(Kq>=+[VV]'DN!o]0>e2ag7TV6
%hUR"uHHR$-W4RH`eUcRtlr_/_8J_<:_@#/SS@g2@e9sD8f&=-pC'gGFUL<RfJ&"+_C]%fi\QHuq@Ys&%eJVu<@t!(q8^D\eB`)o$
%aL0b"9ZtPVm]5S!KdAn?o"RcOM?ka>Cit5>1JS!k?iIMY]E_f]kIGUEf>^gmp)$hdpko[LQ.p^K]aF*@\s_Xj?V<\=LukkAl*d`7
%]t/"?g/B(.7qEaHV[LU^hpYr`F?Pn7o>1*MJDo&:C\WtoG',F9&5eja^AJUMK'EB/_^b93P1t`b'I)tAJ)1D'3`enP+$oRMft^pf
%)sI'A/o\D(p<?brYh.sUF6;2aXqfdZT7.Y.!Stt<5F0&n1nB-\Iao[t.9#+Wq>2sD4*)phePuN%W6\;1=?6"`dpnE,d@8WeO##PY
%[QK_p[=;[:^VKWMgQ;*]:3tXabK^O=:CC+Q46Vam"pC`LK..2E*l6<#Iu.CG@ff<U>anj[/AX2N]AWu#ol2_2:5m,n^`]l5.=Bk6
%06&KR<Gq\X@]8k-Kg>+-n+*uE.is#9aq#2E%O/8Dd_J1^k^1!;8;^kYZ!C]s?neI7^p;DMa;jubA(o3lNJMM=K6(_n@_^c!>drpc
%mhK+]q7^=e'>ZWIj@=17mR+SK(9G>&U@LNd_`_o/Yf7MtEdfk"6k>\OF*1`!GQ)$Tro.WoOuUhf[jR^O9+m#>87OfWpB]4(/Cf!T
%l1=hpOI/a+0F]RF4K[j+#PW`=]phAXiB&Oc)b8NpG":af(WFMc0q$.f1%rsKME'fc>s<P)Lp)oHs's"B4Q2W&X\$CLIBSYi-96$g
%q4;HLq'Pn2GuJ"E4i]1SMcZ5^E>1ciQ!VFYNa`:.4`Ab)VLD6^f9k>:d]fH6;b;bo-+_(q@'uiTJ1C"V?MkJK[^>-t-ffD4qLB>]
%AEF$6P]R2<aGY^\%?/jBTgdFZghFd--Ai<cC'V+1Ud\T=e/-P".cYiTQikUQi-IfcVUn'c;k//%1Yb-$8RgJ$`$ePIU*S.+9mAg1
%?ZG;G0,h2(HD$Ehf-!EF&RDBLrKeeL?)7k.H?GmD7#,(SX[b3"RfQ.pj45G175/[PU<f'O/!iRbkr9uG53C"Ihn7$*o9;B8".'a+
%"T?YQ<Yua`)r5(Z_-ss<?<68aLAcl[/+hMVr$O*IFSh[0fO]aM0i!??_.A<tRJ.r;XH8MJ_]%O?6MHis^2.UVkRBGEW/B\u$P1-\
%iJADL>/e)B0Le@]-n[Vm"_Ao@e]Rp/_gYO2#JBO[r3es_fWLk;U#$.f_l"1[\aBF66f4^Yc)Fah$P1.==/$@n@pXBsSquJBSO6\-
%(i%;;9oS)G28&E41'/1L&.j<L@<er>41fiTn-]c_POmXJ2b:%!pVOge.\6(@P%'L\&,ch88!+5G\aV;CK."P$4\'P]M-V8bZ4a+O
%gCCo?g440N/8PaT5.`L\a9rOU3]q3I$P31?Aui[T8kBAnZ*#O6F&-62''8W;%O4OfmY-ENKD38iGSgq0XB6A:_F+'b]S1q<U9jk-
%%kS:^^$TdUHZIQ-(ES<4`u+?Ri@d<8-o2r]>&,q\KnnWr*LbdmIGpl*YN9EKHQ;`]ARlCZp9Q=PXNpeu4:K!lE"l3#/j,*#of`5,
%LZ)&Vm!B(p0=_A&mBFo7P2H]Yq^a&X^$p"1Oph0JBpTbr9Z]`uD20;69n*s#NhAKec@q&4[_<LB*;76:pV=EOjWLG3mtHN!R-K</
%GSgGB[P>FQlb)^@*6L[.HO:#:7h6;'Bb:r`\>:am[iNI?N/>4:E&%!n6_B@'cpEf/$P3+fNuQVdc]6`i-\;^*qn;JQgm"7`4DlY2
%Kno3d.?%+E*9VXaT\u/`Vf7G"&&Y*NA_I\3*dXK(2T@mTiSYLnqWpko3@2Ds$P1.m?rlcGfF&5g$EsBWg5m*lHD]rsmQG@7?fBON
%/$=*b0Q)ZXn1]5ke;:Q+/j+6XB$Y=LTtY/i&G*U)E8VGLr[p;A[hoQ5CA8/I_^rf:RkfdiET,k[k\Z+!nJK)rLZ(<YbZ#\#Knl@k
%DH-0gOp_fP6>nsXlp_G5iF,Q)2"70+_(IhY*YVQV\C5a"^';NP.k3^:Q1W:i"6CR\dhEBAZZ9tC90$oY(nQ#`g62h7E.d`[4[kSf
%WbQiH?Ec]XgU>;h=du%AFXJ6/5/F8:.SSF&%@!=.N6bf\gTB&\AT]6L=ZP9u[C[qtDJaELRUA]'<>/Z1(L"qK+,dHs$lgSV?M6UH
%g!sH!Mp#nnqVoZgjhp)#os;Kro=o<Nr`<]ggHE.#iH?0j@rCa%cZ$o0Vm"nGf@rB2<i^Ue=!s`f>p!$a\XW<5)gBJJLcoZ`<kI-m
%ju11AVJkV-kMkP?p[WA)`k>]9*U]hM5KE^b8R8],XaI;%rm=hcFntlNX8Aong2lO1)@;`N/2a!A<6P/Oqks;F`pNBXHZEP<k5Ka3
%>HXY[3-0PVG<#Ki3AW[pk>"rS[F39MUsGVIJ)0Rp/=:R:a_n[=Sc5Er@0LnF]@YXjgiTA$cd!KDZG]k7@hbIfNcl@W>`Y):XTusf
%6)JY>imLj-^6U%[8GAVN\ahN5C7SrP"6W;48FuS6/)o=g\%?di`U1C)%_99Ze$&JpMc.K>g8*-Tg38!c<BGWgEkAMHXH:*Qo!dm7
%h1*N-c73N==4qCH@FjF!aY!0s7qj!-ZaGpL$s\qJjS[0"Pg&4NDQsUp-TSl8jc\m(N=C8YQs@:k4G@[W*;C6*XX>oo@QBi?\_g18
%Hr%S#$f@C=g?a8c@1e4W1r$9>05jo"3?IAV]!6XQCs`=Ok(OHXIU+i,o_\M(r4;hbpB\:ak@BlB(T6r0%`bEO3VjC8ABO]?X0M^I
%mE`*Khr_Whn]sYac_XSFs3)=0*_Q\;O9_>(l18,WDWCn;o;cldhE8B]HNncBd>aj&WUofkk8`&R(EG.9e(^qcMsZK%6J-Us=f3(c
%c.YJ/IKqdaqkj2:)/m35JOQ'-EOid5"oF^olb2\mj+X8o]n7lbT'6F*D*Jd:d+#_th#>iXGF(Gj.B_PRiQq*))u(r:NppjDND12(
%riU("?pUKbJRCXl5VenHigue(0I!'"g@KY0T%jn4"h$\,o-Z8:EqLlukLZp@;_(fAFqK&AIW;oR@iI?kc#/!Il77p`SQoT7G3Q\(
%GI+oEQ[ZIR-ptf<h-W.T>LUPK(%SVIb0LW\Ide=]GWd0D.8(fH&%)dNgY:POX'G*5P`<jJ@:&]@8]KB!i_Ffs]:7M=3"Y4fY>[i"
%d%hdM2qI=':*M3[AIqLK5cn4F5AtS\!:]<Gj,:q_oC2(&BBF09p`cg(#6Lu.YoqIJ[j'W$'OLhl3<arPSp^lp(&W31s/\"*OT'.W
%;9/Y;^jEn:DAFUd17Saae&Ff$.LX1PTQI@QB`;+:>f5%Dn]k($,64)g[!n>pm(Ub0*?j0MOe#G;!n'^<'/QW^(C]`o-Zd."k%PDE
%H8TQB#kC.r%e+9rMjDLKo<[DJH,FHaGB8=<6Qd7?6GXLp)$g8/Pu;;IB=W%4[:HT5&ksXjk?jNUb\%m5<G5TAIPWFWRrq8XkB?B:
%X#=,<jjVIkDWbu8_=bqQnB9MUJPb:@1-dR>\k"@7[+NH)0nPM\qQ?qYm;,Zo;d/#K[kTS5o]PJb.pSC!Yk,eM)09)3O:[XEQEtF?
%4*NgLpiL7N"chJ9Mjk*rXDd1NOl%jrXjU+(ZZd5+VS-m&Ba\NgH&&Xich8hqb'^>N@12])hYYKRJ%10N0q<]^31F1*cW/RL[tUHk
%b;)&2#<L(JmJoXE;+/Yr*l70ob44K&0J>[u)sc;6D,M!Z(\24LO#MNGhcGi)q#0R7VDp)`4!7+]FE+X0Zm4Y*$%/&fq8L[d9`SMh
%\YaSUNek?RK(kkHce@7I!mW<-,3/A9WV%0/f_[9tn=pm[=-c`f&:UeG>;-[a6`1Ja#L^MLJU$BAT^*!6ZBKZ^qgB\;ct>js&&d.n
%57aIR27uiB>)-td(kKT.?<PO?B3q)WI:[FHcV#egA2dZMFhaHlS]VljJamS)D4L#9'$VYt<B?HsiFHlSr1oF#^KejN]M6QJeK2Z7
%4kZOGKR!t`aucN&-6n!tpPXioXEq$).Hg%`e$BqVFQ\6+cd[03EGNrn$j9sLrQ=bN(lX(hl)YiDa4ef(6Jf)egGc96:.Pu(Vr3uo
%ATuGG4pm&T2Q!f>nge?ugUJ!P(VMN6/f=JlqbBR*?*R<aa=75e4r&$T%;#53,6#_gcZ8Z:U)ZDK5V&Y6^:@JreRFs^Cr/[M[BgY2
%4r.a2P!9tbQP^26]6O;[Ye@CK0DMWh=D#8pU.(N#EL>i<47+QI,,^W&oI6C_fZf>Z@;X_^]B.hBru!4!(LUI(es5pZJLF=^,A.c3
%;gN287<;'oY/=n$9&G*87Ub=?s/*-rc%r:pF$j3>Di4jJ2=(@<?HUt,kZEVYi,L@FUbVPjfa6s68]/;gE0!+#0QQI/=H*(*qU9N$
%@Vg-L;o75[[i"HcB*RCOF#B<!/hI(t*WQk&#LErH&T!r:B+VF.@H6P\XnOgf!alBTFtVK&'D_.#Lcl"Sda!=F+O*94kHDUA9-@O-
%.W'qg9uf",9u/,_3Hm>t,Qg?Pj5ALa6OGr'3VqGoGpp4t2a8kiHMHG=e+<R8)&bhO[BmT'hLt7#\s\&c%.A:YEdMj_bWn*e,PJn_
%i'OJGfQpZD';pEHg)q1WbJ)osV_q5J?(h:a:[@U*)p@%(Zr?d'L\ib]+MBWC(6B_MOBWO`9D:OQcaRV,cXURM.;A001sJ`JYa;\;
%-?-'2?[\l8R'mtafkCRm,0mQ#Dld(pMsJuc1Zb>d]k0t0;;=+>,/c'-eC;saqPqq;JD&j;&]'eYiG8T?.*Gh]\#8Y#0.7_n5rY.R
%=nfNQ,IT;6!bT7&iek8Ad?H?-^p1*F.W`%0EH:_(Eeg9R]AORYdD*l$%'u\tI:k2E,#,"ZWGYEh#nW:JK]=A&f=Rp38it$EZAE^Q
%?X7"?1Z\Lbhqud\IZNBZ)MEGem3A5*s*QRa![hm6gLo9Xr)72<NU\k[Gdm9ln\$NJ7=JheTs#KG?&:^,m0Yoo8HE(MdUfSM<`rH.
%=OVSfD%i&h`2>-kCu0`Hg$5qrmE+9#/[qP/'5R8diSKPL%:?D\2NF#:R>bb4Y4ELO[Y`L/50rU-DCfr5Q*bb%U0**iQQT3iDB.WC
%4,^hh5)%Qr28:Ej/)j3_:BdZpBl]<K0lJAU!ikBfHN3JmiR#\d<m9A,2cGBn)91Snfqc;\IU%B,VKlfk8<R69&*B0,9fe"286l=j
%qmM9)3T4U\cbiT+%J&#*+1(5/%pdDZfUOmVG@O&d?_-E3&4PZG39`lNiOIYeQo`uZTW$(e:,(JnodrtklE@bs2/?]7P,f9CKeL\%
%S:Y^_Jckea*J-8c@u87Ch"nmZYg\"5c0\MNH9$K=`6IE!L:CB75/KZ!QGFYJfE2ruLZEfEpOR/T,FmqIDt-AnV'c$t0"(kQOh\Te
%8,*#g8>4h/c0R,cFb0#sRr@*:7(p_g\bJ.nMAg'G7lUl>5pC$@MG]s6#J4,I?=A;2A(`Or88;FJe["WOS*-WWj.2rtjH[uN(oL&1
%Y146\Q7="USh0GHrdL4$:sC)`kjD!YKt.T/G&_4@`Y@pJ%31EY:E):+kGGnpQqq[S\]53.5+d4qBei::aNgSA+\esH"ib@H=MkQ[
%B6p9,C,SGQ9XB#eQe<.72DN3/D\?sm;g7raN,F94")/uQ00D3]6Yq;j%!)n-.o,<pR_R(Jq!5Ab71kd%oedliaunDXrf\XgFTk\_
%FA`W%gmfGJWl=N0GM)>>^uCE%!9<KLGj_A.q#*m-SakM3mHIIRc^h6"RDZbNlt3kFY+3(N0Hu8=cT*AZ;m6i''q9...k,e>#NTfA
%kW@jgS!KF;ABh*S^<+#q!Dddo3Q3Y#WcM]94e-((ek+t7rb_O"ffe)iBiCIQ+0Elj7E%OBAD%8?(tmUCkNt,/IsrD`iY%:L1pFoc
%Tj\-0;&`%1n=n:f(UfqW&VlE*a7\^u[:Pf;(l`Nsp:7G2CsLO!F*XYJa;&h%YeFH>o^U0]7Gs-g("8(B9cmU+Jf'@h[iV.3A[WT[
%=E\E+,2PID4rsXu6.,EeJ)rrL#jB6,"CC]iq<R_#hMGh7W2FDk';XA`En.SX*H>k<DTOqu*iFq;.&(ZI\3J\bh!h`aL9[d8Jq<1o
%j-id0N9=;J7$&-MUc>sdArOiQ\.p12Dp3(hqnSm>aCLcYZpA$o<V\Cn/S&SPA]T>_^cFM]A38SOq'IL"bT*8Ad#JX#!rfp[#TY".
%,N$iA)9hW=pN(^qa!8CoEB-59`\<F6@Aiqt4sP/sR&TNBqi&D^H.iiGP'<r@+EmWGcg<J6=?T)653`?gLuJ+OhjD.("gHJS^:8IZ
%Z:)FQ#TY!'hfsMjO5mRW0BV*rFF5FZ@QtslB7u;kK_mq7QgZ_hj'rsVbjdF:H2N%3+3/$18QEdm5usL):ET/(NJn"oZb4Goh/Xl4
%3g6OAr:Gt#gY&/j8]auo99@M]#D+Y%H%FLa]j:Eu%q*3U:HH%J(K^<,$>f^S6T=9^#7+Vkj%IPgF):P\j;,S'h[4O:ce5T:7r9Hu
%(>el8QIj*u07PFZIjNAe=3bcf)\c-L5N"d/?$qUFkGQNE5,_,kCRN'\]!M_Ye&J8H?b'CL4KV!;k%K$$cb8-kYsdY=6<11/8#a?X
%.S^IcGdAo<hNjN(o[4E"k^e2!UosI.[m'-r*OG8)mClESSdX^c4$Tj.Qpq%&4(2CUdT=YeJ%g'pc-@\=9W@t-0af);c%H<QbQq0T
%0oQ#5(8eh1.q[1Y^qs4kj"a7l98i`)2g==k-uj>(P)C'Z=I<D"!(ObU[_?7l/AAo(b?lpq+0asaDf!2-\`HK+Q!gV]KV,Q6D=!c#
%Ehgo0Fi/q;_+g+\3lnNJ"f@[Fk?0RD_#BnK&mS?I^b8C,-i980"TI+gOS_:mg:83o#'1gcA;0S:k/?MLQ(Q:pI!aOk2\Y#-S3p"l
%oq0fn"m:g2RA0?u9eW.Yj4t/O[bbSd+2+kl=YDbTMp1h0L\]qoji?n<a--\mfqR;i#l5iOZJK.4JG,F)*'VQ68N`mjE=6AHi6LU:
%9D7>&0/FC5Mac3mf]80+0/Ch3Y%]3_i,P'j!o8T]/iYoTN%aRjd@UVJO@QsG'(rK@BI0%BR<:Wq/6Rc`m!h*a'%[<N3ASECpV"iU
%\eGfI%=?tT3N$9.9sn%<DjFVMg5U3cWBQYI9HMDB?7"tQ`J5hWcCM:u9UP:75L%m=V&dZj48Z(g"+/(E*,Q:Z;?'DU9K%@MD?T!$
%pZ]Y;EV&dU=3Gkc4e(b,p=AL2bJ+2*fHaL&0PLVOIb"YS%K:`g_9,=uMudM3Y"""$'s/&M!0;3Kd(?f9m`=@7BOhR4gIOLI>d^+s
%1Y;T9]5j"6hKQ7V,GU]6>,:WuaZ_4jaBb6,5p\unej&5G;)"amiKFoF4Lq&I#>Ih^,QU<$OCjY'AU&69nS"JuigP2*^]!bFZOFN*
%\'-DJV0Sl''1+=m)3$3U^NYl.[JkVeB[=s'#NB+@F>9I<4J1.\>tO*0]<t8sXAs\Pee=^0^felu*q9)%^"h7W<@ZUc^H4N:;YR4i
%mj+23\]q2BK*+j)WK\=_8g<Z"=!*X[<^4a%o(BMUq756VmmO>6'D,HYeG!^e^PZ5[:G+OadrkY8H(D_#G,EDfN6:O(n,HeZ$VKq4
%bAqC]:#Gj'T=S8Zm(@<KCYll!>k@e2F0kTqiHQ];IP!c1e&(NQ1:?#Zg#/&![dV??\aBS?,fW+@MTi:^AS/Qdo=/#8Vibm^mp4d#
%Vq^<)b-U!H[EIcpn*3iDkP;_!nR_Od\@r.\^]1RLY9]$$"-/OfbtoH:aG\0+-ZqN&el%\rJ_"U>,OZ6*"^;r*(6ike[huc2Z"E#4
%T;'E;6(=NOR>,0]$"aA$Q`^._(8X-^TC(cslW?+C:,S0*qloXrO62udoSt6CNu"9>NYa99ETC(5kng`o03C/'3Tn$:[]L!aVfpbi
%7bdI_W<e%m/4FfPG.r3f/7F$sV/CIg21C%$K6]NUIV'C]_^Wo2a8Yo]rd!H*?@6*JjBeVkm4tdr)$,Qc8V7aePVT:%2T_(L6KM<Q
%5<t?R@DFI#g^m`<OlVJ;$"Fbs,GFJ9c8_#=f/K#5[ma!aFRP14\Grgtfg%pkn#l;re)Is6Tble/nZ'j*Ep%h]ZM49q]l.5"VlTX6
%ni7Tif=Xht+GF/\%+4e<,$K9=(h7Z&UNP*2RCeEOOtO0t6g?::-qsFHJ/=ht9Ce*%e]AiN[Mnp6AA?p]%kL_u;+NP0&ca*S<M0=o
%H9Q,?non:cLKjAXeiANf"hg_64I<bL'`aPU0a,:^;=C`gbo+'/Ca/$OK,*i>NP.(u!G!Jde]IDcb+L-"-'`>:n^f<B*],YE_&T9R
%@;L#79Es?Lg\*RREJpm):GIG1o^fDR)MnY>StEKaF8?X>Ou\U4-DAXEMVH7'7:#;g?&9F]Ah/4O_e0E-i%\8RAs2a?BB`$L4A_Ch
%,b\W"!;"D@n@5;l)=JV"e3a9QB:M#Ic?0%S[Se=jBoS-hST`#@fiZ[_4P>k=A1,p9@%?te7S4&8=_WBWbKSs^/9m<s=<_C4eJ&Xi
%$7Yp>FCfGA;otH0koCF,a]8(&!4HnX!;u9`*cGukYY#M/aoGA#PZ4fsG*=:?78mr\8DAN8qe\NDB]Z7,ogRU:-&]pb!mWV[4(g3a
%WZ,ekq;`o$$=WqSi\&Cg`,Ss0KXD-LR1&B.Ur^d&GnW-Ze?jN^Iqi:NpWg=D2S:8uD1\o6$qb./e=(A4/#aH>Oa1SM<rVSdg.>mr
%\852,&N1olc]PXRYSc\!kFMSg_g+4KqfA>WNPS`V*ABD>(()CICaKu'\-!*n#/Pse&.F#.EO\:cV:#JHOZ"VHm;++%2N?eb?5QYr
%l2q+md<)SmfP^[ZEt]d%2B][L@tD;O1GMdsWK+q"c^]t&<?ZI:TaT`@CN"^GmL)nbm:Za9@br*R0:n;Vd1l?9Ii>:,?o/6q&,a8<
%ZQNacHeg=5pda^oVka/#g?[+Fp$Np/f@elJB)c:dS[tMNdQ_KM].srt3IAH[<<$UtFga3[dQ_BJUV;lX<:j$e"pU@s;EDV7.K]dr
%![lVdHm>X"$nMc3#sDg1+@_MJNe*muf6k9u$kpJ;)0g7'l#`EE7"3sl]N=F>L#3VQ>!Be%O+[JMIoSYJ$X,lYAb\X4VoQc55>oul
%_9XKhlN$!'\(U'5<(icsUL%X4:+Xf!qig'0K:TqYK!g&]f#rmaN/;n8k4!,W,#ka*das=?\AT`nF8sk1+5[`]FNsj3IWL?%pa7Rb
%3[Z2_XMj_1![GjF!^))7EkJPo)Z5[#?<6QP/BODW:GbhrKuAB?Ts0A>0>I%\6hp<^T)Fq9&grO6B.d&QJ9Tp]Act]LE]VELdcIRS
%Bj0MSSdJV#Qh?$-W`_pPV$&p?Z^dbJ#tYo=,*",tL`60mbXj"+.qiCdK\qXo$r^"9'!Gq*'gEH//?]CY6Ib\0_!<I4&sTJj"#Nl=
%Z7lsP;h<,l4A8(@PcW0P+uJBVXK(dZ8<U9Q#Xc`?S=!<$=\X^(QK:P0V/LW!^Sp`1OVb<n$9p;Y-GZhg3?dU6<g+6](P\';&?qfo
%&"54`?@f#c`$Y]c+c6U`PbkI_Wrc+NPiX0XA;1mhBE^c>q'_u5Z#=%t0J=ju#VZoe!ke"b?pKJZ#eZDPBZrT:Ap#/V-?'lr=_6L-
%gbf7Scg+h:;&([F;=uJJ"J096$q(>.ZCL#E;,,uiH(JXNQ2m@!8dSgT+4NsuJ4:et-L:/p">`jT&hhB6?36KLYMb1fO;.m5k[('o
%>!`8<P417mV#V4,"7C8"JA2,SYV,\_%muWc=<a>K#ZJ\aS1%f%TH5!%)EUf9-LaJ+HD9jB/Z[$_7_jP;Tj%t0C%RsNfMqqm0Imml
%o70c%k@GR.#jC2+2G>"c&U?7WBum&)i'la8m:!Q!"!&-Z.+D?i$&0[FJ1L`b8'qI46(hCH$S2Ii(P)]7#n`uT$'Bi^\k_/!)N+sM
%%T&AmCFB3m1gPf9!Xr3IJAr<QX,9HQ5kR1d#_&]R@>Q[9&XH!5<mZY*@E>GQ&-2*\#-S"10Ou$4^p+r3,"2Jb!JS<m_[ddO%B'DS
%8^DFmr0"2aAtZOW_ZU-CAY6e:-pT3M&)`k>'(c<Zkn<V9ZbLVtVC-).4(N1(9[Ck],1'O_"^(C!fhUZuTL\'bkYFRoP@4b`QLO6.
%2(L)fRZN*oAL%g$'8dq%$'7566D@!q#KBHYJ4)\(1imu#Xo`k/2^Cm"#T?fB8]ZDc)>OU<#@%B^U;.<S?!qmX[M469'@6uA2J`S^
%X[7fYEEP^CH'g\AWWGs]G4E)bp`V1*&Y=R_^nF#W\Lc*?6IC;dF@@Ctid_a\!N.YMK<`6c(lc[0N6_LS5XVQ7:gn'[$#qPIp]=lh
%:gm$1ca!Io%S$WG5k]194N-=b!74CDOTi%EA/iV1KW5$=BJ9M_:.-XI0R/[UY]-<HoRoOARKF*4KeQsJ@-]4S1a%,K"XeK7nZ\St
%6A&mS`./)c+V'nW8/"fGdh>L(,Zl\7XU\feRpee6;5f(Cf-DA+$8N>%$5aZc-3+h_5Jj4A%YOus\"pmJi5=D`]q@JN!kD3i4Tk!f
%I.&'66NLk$k?up\E1P8Vaor5O%SBk+!=)C8?u=hA&K"l=@)YQckYqOkPZ:Nd)G!=8PU;1i&HsR>"#<[fPQ2hkBuMpe<C(3g-@iBu
%J4SWBX<,FnOL#:O@,.<9R7Mu'J\GN?'O#eC>YV"YJQ.3^A5mV06klLZF<KOl6/5m=P0=U&!\qe(-puoH2FX9aOt.I728Bm**1.mA
%5QD:Q`&!AY63k,WfdP3M+p5&8&&AoYT[5(h`!/j:?_OnC-)0Z5i#Mt1L`L.3\BP!aa?0`+i+k6=N%Qm*"Q9_]UDQT;E!5/;ek$&)
%a-H7E"@?,;@0ontV'p0D>PJ<=3D_UF#FH5-.T$bT1<:.EUq6uf#TbFLPY_Mt4Goh#!B)>Q);#K9?:.GC)A"5%iW0pNa)6$a369LG
%]4L"q&8aP4WhQ69!-nr!"%Y`jjp9Chl2Q]-CBtV'UB]_&_*G/Z,6jP=,6m-R.gJWd@*>41@#A^9a$PArG8Z[X8cNR&An*_)W[#;*
%O9!?(TT"gXU3o<C!dGEAe,W@E9]0-FS"OJS8oVWqS2JeC5Q]T9_uWj_"*-LOP,SSY*lK!')7&U*(*QK<TR9/#.NPpR#SN.rctLdF
%pgb6:%!F>H:`<:g:ljIg2'sr#<J-(2]V,#81.,i?#=Ycr_<GX>"GdEc6I1b%!S%Ga##<6/&Y]Y`%+%@E9h(]X&L%;8Jr'`0'W7V2
%!:XC@0G3<0.lC8.+:Ed+iF+QNkl;nr*MJ$J#P1*0G-$M>K*KM7XsI2b?uIG;P:"']#S$/JYd,O#8-U@N7YSpi4`koPBZ:eI;)*\l
%#mMnM9Sl66VP/7PKgGu3BYZ(4_?rGj;%`A49qX,eLgJFnK3,'$YpY.C&^g206)5MX=:gQ&A(=P46m[ml'P.93:J?"bM2'S/n>]%-
%&UaeE<YK0RX<i]E!k%M#%4E-R/<)gB,pYJf[.+,iEIisUj9%a`_gI$&NV<d4!\T-3EeQYEc,$1B#R25pJqb3TCnf#/2irh#UQ/Kf
%BV7%eBUL"pF>Qhae,3%5nf4;t+k0*9V31f\8QH6^JV?O%<($J`M1f6'-A'+r&l:e9b#'Eu4>VgOdl(#[EsVum)M2ND>EUR"Ob/Bo
%K`ieYo+sEYa!RH\<+#o[2$/`^naILjWld%iAUlNn'eojp9O],s@R^Q*_C$IW5i)M>W"QBV?q6Ol=0"i6+>b,B-;YrnG*je98lTIL
%NW<9581e+7O%_gI5_T1rS:kQfR_u1%#bZjZ.YncU!3cT])?<kEZPQ3*aJ,O7l4^D=agP/W_/pM4K*W]#2%`gq)OEK/9,Et.W/ua5
%E/_#s$H`nk1I*T#)l(3DVh@hl_]5l-;\:?Gin0?Qn-JB)($lA51c.19W)Nmf%1k?udO;%?_b^!k,_?:pV+VqZ^]\:"OZCo6h@a3]
%0VOXqV[%;H["9S+O3H*d4QC&lV*-1t%&/FS0Q=6)C-plY6d'K-s+-J'c\spTdrGR'*eNDP*$B2UDa<Bh*)6Ta.7"c/1$TBR9bR<`
%!oa6J(D[`(!C;T(o07[$IKG=C,eBO3&b)%\rArtB&K*u+MZr`.N"">=D.k!($\I"E%A9Oe2b6:l$fIs;CKsp@,f!J*qQhq/2/k#m
%_ClMB7*oJ\0Li]0!eQ6P."aVo'UgkbD?(//JKGed=aYn4L;<lMJM8lsPb,Yk!<fT.df9p`%MXK3n\>RTL;TtlAb1J("-n^;RZfA1
%3NIs]M*_G4BJ;[T4VLfWn:jlh+S-$h+F,F"D3NsUFLEH*7t\lO'98_o:d[U,"*;EBoF3L)a8ocbTAcdeq?BoUME2-u>_+1)Iu;^k
%7,Ym:!8c0;a=0[3kjO-TUg_)$&LFSnpr,+4ekl5nU_a`*6`1PXd82IrM8B*tA13$aQ2kGhU(?o<neR$;[NIFS<ma+O-j0f5O>&(7
%1_uB"lVA8%KK-c!MO#g=9Z6E:>&ReJ14_cP]e%PUZ@"MD?Qr8H%oiYr7`Tb3@"_H<_,)u8RmPq(//hur)R'3EBSGRK!galEHm#.!
%iP@@*:1SYp+A!e3<,O2F&m.[pTo?d31aN;@StZ'C;NuuFI)$C(+>C$)kQq]Me1qM#AZa;_VSrXeT2R$/:a'?O[EH-lF=AWFY_'$_
%!"k"689/r;&L#&"&1RU30a<k#BMs@@b3#gG'YjbrU^ITfS7'u(./@sZV2%+0=E]WInfkt97Oc]DTV)<LU%e_NnOp;9BE]5r%%:+r
%R1[RbM[_D?.7A16oE]"-JM"dgN('8JT[;]^7.Q!5[/YY3A2"4%jBt(^1_JCV2&R99W2MH+Ur/SX$$pElrh.trC13("XO+ODWX!U%
%PE<&#2?ZMC(gE`m(D&?+/'r)d6if:S0TXL($;Po$c4?;\!b3BlN!u*[oJ@qj,7Qgm:U)#B,3!,9kX\,)&6&_"NN-DMZN\<E$&.4=
%<24,\&PME5=TN:=^oA5k;jc>V6+:6P$DSc%JrUCGS$LuXG_9]9$Z,qK,9idi2&Z0"<Y"J<TMcUJ8dL:5dD4$Mm4l+!(f@f7#TH)t
%foGV96obg]N57/4Q@Q4g?=P-_$,n9t,mJd>Oh$1ZJ[ZPE8AQnu,MIP[B+m"+VkJd[:`akU*#]P/&-Km'RD@TT2$*tG(ra?Gq?6/8
%3g\DfL7&FDVU<I5!%t%3VWc#^<@0tB>QLGd'Mb6$5TmlMJm8MkOu/aj#p:J>&Ci0e#f[0qcFh$2`$L.UG8RI%(5@J'9.7;d.aA6s
%)JDo48l1$?0ieX!3BGsJ68N;m'3_FSTf$)"$E\j^+tRdZX9=:/^ep6s6>I\O_2JBS9ep1Aa99)k,3(/mF+C4)Jq.u1EsC,Ug=3n?
%5`67/Nsb4s)4i=j""c0Y<@T^u6!-*%%D>.bn:>K(S4#RS8-M*eBp92h(+aEBknlKA,5ja]dh+tV"@3]-"mZeNLam70A\k:]I377n
%#n/bk,2+lH]63c@d?Q(<<WG"pEM?3g+fK%8.>Tuj0gq]/+UV3D<eVS.k_a@NX=,rWl9se5Mki!kmGfVZ$0,WD-DD$.cd47U%KWdG
%`mFp$).kSLW?L#QW&RnT#/bU,F33("F<^tn++VTHWr[$oqA$Jn^_0X]m58im@=8j.%IbT]3@m1SSI3BDJS.f8b%QCU1<S[*A'b]c
%RiaD3ERp'"EB%GJc5;<m`o2kr3+ErR(l'oeiJ_b9@iWc2LGQs/N,^ge*7"=D)9r4,<Pdl&?ic%DnI-XU_3n(Q0boKaVk^$;c(T',
%-@0o!"8.A(=Z@m''ss+NU.)D?1@e8IW?cU$O\ppsa.r5Sg_?&V-\0&WV27Z"=D.bm)ra&QdW1`B09OOX'1a1;B+c*+!*!K&AAEjd
%73L=odnPq<0pEh8,\0`8OO6cq!N&%L%o>Bf3-H@!$q1:R2(%!j)U#At5mW:2FJ5FR'"%k>H#Vt>$>B"h_YHs3(DFL7)Fl6r;2T@X
%@N;3]7k)GTMK+ki*2OKB.E55BEKjoPV&2]O`_hWnHVoYQ"Y*Wq!W>h9GP':W1b*)to8/E;[CiQ?QA%7O:]UcYK\iCl22%J,Z4BT=
%7BFt%d?6nT7;"-'qNj;`($h7&ZU`^c;6pQueIDm)0^:JkD[Q':W*o;"C=F/"<Wg--]26n[^/HoE1C>,;crI0(P0j2.7HXWFIjq,b
%JX'hWs*sD8O8]*`s$-5Wa8Z,=0`N4oR#KZ0FOUFK<IgfR_3:.bK%5BI!#j&tVJfJ_dmMKufZpGOUb;mSfB?.!+h$T3ihc,o::F^"
%<PH1.>%!XR\.W1;K,2BdA>"5_20^$kN`HA2(Fs=`;%W"Dl]Fm`k/_'&/7flSBYfh+m>XUYAC,6=#8%!`8K9R6%]rEdH[lTLOoU[R
%h>g#^*5EBr0ZF-PE<'Jg^_d;1`W;%u)$,\cM*LW#C-HWeB*C(J'_CNflR7P14JoCs`/p"i(3kiS:Zm:[?5/WW=a<?-%(,.":ccB1
%U4(`3Sur4)RfEXM>+ThBLr?_n1pe`W3X%si+Ta!!P+6MSO=89<0G?RN7mIXd,(fuN!AhU0$Rfd)R@RT7iY."VIYORiUKnlk35JOO
%n-9u%6cTR+j$:UDO>.5UMussX5fPdFn]qCpi$g$(9HisXgCJCaJnH7K]Qkn>O)dt57R.f(jKhYPF>jaCfFZQId?#W;Ld!*hr-^D>
%<8><h#(&5(T0DXf7adQ3(rDr%$rRn\(eQ2;H;VJaV!t0Hb^89q5X\>#Z]`^e-LW$.:Yt#PDZHFg%KMFi!94'p2ukWB!/q![irHlE
%@/rPM%Ka*A!+mAY7gTY>!Pid]=8`;n,Ar/7!1S'72^&5m9d'L31mSBFJ/m7$BR62A!l7Am+&QJW%5WN;"@0f`,^H[S3F")A;<\d4
%h"SU4$Y4Ug0\AtC&sI`OKS(mU.G*%I>6&FSD-U=6*D^;h#6;aEJ8kQs)upf\!6,$>7fWP8OTmAR%,"6cY\&pW*2)PKLnuMNVW'>O
%R_gUk1Nl%[6,SieM*=q]>K/%p#\q4H2b#dmDOo=Qf)0V3gAQ,V&s`o_GaK*@O80V`3](IMYCSr)`M6jpe6n)Uk+(pCd0Rer9*u(R
%R@HH86"aC'Zs\G/eP1"o0ln3C`#%\+"<FZQTP]1^(LA&-iF=Ngm"LM6n?Ecnp;4jVGdnR8Y1`r<&9pf:G?cu*$omhbW$YAb(Dj:X
%+.3q*7N!+N&dii)hWWZF9k-J9PsZRHQX6V44c)]gJ:KE^&dW.er%rRM"tgkjdi,h/8g\@`9`Z8aJ9V545W;l'GbG9f@+%N#iOu"g
%.`4C=Jh0a^$?O,h['9&V/JLW`7ssZZNudbq,<g:hs&V8@<0i8?V$S-RdS\!,*>9&Z$H@uCf]^5Hb`[3<'U4"<="V9fFt&\_`T+"j
%]['-%W_EAbjX/t&3QE[1'J^RJl]].?IZt0femu[laadjNd4@T*VLX/\!-=<@CIGuci.ZM@hJ[,prJnSKZ1g?RI`L=6f_Z\9^CK]K
%?!DDjbrZA&1G,0(DE0D2!49)[Xc!V'G0lY;PJEmnf2u\"YDVN9^c5;8n.:AN4n&LRCdquc+srT8R.2XuM&l45b!tl)"uu`?(%5q'
%%%b>2K[:CKH:2(/oe#CO3@(+cb]6!eVt>2=;^A`@TKO/1A*8(&r/R?*Z1C&#IfK.&^Slj"b8Du57@1+<X.,j]>.;60d4)f08&Qp,
%_4kP>ctPPQYu_'2b)B_M8')00P7j)%"X^kN:g4eJQ9dR.leB6nT^6Q8Lqrl(C37*?Sb@32Na-#giHXZ"3<QKT?tMZB==R(tr.&bi
%U\-UJV6Rp!G$)cple#Vd402qIom_P1$6i6Bb\.0@VFQCV0A8enPV\q&J3AV?TIVPI\+)2>'s.M$pdg;+G^^O=%h0M>HW/9Sic3HL
%g:sRhd>J(0K:*=eCENl8@4rh+-7*$X_!.:J1a#0ie#"jt$T#aiOoR1/JJO"4.gcfDQ^LPkYk-bg2$;]%4\7C)Z+i?n=3(=*fO#Zr
%X8eC^<<3U9"!+OQ0b)?a*g&T6@7V%`I!R'2q22V7DQYHH'ERl?]ReP0Y_HhVUQGc#JB"2EG_S8I?\Xk#FI]#N;d%*2elY:mVW1fe
%RP>GA-7hU\a):k:d9qE,%^/6N77X,@a$]"A<@m3DUNb"Y1Q#8U1/h;nN,A1U2$Io$!JuM"OGn3H@WY/t0j=@nSS6*=ha%L[_.POD
%%UJ0fHSHH13k)N%F$"P_a3O))\K*c@A*<RCjkS;3jsl.e"3-LlR*:so,i#MuF2;8BU>o94_lj5j#7Xe'C`DCs0EE%$'a0U9hVkW"
%;o"?$)?!\lpdD]`>t";,E<A9V'c&(:-q?.j7m'q56TebL)R!?]_8+R)S."e(+a$25/K-[Gl-XX:<T`"eI?otfB2r%+Z"lFED9&gH
%fX2a3[f6]d(6?[+f2bCAbPYJ$HNM'gI+NIW2):.*]N2oO82d<'(-c\.er6M?I:FoM(bQ+m9B>ff=S8CCn(Fb@U)Zs5HY?l_=2Xe_
%,.sF5`N3ML71gG!,3",#%om4e_J!X=/!iT6.LYJBKcA'O_[d2tQLS!OR2dni(9hjJ_equD0="56(!K-:lQ51@+^KX''er],h$a<0
%B#<jdQH&@PfNfK/MdpsNln4=S`<"a_F:\VR5:Dub]U\dcZEncb0@He-[<tFah]ikeV,&]g?7A/I?,J[sHKO`s9HB':9er#cY1?&C
%K[cZh5tfU3cl&5+$QWei)2j1;@P)+Jr#p]E!hL(XVPjK8eiXF0!\H[eNhT1ch-AD))O<11?@[SWA"Rc-1QHn'Z-PE')?1.0,7ejK
%Vgo/`H.K#eU/GjaZFrd-ql0tr:ie`e!YuJnA21)9QA@&c$&XK`OjF4hdlDT5+^4l&U5rTYYmWF4TuJ_7fS(6U:uj#b;aj,2_3?aJ
%=9eq2.AoW]Ueq/L`ZGHeYZF]SZ#)G,J3i%#p8H8a$8NCDJ4G/aYt#*0=:hPhW$`'j3(R*.`B]ecMFJ<:/;T':n;%fe'a,s?+X7)i
%F0'nF*%8%.,VUe]dAfl"iRgT;&sth(H-k2p)EUc*#AWTjN?+tt3X6!D<Xu^,;-RNC-H<smbScd!%SC/j^uI\T".5Jm-0n3+DhNnR
%Mi,T%KmA9(JJ+1\EGnR9fo<YMb-NY@P+e"[9Gb[GYdVQf5JS7$.4NV(9#=):7;]oP[7QG!nPMsS86!uI7X9it+KBZ(*N"=\?&63:
%5+t;36,Q'<H+%pPkLAf)1WjiF7_3qJ,\IIF-32=[@[;/$ETli[[K'2N'NM#g73]h=A_"e,f%A.aHWai3C[>X2QZuXq?>SU`8/8HJ
%0m?K:h1&l]3&9C7E3PuO%7E8F.ZltB#7J0)d#:CT:$;%iG2u*I[K=ZOVE\B(8,'3>cbS[.'*FR%c^$r@;2J[W!2->'1"CknUbc*W
%'-dZS!23C/)8]8I(^J3&"qA_\TcM0+f%@q[]3&PZC[>O'k@2R"HkUO1FNlq^`@L[-p67\F\49m&MKQQc7)5=7OmGftHGW<<0LGn@
%!L#,[i/&9i>nk8fpKGAj+j(oFKerKc-keIu4;=%u>!/@)-F!Fi*D>G4Y/8gk(qU,b=(1GF"M5"%LfNW_LQ]2:_d``eV6](ALu_"O
%OjI/.Rrp)&LR0%!g&ngg.hT%"Qu^#OG3gt11l$@XD^%7]F2p!HV=5\X6BYs)9gj:0.hC<u'-t5M6";Z87'T3_?Vr-N?jloCKiqH>
%W3N,+E'm,pg%c[M&0:ZK]`_;!Fr&*C_Ur!.3t#P2+ja@W$i0g8mp16UgN)YnIKB*`:.KgDG[J_i_ep430VF//\7+#Q6O4Q-!p?Fg
%3RuKk2nqZ([<KQLP@Y%,<B4i;Uo\]77'&6fj<-HBBH(DVnI$q'qGh;"_lTR:iB8kTSaqWJGs_g6GVK1KeD)ub4NE,jea1[k<Z`aT
%h,X@T'p(*BgV0UbbIL=E2h$:O4bp`eFH9G@#@3-O4X;Dkp]P;\(sFc$\37E:c,D`LiYmE,%C09&Ys;P=bEmFNOKIc<9;),<lZ?*5
%4_/koqEJnsIma/RlJGG<*uX>[>6s?jY<i5abop2#"8G;YX)c/AYDMK"a5U2c,K"&bD7&@F)R,:(&d<VD$0L:7!&5&@JJ5q$EFp'D
%<2kWTHK.==StUmS5I\*+kAX]e!#9JrT3p?qp4cL[p%!0o*J>/pdoLYJNqJN3BQcT5CcD+R`qhXF^TmcF44\&;<jJhK\?qg\'`i]j
%dJm#]s0Lg7\$"U,iO=S,h2@`N@#-`cXM`$3Z^hlRZXZPM>;+%4rd1%#?"HrN;6*!1frq-=JnqGhVO7G[\euJCr,mS:DchD)iYrZj
%YkTjPMZ`NV_hQp>cfAR8bCT6+OoqE4ZSt1Sf`%YD'UZ"u?3=Ri*ea"<7I$5,8u>^@7[!]t1)^?5-=>*P9K6Xu%IoUT#4*'F$)jPj
%ZH7'_]K"j!2ZY9YH0oZ!>6>=Fs0).ThUG9;@"Zr8W4ZR/%?#.,I)FsYDHNFN?C3V0WEm754*5NE3JMsY_9uGYNN@k_gmA)b])5>=
%4/D^O$U=NJIK,'8f:S#i]3YEeI,cQt:)]]Z1H`G[[P;NA[bKn/%OWjY/9'8ncJ8`(05_S<[;[hhWa.4*p+D2OmqX+r]ci=Ocs'o@
%kL>0klh:3%!t,TonB$A5D#)pVZ[MMeDsVm^mi-W2f_[=Q]aqFpKQUX`[TP*(_Fp'gR@AAZ--+jMQt_!XYHkrUh@An-GFOe-4mN`o
%cW1mZ,g6u",,$9PIVA7M@4[cV8<!p\`/_tl1e*_ij=LB$lTh:DAt:%1N&WIjfb6`&h@@2rmR&<cEb"PWHf*KQ`npa&YdaGN!MUNs
%V/[aNi8T])lX2E+^E*ns5KlqY\qF(k#:Z.!0l6X>.Wi_FS)So'-@[q8mmcqR>Dq3s]o%"E5nK:Y:kN\(bO>HYN'kCRZ6f@@ln_'[
%LOT=mR1BB"A.]4k)g:P301!;V$'W\6.G/9,Oqtf+=$csYpOMc%\G,%']f5AmEUSm6s"*St%a:Nph%.")E^mc6esG+SQ$da`*65bd
%2cVNKc<'mfN+u@=@fG"(cZ-L2nWX$FA0Y\O2F?4Nc"r,;K6:)4H/!U[k2.p#$(`QodC=O+<dDdL@UITA]s?[dkhoFCRR<tfi&IUl
%+l9HtL:oP4]j^@o%d`9_/UWD#)Au_*AADU*WL="n](lIML%rd.5OOoJTRXIMeNYm#WLrQ[+9-JPdIW>8rj/!dX)WNrTANf)YKq[o
%YK?ikoiBLT_u-1am=o?W&P\hg;sKh4_'m1crKk'>,A<\A@OJp!d@W?5]s6d\7K;)HW4f==X063C*mR,6/-m('RK(e0^\Am'HOgZf
%Kh;3ED8+mc()WJg/889\-nR><8iRa'<8;EsPeo6B+J!0UkL)U^Rfi?[63Bj&hF03)&KD5dKIpN8j+Z*a"\S<#<NTY[bks^dfK;Bl
%\SZ%rFst)=X=q]=-U*mU,c&m\5BeO(qB)esP1CR49.`LKUcsNR#7E6[43u,0i)"t4DWXlA'T*Z;AIK"SL/!i-pO5D"KT),N<Ef^p
%gEsC]BNW:#5U(ampOFPKRg&pG]6?-NaI$Ya08,_E#$P`0CkKAn2Uea!Zu9m[>_h1E6ojpO/49&[VUH:6:OHVr#M=!T7F3diPsM*1
%elD;NYiU$gaq(QdHuE:5-#Dp[CN=ddeaY(H`W2^-6]a':*g!%qq8bXC7<IMiej*rOaGk6Z/CZrdoUH-MZXLWY[oWB/[)UI",BIG"
%bZ(;i070gQ:To6cmnaL(5+V<8]F-OHD"p:nFN,`DKE.GYm[^i"5C,>AZ.Kk><$tOuD(3m;CCP[H[\LI#PeQOO>uG<p7%%jf6!]Ke
%::?gZ;7kt.kj\^=9J3qco6.^N#1/C%-e'4L-?,JcYX>a_.N7"/n+p:DLeTDCOgPVG@K!PAk:W:hM:#/$AO+5)m]tWWULGg-g!i1k
%G?iFQ,.K,JXt6^WF(+!8FiEqmP2D!sD>@ugE/%c?#<c36^eQrFVT(Eu&/hO(5XX@9*:0!ei2TO*SCr<p6gEHY9A0:'qqGEbE@ugQ
%*M+Y./>Q;CH4B^2/3t]5$=J3@\tCXm1+Y[[(.7u``Uc^sPjAX2>/p]qfO[!g^_#fY_#3.UQ0K3,Cpm"',qoP0K"4h\Cuu@/@#NML
%^E;2i\:MTf8GG'VhL>!2a[M^Nd'I6OohEcQ?d0cpg:_l]bW:#4r;@Iki<2/hI)@k8jYoPP='n1:L!HnTqaK&7%%&cf5/abbf\3q<
%BY('Z.tU3q`.!EV+o@<f(HQj63#RmbH[NP][o5KZg"4lE<^ot3TpRg(]f()XMJ;33'<0krp:11N(gkUSO#l@";h$F<n@k=^rLuZ[
%9b8_Jn$alV-5fWa%c6'VU5)i/*YAB6Opb3WKnHel`ugsK1m3`+N<_$"A2/WQ_pCWQn$h&B[/C!h)9-V05O((#lBXsmR?TWd\sY\P
%ri4T%?TQFdf;=3LZbF/IO8Pa;4QIIRnTH7K3\#^@9b%amPVa"-WU6C)f*VUk\*Z2A-5.6S$F!jJ^ITMu1g=McOO;uNptbWq6O%Lt
%EVpsudHD5/>jgtVbGS.eTsEFm#]^NZXi(koeU;knlcZ'W>Rs4P1"o.<4[c>(V7#8[C?O%RQoH%PeeQfGgPHlJV4kIlfDtPV^cPW%
%(.'FU;YDG\mMkZ9B/#E#Z8VjiK9J:VM`]cM+<cQ66B2QXC;ZUVTDRoQ&+rp7)X8EEC;CX;,PD&=fB4)\*cck1&77bjqhG^-^"US_
%s%EB6>CCU9i+l&JH:d<;i$(r^;cd&qAV`6[HJi=pJI(ts5l,M\"jEHX!8YL;Xha.]h:-a5REUG>kl[uBKg=KPe(X0Gc/`.s,c^lK
%#9F)97LY`l.6+ZC2ncs&B]@PrD'_7%5+V;_>8U.7^UmRukiuFfT^:G#P8=dbG`R*"<2E#2L-;>iLPc]#N$%Xf0Fqf.:%(9CA\3TI
%*hAV.ZM!TR%LgmHYrV@/Bl<q;do13^(j9no5^#/+jTAKZH@OK.a#g`1#6C+J4+B<V-[@j[?1<6T;FNE;bHBOMgJp&ueUEn-ZSaQI
%B@+\8\6Zh#fXb3A7RbIgoCXR<lKaX<Yp#5UgIT&mYg>1)=Ng71Ui?f7Qq]Yk*a!7pp]nWFj%miE.#Wo<<%B[#hHomOqBJ+PJcG9t
%op8Lt3<*a'A+7f_1qVC`=r=6;gch@PP(P3JYiPS,cg<T(lRG%n!a5TV!21C=N1F4Um6/p+aCIH$$r,qA)(FBpI/&"KILnQkOD+ZA
%1[CHp*P6?H@-$O\-a/X=<q$"aX'VEJp@[P=rJEg*bq\a9rDSne)bi-kLCnmYk"ee8@ILT!]^k(/_.HY=Vf<]pCZjNDriU&sf$I0[
%3ro+MKoZH"l7%bU<;]s2mkQ6Kj,D<PRY!FWXnqt[L5!sG^lA)4I=?Y#l$E1+8o4;:em*A^O[Qh$]&C3em/8%PbG`eWrUuN;2qE"r
%O"XB\M(?.L+sRn9T:>NP'!IGJ)h(ur?@Cbqc%m3'2rqG=>.!PO01gjmE];USpS<#B3(bfT+>0^'"gWg#PC;o'H@>cQh\X?e&c"Uf
%c"65:r9#>INY^*$\CQ$%6jBVAd/?3FGfecRi%a/E5Xd=fH!.`2G+Y\tTnY4<5.1@0TGbT^@s@[=&#pBpV"^<?Fn-.@'=uY?\j^p$
%@RX]5HPM7nn*g)Mp+U@FkbXT\F._lIgjnY/dE?JoPF9Np-Edl?kG=g(cA#Uu#FE@k$?9b)'+5[d^*<*ZF[^Ttcsuh:kI*Wi4mTrG
%+b(s^elH>T$U?J-I\F0f>cPK<JRUeYC9tnQ6h2'4T_-LP?41]l><,UiEr^M,q1*qSXH'(T=9(n76nb*IDH2LFFq[5#13g0@`Qd-a
%I<YBf<.&LnefcOtg=,WY,*4IB5CZX+cVRfG!Y?GO`gA&&=!7#B?NBA,e0"(D'm/:51cT_DIsC\Fm8_Kq?g3RQDTUBWR+%1YBB'*r
%dh,H)Ir_ce*6*0Ba*?YH[j3=sBHamk$'Z`I5?(!DT$J`A5NeXW,&&Ji^XFh8TRKJSCB0V2/("C%K=)HRXhEc_kN9/Q%Y/R]o)!`k
%9'1cAigZ:J<oD,BSB]=kg?@J8Tbo-mS;rGS"VU8if\Rk!j=;@lIU^e9nAa+_b(hnX_UP%A8-1u\Gj[/*h.>U5<Cn@g3nZT9<$A=R
%0B@EP_eq-\!R`:UqL2.WVF[F"c%Ah>P8s[<gSr53]Y3V'rE"m:qYgb;p&-W#EurX]?O3TAGtGE*=0bJt,R=!C83to:.n.^iq1mj+
%]AaY/1H&1dY;WXFrYj,=8+HZ%6=WS6&(8'Y#TdQbV25DLM0&]<'PTQ,IAf\+J4X(&.GXc2hn87Go=of]M_I8qn`eaL>VJ>,'AHm,
%$u!r?X4%mc_@$fZ97CaRn<l!o^fJT/!&G#*]c5rBVj&3(AFo/;<'(DD9^r7\.kSSm1&?HI5hCPS*nVi=9(TrrW'OEM@[%sD@hhFh
%Dsr!(^rbRU_#%>rbgr\MIphg=J*u1>OF5?2hR^2qfrNCI/^^Nb@%A#.!!*`@9TcJFT2XK7T:lK^$F;Zk<AJXe*]4:%UI>Xe5r^aD
%KJ5_V_*$30VsH.$"S<%gR0%!f*IT35V"V:3^?YC]-]*'*Y'ms\3^2Bq3$Rt5q@cCnV/30`Z/,0_^lWM0(2jImjUU3Ggs=LUNguE&
%FqT2@LH=+-lnBItIfUT_5YC2'ld]lj.+H;e42#W(Y>(!j+A/$UZK(p4#`XXd5/$=Ur?o!mER,j>d[?0Oh`P?:FMesHT:E&6O[-)2
%!A=feq%"H1O*oM@7.TcME#Nc$aAbGg+=1MmgfnHJ$$cQ.Ujs"4U@%S3iUk`4;pi6%'uI^_maHBp3m`Dc1TGU??!brO=F^AMpQp:\
%5_/]O$,T*Yj3t+pM3.Nas2_/L=>H@5QKhV'!ILUIfp$88Q$#9*_$\8AVkbpL%?4%`B8_G)#=E:MQHL%_BG?@u=A!R%39MkK*Ma$G
%*aMpDB]Ci]<#?/ko2f#nnc#Q?kF]oBoCJ^uo]aYn7@MQ.cNAu9LUJV@L@!lk0+\411b'!S/$sia"a1Kk#Khuor,b!$/+c+<V^A<+
%&>2nC@J^eWEe+\K0HcThmeM1_jO>:,dF21]9D&gG^EV[RL%tMAf@M+nIo;Z3lhU5!T@E%Mep8D,@O1kM5j&aQAA6*3Xggbu'dfb8
%(%?R/Gd5^FV?Gd_3LT_egalH;0jB1qW(*.3)";gm(%Can&pIQH<VE,#A7*HUC7>VrI%+t*LA@Yq?%;IGf@QY^4b3:9*)AcSq31\^
%01DJ7!4=;lkjJ1d%`ZJ@H;To#2N)3+&<5lTOVihgh#@!0'QP/Z<8"6?O,jT6#5m55-r<m0#G$_hd@T;u`9<mgqV(AFfR1Q$.Z,dO
%C("W:npYr5leBb15%p;2XIagNmAK0Q?7J#U36n\Db_FD3fba&\<CQT5fY8\4Z^%TV(u2>&ZAN#>cb7sL!W(#'Hb%2r5>F9Z5/\'X
%eW4@9i2*.Xgb@W2Q*4KY2;(9<BF$DE>'j/Os7J7AT,qT-+5h@mDEltLo,lRW8S9Wa;C%J0dXC#"@ues.;>D81P@`cSF3PAeL@;`h
%;3Bj;,.eNP25JQ^VfYG35.BbW@:I0S=4a:_]h9_l3&@APi&+%ha<@.6iqo4:YJ85J#NT3t6!j$V4R)h;;U[?:SsqRm/%rKbkjjI2
%aGu7%SZO?.VWuI]s'PD/ctZ1IbHRJRSJfX-Cq3Nt]`a?HAa!&Bf53g6gjLrJ&uRp5S@hB8#c+CqJA/&96NI&XVU)FV3-R&/W=_:=
%^$5-apt&/-LQDRt;^,R3AaLqso##]jMq"WY2q@U\5cRo-_+XA@!J_]KD8pg/[n'qmYuGESeW@>\52.l)&"5*^h<]C9OK&ut8lPuM
%fbMJZ)NA<0LCs[0iU'@CO$BnnoA]r0^L$SYN8]'uFJ/M.>(ErBfMiZ5NdM&1"nOis],D#NT*+[oPc?Q5m/7jUI?jj61e"e/'TuQT
%_tiN?!6F*t:7[I\(WdSR=8gmiMo<M47f1L-p.UKT$VFs&eGG_!5Q3IO,rlb*h0EnT3c8oM<-6^`qDhqUa#BFq2$dF.%4HJj9[Y,q
%"`GVW:3:hCSr^'(kc1k>i'>s+6PK#NBm/A#R+jB6$9?Tn8-QiQOqG0q>9XI/Rb7`*,gBa@:4acL`D[U`odL(:U,I:(1Q&ojb,1\4
%Q?"2]R&Q6MOi^/"^4"tJAgcV_&^s[S".iWinr*3+?A_#VOFno)d2@cAHQA/H2)UFiIL$EeHV>`U"(?tH%4pA'Y#T74jn=g]:+6rP
%K'm7:d'RIj,REs&:0&.RdI&`6fu_.L=h/rK9_RZnkXn+J,;(09=r6Ep!t9Sc5ZP11-T2Br+27I9"0Y-T=lOh%AU9Y:kOH"H`#J%,
%?-M)^4prC9[I(G^F#>E)U78cQ(L]^Q.+0]7a<tq.ZVr((;U"'(nOP+mgp=%%<*</i]:58p<a)nf%qggDr]m,-3hNPNZphKZJhad$
%[YAfV3Qc!*C>13f`p(8Vm';sUWX]9Pam0Q4lCa1D?ZM0a-<e0-H6Q?<-O+!Q!b(OJF"R)WclU[HoKAJnV^4EkJ%\g`-JH<rAMWC"
%oIQsnSEc'Hq9nGQl@*/NMDK!GPL1N]gZ!l]kHd(One#<-n:gUgnj-^i;'8_/5]M,lJ!QN6;+*3,Ocs63V0OOJ:Vcr+]3aBERC.sa
%GD36HH[1K1l_S>Ri0f]NBf_4@c\+h576#?h(orfG?e#nCCheLWJN$c^/b&R4b1d9hArbN6?dTk>$46S1^RL0=.+bP1Mp2c1HIK.b
%!-n:M,^(Y<4qm\*^$54[=3Q+=9OC$`gokccek=DJGX6b0K]u@A+F6>IM%[*2_IQj[R1M7GI=uKd3mWbgT?!RdZKU@)8RR[1K>N:C
%\'W0b+s2V]n.qCZlmLqh[S5Du8ROB;OPkP)f/+eurt(Wtb&#^6HdIC>U<3db.ANsRX0P'j^u*L*o)<dX"Zt^E(W5cGf3bGQ^V\PT
%a+[\Ng\+YW44G$gAC2:qj@r&p'kjh7?#rK!.qo)c=35>h!7\_hr/0Xo%;;SSD:,iks2fQR&(:/&KWK3P_ZFD0Ll@rFe--*eZkS03
%fR=U_@.dPH8495Wk#s/]kOPgL6eT_a;OZCVf?\fHfZ=J*AB<@;4(dS"NqZ1TO?@3S=-^q0>8O$lR2mF7ScE.F_CpuQ[-ZeQ\p/Mj
%gl2;DUoZQok,G8Y$OQ^[_=t>7:e;4'**6#A*&tCuiTqDCN:KS7QVAj*<(Jr5R^2t#RR\^O,EtqL8nGU#"8A;'H\\<4%M?nC^miD4
%WL]<_bM6?HSZ;'E1T%s;,1UbS^T>SccHj<OO_0*Rb,752Nb<cGk)8.c(JT(ETh6]p:js5spC]Kk+V\W*"RW.H/d=UA.b5JUL)`?h
%%a.Q(KWYC1B53?R)W8cp!U3Vr2Foi!A"Sbk4EX[;Lk6<Q+nXo&4e_8!\''1C77:^IN/sN`on+D79b7iL\Z-Z-i!Q`/.deu]E2[fo
%C+&SjHqW&0TPZ.T`DH'JmMn%%_at#jLUL=;S"Y@.@eq9t]eANU5G,)Dplf?8ph=[=YFG_c[<m0G9&>fG+Yf!M0\#GlNCT,h#(613
%.=..bPQtqAcCOc]pMS.W[i'rm(8ld/m)RdH:_+"=Yb^N@&Zq07^jes^9_s=]r]6_sA.gul'M:s9'l)gdOg)s:inbQ;cnlgQQ6LR,
%#YW-B(&8-Q.,1=%^00\o.hQT.AL*s]-87KIMsbc5d;5DkM`qZ/,jNU(Y=.R]<b9N:9jCt_2gV*Rg*_&,*D.bCMFMF)L8cN<R>2TP
%!lE^_TA=nW]<9o^,W\*9_C9q_g/<P\N+T$*LM&k#"SGnmF3P46reMrO6;aG_f]23*%@[16Ee-TAdTtU3$@*i0MC)47^)L6ta]DML
%Bd/!;Y=8a36\Hf&K<?Mr17Y(F9(;qR'K+R.fD.Fd\=boM8=HtPO;X'_,Z27k^uJl4[c:&eoU=U,"_@!YIslj<Yc*<=)UT3XG`9fe
%T&-+HK\aa;rAh;%3;!M_'=qD;c]#N"Q)1,e7c=]Wb(EG9nlV"M-eIF-&"`Y:H&HInlg)9Vo%lE)h1"=&cnPT2K:/;T\&0;.EsKms
%WK,mO3Qc)j.m]p?)-_9uKr9[Kl`F48.nUK<E9T-X*+[%5U0?1XO>91%!Z9;Z7@CZ.E^F:MmE`.=]b*iNP86kapom%/SIGYQg:\HQ
%E1<A%"OJd/2J!U:1ZV1SKt2H!?Jsef&^b'1cK1p6Rt^)d3Q6A?^IK&BY`32EnqZM(k*g"-,)oGur<Cb%pNB4PpRDC.+smZ!&4&Y$
%V,fu;'D\)Pj<54a4kl'C-n5oA1XI3djEZjJ9]#NWoCJV]:<I*0mr1%hVhct#6"*5K8,U3FPiIB>!.U(7<Hak:.7Z(Pck>^/L(bLs
%TPZ<nG,8cIlSIRh[&9VM!M!:Cq48@ZoDne@GIaEiFJptFMf[V%m#3PPG]7q!J#T>;9knJK]Ocsb]_==.@K3,a/&KCN?JX`t/1&B!
%EFMmX_e2cnl,9OC,:0P7I<_-]Mu]u.%XQ4U_DjoG7$00!A;&Tm4Zn;?_ocoZi?3RL/a6ecKmaBUgI>Eap7qf=eQq\H0<`IYE%kTO
%CkibE5(`?'\MgpTp]=k@a8(gA2T7S[FcbPNlnpcD1FsM>Bi5&UR2,0%8#MHE!,WC=IVq&kNp9?"qU=C$7Dk[>r!^%#a]!V`.*Wej
%h:[ac$HV&$j.u&+/9\[QEdCJ6:u_3r9aIIYlLle7o7UVD(ESA8i4%@UL8mo4kQs;jm_Zf2W9ceP-A3I9P4FW.)/uffJ&1qa&!\$C
%T4C;W2J=B,\=Y94NHJ"%UVt.T];fr#c`*iCXJ%#elr<.Ur'bt2CSKi7lohn99ge?SI)Od*5*&9Gj%luWP?gE3=p-))K4-ti`KbfF
%NJ#Ya*"kV?6g8VhhI4sN>;C;"*K-7XTFVkVP'Q0l&rF.3=Zkmr<AauDOrY34mH5uoO@nWCnCKbe'gbW*ShOCd8k$trA/Ym*9(.'D
%>4[V5Bnr#SWg::@Jt3VuN[d$)"V53Oa/UXSU,0Y8lCNAIk>WkT4FI-QdI1)Xh2B@MmC0[562]AWA]k2c$N,`XHj3Q60+?tLQ4c[q
%VH1)CF3l5kRA.C_I1M?\:-KB>XG<;Dhu06"3<*+"nd"D_JKedq,`3WG`LD5,@.S\=%sAIA8fNNTH$_g-MK[2n+_`;E;%k546X!%o
%Tj2uH.:iRF7m"LbK5@M71B<csO$jl8!R<UT"0\/aH=jiX3J6Ar!D"pkfpu[b+CFa3:$Mb^9<aQ]Ea;(lAV2Y`IE)I?+T\Q`hBa+5
%D"E<Hak!ppLhg)"B#eFk?d[Sn2.7,Idiq,T4.tY*eWe-+.YgMqYe]>s^-$=B,eTbYn0JW,.=cPu/Gk,N$J/M(iea>EoH9FCU)MKW
%=QjMfUO^WS/(pmgOEL-:C6)<]_Db2kO[Q%VLUF!dZ=/T(Qj2"pb?0.3G&:\Oa>JcNUKn8h=e)qm%iU-1?jXG^Dbbuf*+ua&X-:Cd
%E?,i8&20HIE*%B(2=B=4^AC`76>KNn#MZ@.BH2[O_BQ6<7SBH]jD.kFn/f9i>f7\bGem3K@I+mA#hh/&s3e;*5Md29/m73C'@>#I
%hZ^*hO/mT*AJT#'5pA##9FP44.fJ2a"Wh),qme.(?9EA%`=ANGJ-eOp2(FU*TU>&N2:\O3crhd(gEW4=EfR7]0oC:bX+HoYfTZK3
%"E6Lr-He%GIn0%QQA<Pe!Kn2mnCHPJ!<Uk0n\$c?1o5cf]G.dla^lKE@*`ndp$6>B:/rbo(6bGN+=L!DU\Po5:We'0$Bt,Ef%hqG
%\7"D"r7K>Yr%]c8`qR'dUl#[sJW$PBr=OLJLk7,7_rZ][10]WG5<PXG0Hj%,-J<Ag7iYI;nu;o.mIbUAT9\hsZ<f2%,VHgG\Cj:t
%pmiWXhO%iQP"6+8*;BUSPp0KdlGT`aQqphj-Q[Y:j]lS\\cF!0"`IO2o42pc!GbXVek8@i*KIq<.ed)#b;566dN7ttQL*t<gIR1c
%&=6k[Z;d@9BW/b-%'a[)&uE\C1q<gG?gNMg$"QNZe/TUY/qeDr[2A,5ik]XL9QM;ASW070&A2CjGbore0i\(j>atr4KD\O0qWibU
%HH^&1`LD`-qnE!S/IcmCWF13F6t]0=Isg'M#nN0q>9P/_/Z"8iS3>kkiK-=89,+r+g;=6f[TQL/M%*Hl._&W,^,:<m]M.o^M[L$R
%O:b?"MtXJGF@E#>c]4u*q1S]GmT*,\G5-2El/)R[A"f.j-8/JK9W$[o]8a*?d5)MYFXQ7SbR5>/UOio0'SNb3=OH0&OK"N/8!&OE
%e$TknAWS&'hJ1q^7XY\BJZ0"en)JErg&9DC_*Q7"AI^)c\)lf8I06WH4VWPc#CEkO?.l1>VL$A-2\gHY8.[:s2n1bg\>fr1:nb$Z
%MrrVh/b<2u54#a;r\=pS-@Ip4REYS,nq+2aY^R*i!LuRsDUp@4p,O/dFB='S/R%[2p+@OW(E[Gkg%H1_E#/N-gM-8:C#je)51hut
%'+c7MY[q$!+k<VAR<V`UG[8MX^8qJ=M`[lEn4-#L0WLD.l,[,Z+[04V<@bA7oTeaBRZfAqZradB%4UGE'HF*UcSaf&\Mor6/En/n
%O+O)rI:"E]`]bPW!X)^OI?;S8MS-[kh7MLW0):F]I\)>Y;Z:bZW_Z\R:uFI+h]:g^68l)ekN'uWT4<tJq"093IdUf@/o1,'\LiZT
%WKgpAo^h-^'e+ZN$o5hCqTHokq'j`Y<OK,PLa6'^QG%9mC??$m5fbHD0B2tN?5#tgmFTjhVe)NS6[\2B/rIu>&6LC+O%GKn.uoj)
%l![oHs$U(r=_t+i/TNDBqdV7ad\TSV6.M3q+d>*7dj=?<O/Wp^ig_IjNBe5+'8[+uS\tSmH;Jdq,XkhB20i7f\JlE0"]"tlp%ko8
%)D"^Bg^:uDV.2eC"]c>B,i4BN:s&rKp\AMr/rERIO&'C918*NsSP21T$T*!n&n+Eg"_s$6i-IPRHE?J:`;I]4OZXC?,h;!F,q9dl
%Jhc>.nsf\[B/49^:7WRp<4BirpVYJ$Cf/!uXe_(W1)Z5u/4'[]\4mAb5pr4qjMe4#n6Mo%qI]R!+nGcW1gcq\<3V36WK<G-.4k82
%T&kL8g$A]j&26\[0rkBi`,@H)OVV<h^neJ_57ZYXAM<^d>h"/_a/@CDar-[>s3;ijeU@"B*M;C&C[Fd18r@dDH`CCo(t*`)]f#$U
%jR#a!.QBabb_1'!?UEq3)C+K46GJT\"/X!Y#L,1ohn@2._57G5Uq!kS:2.[L\k0p)rM7)QZ3)R@H*VMfNgneLXpUH@kmbK!L**Ib
%\`%*\14l$B7=OME,lS"_R,]dH5u-qs!];HqXY<59Qn5O0il3b<)Wip!i%nPj0G/Rsq7EF[B>4&#^$>r:p#QK&@#je;7&<'+V%GjS
%MFsAE[d0'c_bH0-!,hFtB`Y&'8pjK3)-(m<e-Kb#5eC0Z-VM,\n08+W,_MsP7V^A7\)p3sM(LXYRS2Sr94F88=]Xrh#on8;B0km\
%qQUdWL6R:MN;"<UcSldhVSNUi*Z!"5F]"K(K*J%qN=c6Q>%h1fWE@!?iiU`N8rOo(a$U5)r(("Mi!iAST"H(rkJ7L_lAJ;_*itPQ
%rpF0fG_EdS.kfrR]0DPZ8lbTtRLj.]ME=-,"'QppKl_#qs'j*Y[oLonAMOZOHUpUu<6jS<I[mH[*3iHep@&Ij]QFr/F%`6cY"^[l
%9YhmCj$p/^j:-iF\r.9ejra\VO:)6QSA1km$$\QjCu/a]KS8;9U@dKp+=n3NUATtUQ(=>>$@oTt0.0%oRab$]N`nHoGBd7o7:4Op
%5f)rQ+,Z,YGX/r@miA,XoH6%`e)hde%B!TQI^Qs%j_%suM-uWlbn\U6(;b>=DBPrU]6kfY$=B59Qjjk?Hf+/1L+lS_oj':_l$%V(
%p(@l@ATN6Sdel7SbRfY^d3cu<?n[dADl!SNB,&UIkdur&#"3u36Un?!`(t1O2I7d;jNKM]Ymke"Fp+GuXAo,I!@Z6*4rcO>Elu_>
%OAQVK_N1rO:EH#TpV?lb4ghb(QtDi96k6b8-_8p;<=j(9]=]-_Qh/+/3Vc9=2VQlKd+jdhSRF_U+>Z<-$2gTm=O9t]p/>LP_8$b<
%(.*Eu.M/iDJa$ZhcN]4rofm3>':o#=qfQ%me$Sl/?Cp*;OHNAEj2D9H21Z"klA1oLYZQ3;4Oh>LWMhj;Q-_[:nd6b$efoXDT7HDW
%gD/H/"LK.lU([?%80^g&g_QA'_%+[R8MGIX<euiVjVR<I]0"bQf0.3V.Mi\n_)&/b]+*@Np=V'o4&]hUl3PlZD?R54m70E6Q'`P=
%#*h:_F-9/un_e*,E!T9nj-a@%'&1rl("eZ+.SNFdE#2SY`!k#HTRTpGWU*K9g`/'Uf9!pMVA(J@I:V'?E%I4V2(k*X*.fB`]3*p5
%m*D4'k=L)O#"4L]q=$oU@Qu;ME<s!0+2)_dg.3f9>eCr-H8=kV.FR0c$Pmskj[?1&KFFFHjB:]L1Z/9L;-ta4E\7V.oaG43FJ(o*
%fXg:&E?40_$'FVj;:R#GT1p*J(6ZpA:/D(lWSLS"L'K4CYi^lbSm9UKJ%3oIk'9Ce4"F7]PW\K24enVb,'^G$4I%KcA(:m=cri1C
%LgM'SB.0?EUF^_QWF42U4"UUEH!gA_1S]3aimhE01A:J>c'30IQSI"?r*<HmUlHB21*0ss'#"*g\L!e.Dn/fU<-=m@HAZ.V9.5kh
%1g%PV.?J!=8_`3g,j^%<f%J@9$$VtLrX^PFWNaO$Ep&J6h42e0`q%CZOJtVgZ18A,ae@t3-)h,/GBEQpBOH-'#+8D$1!m`*D59%D
%&K^]PKXO>K$!Ac"Wd@XcZR4)f7,3I"C^WAi'b-=?1LGnBb;P!!hpn[R4cJ3&&^HP]XqGWDT.JJGJ9Rs,T\9_$&69#ZWYf'*Rdf4G
%,2,it*^O.$YUX5M)Qm:4+:3Y4D=u?lHu<ZoN!Z]:'9o.cV^K)C-GNG^mESU(P&7-Ro[p`sW2eXY;F7q):,.e+!22Ng"d</\S$Zfq
%JQ^g=[\+HDE3cQ6Eq'?3-Q:EEcWCmMp-emLr3>JT$j;K1:o^EFe@-(iM@a#2X(:fIVpWF8+RcFbP9P9EGu6;&MY8fjbd(D5L5/b_
%;^QAA3]L]h%s#W8e2+b,":$1.(>WU#JfT\+aLQnQIWEBt!c9?-kXl<+L<phhR2GEV8smMGL)<[c3,A:",@*Q!Pro9(T*P>n_!ROB
%Yko!08ZI'R$(`!*/lk.&U2'],ZHE7R!TZu6CNJWiJk\[)eLT":D;oQWW?TQef$6a=Agu7Zoth5r52aIL.7cXGP9qoX?hK@P"Z2q=
%U=Xo1NcJFg(p0_nIn0cG<a`Ga$PS<(.!DimLP03g(G,i/?Pc,#Bfj:<Bf:-/\SbS&qY];-rb`?J=c:?f_3T81l6Cs-7(\m<d;F*<
%B^crVYt#OA3%B+1C)@/Z^:L($OaEAk0:loWWlXp89&oIc^dUj[1IcA?C%1%tB#rVh4cct(F8FjO\U5]%4XP(VrsT#"^5YplEcl4>
%M"&nN]@,n=_seje_bJKC;CM3(Wm5(/H.c0m/ZF#1PUU`'RQnUu,0Fe)XRh%9=1nn)Lu4lXP?LuOMNk[D=G#Sdr@7=.;i-.h?jp]u
%T&JJ95I:lTqY#r4"o):s&%d`);>$bRT=rQbaAFgYfslVA@QZ-e]V[e"q)Hct$%&Jll3cV;62OJgRA?62"!U`af#\*(ULPI5>r;5a
%T;670">c&E9'o-0LJC)pBfc>aoi/57(N1_f"q:HYDhb"PPZf\oCNi>MM`9dqX@F.\+&m6c8UmU0$lYF+'1Q"iinHB+iK9=$Gf:n/
%rT0,r?Oono@rM4';W7MDhm_ghc(<m\%Q[,_qBlt`1.6d8SW"qU5fIeghD!]L4n:*nc6uGF\.'!=$e\lXn_r_$U7-BRL]QC6oc/&t
%W'DJ%0-IlZ,PNA,[j7`"C.dcIU-qrdg<:tRY8"ftf4Y8!q1`Jl0q:'kR#]$J-AS5oYn^?@C]ZgbC(fo7QYTc%nO^QXj$TZl#;Tu3
%V;9J!hZp\;2Hc,9H>\Q2!I]8f4+kVNbbrH$e0s27ktr*kO8t%cYPNlDG_0Vd[dA>Q642Y-/RD2hae"!+'%G.#,\;4!24.+7</>5<
%+Y6KBjPGV2,=`H5Fs]e^n1>qu,!2MEZP(J\#1VS2HLq!#C2_Mg,i.r->u;jtQVr;7%;NW3q<:F>kk%LiYkSCTOJ]H!F$mXH'!)j9
%<S]ZDADH[1jTOVnm_%]4eX0YD?Ec(MPmlOp1<,(P!rYMg&rQBVAbYR9->I'<.jTfono2R3/hhR8Ql;QX"Cc6,dhXgKil[?W3l^8l
%C;cWCmga"P.`SWoPI^LYO)jei>quSG32\)I]*I-^b2=$](LNtk5Ldgc*c,Rh%5(pHCu2gpGk<*j6Te5lFH6+%iPuBGM,+J7"<2)b
%E2*L%BeI16M9O/`C4Ti58>@4r,'H&;<%ie)@;.,lLeYH$Zo$0'RO^p.[28]9%VGq0T[Bku6Vs;f/al>O,Dlf0T25/@)+BeW48fS\
%#lXgX".`Xngbf+?])mp5!0Ks[fIC\Ck\`'ADep_:C\%i,en_:Ij?)<=CX0b\mQf/(Lfk+`["XcCT,"!KIa\>Us&Vo:meu^-?QpcD
%hDA`hM2(\N0TnQRcE'k[<aHkLM=sD^muaO;BePgOdUT>hiZr^/!,,lJhsN@0OU?%q%Em$;3N40qe0Y_cSW.+XE9/!dYh5JTj7*V$
%:2/fI!d\%Lk[/Y@;I']J#FnE/fSQ@EJ9W>a8eOT==uD4D4l8]^9\M%cYoWcG<>+j`L&,cq<FhXRB<jIW"?9]723"4EbuT@hl.22c
%4LM0N(a((R`p/:s??sn6.9Wh@[X,h,gmXnB@<'.lSg'&f9.<E)8&1p66p1toU>QXp6]$IhUt[JH+hs3'G2`Xi@3IM2:o?sV^\e'7
%.ok$8bX@V4[Ac]#e:!i!MDtrIJ1$dt+Rfaj/B*uOYA*6hHL=)g)ZA*t3rP.Nm.;E'/T^=pV\h05jjU[b(*t;lo;2lV_\qf$CpN50
%*pbAZ<AaXtHka;MWCIYXh@@SKhQG0'$Qm%^l`9gO4E()ZS@@T0%/`RPV7L3eCloEp]p.;nG&UD?DUOc-L*tep(7Eq-4=;W=8lr,#
%91/g9(4,+=mqjn88;p]Y]G*1hWh\=$#sWA#jApJ*0c=1/N3m<JpN9O*o0B<\'d5iR=LD*:L8Xlf-(7P,e=9$-J3rQFiHhGlESFp0
%Xa,fcP5aGYIP#c9cHpkKrad<oRk.G#+-It5qWAag!ms:i8")4c1[`8W?;4j+>JKq.Oi:8qQ>U-%?&lk%!h.SROj6H3Z<khMqsZLM
%.6a[i8,W`L1AeDQZLr@,rS/qup$5E@/#72W/9P"qQ#mH=d]"XL=\pNgq+(^(+j@iueVF3N6r&4)ig.A:76FcpWJP[Se1(-c=Zrnm
%`3DQSS&&`1259O6LIrCINRuq60rIS;aZDmjl!?07eoPmQ%'!oK^h\mr6]Q;_S*?Zl\6)@(Y^pap_^>jQ[cmNt&9Iu)]GbV7QI!q^
%mAP!!%^Rak/^XPn9_#q.4EHVkjL)7%%DMk<X7j`2^Ye!;,^MnfcT<,+nh53SltVZ?f2fH8n$&VNW[,U*/s1G4Y&ROL7,RB#Pe:3:
%A\N!D_TLT]I>SK`jt$1(P^uP30ZI+`4_&*OitVER)i#^th'n697[dp(s5Fnp'P@*l;>Wlqm\SC3I2pa;i!o<LRcY/-'L,A,'VnE'
%\`f4I;aF<I#rZ]m;2sRSUPGYCE'iMsbThC3]n:s;Z2+H^r!3cGBakLX;oC=gWrCVQYXMsilaf<)16gL!]`6/MStu0@45#%LN$mg^
%Mk*i"81U[<f*KeT1<!b_'oK$b76A'8.F]II.#b$G&F.3bV!76%(Nho^6QcSU[/,V\(R[lWKIGJF3VGhtUpZ#aeZ3#H[h$JZC<i3u
%Qe4kE-XkCp?_R+-#Um2LV(5%)Tb/T5feK$\Z_]kH+U'rAV_,p.;2&:JIjo$q?*uk'/Gj]u<S-]mSdPp=D_GfbiXQqV.h2ToluW&<
%SrS@tf8/-g),'au\dcbdJ)r<X>GT\NFN[:geYPZ4U(^YX_1KeH=o#YHIV*9+8/b2\?*W>/\ESl9L1B7rKVrg=6j$&^P0d/IRu\Sg
%U$o2>#FUB^\p]j"1BB]dB&.taUI1?0(T#Y0DhnQ41NCCH8^WVe.Bp`5`=Y6;IYjK#*qT,0Na@dg6r<!FRo=.VqK=V+h*k!o@&/'7
%BiH6'\'DMMm!#tZb;\PGk7@5<n;A55SZuo[-3S@^E_nWl[r7V?cdFoQqVZ5Hs3)4,NZ\&Y$9oi86%-+O@;(]W)7l0o,"P;+l]^p[
%WicUr\TR-9*^Rm2P(.^J.<7J=AD1P*HUr'TiU(opDQV\&3ClW3AkurW!gW5D+<S`j,[GRTabcTGeM@Pa.ZFkW\mc31^/4FNPgE>N
%fTG8WAN2/4b(h\GM^q^bK&[cKOPGM-NF29`@H[;[&j#!OZOOW"i3ar!U=/-G?U=*O)B\47QT]nqa@8bZ()Z_VSgem"ZW94;aBQ<\
%j:l$5GIm3Ho&@<#MT?2%9k7g*bfaEPQ+<(P!u`rJdb.3d&r?*KYnNhAk-CHXKM8WbZ]0UZRms(g#=Jipct7NbX3o0f!&!tSp)L%Y
%2T0]D&?:*l\K<CVhOV5-a^u?App([L]KLNB)r#<M1V%;5G]%4L(LW&l=G>&^1e%V!I-`!p@sU;M=1k-\A%%(6cr<*?O5/4G%?=d[
%ltrUXUQ(^P(+G,e>eC\tFHB?0j0P6ka@)8s-"l1iaEF"s^3l2q/B_?g-a"7G^W.0XqBT&miTgY)`DEBCGTh_ros*[fp<^ft#Wn7A
%;4b+"$kJM"+]Tc<:J@G#csbmH"\46'c7:?A,!FoU40BpGf,c/B<`BLdj"!+u;'8gb-K"js?-fPb]_0a0ncD@R\^I6:qeFBK&h9,A
%h@f%0ilYdiWTTu3e(pIeVs0EM7cJ<2_%g1NnP:4IF=%$&k^uW%<=ug]Zq^PgZb7pqI8M5a!%Zl<SgtdYRi<>Q-"+nbd]VCVCZ5VV
%Z75OLJr2P(T0MPk9Ct(9h_!6P7G1EG9X/um&cks2\7:O3"KNS2_V%^N%(K:oJNN,JO]5,Zc6^QDSGmErTXSBT*2kSCcE!R4&VI_U
%=Sre0];4HI)SlgHBeN4d&h&TFEg23F8qSSRok8b)mKoFgq":sWcG\:`nULP]^\\OkqB,b,nY\VLq`k)Gs6uY0r:`<(5Q9cZqW"2s
%r&9-"YKUYXh&l[hLVN`^LO]:&r8E_:p4*(Vrq,[YrP//HJ,FNgX8dbNa-QUX=g&p'ir'u!M>tcus*nOEiu/*u6Uj6<o:r6N=.GJV
%PihH)<:!,$8(?&_.+7D;hP*5^#U+Io[<@ktmJBK^dg%:nHFQ%tE^ou"(aq35?qc6<#($k,G>BRkX0L-&g`^u";FSl)noEE52L-@O
%e'jW.6nIa`]K#dUd6,\?&P7]eH5$D.%gI+]h@<6*2*!>qSX_]F5"((?%=?2N0<\/81pMo%oqTKnB)O8Q,ihs[BFX9$ikeh/Up),l
%bENVk`ZS%FVqae[q*<G,"E`/[RgVnFr_S+D<tioRVeE@s]QA9r87*%W2`[/Ma1dtKY+O5q8ER;R1M^'oU/]YjOqBlEmeb])^sB1M
%?l.;?B.[M7(^)M?rS+u0A`0H;&LIU4a:?VIWQ`1NRe-E7iU`KM8\5p9=-/cEV*j:[OtJ8b3PZ$FlAMg()NoF[/$!2\LU[)sJ$okl
%2!H4&TfrRC^)!h5Sn!9],A4GUZiC4i9iRp6>5(<Q#^'_WMg8=\O$N$raf,^>c\k]IR:2YV0s^k.h%MD[m4$=3RS#D^H[3]?n;d]A
%,DJK863IO=#`b"<>R1j,E`uAFi;l$,,q1>j0ciaHXLc@rJO@3^MjC03\MAM`B\K0=D>i@sf?c(Hrut%oW6m#[jo5U,2YdJ<WW)?B
%bnh!;jF&*G#QWS/Z29HP#.g0KH=F0IhHV)Baa^LY's^ejD3+=eEDPd%M-1f]KZLt[S'37ZD&t!@Q0\3_jg5RB[o8g)<[Tq?7RJKU
%d[Ee#BQ*Dq=`q.>0O;"cQ583hh/1BLB/NbOabu*XK9<\!rH=/aWA$l/,*%1N%(ogpqOQku\t'g^mD#Me9JHnk@UAX[.=/X=X3NVe
%`cgM-J79efbDbf2;YR@:WhP_3]>fMDP3ZeU9DW-QRZ^:b\$O*3+9)0k)F/15oCkq$:YmZG4hV&'cB1%N6dP*UZ3A][(Ki*9K"/SY
%289'rpL!SWnm$\7mD[pgrYHXdT@ZgEiWYV.I#XFO+3r/SQ9$.@j]1gCP>pYqH.IB*'<Fa`kt.Koq#>aX4?k4N[P4Du6[5Sa1sH%k
%p-s$M<Nt`MG`A@:-RV&P0l=mZ<Ze7N$eO']+(UG';56&0PA*l+ksWB`\-g?+FO-sXVgm\5]8+M2';7\#W9N-5:P+^sJiO._7M^f"
%`H%[M*6`$miue@pWfU,fl5YH158l%HF%[@"8-,ACF3jHoFq=l9T?]l*LnKZcV?sB@Z).a3l223a8b-&a/W0;Ddko<YJT3N!^C%;S
%Jm]!$;eW,:=80,eC0enq+!UM+7;aj:eE\Mt,[k?Xhml"XA4sP$Wn$Nt_aqi/6T"=V[rsX<nPD4[aC-A2Dbh"[D?:4FpE[-tc2W;3
%lEU%n2fcOXQ_9ad8hB2#:jgi4.apDIqSDMsC4,I5E\b"lPf=s^d'J$k@M1cVQ*d@;@l#kjhMt#:T"]R%)NqUee"n:iVXZ^PJh"&G
%ZqD_sVr4V#8M>n#`/n8Z,=er5#Z7l(RNKZU<$kV_9t@G[Ooi+I+OC;TK$gLf2LKs%nrW.cjA\a?TdX/G2RL"]JqUIGlpb,Q0.i,2
%:b>rt.f4C'GNE.PNN>>)^[m(cQH<h9:k2RnM%C@S+RLOY/JI(_7[;:jlZ)YD#1"GZJ7A]!1>,7^R][Q4Jf'iJeiVQRjMs<^'b4`0
%fEAd?fR%TtMiT"04KsoCOR<qEXSI[_9(5fcQLnF\i(9-IW"n>A,_-6--UoeeLn$.lW2`ZQP)H1ljf,l_n%&^MPpleY2;kK+BI!)5
%=_cos#HTMeTb;7E-$VZ'j*!8h`EFW)d*-06CQbPE&S@+Ld:BI"_j"]#`(-oW@:1-c73W;-iVeFFHb(#XHOcO`q:2E.*Cg.D--`8u
%+taW=1,f/"o4aa*Lg(M&Mhap^nu3hEAVlqGA*-_KY44apG^`D8*@W9<0a=g/q`sJi!p3d\^k3atH,$i\?#$a]P\A=kPG,5_A-oQf
%(XST1#>9majHjk.Eo`b_A8Tr:9F///H)ASp2Gd[`re%4!d`AC97QNn/p+k*6eW@+n@[59r!PMnh]9=oV,p_>Cfk_R=MVb"53<`u!
%P<X-`0B&Sli^>Jj`!=gRNC1VboHq93n2^YmG_gsY3#gIJrE@V;XH?X-OXm<j),V0ZG<U]adE:GEb=/.Y;gY:+q,",F\-AHjNN>t3
%_!iG&P;;kL*[/:b@TT@m2.ccG06#=iNCY([C(`@/_n0kg+DJ]G*#dBfh5Lu*.n3XMlJ,12Tm^#OI4%8p,lFhu6RkXTC87MJV"E2F
%5bP+-9Z"#&#b-%OVGSNnmcXLmXG>jCk[dh;]6pUoApnTW1d'2_&#g<uV[P*=Il'gR,&?bI:Nbf)MiPnYd$$!0FI,=^ZiL-+_GF-$
%:_JXY"a$ATQLXO5NGAqDP9Y+rLq=N\)OS,m+\NXHjB5uEn6Db#d3q4_bRZnn]@fRPm@#2E`cpo47BB2RI+2&UDT[*m@"1WM>r$Yf
%P@?Q9AAYm6D5\>+h@9e=R.I7V(8$-_"3='F3",2NKNAF1:qf<!'FhqqZI;F48F03V*AWZG/5SL`1T-s-FJ(lo6L%'dVo2MS$]Va.
%*i\$"ZASiKhX`u:WW1f3rltKB[t""i^\sZ%oe2]#9#&MBrSN,%2uf#\rsP1V.'0hOaaU+RV5*_@cObbY#\!ZlYjY5Nlg;9Fj;Kai
%)c+g+^._h&.0N>.<WeHgM/Mlk9X/un[#khA8]%/CFAa?<#kpU5:,EpL_7c2V*>mbZ+Or`TWZg?J>*=X::b)3bKh$QAEAI)eKQoNE
%cpaW'K]_0<\f&5/Um[-;-L.i`oR'P.5eKDi%qX+bP5-?"c#W0.6orENk&l^?:l(kLW9X"!\j6nm`D)m5;cU(<7'WpH@!-'4<O^KU
%J1XRKJchfY5^#cKE2;9:jT)QLV#+A;qk2Q^bXCZ.$V6I&9-WcBXu?4i*\!%5L-Re]biY6Sb(76YBTiMk"72lDekkJqR]T-@*0CF/
%Dj2EhIT.-QQmD=8VChfl)eU6OW^g1N,ADODVi,!3jjfWU,Lq`%,H<grnq#\^=RHmT7:U[BoLMdGVqR#:,9h$>1`,[21TEW"Eat8&
%&)XXW&ZDo77Dm>[VM[=iI>B"$Aik:/kr;,,pXUKak8EmpOt"PD$DUHV-1_?#Yp`A2YEZh-B/J&G&U)QP6o&$n:?_sm&=t4uOG/gG
%.bIF0SkGX;[b60!oC>*FZhIi"rYN[#!-.5^>K"5i"XL:'P9trabJ,<nW&50i+**-WAt,(3Ts)LQ0#cI"`-&'DD4_b%iDZ8>LRNu]
%U5U:")qcBTe=70g%A8"Wflq*VW!e7jc4hJh!W?+X3)(hGog^os14o?35W$o8pLmAsB?iO.FG[#O1c@>,,k>3^Q=blJR5E?GM-s/#
%7Z?5<8Q#bQf6[mj9qkF_G+`%mRiBbXW;@k?jX>sqjdcqqoB&YrLZXd3dPFKr!gE<_=4Pq+>5/u2;Dm3'rUi#N*(kUO7U/b6OUb!)
%hRggih.^:q'-eeK\#$K;4u/Ep81Q$0.Wr:2%R>^\&7ir,$?^e$JPk)K&7!1\8_\6&d@a3H@3fqH0m9JS:fg'$W]WgLE]--4"^i^(
%W<RL)Th2aG*L4_)G$auoDJ9gtMg!*obA09N6$6U@_>/um@PI53m&*hAH"@/==Yo%S^c\'H%jVE@I53c$<Lttp!>&bVUl$maS^Kn6
%WZ153OQ('LVUuWoIIEe,J)PLX#p<9sG2HcVs67.C,,6CAeR17+qQ&;$Gb3Y\Ys=c<EsL6PE7?Pmqi+Nh1/uDo`0<6mn._iX:S]fn
%;haj"=diKb.dQO>Ol*$b,;\,>@_DBHD'*^Q-p2K%l%MsSiL$<OWMIM"lcCg/J29`&bR:K!q5;a]7#dd!$([->fngKbrl^l2kuU/S
%U7IU*3CA!U_kf2:[J_kgp%9[3oGd%Xa:ojjJ*Yrh=@##$;qUt9ip&@#'*']c>pD<1Pc_Ri[%#BjeJ'7.'&VlJenGr>(/rZ]l1lZ[
%>fq,Fqa<fBAoZ&Z/K*I/S)0+?:X:<n(*MT"r,WMFAECoZBt3C$\YQDEJmTi._&0'[%Vglfao<J;Z;2cJdr2:2hC(tfeS>$C/?8fh
%/mrlL1!!iC*FHDXo'[5^Dh`r&V4'9p(:'<J^Q]ZOS'&+bWrH@.kfpX8Ui9.XOE/p2VPt_P&02V\=>fI7>K`1XU`5KD$DI8q[J2/*
%XCG'hB%/OXoTmB>89K?*0\[32)8V#,`eEP5PbgiCVT9DJAlK$uQkG5dSSVbH<)Gd.&;>A*@45M4%n"YM^TE4dVc">cB>3=sQ/%I;
%/u?<'5GgoS&!tPcA"@_aFNpk]`TIc\aj$d)0etK@k@UObd@Y]NT94>+l32Z;]"FJnZTYK;8qt?a0Ls45/hp*A2Hl")N%2Y.V7D]b
%n;gO7JR%2j2,lrb\#Ga@Zt"lL=SrjdfX#:'"N2<($naYZM`P,g<FLB5Q9]%#d[,^Pj)ti*<@s#i/k`=^;Lq\&&;s1P+^oYb2u=Hq
%<1?k.S%gkZ4qr!n\MWe#H1toO*rJNb_&sXu0LC"?q\UN?E0;cKAR0pIRguT)SKBP6VWPEbYM)*DB\INo[@^QK30bbiCg4;>."Wiu
%cQaOZbi(>/8upCrpO1JE8S:Dce%<d@n_;QOPIT5toiEsb)O:_5@b'@c)4E0r5V'Jo=cT,Spr@2f_E>ea!!-`H8g9=h6[aB2C*qfZ
%R!fX)lM&Qko1?0BE_[.&Xl@DUF^7/>^IZ+eMGJ^+J\kD!C\=EP7qeXH\*cRjp8C'6;L0VcBU.RP29o[AM>eAiTUHn?_]*&q^lg+>
%,pHjib='O6`dUVnntYMZ03*@=hco]N<ts)[#'nOpHqg;Z+T++<4hkr4Pj5c0Xe_'bCJ<8@j3rIrOnfpkrXALY,PrK[K7.T]kohqI
%Q@I/.q&0eDN)Z-2(6H+>%C:27Tn\Hm)W:tCi'W62duMn;Xp-PJ6)HHVrR=N5(bmJgGi.+Hc?c+e/!H^gmj%0W]P'!gb?=_IhL6du
%P<*AsG[O2V#+-Wi=o=/t6N*&\$u8;j#JZ?sKXc2?NaQCN#]9p[27r=(P):XfBP`TjQ=Bs;AZ@eP*D\la:s"otO`e'[90mQ8Z*Xe:
%1F[d!)\E!s8R"dWSNtdQmYK$I1GlAp3h34Kg/".BnV\i85=Ga<<1Bg/n7-Vu&rB-[4+fg2,VF<qYM;=Ppbd[G&p"<[_=C8tDBamU
%(jP$XEM)8FK-F4f<LJBd0"qS?.a=Umb.8X?D.+$("E/tAniLc#H'>A?-D\&!qWP*qn";9Q)0do?H7MOW9$IBAPlZ_]nR@lamh\E!
%4<hP!PZ^mr,\4ZrZ:",=]V0D)W%`!<R";-%H2][P_J^Y+(ujKgf+9)!.'['LBQ2*I81Qm+eajoZ$2AA5m?R&&gZ;GoSL(RJ&6H6^
%A?dYK8U)G!&XCSOX5uW:dUWb](b>rkfh3RQ)(2NBZf)=Z1i7`WB=P1YO>3&_<Jg=9SC)ufcIqB8$7[W40SKa%b+cSb'),F@JP]88
%9@MhS\<1@V[-s2iE]K9C/_LMYVCq;O>h\G[,tU<cr#(_\<SjWLB[HD.*'LSZlHOQna_kcMJ;6l.(DP7&>mMm$[H)-8.H+:!E\9eh
%^=+AD7OCZmBM.2p]-]'$GLCSYWOVWtU+*HerelqO+2QKU-Jfun?E\O31GcH]VJ\V8Fa[T%K>.]hRg]!Bnd)Sun-q7Vc0a#h479lD
%r]BP_j8M..^Z5;Tm_@f]479lDr]BP_j8M..^Z5=ngpeFV7'&bV=(cCZFaVlWeX@$'j0KK<d$KrK<q6/ckGnFI0!qc,3*Ud!191Gp
%j$+cD:m7*GeafOs,*7ut%1P0N$MA8&Pgf,qjiS6Y,V_+c0X#AJd&1gA5K4h;lEM';Z8IMB_-?NF'dD6@k&-l78tQltjSP3e?a.".
%rA-He,?Nbh6i\sb&E#QEqU'NN7s^j*'W40Z7(Bc0G7NTW+l#)24,7e<&FLOTSO9o.#^6d;c6:t'KKFs.k7IX@3J8E1Ul1-i"kPU_
%/ZZ@X%/Q*5(iA-1Q@;9J$GZ5=C0O0oDT4nFE:3P=m@RM:Xh-$)n]77YM$C`9Bu6t^nb4mTBR(+ATuN+,O$<&F34m#7GYpqDN4>H6
%STcZP%jR5dadZs*7ZtLQJZ+Xj+pg^5lFCA3deDYo^(e:dq70bFaq">>,m_f3jq_-7-t\15qg$VN0\E_ZcdN46#($`UJ+q;mXYU7S
%/Ig^\rqW<!+6S)Cc?J>s8'Z>>Hq2J+jEsJCGN=-Ac?J>s8'Z>>Hq2J3Z,dfl,>0Ms8P5e/qHf&.ObPq6`b$q@;mk]O0'`D/:oN9/
%NA^c,m=G2&7Xl>.G,\^l@^Q8*0)6,\E*#LV^=8CsXY74;c*\HRP0ld`0O8h2.M7AW.>Y>H@O\8TW?C*/ccC\NAhc6rm-K$J&2L-j
%o`7-gDJt#R(T.30F1q+mX2,1Nd?5<U)ah=fE8)./:%[t,:Ep(?Yi6RWK9-8"\cK16(l(!1[n-l6\Ka[.XqIl6hs\J7h0Ru*?cDa=
%Ri/f4jqD_uo@Oc?DpZ"5V%4N)R;Jt$CZ#;c%;#Gs*=.PnhkG7fI)<_%YpPWH/!8U(W5qo.+6/C*n&YEebjWXNNm-t5r/T"iaS_(B
%n&YEebjWXNT7(5kj2U&,lb;n11/e%C\DK_IInUG'0q2+\n?3@R*EY(DAoH[][`i6!(TE*CXdef&51/"gK$*%n$o68J44\Iei+[3e
%]LG(u_Um!qO,H;o[D`ErgjJ#edf)#_MT9\e*Be'F'I@qY<RV"Ao!re"4tjj4k26kNFrD#L)3d(aW1&Y=?!6rhEB803,_LrGTUDA`
%7>t6>]6uF1W@G\l^;<?<h%`E<Y:E:s^TM;#5CM=@`/=?u*QS-O_7)Ms^2`%Hmf/%jrG(/<%FG]55H-]I(d05,5"YW)A'Ee=mGC8b
%;Ab^&ar9#+&<6?@fLWAuLXgTNI>??s=FGtTG?B9KeTY,DLXgTNI>??s=T+9t<oZ]-.,VC$Rl)YQh8Qf.-Yd$cFrNs,ALeL;kj@"l
%UIC"J[0b\@^)Ot4eEMrWVG'!)Gn[fs6s/k@=`(aNB#kR(21r"6"Tdo1B529**2nnUjl>(mK/u>@N%`Y9[cG%!)@>*MhoZ@g`F3-W
%?]'+R$Fbicm%S]//[G_4IM^E14H8/\@>3sSPMq,Wb6=(kSL=,T(lJ;bi-#:758,SkT>dlT"HD(<HT@\9RjH=k^4XBd=M0:*4'9.J
%`B.27K>foS]S"0b=M0:*4';Ea&1k+U5)5G$[;tHR#PRG?,\B/6gB#[e6FDX]7WDjWFO.jb+"[T]Z&5.:5\Yb8"ZQF]Fr4m&)'be5
%6gMrsiO;._CEO;A)>?.h1o$-=5I4i=qZM;/mM@SaF4#@-WQblOLMt79,N>4D>iC0.qLn*>:<YahW#NdNaAR+oWij7jO+HSb+8Ff:
%C$B&K`mlNlW]p6;\C:B"r18fcd3PD0+la.TYD4d$/fF5A$[^<T0;\45ORRH)$0u1'+390U`Y4>df>pQHmiDGan_YAeh=9ACs5!5&
%*WOsch];aQn_YAerDggd!:0m>Z7#[[Z=I,q1M$qC,u(<C,S22DC.nsSPA`;XXQ$4;L+_.'gKq0(k03@r3<YO'\_V,&SHiBIbq*uk
%VgM$Fgs[AUjB=_Oe4^7(Rd@3G$8sAb%D]Xa-tos:0^'B1]a;@\e^JeY9:[&NG<e+LIj3Erce.l6'"_SJp+0MQUnb;<\Fqf&>@^_P
%*pkJPCA'NL\gi.5@(SCk"6F-(1kn4,P,7cgJt4XgDi!9HF$eBKM:-c\\SR.\I0MKV-pHpkhZ;FOT\TY&*MD3hg)ZjB!SSQeh#Z4M
%T\TY&5Ks1F1A5nWiV@jP"294%"RK9P*^i8gUMUCgSCk\H6-E$K@)pK>>BGOi$\1Bo:^a05!MJCR9kXr;4gLK,N,Kk5dOZB;fCGON
%1\9RhDhQ&uD5?H&h4.li[h93Fgk2t@d![LfV0aCK1-@<C4Gm@?!61Nt=4a$S?b`9Y.Thk.XkB\M\[dJGREh!c_+U4U#3kEr&=gXs
%r#G<!l__3YW_<_.E%b!:@$`5aEdNR#GBe1a2g9LfLGsF%F,)\uG]SX!GBi`*+M>NNYQE&1[*>k:>!N,eIcbG(['@4c9:iLsI"`F/
%0];QU&"9W)\#"r^.+3oIMCK`91FiB)juTk>%l5iDDh^g-6"-Ag$4()P?pTX'@m:en=n)qa>V.h,e;N+eXck[p2(Cn>`Q445[*pjc
%_!N)]Zb]4G`f/ePVkhBi][P'.m-0HI:2;A"2Z3mRLT%L<CuJ0Wl`&2#)m[TJ,I9G+C)u^=_Ma1-">f-sG,^81Qd1fg,je%='.mU9
%Hum=eGC4JP2g9Xja#A3iF2p4`Hum=eIuWtmh`?NT1On?''p]S"FkQF9>e#Pc+QfWsl(d)WQ2S$h2%XX@V?E&:f/D`lBEB[I(35UY
%9u+fgj8s]m(;8+X`;'0WIFo,d,?K^1C?XH&L#5*JA.O-=AT-,:q+Bhl-22A`^nMq6f>ugogmgnqk2Fm].=6@[<%B;d:,fJnOo::+
%De+>Bq]"5GaSn[&2mU2\rHH>sG5C7pP@Hf85'G*+,HN)hD2i->%!!!$aSoIsW^Q0`rN&/FU"hm`H_'6hZT*rH!MJqc4>[^ck8,4W
%\$?ldPnb.aZ,XVeHBF01l#\*9hKKC"lJa!&7r3Z%V4J:QIT9'o)[%CaIa[8*dY8a%qdce3cl(&ELLidH_Xq`Y+]!bu.hP7Ep\dS'
%2bLe]nr8fNP^K7e)^XAiq*rL+F\oB7X;-Ok?,StfaNQ(6.W[e^RXTd`;9LNF_A,ADb'oG/02bsdObQ<L9l<>]VO8Ms1rmIa0uT9p
%MV$M4#,3S5$X&IlBlB=Q,l.6VQFp,5H.tK.*<=P`Z8fbk&D)OP0`nP?fq/D0?_c,m=guYU,J/(EjgtmrbX*jB(,nk!;<j-=Dj5RC
%e/P7@..p'/s#a,X4mPOajq,bt)(oq+ZT24Uf&k`Sjtm%b>R:4f@8)c51$74sj'g!\$p4kW#.T=%5FhV@A]a=/oShE2Rtg[EKbYKA
%9WnOmF)\9C,N*6J#Q^N3De(!0F[R$VibEYBF'68Yju\MY6rfK"]Q0K8%tmD[qeMOj-fkV^?:+sg6nB>R"p_u,5a_rHdSX[mrtNf`
%*\E+Mgt;)8IQ-u4Z/:Q>DX;RW^Dm(K`Ne=m[OsY04toZ/Ve_S<`bos&#8.k0X8cuF*uB[s4G@,V3$d;IqjLqr/q&;4_un>WP2./l
%?`g%bB[1u[U`4%s=\+Kb?Z(2b*tFIbG%r;2URVgoUl:erX1_b5&"]Wn@HUdfQ2f<YQ>7;?+Et%.4A4qS_m=Gcl$'\K^j1LiY/t&<
%PdntAp>O*]U_LXum7Ab?ESc]HDObq2]Gp%i3:Fk42pV;uK_$rSb/:W^e[^<^V"b>eo0Z$s8h/7O>IK9lSp6Kr8*Z#a>NOrnH.j]Q
%k59KV1BF&@B2O'l'At2IOHOp45;Ti:/^%Of3LZ&Q`W0W7P)KSHdV8CaOKS=+q'&?p++;,ofgQY$HNRGQanM$@6^m?FZ"5$;qNAO=
%-LJJ;?Pr2?Mu=.PlL%"I!XR'+6:It`$AgX<O5@\<#$s7X\q/HB]PcYM"0WYga`s7ca8RcuEKo*r%<&<dg=Z=q#t%G,K$4S'.,JL*
%\nr#*TM9cm^,8"!lpeb8!2hZ[J=-.s\N9cs`1aCp3X:WV,)_tYSX2n+2>cbrZ?AfF93,<)j9?S,iA9[TahusS10X),(R_9'?IA2g
%.>`ptGKQfYU=NTo9NN"S)mb##]UHB+"!M9slniK;84DGPMom_HIbTjoDVTBpXrDT@\Eh.?2t$PB0CCUQQR7+dL#QL1,hmOZPD*3^
%EBVL*O_+^f_R[.HZL@!$f@/0jjQtmd!OA9g27ud%\c4Oc2;0c?pBP3c[bl9-#:l8T^gsfT#:+8@c):H+k^kX&*s+e&kI6U[`HK)a
%VqK]$/#'c(+B-/A(&uc^:/%S$822jjT=Y$RO))<`d)^Z#WNW##gNMW-LX<C-\EtWpefHU!>,F\hZl,N5Mo*VY?XQR*G@0:V1G-ik
%`koIKXZ!Mj>:Ziso]V[c`pboS0/9'QcC`p%R[Gsq#7T^*q]FraCq8q<Cet%YIFi6Pc6kfBiT04NaiJVgFS[)\Mt2*3JKJ5'4(bl<
%Cfk(t>#\fcC[3s!-BsGr(83In)e?I,bW094(Qg$Y]rmm\p9h_9ap1&E?ZqUr?E(e^%na%6G4s+e<2%)'Rs9dKca2BE,_tO%ABg<F
%I='H++om,n$2Q4(+<",*Bhdgs0)&f<R)9NqV7m/B6(2XV4khNtQGD>iN5cK$U510G;&ok_D*R4>N3'.s@]4t_5'Gc]ZT163hULR-
%!$DB^52FMCK,FgCA=EJHqXtLn\7S\OP&4X2D#7K8G/:%,G.-:7oND9fXnO$T=q7YiSV-IF">eVEp^(@8Wnu>#bKc.(\F$a+SQhc_
%?nOtR0BMVFQu$fF81c.\ja/YD>Rqt&?IPV[SQf56oBZc;h;iA\,r,/@Jf430B.okLrX_>1Ak4f$;3c>,1HU-9f:Wbg]tNZO&L'cW
%V@f+M+T>pac4r=&323%e(SQPYE2l,$KLPBu-sMT`&jnnaa7N$0;4)$+)8WsX6e?90"^Ui.@`utsDL79H0],W^XWfq(\A52r1&/od
%PjD"JG"]1\hFt?]U<Jr5V[=s:I!a+R"jXZ^"'GV)+Omu/:OYN@,e+`gFOYdH:FDrE1VqfEjS!Ejoso%#3t]+a+DU%HApppKZ04e'
%[Clr(AgYnDonc`%IM2Kfp2(1e1Uga'9(_03L=T*(5<&BQ/ZUofbW8W=W&S>Z<q5E]?h8[@`?MIJ0&t,BJb\oRpL>>#'2?c=bL"mS
%TWoI@d/LM&P/._NSu,f>X76PTnC_pL#E=?nDthV+3`3">__M>)4GZRLZ<-HNZIq#4fICnA,O@Z]pu^%(aA:P.WRPc=*sSpXm%:t,
%qsjZ[c]=,^]R$`*e6kJ2o5b(iPH"N8X%00'"BiY5g#'o+>AW&L7sJ]8/&oO#R8^DIhP*8p1$'sX0f_XQ]&OQ/g"l'9q5iMtNFta&
%>7mb"Mg5AN2]o98*9i820DKF?6q@A^&9P/6ht-^:9:mhIVFu`ml-gT5k=*X5a9h(R-WpI;CX^R4WlNrsa3>f3P\9OQOs7@ZUT+et
%1Y>.Or97#$;X;!EDi"5NfgZh>5p.bW1%=9??5n9rdq=0MG$]f_5$Zj\esF*J>GYKX`OUE[RZJe@J'[H(UWcaL&1XB\rSqHSlQmo6
%>VG/c\mg!?;UT/si$5^@5AL15,/i*n99h-7SKdkR$X9$ue6Fu(gtK!m<%IP)K0AC(i98Fkq@qdUONKLU[+emRKTJ,)TA/6G]GgWk
%np+W5_2P>e(VRQ]%%")or)c:En:qNZ]"/9(s3(#iM.@\<a';\+8B2:>75ANi-DIgq#9IV6`1VLe16WJ5PA&BWDr9e_8X()4,!'Vd
%DD5G2k9R-<Dp67knPX>0YO2nueB_R(C0ut6-gQVF@Ip]%r0l5=+3g,jk,^sT`2=i/C:3*-m?$2k*#b:+6B_ujHip25]m@jkZWD3q
%b?5(6'VYg?g<@ruUlEf4(/`_U<r/GPq3VDZ2sa]sEao5*;OP&EBuer93IVB9f'%Sfl(tE.o>LYZ2Aq.Wq!38j^YHY04YWc:;=N$H
%5KV@4dQ-%Q]j5VuWhi.*L3m42jZO5S!-Gn&#?t=C5$d1QC/<+]oF0"XjI(rPVS`W'UdE:+4\%ihh4EiZmE3AFgRk26#QKcZJMik'
%kCl@0U]:%Vf7tH-bmW'gVeNn,Z,cZA_]=;X\U>c`3bDH`LT4.j%1dWqgHVR3]WUJWWF3s3T5L7X(;h\`P3O,]<7M02F08n!+P=UL
%C,>!icp@E\hI9qU>C?:QIjKkfGC2*A\O=/>AZd!?o^+fFDa4-po'Ln,T?u\eF?]ZO*j(*'BK](%\Cnln?#QN!4.3LiVmMd_7sgK-
%,!cs;CrHc`P)%lb_2QBt<,"t-1<N/!MG^YA[TVZ;%A_-i(o51j\q)(27<094cL3='e&ce5D)E\_LTg1Br:IM;ooNcYm.D%(>W/.,
%]I#,$UT3+s1rlrrEoUK"l'g/e^c#(2(8.$>cc]%n@2jWA)n_FVC2),=6NP6$0U"c1\-61nZ0L6_:HQ`;&73T4!(rLFqXB6FUe0lH
%Da&=)Q1S=W6&WYc^:rh(n`O"]ke0A0qZJR=@HZ[SEHu[3D.JgaSn9E\isRkUh><6//@9/H$Y&)NX-8G+ig\RIbr4S*Q\JWen0d`u
%ihW&X[uI:H@EY;PNo=/'oX5/[7m[>`\;GkT41f[U"mU8RjOU<6]Y3S$lbf6X,61aG\:(sPEVekA9Qen3Cm.HK-n3?[@qs(SfI]B'
%D(BqgPE%c21rLA]r4n5*3'(!d'ul\h6K0O,cb1MmCd*:r$u-&\j:l3B%Yhtb'Ol$WCLQ/n]-'1IN&'0`Y)`&OVUrj1036B&O;s'^
%a#tR%3%O$nhEP>PEV:>+3,<dl#==_.;l<)TgdQh'cfF%XK86:A-i1(GqT[']AFLI.<Em&/4>h9`2.n\)Fsa\5+EmVVEgU.O5FeGd
%1Gf]AX.Y0,g2ZiYScXVT[liPr,q][R-24S[9d`)qN<AdMUE90sb:>5U2%M;aM_u2hfZ-Mf=eL@/B#PB][^r>XWd-BUOqi-&c*o>a
%`^#Mh:$MouMqcXH;&Q)Qe82S*$,4)h4<,K@q(N[!jPnig6]is_!do@Blf515`S'/h0oHNf*/&;5]]j[m5G#<>`UDlF%QAQ'&2TeS
%B:f;Ar]6aK/RRVO5"REEr-u+s,f-J4.N/-)UgNoa1f:(9V(sp`:2.`/jVq!RX2C<"Ej)q8St-7oDQs/qHX>TYALaj$O'#E>*]%p#
%nH/;keEIn3D:A,sU\aQ?&A0s]05gD#!AG3kUO^4Z&(fR%3s<`i&dJW/)qrG9(D>>`k]ce*ji^YRT:DPAJN$"2Zg^sS`lnMPI>'g0
%U]^%u^$#"1^OTERet/N/FMj1*T:WO^>rO!C5R$n_lB[[R[ti5\3J.B+dIJUgXb0B0q'/PgL>'>Sb(6BVop)\KMNVo%A5^R&PWV79
%P5[io'8cMKpk27p$W*j>5ot^W0Alu?D_"#$]Y3J#jX1R[5jWDLP#@q?pjp$*s7sKQ'(d%U5V::PECntFMrN#Y%?"KeSm=f[R9;cD
%F:BtD2\PlGg+&g^i-f/%*sCmLZr*QaS@V/NYKmt!Ir0Q(kuW91,2%Pi<E>a]I&HCcK$S@]IJlaQ*?\";7S/M6QTPbuI%#:bVAc#L
%p[JcllNWc\[4>`/Dstt_Q%;:fPd<Tj*cC4ceMUUNoCX?rW%8sGN!K*L)8@C,T9/CXVN^"[pMj@4q!)k3C+kHk]57<H'6J70Dsqt"
%qFOOhjOo?)FO27R2buh'h$>&`VtbHI[-d:RY3HYN72(SVpb]aS\si#E-Z5m[Wp\jM(r*NC:LR2DlGt\YbhIb\J&1"\W$?4^.=[KG
%.UhN,Ii![kh)rJQ:VS9_3(aIH^:ib%gB4@?X33`u(8#L?a^r\/SVCmY"rn'%.q@Hug`C2\N*@(7[)88%ZP&W4V<R$040u?WJMdTi
%`[J2dQ^F=K%2>R.\2n^4nhZ[X+"kdR:k95\ULj9Y[3D->6#M@U&nlN>c0NhSq;qG:;7-.@c-HI9B5L,ILfGF6=H\HCm>sgp*0+c#
%PsOHEP=<E?ldN,=C5\Q5k$!jcffCcM#*+'=Li,.I/ZIkfc)c220"J+%d;tR#KgFD'Z$dT2+e,$,&)odfkk4Jdb+J%\C&31ij<n`R
%Sg>8Qi*rVqVI(%pFB4^7'46h.YtC`+5XBk9_jJ8^5ZkotS,)pIY'n?,M9QW-8k:6nm>t@%PT;PYQ,Mf18&$%,Q;.@*$jU_O>hl8+
%(Asg2+)gUnIJDLJK4'2Pn`8.F5M>>p;Mnml+XhL&#pb_bn4<@Bo?!uR(l".Y0t15[%>kH9GsDqVTf5cLQ5[^mo0tJA4ec$i*Bod@
%pn2(TX+mT\HS4G"EK.Mn+eKsu_^$/#5+M*5>@(ZcDY(]KKT(6Jl%Yf;`HnMuXQC7+$_asbroH/m&0'(k$O#Ji@56sder!brb@QLp
%5rGB7C$Hk/"B`Z+Qm'2"rQo)^4`)"2hIq'A/(_6Y7a3g^W^b_V]MXS&R!O,(kGO(McNi&B8\@hXr;=V.;L^FIfq:V@nu0fsZKSN[
%d4SmLPU\S]La-Z!(u+etEatS*9FiQdJAal`AFs7>YlVeF1(0O]$"_+Q4"&dbS1&Ni10@E//fmj/Rq)n_[bp!5I/-c[4S\TtXF@k@
%o46q69Duhi=L[=*W.UUaF&54qKe;9,M+!6li7%9%')L(T;\!]@Y*3cbDLm*6[W.GE,PSK7:/7\Z,c<8No*;[5XE8l:k!N9#7)fr]
%j$[Lf;mR3,I!s9&V[$`o!#@&XT"JD!GuF5!V>N)$^kL>0%gSb-+8n2Kq\2_&;BL/k<(=l4p8i95rM#dj'&=!92fV]<h")XgUF%-6
%01<Q8(EMSM>_:D@"k8/!FF+1f]itmm)T\61ad:Vl55`>HcOUQArd)?BZ%))9pl\o9Lgl!O%)7.8?FNQ$Hr+KPOe`'DfV*=tXTd*>
%rT:)VH31;Wia_@&[L&t(qW=d7Qt^YFH!s`!1c6-#/]:%GP7"KqKF9Jj'7b7Z&L_0>`%N[`fphnA8tNng?r#u#Q&^=!@7-E.H]%Ui
%(HrZ&1[5,j7m;-gX0[hm>VB*H&IOpH-O)ko2.M"H[Rn(@VZIMt^;*<PK^LlQ&3X69Scr(g\iRl^<dq;si@UF0[U01D5dP2aLBei?
%@ue.'&fP%Ro!GZ%QO][!BF'i3Nr;o3c(5tpI^k&rYQ7u_EbcB02R"EO&=jtD1h*?klSW\ip5]tJT;CupK@QX.FkNj![-V.djBCW.
%*5#D%.Ima?@"%iUM(i1',(n/]mLo18"0L%5-Hm"aDRme]/iso0Q8LJZE*+-1&dR&`phfgLYp(SfFGY^?]$#"fPlG7)!$n9*278UX
%q_aa.A6g&C-!SuX;S]`_$\_iFg#F\`]J+9OV($#s+82iA(+Ygg_HYi[>2nE2*lspX5*[TkgF?@*X,U9c^2eaFhq-snl][%J#Nqss
%$$I?qYYNEK?76'%=V)T%!dJ4S%s%%T43p_-ZuelO;34a$Q_bJ%(L6W+M4U.6lkD6__\if\>\M/?&VgZFUQu`&/Z+f;U$0g**jfn5
%6oP;=2Y'%D!n9ocf4hWm/5n"D8[a?nbT+F;2)G`0QNYo.esGZWo[aKufrIN4YU_iPH?:,1DAM';[$<'W$6e;-k$%,8!'VQZiU<i4
%qm<`NaK1_#(sH@a.,-?IcV6$530Ke+p@Jj->Fu\)<`H!HCYUh&;qsSg+NuKCZ9Ek,%PheJl!e+:P67_oa9/qDmV;)>R5OPjS9ZMn
%G210$^s!sHqtcW1LL55r@ej<7oCF#qMU?aLK2M21k.Ea#:/6U/]R$A)h;M&XMs?8qTYfgDCaY1lkm1gH9rG<7e<"@iKdKRk7g[#M
%4d!e;&6mfYkAYEG\5ItANt6N=H+qFM87;)g26S[JZ3<`6n+FlMXZGWS]p-?:W:G(b$D&0edAh05LhRfA)H&A-OsW&$R-*lUW/(2H
%qmiQ%$PqgP;^03q+U2s(Q#@!2V.@V!K:1_P<IFZVV4C_Hq<5&Z?mCki+\A=noD>"@5Q5?8>cbqXTmrUWrsC!c*-1nr;gmhW8WVR)
%UQ9?:kGn83UY&=nMkGSOR`<\n"Q?SqAZa@fm7cj-3]BE7P@S9=hVm9FG>Ofop\.\ZnMQ8a+dp-GkrKE0P8@kg2Qt*9'?2-+aNnSF
%J3qH.mY`n:))a?d$s`7_/G@[+I'2-o1L)KPf/5Xei?Xrf9CWSi\%3[t''N'q&fq0HG46lTDi;U`P:k+O<&i*rfr;%k8Zs\(/6u3u
%R`(2!r)fmaK%+IdYA2@N/ggt\:!$[#)*Ej^T3Ju>N_PrbBm5.flmT9?ZU0($lOYP";K0--_4iDkq\&PJTUtm2]N4DK@NNYbQYUce
%Z0V1r:Q#utT,fc,l2'4;;J\'cnS1)3p`5oc.@2YbahYVe6Q/,IO?n/?\Ed:Te>a>/YE#rjR]97m_m:I5QeS(@UiJ$;bHTREOsM!U
%k*(lT5"X=3:_r[)4b%?hF2dgGP%/Jd$uB:fc_#E`fV]r0VY:t_I9J6$.poFF?Fd7Io]q;j#>rug<'LVNLj2?G7_+I?L0mc1X45H1
%0NL&S3ZupE6>gR4Z1SgZ6Un)o&G.6LjsMrP4qK=JBX+t86a7F3\LdmKX[oQT!bq`kaJ+RBL"\Xho87Vl))k_0bUU%CmiQf*l^8$i
%:=tcFo5n99g@r0l9X03Hb3uD^i["f>W`ari4d)sZ'D@Zf#\k5<efg5a#H"Zc8]d^deaS@^[&DlX#cm=_A7+`B&$FuMr!sl\]:h4#
%j<!.d#3h'<3tlIFk+fe]@_'JGd;i:nV?>'Oa<mEcKa0u=XEoiDU]:I1op!%>KL+P#QG3j/D#p-XT]Mm(=6@'IB3ssoKRR(k;fc+i
%:tREP!XP9q.EJktG9%695iCWT2eC_mS(g):rO5pD-Uma.)O0H5+5Z-.Ldc;YFP\V*2;&!VZ`$8k6A!m\kq(:dA@L9KGbYh&EA*aE
%S!fs>N1fl*foI$(.i;5^&"8AUm*K9oLoT]oePWf*:\t]6oG1C2mo/94bTOi7[cTu,>brUjk2d.F=i>qJ5T^o=+mZ!ZQOWJ9CKuZ&
%PCfsYmaI<OZ^soAH92j6llg*hS:H1]*!IQUf/sXKf9>>CU`ufKbsN%.M1iTgUAcQicjlD@%dZR!pJI$(bEb;]</.A.2hP<'gU?uV
%Wo_U]0[??A3"?g0-4^:CfmIf$WOZY]PnW]UVC&jd/QG!7]3WC%9@+PqBGQ%)Jr"!9$]9(XMJ.oGc]KWf`!NA!KiIR^'liLaE$Tsq
%r/6c/.q1*hGK,S@#Ub4$f1g+3C1WZ7rkT_=BI]\T<*;*hKO)aa+_=ZQ[-a=[8P2S[,bKqQ#@cqdJG*N_ahUntGkdiRa/F5T6>Iu]
%X1kj7Ek08DR"R"KA4meu6.>LYSbKQ+f4@0TB"A9J09GA6`eR4Vl*=r?;%s$HC)jiYL""iG&'BeFG=o&DcD%UF-W0r62fr'$BSplU
%C28?-UT#,#QW@;tg&uU.m+,nf?,1_WBrfB=>8>4W.g`TQVIKOG^#>[3?DmJi@Ou>$r)MY!4$3i%.SQXhOeu%pG(pP[R6\/]Bt[q-
%<PO)Z-!P\!\]]Vc%]);Ff&jO"OiKVQc;2IQT^b:9gZ''OG#jMXYXj^>f)\K-Vd7bgP%amMZdY:0a-Uo13T@,:hlk!O'.ZY/P5q5o
%2RCLsc<dqeYmncq\O>-@[GDsJYh%9-\9BbiC9?MfLYeu;p;W'Y9Er,A^Zf!U"_JE5YX:Tr+#C/&jL@>;3&r*-HA6I-eK$n$"rr^N
%]T6n)KU\+C]Q\$YWX4\"/JgBESURtC.,dGdr3i&&Z#I$K6$TQ^hsVC'_V)&fJXXW9Q8rh4>`/V"]O):'3?m(>]["X9C]('\fT;Xh
%J0"6\26L\'7=r5Y[iN^DW:UcI$L<u]N4,p0/,hdhpT__!QNYC(,u\X@f_D-:d:D-7\YAmV<AO)4*PiTSU!bo^[,_b=#V#4*>#;T&
%H/GUO8NENc7=^Re[mQoi8pE]Y6noTf\..oqiHU=J%.t/"QVuY#OOZ$C>p.rRFKE%o&qBIt+.i3S;NT6%o7ET1A@>6^I6Uk`8j$Pt
%BuhMUrnW![npSAd1`LCd6j4/TY/SZ9!.S[o=+!(A*MZHaE=5Os3S7@C3?p=7bBI#:U?9up_/<InLfAmAY-(sg(YK0S(V2G!1>"@@
%<D8++nd8>iQ(;S2fA'H%MbM#)cqpQOY(p[^r#erG;T7Wp@-TI]JKTm&XOUYE&AECAcA/GcW6nf[.Gf%fD9nY1gS?fepc/n.WnMG:
%![hOG*cJ(kW9hD+.q7M=p8e``:.=k[3U$[u'qgIX>k)(3Cr@3Qja,[t\?pcUW\$?Y1[W@BJua`@6rW%QpJsCaDB=-peD!s:M"aCP
%@kPgj,kE`c#t?]]=u9o=&f''[,K+]Y4Yg,#$J\^3XW0QZ"IC1d_kRRpoBuCZPN.<$LVrkJJB3W^</28!r?uL^3KtG\G3Ehj>=L6i
%;h#KfF4N!BT;><"B\/jiWsT\Vs5=2ZZBMpBD)n4GDcm&TA*O5V48k4/k!<ia,ce;6IU!/E.Of94EcjI8-,K7?!ZEK\WCLU"\VXBQ
%I"EFc%o&6C-V+=rAGDLXXW[n)?;h";e0..f*2,NH1VP36M_7@URCMsD1u;ERJ'C8b(D5p1Y[!LU=aiM)kgct,5lRls&P5jp[sIB3
%n,?/F$+5]4GM-9&3fihU6QPoE,gnJdUNf&SR;R!NY@&'S3XRl:F'$i?</kET3kX_Fk*CdVoar!1]dY3]././0j=2R&NASqK&5S2q
%X3d[M##_+/8BSB3?im47TVI)T\)EJj+h"4pV.susW$:(Bs/\C?J=/IG3J>7f+5YD-Z.m>4fJ[jg#3,-orA4p8NDZK!LSSa<9-`$g
%`^2qB@"Y8"b)/h7R2'Y//.;f;962p\<7[O("Shic%&t7M1c($\FCh^;&f0I`SPIu*X<16q:u^X$33qc[AE`r9g\Br?$DPD:l[FS6
%k:iJ,pusJpSQqcdb1C(%/lTSp>'>8[Q!6LWc;TjG8o`c_%`>$2I:X%8p(42GXh^'&F<;+$Gice+'MOAp]W?T0#`31*+eX3:!6;bj
%A/?77MO^DZL!EF8Sm3O[1B9O[$IfL@bCSiF,!P!OQ0<RF?<0h`ZLNQII6^C]"[([;9@8$"402WU&`Z7D,8a8b9si1PWj(C%.h.d*
%,pU0WF?Vf9LrhC_eW`g0`d+NEL4pf@LuI@;[6nFl.gCGe%m:LgSKFY6?W#V8[dZ<nVmQJU?ESIQ.t@4S(1+99A"hB>Q:qYV^O&+L
%Zss9rC@n^D7V%e.P'!7P[YDtobikDV<(plgQRJJ!Vd`W969c%TG0=M7*B]g\G8iF$Ye-[^dR:"V1%>-<Bsb96%O[m)l7*+kh..A.
%VaH2:qAl^:lsVhW4&Pp:%&JVgJ/c1#bM?$0T_.89E"]\pj!"7k":c!?)[HQlh7,!?3VA!jft`ZSMh<SPTPPFd9p$/^p$ij!3Xi?]
%pkQLO%s].^T0/7/N\XVjX,fMaj\C)!Q-A9O_7t6P^N[G6R>Mfqo/m]6Xo!,caBB?oBH<)9mNb;sQ.>,'l,ARUr%esai!#/JnO9eo
%@SOuP+0q*n:]R5*8\9Y6b3>Xs"W/G(RmLu((d1ck`J9G19<1:4i^Qh[^3MB;'J3o:[l34ejWM>.:dIo!;*X+HQ#J*K*;JOn\$tu-
%OlNIin97P)+8UnlT\[G,X6S8s?0qk1Jn/_#fDm*G['GGV,Zq@mOZ``NJ,RsiS9(`XVT45n#6bAcG?9"?4nmb'j*fg[4jC)U3X)qq
%K<cJ8\2.<Q*^[fF^e\3ia:u*sF>kW6@kuMA@U_OUM,^j6/b>UIZ?`&gY,mJ"U:o/]4<:1k7n^XP%`_[;<=OLAqmR5VWg/LOCC?C/
%E+LOE(RClcFDqI&6"09f>D;q.B**u^*69=mf]Mj/NtHfJ."[Q9g"INrbRQ'oPIY1!=g`\1T&uD^;+V;'A*muWPd.,6!;OIjJLaP8
%_+.oNgUWJ;cPg#HTNB7=c'E12#esZrHt[!2_9lk"Cg2r?&%BtabO#H60TC6%$E?g'b;Y$=3DlCn-L'[Nh@\\k*C,7?/IAdr/0/1r
%p.__WGpTmGoh5uUm*7;8Z@WPq[4lA']hRFNb/r0\K:>n9Vh,Nk$OBtB/'N^lj_!M^7--$@&%Qg)aUG@NAK'q?3Il'>7#kqR!2ZR.
%$'.4YPchE'eE8U7]"`^Wk=uCln!lJa-JG0#maM7MjAAPCXFi+L,YTNMUtFL>MFWN!eh/JpCXuaQK@l[hOLGe%X4D2Cru!ka.u"T!
%c&T%[j>jM3f9;b%"rELqi^+M>P%YIZg*8qUH9bVKo$jh*E"KflnZ.je'G[OGg*lS`CDW^j)FW!bMq'n=oGehWU)49<d)10SWsF(a
%`(]`)17XZ0:%K7+"12BY6Do@1<9j^M,IMC0JX"2GUPL<fV)hLiK`9OKGspEgX-f4dLJsC4:t1V+LfDKRW+&`>a=\41nFlUCn7WPn
%YWOpkN`OP"^(4?MX^gob`BM;W+,MQR=N0Qg*t';[h9GNn;AJN@X*OWlga?o_M2!-g*p!ZRC'?j8?@d]_Z%kJ"0]RTFKlD$QkB!Ae
%O`.%ALlPU)[Z^sI=Krf5nA4[9F-h(VRK:UDXn-*$_$/,F4s4=3;`)7SWQFO6!K3`?@4"LQ4Le+R!Y1/\274ko-&otT]2;PM,^Z!V
%[osS*1@[YeY$oUSLQYrDJ+?u``m@4f/OX`E"G!YaP('hLZ*\>S/Ie<d:79+DjNrk_,lALLO=s=\4l70da9(%/+FYCO(iNsBXclal
%2"_+iXjr67?.S!:$0*;Rgihh?6eoQFJ9@5@YWs*=\">q$`'KrZq6A9&FJ!Se/5W6_,s\i1;7]R*A<"#WN"&m@U>Qs_J/+$]4\UF*
%D$r;u@'.8M7UhO2ctr\kBPXF@+D:21d2UiABT:a.g<8jo+GJMb;2U3-8CY_F\$0OG(tZ,Hd:15pHmSL2f@X=U0)9`c2lK:u7@`eZ
%+c=(jZ*,=^dp(em_,@@dXe\@fmA,mHXh?NsLu(aG%FW6c=Gi93JI+^&&fo(s_A?_t7ktCR./r/Q+t,qM-@M_KW<j&6J3+YNW2_OK
%Xb.+rO4Thp?!YF$f>XR$EDeA?2r5\)FIg9!At.=G9EiL%Wb^@#Ib;d-^`XmQTGt4]90p/D+!<L@Aoo%[=>).!#(]F)'(A0`i$@sM
%Fn&E@BO\0jXekDBl6ocQ6>XI:1n7=!&4f&c0N5LLiR^n_RCXhTJ6Wrm,&q0u`Rl__RUENW]ED]U,OMHC.Y.d*m5%/&m2re)T-kt1
%"Yue.OgN(,E"H&M54;_"pXrs4FWRtWJWjMq&;9;?$u<fJ)W;Z>\MYX@0tA"UURG_u%3qq[UF6;S2XCpJ#IH+p.9W"N/?1Bk_$N.9
%K>O^GZ+;b_TJ(u.Q8G['`()e-jpF);(jn3C)1pD-<<I$k7'OMKLUBB";8p5dgZ8dI9h65RCc2p`-DX-iW'fN;AmoC(NQaRRHtG-n
%cJTCu>c7Hi=j3TeXG/^Tl,XTZ#$r0gV]h4;TlZl1?`"['b^$V;.T#i8(]1h!1?d.JV77&)'h26D3;IBX;nE<oM>dfWM7=NGC_)6=
%L5+uQiq9USDj^SUMo_G5!1dN!bS^<&,'G3ST$0cfEFNElG7PU[Fl4]d3A0V/7Q(IV(hF0Z@Xe2j:g)f-`l98^!ea=63sI`AZVe^l
%rmY!FdKfcD1BR_XRDO8N*sju$U>,_\MipJ1Qr:qoR5-(m0\OhgmG`eEl/r=(d#F/B;FXl[,qKJ'\6!@*<#(CE*`Cc$&R*p[-Y5"c
%Vk%O!T1DA)bp83,K,R(Wc5<DhQqK.:-Qf%UV"47P3a$T-dkk[AUr4#pJh0IP&r]pfKrGbU17DSRJS/j7G%sRe"1UhsA-$^E"Iu@6
%ra4n>dhptJ,RtFJBXe9jP"ORgfFco_\Ed%[G\$Ej8"hlC:fo12:#AD>8XUq7A>\%$DDF^`GF(.,2q6Zc0EFsnXK],SbR0G?%P-lJ
%?!bqPkQN8-Tp:V0Z+3=&CT/*4f*7LMLHRsI3%.^`?K+1COH0$T<G[)[e5$dZ`k7$cgGL*PMCCu87[#Ze6raQ$?Y-RI+h!LFOjkMf
%-qFUV1hrN4>Ti[L!rk\>X?es'/])G,gB"dmG*//RCtc&-i)CQ3n^SO,(\pgeC_>Mr'@97=-!Qcg)PQ[7=,*LBM7l]c\E`C$3gVj_
%;ar[YARh0nDR8-LI!G_nI2o3jYU!+cd_Sf@*Ge5RJj[HGU$49(6+/4sGAM&1)GBqi?js>=0NUnHAsDmUk/bc5"3P[(a+3[NCeB'3
%?8<k"qe0AjQqe_X3?,mi6F/M]=UqF2:&e@&V+5-iV;,mic)e1_RQf_pQ-pRO'6Q9l@D8O97^;bFaZ!0e9Q@3#:P+e_)af_%$PMe`
%OE7OGVA_5XCioK8=K>(7R.D;s<ht5td@08Y:.J4uY^0k%I@2Pum!alR-<Aq:/(A4DHV/kT8So<eqK$N%GU)ma<Dq\lm"3>&@-MkO
%(=[l<O"cB?cNG9O-,I/p%kYb\:q-(D6XOO8/f*T)oj`ZsPB_d=/9%22m8HcOe!j';@*n[T1&$6.(p2"RJ^6=nQmNK6dS?-7Z?#/S
%:ag+@m;SA#8l8YOZ^KjI]!J_HjE=K]g\V4GIs.'i_;n"sE)6:tDkcf.=(6&XeV.jc8qDn4!tq,4LZr12NbQ??#;n\$Msm2]J-YM>
%R*gI*:.>F%dFT`8Q)m(F+D1\TWK`.XGi6>oFZ#r93q'$/%dBM;WaNe+"N5h4JcsWNX?dp^W`(bU\E)qDlPQ0L?Uc-<;DN9W!!PM^
%JAC<5e=(s:,^TWSZCO1[:jbbD9K#0C\N:a5d;A=c@KldohDk3S$61&%8G?h5;]SOI'T;5+i6H?Zj+]!#"\NqPPplm]?M@Pg(ftD0
%k)-Uf5%Q<Z$'7H\(tSq+B9qY7;ZfX)]r`6+<RGG28Dbct7@DpcTFslI@#5niHYt]RiE`K#SVD?8,HKe3mhd84gY"[2.t&'Go=hEe
%BC*#=<-Xd1@h3;gn8S$0$qluaefAqQYb&D#V;"?Q(o$_>E.K#Zg/4@78oAu181"b`nO2XXgc3BWZf-37%s%S:(Z>nUW>MCh:@_Ks
%Rb:k<QO_0&9N]a\R97ICasC.>"jSUS$SA#$;2C0q/ug?T(-G)<m7$ZtFepQ@9O5Z!&A'r:6l0tG+Rnu<i%Xr'![Ke)jXjoWZOP)g
%DYY"C,ttm=U-,X;^<:U?"%p7a*9p1=Po6#u#)9C?G0=uFmHh%.(m,)F06!.tblAiqLaG^L(h#i+9<?%SBX-FtN/T7pT>PZoah;);
%1QCm7Y@-NM?85jXI8mXEHB!%$CsAMRgX1IK<oFl4T%IssP!!Em3FAZ+L7TRo##dCE!4rcTa$CM0,ciA>4qq:i<2+"E'?,laW/s4+
%^lXY>geh_b(*0-rPUD#kOus]&AH8o7^-F%oG"(,hKt]:[Z\6bM@DJ_B#n5iFWZ`l6j'H[IM`#iM@n/+q!!@q[eg3EG-+"q"!@b=g
%MAoE4*j!VGbe"i=]GeC=_eeXX/4u/fXHmXQqqJj=//H0a,:DhSlItT$.=VC`#EjU=dg.r/747`-LiT<_i]5CC*2?UdYd'Q!!2G>p
%]aH8Bl+=1MVsYE!l>bm"1C++A^!7,q5nHu+BS<NFU3Hr$p#rb`2Jic^3#qKWKPPeG9?+hSPKDI=W"kULf2G=GYAY7I38aWMp*7>=
%d)N=aPYJYA2V=uQ7:XjGWk4fMa8"%f=C%PL%Pj>"o/R</?kW#d-Fp`]rbRB,!6)G\.1J_GS8Er[9L5S68qZod6;8p>/D593$Tis'
%A>rR)c2'-X?PaYDN_!.'-Wi.s%iU1lf?1DfZBUYA/VK9H'-SH^6gOsF%>6(<dOt/`^B!C([6Ocd,S9)B'P1Cu$+b-FO:c'*'9@/K
%&X3#pQ%h@'drD'L;!lP9\bB1p4A]g![aW1dk[0J]G3WH"&nQQ1fo=\@%hZZ<+PlEG"[YT)bYH)8KG(nglTRuMjftW:X?jcVicm$,
%ei80K)c#4klGhn,%e2N,aNmL8,U*T$4=tR]=&d9;&uP+fB/<5k=D^Jl4H@Pj=q>[+\0>BOd=X0nRg&4%g-\pT&KCM.!0"![@u8Q+
%52eBDFgi`W%S9c17F!Wg7T(Oi!BAaa1)tE:F]j_Rq%-<;e"$b<=up;[6XiSBm=o"EHg*X,nDk+9,dJ:8ZNWg`o9s3H@jdAZeh"[,
%IPpu/@WtM+<ss2k,U!)&m<<p2V#p@8lQkuW>BNG_o&X:U;^a5UqVVBg:Gi@9eA+Jjeu;LcSRZOGgWPI2e^@K#k^C-f;4J5,>:ZpJ
%/-%+!Q5KSp^,4qpr=b[O88Tj(,GgJtq.r^6K?tmkRTj^".gr;aG+se0Mi<1%>q'>]c0]6G8><lCM:>%/=BaiY5uRas!Kf2[TSi'0
%T$\OZ]Xh]@2*WhZ;%0KCVs#HfEeI@<Q<_C&b.8n*IXbg&%k'&2^6j[;ASI(-F9o!=W\K.YaIG5R3X"aUPH"g^Ua4"`<],IB6Q:$^
%Ctd=K^bbl0!'\Ql,tjmFEbZC\h;-W-UBaJ_,?gD#$MYsQQK%EpH3R6Ebi/*7OARu_)sBqu,XVsZ?:6KudRj"G6/1ks@aLg[36"9P
%b"+2l91K,6S_d@DFVFs@kSbKY50)<4Ps&U@(H8+1L8]ZB'%t]Q@@cT$"=U91/8Q7E`!7cjao7=K)'E'>([5^4f5hCXN[B8O0K04M
%]Eg"a9+k=E40u.S*GTUUDk/V<>@ibfUj;&M-OTkC)"K3@?0Ho%VeRgr\>D9.,LP,3dB#Zd"$$Q8<)DG2/o`aKlt`cAe0goCVa^R7
%gmrF65ZcQ7HapQQk74@TcV=T%UOu-8JNF>G]GEk2X[*tRPD+3I:0Q.n)XoAf*)3(&O:$jc$<_djprk%QEEjIfI6Q=V;N1ep9>^0!
%D4]TBmo>1!)nal<pQ2@'#sp?RXYZ!.eQOPUC)^JnfON%6#&E+aRs*4:V^Z.J<%Oujk[fh&%U>!$6]#c55NI'Q'-@B<p[QlBA4fc0
%_`blR_T"X[hF+lKjo]-O!)e5H_fXDO:Y4nqYT=%iY[Ip>atTp`,20B4Xb3]gINH^PqfA9'SQt\b1_\3OYu'UVGVk?.h)gI':<]GT
%D]U`n+gbkN:9or;6u;9R$\AZUDGa10eQK@0WOI.L`&aAl:E&P\&dOpg<>"XJl9ffa<!L3V&9q-8aVf2K:lMFk-UK\NU+LTtm#NIW
%?AD@O>!@,3oNn<,/X2)GJd>rUCXelMaE)k_@i!;O1#)s#W;!6sj3acZ:irt/5dWhCTA@oEa]"0ie,o,?]SOK`>D&TXnM:2T#@h!_
%Rq`$jOcBI;<jJ0i\?q^!Cm6\C+Ch%JT!ASt[gGC^*4-5-AM^KNWDV1'HkG-'dH>VGbo'aPaRd:V0NM.]Sb#Ro[T0^oer[F>fn0&l
%S'0Ae7?H-@$*[rANinVcBL1=JjDdKZ4K%Hg5l>?@%!ON5.D[?MO1,1c*Y3P50"Ef3no%YTj(!8=N0NA"kAW,G?C*Y'ZdE3*P`<68
%G#8AVU<0C_Nt1(d*.Zt4?/iRkiI&21S_1>!H5L$;9eN,2.2CLsj:D.'>uW97Mc4:0ZX^dKL5:d55WSg;[F88T(=hcFH;55c=9<pp
%Gmu1'o0rSK?%3h>n\D:l$B4^SG7MGFRojU'kUR7$%DD/E@L9i-G>2tZI<+t$KeP+cnjiF:-44Y:%'>X9!g/qW+^E#*iDA/Va]Gl(
%>E7#A2a!lp[9V?GTrpe)[A5V``[!'hMlO4QI@B,\^oNoLpXTW$:t*rPiMN?@bh3Pj,Z22e"NX_J@<qG)]j[s>!+=c!Y/;*hHj_!?
%U!;JZ_qDr_f4W^@g(3MuCnOf.S,C[IohhR?:+<]/2q\UG\nI_U0O6BB:m0JR1&76tNeWU#fMl.4N.6XpX4!K-e>eJb)QM6!$<M!G
%4l`!R<qJ@3bIK$ggTbm:NV9UKC)L\gqRZ*ZXk5L:W2c7QH7Y4A=f%OgY:K8]cb!CcI6@V1eUf8(,D%LMgR_tDS3<D7G/-=B6/o[S
%6"PMEM_h5,FBMP]N.Pr_7tE8/0BDY>7n>`uqt!:\cE@s5b26Vm-M!_UV4?crkq;sMUb/QS/CPRYQ!e&-+QD&7Zp_]]h)p^#bb^oV
%=E'#BDC=A:QO-g+E=CXnq6)mZC:-E"-K`[G;9<)!);n^5%gcM*hB<39,,dlP>';;Y]'U(qdPZGP57c/$RqbZ'U"(=.;p%\1!gd&9
%BfoNFUc?c,(E#mDhhJ2L`"@j"6<B=2k[.JH#C83?oe<EN*^Fj7Oo+J$00J[+Uh2I'ek+50X9gi!im[9`Zlr8%1;Ps4p8Vin9^1R<
%4&&iiQDQ`]V/20O[#PI-!I'A-7THVn+Do^X>)_\[\.j!;k!*;[h+88Pf0[&6*M#W[-7q_U/HN;fU$GS5\0+c8`]WWW/U@oUUpOZG
%6u_i-5Q&lgB?!:LD&5.u]5.fkABY@fE;T`[3q^>?jY9M?p@>#;F2_;='i*IDm)7E[GGcb(7fts&^iKju#I?d(7>[8e.d_X%UBmeR
%^+E$&#.:We.e/*"q7q8jl/<1p5n!gOjg^L9RZal``Nrng&++S%+$Fo>o\$k2T>.tKIJ*<ro%eMFJ)a^^Gl%@#p@-21kM'`6]=E@_
%m.IF&pTJJKroNh?TAI<[al-TPe\C]?gS6uL-gC_$__8db:YWWk5(5=/55E=ZbMU?IGQ,KeT?f=N*qmQP!`a$a7/1jYG>WH`[Z(jm
%I-16)bWK6*S/74-EoabFeh0r.4ui,GMh+_8s'\e<du\4+><EeCmJQ/_E]p+m1<$tmVCpn_#\c[,>Yp<"&>nGPBS/H%"9#7E5bCHM
%OY=-Lk]P/Wk`0%uDur(L>@./6kj@.hdQn3e6V/Eph)X_$3@CB#*GT2Hd<9K<V1fbM5(.ZL3cgkm/3'393S':&"EFo/E];$Y5"to)
%#E+M,Asg.jB,;3XEW#+W3pQZ2_pm(4FJd;$obb`CLR8HF*%_OgW=K[Se8npM:i_)L#`L<UaT$NsknH`^gA(igeZ[\Gp"kF+%G0Z[
%Fa77l/*Ja;E4C3bDn7HE"TC.k/9$jE8fsG9*Y3"F&cu>i<>U%U$]9-PS<fQ.rU9s`ltVC`?uE6&lq*'..:ebe(t3r!A(iL@9br)A
%[%'sY_n?MJnAAbiS(dIe;LuU-Q5W5O6EkUm#DTcrjY6EHI.M09;.>j'KBl+.4uC:8M2+X7PH5F?`"7.P2J+R6(jBesrK8%3cqqdC
%50']Zrb/)NJ"`5LUeM'NXjp8mB7o#c0Dts<J#8Y8+8#\E*1`JM<\\q4aufaHb^-`f`Z+(qjLuEm5P%l.^aN+F=O<M2jEj)hSMqIO
%1HlVW"#(ci0U)+A3%K_fJa`kM\c=%I,20PW)Gun65=f*"@NlA["=?7aMn1<s_^UW3/;`E$n6(]1^Qc,Gc+Y0T2%<4BJSu-KFXg]2
%Og')NFE7^[b["4eIQNq*S1*A%iIq\CWYo5M+gr!8HcN5,E5Dm?(.nVeqFf+2Y=I.tD%W@<SPu&:e7\[=)@0dV#r'tD.Y4)'E[n?m
%Ju,#]lo<dq1HaV%&L1&b_A7S'`WXea>F=Ge\AQfM+oR>`"kkj\)'3%NS#2lSO`*r=!%`n1G@mUkTi]EBJaOhPImYVZX-bTZKJEK+
%GPkGM7R%u&Y#lN`g%gLDP]fhKoVMIhI=rUjW)K+($?\Uu^nNW.S)4>(P[:E&M^r(6Dkn3c^\nuX?BN3bP<[+7NT7++!R1`5Rn+[)
%^%6NsKJ]bM,0X9T,LJIK0#F'2g9rf3!Q#H23LjZ#8o,TZHSO#R91a:8d*5Q(,+K5h]S?F_6CH5s@nbFo`>L1#M_CrKD&6t9?h`iR
%@Pu6Dp<i^L/\AAU38&6c>e(8W]\o)&^iF68.GF``^t&YlmZR1,ef7$!Q8Bp/m)?2Eqrm:<#bj$A;W`<GZlqs.F`Wddm3sW+qO4@f
%_uOC$Dg*Xc:EuF@qm,ftSU]XsLeHO<pc=Y%eEpK(CbouA_-\LDB'6?OG`d&V:1(L6DMHim@`@LVRmYJ<"967QP0q[aF"4LMEcB5_
%+3<S!STcDEFd2-j`6T?CKB\LP?e%Fc%(>Da@F%bC[F5t"jKSFl!iA?,+kk>h)kA.m6l^A]Wr.eio.bp/A5RfO`dn07E^)I;`=*Ne
%99YcPi&X6c>oh\$Xt[\c9$-2e;['9M[*Q8lF&)?-Cnl*2^d#QuP`p#FE^N$0JefLuDu+/lG1EIBe-?jYGDFV1JZ<J_N`'7kX'AD%
%;gfAFOC6I8M&O#/65pST-A>EM=:c4H9scHugDcQgi4dJsk8h#&K_6#(`%Y%&f;1.P.4BJQA_N@5!R3?'5_2>noO.N^Pg#XES,IDE
%8`.$G>mdOOAdcG/#[p[>iOE:!(s&i>5)%:?Z?**d#7V5%\<24\e-97Hl-1b&F[1=Y#0nHLg:9euX_=Nhi)(G]U6m[:fm*/*N:HcN
%@:Q5>ctq4h+9s<;43sV63JdP>B7L,Vph'd*WIuGh3)&NBeZ<kO9b_6mm&LH-N(@PWb!>0RD?)01mL"X.6HHrN!XqsT;[bP47[F)`
%U.T&c$`a^JQu'>kN4W"m@1AJm2arS*.E>Z014'&jaI%=h6.Z;;//X.n9,WscTFs"R5s8[rS)d$VRUf12P%#ra50neQ+_M@i5rf7'
%#GUY;Crji/eQJDM*&X#L3509l4KnsFfiXQ\-E4tsccHfQi4sf"=r?c;Pt7UC8eKo4[$#@8%F0R'LmH>pGo(h@qbJJ_,S!]JOb4:#
%'3.'SH7JF<L2/6D4!uLq8Q[mTa_3c],!uICXr3,KO;HsPSuf/A3)7:VF:P(u;Pt4fI1@<2bW6mXMJGRh)"hUd:_hSJSM4g-!"O`%
%T"lS<`aD*l.*&XB?WbA^eP[A]XG:1Y&kP.rO)Wq&4/G_2k>c9=OnC1O3lkndM3\tR-ZQi,&IUUIe?C=26G\=%^_/+bFdH9F(NWb3
%E#1r[idI&)LR_nT\d%H:OpK9Yo_q/#=/.;W$fUSBk\@_X$,NO:'\NlVQHeXF.P9.L#e&C<m:%?%>!@%d+CL-<"e7nDYKkheph:D;
%k-Lc@3j!/`6NiA15-]_VEhqS]YAAHGB,.C-\Hpk0Ag&/jJl<'T*[-tp-Jg`3kZ*K'jTN0q]jkJ]Eh_[S]Yq+Hr-s%jkkC,[h)p/Y
%h]K,cds\1Wo1pedrN=\:b27Tc#J]Jd(YdR:`dd^p(GAET?@VNTYRe$ua3,_HKEj;5'=A\u*>ps/aU?Xn3DTr+p31$$^4oG9s54jq
%lU-`tl/0/#*M38smG$6J:YoAa?/OFD^WT,Kg@]A:hd*sAIsg#BRod)&/mlBi^[(TX0*WffDB%j)(Y>#.>@,$io;f(/H@LA?AUB-G
%O5fs5=8YiuWP^)@s6nWBr8cPS[su%S$pQt(p=36r=1:CS4T3Ol]5=[2n(HRcMdAN\H%10dF*7H@kEiZE0:r4A`@imZ\c8+2cdru*
%rUp$P><_0:45*b\p?pburoq`>cb@)@HhcUkrUtKEhgPG#oDAOPO70:0rV?<OMuUHhmR=eRrEWnagWONlhLsR0l[LriV`T8lq0?jf
%:A06aqtTK*grU%Hfk7$IdJD%!Rhn*_jm`LVhN6tA"hcl@GYKdIrSm"$+8pr?rRF.1\X35s^HA*`4AR/Br5:Tp8X2E9E4r--^02ot
%*g@0g;\GkC2]XQ?,]#L,CG$*:dZ,J6SnPUCI0gY'pj="(J\@q%X[p+9p`P'?:64pQj;^jeSIdM_UK&:@Q.5Jj)qC>)E;EMBGC9(-
%\rhcWkpNLFbj0@[g->JfZ`C-FhgFtfp6+%!HaN877Lr\<P8=b`_"[Vb+8j++\d9CD]-dMSN-j?=b]>[s)]jL_Idpmm]]u72p[KK,
%n2N.^%k^2OD)<(d^V9;NAFXohED"t555`:rQEU=;>Pd)EdR-gqjRVQAdKkl62g#)DeYA?&j*;r$:\NK0Ht:_T;AL2u4[+ToZ?5d7
%b1A#EX>3#;n4%'br$O&NrPs"uc2-[U2;<88l9:*u!8T:5.#i*?8<+oY/ec_IZi;=ZjZKlB/sjJ0o5V7XnBP59d#VqbKBPC>NseFc
%bUEi#mgWC9`KL1B*]g]EfWc4u*YV=jdD7]ij6'B)oA\Fd5OSA1n8u,3H0G(Z?_lDeR31b%5PtPf97Q`omdTd%$&18)q]ulWVS5[5
%[TCLf>D$%dO6#lBI5fEE4l0`Dp5>HcJtM$Y97Gd+IGLY#S76p]CJU2rR,@FK]_d8p3.:Tc(\.eq_S2VJ`i*&Cfl2g.;KE80lp;\>
%YdS#OZ]Cso2;=rDlRnMg_;7P["@+o?@6rWaeqE91^UU3hh*pbBl^1$rVTD0)>(sXL<E*[L-fP.3OnG_j72/e6OEa*rY')[%E)lqC
%Pi60MZX:3'B^\1FEDC&%6U9L:NZkO&:,FVu^);uMW%E^@F-tYomoSjl,p@cQGbH/jZG6:MNgKIcN%SgN-%d*Dc+eE\'!*K(Zk(ur
%>fF?.^Y=3Ws8Mntc@=uAcSIo[6-hM[2ijti]qmY^p&s/_T05Jd\Un2kk"h8BDib$sklZ#^p3j;;OL_\!71mqU/V=((H#VCS-![HR
%k#n=*bl+$O`BKeAh4kI#o.\AD6[Ld'\Va!&lZDkXGj'<&P+l(bED9F9paUK*#M#),piQir!&WD:GT&Cn*);UilQ#86kE\?\Gs"2'
%8=_qq48s[Hl?n%/*u.sq?odDS<C+&@?@Chdeihi,rVV4#l2,@cc[8PhR-Dtq2l)is3Y?$3Z9IPI3'QV$VkMB7assi=p7\,9oA`%,
%#9L^F(\]#grTB_ca&=HT^V0X4/\@`=4T372lg*Ha]R5Y%qo?l=f?\AA?N2l9r9!])[>hi'D2ee7dgs$&q%<$TrWr8bItW.Y5JfSL
%rHmQ%GiP.j&cUBjOS3suV\4VI+Z;"TCX+*0REK1n?iJ7BKapmCI=(S9X..?urqc3Z:ETS!/WNRIm$&0p,ISo"A^@o*fA*h]e:4g.
%Ro?.Ek1L=iWTJAJoD28Q+1CLK/'hZ,?cW`]Kt!.DAp'6,\GuAIr0`kC"%V(;O^%/9'(m[`2`]?4N*&M<pO7f0G)&JmMoX0#mr`ZM
%I9^0:mXN@G9Dn;b0(nl2R8:r1RE&%ZAl%i@j@qJ`okFHfq(g>G1n>2.Y9fcM?:4](-nSrhe>61_ccOqg3MfN[.mC!_1_BA=(VRJ!
%Zo?aQ:+ir8%.I6.b"9nbUZ:0\*f\#tg5!*e=#&,U^0A4ZJ,OPgZelTWWZS4sGW/u(e(cTONhF$,++0<99HQ&P)&-a/LlV_bKK^1s
%7-IZ5:MnB+BG/W"*9_o/Y=iFO]1Q"X\*Xu=a$jE59EuS(r"P:WW9imF#8(*P[C:)5h>35bUV/>I[fdX0`j;YCkl[qRT?J`$F#413
%+:8K(05FIjqlT;dm!lYJ$#FI:@YTqEJ:,]h:+i.W`V1)iJ*7\1agC6CDW6S04DX[iU+N#A(H1SOGjGfXV>HP(o86JZo1MjcnMpL=
%STdK"m(Jsq[69o'J$sdMB@#n%cYd'<Iehgm]8MU7_NS>6IXV1LGF,L>?b^sckj.u0J%e*OhV@T&YJ8cilL=JYlh?l=]KX".e(_WV
%KfAC;Gk0q%?iB!SU]1Q^qFGH~>
%AI9_PrivateDataEnd
