%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: supfiglowreim2.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: RSLab
%%CreationDate: 9/18/2008
%%BoundingBox: 0 0 259 215
%%HiResBoundingBox: 0 0 258.5801 214.7378
%%CropBox: 0 0 258.5801 214.7378
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2008-09-14T03:23:11-04:00</xap:CreateDate>
         <xap:ModifyDate>2008-09-18T11:34:41-04:00</xap:ModifyDate>
         <xap:MetadataDate>2008-09-18T11:34:41-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>216</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA2AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXlU/nHzjbQ+abG&#xA;TUI5b9PNFjoWk3iW6RraW+pJZsG9M+oJGgW6YguTyYb7fDiqeeWNZmv7e6stduEvH0PW7jTGv7hY&#xA;k+sLHbGaKSRUVIg/CYK3FVBYEgDpirL/ANE6V/yxQf8AIpP6YqpjQ9IE7zfU4eTqqEemlKIWI7f5&#xA;eKqn6J0r/lig/wCRSf0xV36J0r/lig/5FJ/TFVMaHpAneb6nDydVQj00pRCxHb/LxVU/ROlf8sUH&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:B16FD1582882DD119997F45A17949884</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:2C819A409785DD11AB25CD2ADCC7749F</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:AE6FD1582882DD119997F45A17949884</stRef:instanceID>
            <stRef:documentID>uuid:AB6FD1582882DD119997F45A17949884</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -214.738 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 214.738 li
258.58 214.738 li
258.58 0 li
cp
clp
[1 0 0 1 0 0 ] concat
gsave % PSGState
28.9941 0 mo
28.9941 88.3423 li
140.019 88.3423 li
140.019 0 li
eclp
grestore % PSGState
gsave % PSGState
28.9941 0 mo
28.9941 88.3423 li
140.019 88.3423 li
140.019 0 li
eclp
grestore % PSGState
gsave % PSGState
28.9941 0 mo
28.9941 88.3423 li
140.019 88.3423 li
140.019 0 li
eclp
.75 lw
2 lc
0 lj
3.23931 ml
[] 0 dsh
true sadj
29.8892 44.6934 mo
29.8892 44.6934 li
29.9639 44.6934 li
30.0386 44.6934 li
30.1133 44.6934 li
30.4116 44.6934 li
30.9341 44.6934 li
32.0532 44.6934 li
34.3662 44.6934 li
36.5298 44.7681 li
38.6938 44.7681 li
41.0068 44.8428 li
43.1704 44.9175 li
45.4834 44.9175 li
47.7964 44.9917 li
49.8857 45.0664 li
52.2734 45.1411 li
54.437 45.2158 li
56.5264 45.3647 li
58.8394 45.4395 li
58.9141 45.4395 li
58.9888 45.4395 li
59.1377 45.4395 li
59.3618 45.5142 li
59.8838 45.5142 li
61.0029 45.5889 li
61.0776 45.5889 li
61.1523 45.5889 li
61.3018 45.5889 li
61.6001 45.6636 li
62.1968 45.6636 li
63.3164 45.7378 li
63.3906 45.7378 li
63.4653 45.8125 li
63.6147 45.8125 li
63.9131 45.8125 li
64.5098 45.8872 li
65.6294 45.9619 li
65.7036 45.9619 li
65.7783 45.9619 li
65.853 46.0366 li
66.1514 46.0366 li
66.6738 46.1108 li
66.7485 46.1108 li
66.8232 46.1108 li
66.9722 46.1108 li
67.1963 46.1855 li
67.793 46.2603 li
67.8677 46.2603 li
68.0166 46.2603 li
68.3154 46.335 li
68.9121 46.4097 li
68.9868 46.4097 li
69.0615 46.4097 li
69.2104 46.4097 li
69.5093 46.4844 li
70.106 46.5586 li
70.1807 46.6333 li
70.3301 46.6333 li
70.6284 46.708 li
71.1504 46.7827 li
71.2251 46.7827 li
71.2998 46.8574 li
71.4492 46.8574 li
71.6729 46.9316 li
72.27 47.0063 li
72.3442 47.0811 li
72.4189 47.0811 li
72.5684 47.0811 li
72.792 47.1558 li
73.3892 47.3794 li
73.4634 47.3794 li
73.5381 47.3794 li
73.6875 47.4541 li
73.9858 47.5288 li
74.583 47.7524 li
74.6572 47.7524 li
74.7319 47.7524 li
74.8813 47.8271 li
75.1797 47.9766 li
75.2544 47.9766 li
75.3291 47.9766 li
75.478 48.0513 li
75.7021 48.2002 li
75.7769 48.2002 li
75.8511 48.2749 li
76.0005 48.3496 li
76.2988 48.4985 li
76.896 48.7974 li
76.9702 48.7974 li
77.0449 48.8716 li
77.1196 48.9463 li
77.418 49.0957 li
77.4927 49.1704 li
77.5674 49.1704 li
77.7168 49.3193 li
77.9404 49.4688 li
78.0151 49.5435 li
78.0898 49.6177 li
78.2388 49.6924 li
78.4629 49.9165 li
79.0596 50.4385 li
79.0596 50.5132 li
79.1343 50.5132 li
79.209 50.5879 li
79.3579 50.7373 li
79.582 51.1104 li
79.6567 51.1851 li
79.731 51.334 li
79.8804 51.4834 li
80.1787 51.9312 li
80.2534 52.0054 li
80.3281 52.1548 li
80.4775 52.3784 li
80.7759 52.9009 li
80.8506 52.9756 li
80.8506 53.0503 li
80.9248 53.1992 li
81.0742 53.498 li
81.3726 54.1694 li
81.3726 54.2441 li
81.4473 54.3184 li
81.522 54.4678 li
81.5967 54.8408 li
81.895 55.5869 li
81.9697 55.7363 li
81.9697 55.811 li
82.0439 56.0347 li
82.1934 56.4824 li
82.4175 57.3779 li
82.4917 57.5269 li
82.4917 57.6763 li
82.5664 57.8999 li
82.7158 58.4224 li
82.7905 58.5718 li
82.7905 58.646 li
82.8647 58.9448 li
83.0142 59.4668 li
83.0142 59.6162 li
83.0889 59.6909 li
83.1636 59.9893 li
83.1636 60.064 li
83.1636 60.2129 li
83.2378 60.437 li
83.3125 60.5859 li
83.3125 60.6606 li
83.3872 60.7354 li
83.3872 60.8848 li
83.4619 60.959 li
83.4619 61.0337 li
83.5366 61.1084 li
83.5366 61.1831 li
83.5366 61.2578 li
83.6108 61.2578 li
83.6108 61.332 li
83.6855 61.332 li
83.7603 61.332 li
83.835 61.2578 li
83.835 61.1831 li
83.835 61.1084 li
83.9097 61.0337 li
83.9097 60.8848 li
83.9844 60.7354 li
83.9844 60.5117 li
84.0586 60.2876 li
84.0586 60.064 li
84.1333 59.7651 li
84.1333 59.4668 li
84.1333 59.0938 li
84.208 58.646 li
84.208 58.2729 li
84.2827 57.751 li
84.3574 56.6318 li
84.3574 56.0347 li
84.4316 55.3633 li
84.4316 53.9453 li
84.5063 53.1245 li
84.5063 52.3042 li
84.5811 50.5879 li
84.6558 49.6177 li
84.6558 48.6479 li
84.7305 46.708 li
84.8794 42.604 li
84.8794 41.5596 li
84.9541 40.5898 li
85.0288 38.5752 li
85.0288 37.6797 li
85.0288 36.71 li
85.1035 34.9937 li
85.1777 34.2476 li
85.1777 33.4268 li
85.2524 32.7554 li
85.2524 32.0835 li
85.3271 31.4121 li
85.3271 30.8901 li
85.4019 30.293 li
85.4019 29.8452 li
85.4019 29.3975 li
85.4766 28.9502 li
85.4766 28.5767 li
85.5508 28.2783 li
85.5508 27.98 li
85.6255 27.6816 li
85.6255 27.4575 li
85.7002 27.2339 li
85.7002 27.0845 li
85.7002 26.9355 li
85.7749 26.7861 li
85.7749 26.7114 li
85.8496 26.6367 li
85.8496 26.5625 li
85.9243 26.5625 li
85.9985 26.5625 li
85.9985 26.6367 li
86.0732 26.6367 li
86.0732 26.7114 li
86.1479 26.7861 li
86.1479 26.8608 li
86.2227 26.9355 li
86.2227 27.0103 li
86.2974 27.1592 li
86.2974 27.2339 li
86.3716 27.4575 li
86.521 27.98 li
86.8193 29.0991 li
86.8193 29.2485 li
86.894 29.3975 li
86.9688 29.6216 li
87.1177 30.2183 li
87.4165 31.1885 li
87.4165 31.3374 li
87.4912 31.4868 li
87.5654 31.7104 li
87.7148 32.1582 li
88.0132 32.979 li
88.0132 33.0537 li
88.0132 33.1284 li
88.0879 33.3521 li
88.2373 33.6504 li
88.5356 34.2476 li
88.5356 34.3223 li
88.6104 34.397 li
88.6846 34.5459 li
88.7593 34.8442 li
89.0576 35.3667 li
89.1323 35.4414 li
89.207 35.5903 li
89.3564 35.8145 li
89.5801 36.1875 li
89.6548 36.2622 li
89.7295 36.4111 li
89.8784 36.5605 li
90.1025 36.9336 li
90.1772 36.9336 li
90.1772 37.0083 li
90.2515 37.083 li
90.4009 37.2319 li
90.6992 37.5308 li
90.7739 37.605 li
90.8486 37.6797 li
90.998 37.8291 li
91.2964 38.1274 li
91.3711 38.1274 li
91.4453 38.2021 li
91.5947 38.3511 li
91.8931 38.5752 li
92.4902 38.9482 li
92.5645 39.0229 li
92.6392 39.0229 li
92.7886 39.0972 li
93.0122 39.3213 li
93.0869 39.3213 li
93.1616 39.396 li
93.311 39.4707 li
93.6094 39.6196 li
93.6841 39.6196 li
93.7583 39.6196 li
93.9077 39.6943 li
94.2061 39.8438 li
94.8032 40.0674 li
94.8779 40.1421 li
95.0269 40.1421 li
95.3252 40.291 li
95.8477 40.4404 li
95.9224 40.4404 li
95.9971 40.5151 li
96.0713 40.5151 li
96.3701 40.5898 li
96.8921 40.7388 li
96.9668 40.7388 li
97.0415 40.8135 li
97.1909 40.8135 li
97.4893 40.8882 li
98.0859 41.0376 li
98.1606 41.0376 li
98.2354 41.0376 li
98.3848 41.1118 li
98.6831 41.1118 li
99.2051 41.2612 li
99.2798 41.2612 li
99.3545 41.2612 li
99.5039 41.3359 li
99.8022 41.3359 li
100.325 41.4106 li
100.325 41.4849 li
100.399 41.4849 li
100.474 41.4849 li
100.548 41.4849 li
100.847 41.5596 li
101.369 41.6343 li
101.444 41.6343 li
101.519 41.6343 li
101.667 41.6343 li
101.892 41.709 li
102.488 41.709 li
103.533 41.8579 li
103.607 41.8579 li
103.682 41.8579 li
103.832 41.9326 li
104.13 41.9326 li
104.652 42.0073 li
105.846 42.082 li
105.92 42.082 li
105.995 42.082 li
106.07 42.1567 li
106.368 42.1567 li
106.891 42.1567 li
108.01 42.3057 li
108.084 42.3057 li
108.159 42.3057 li
108.233 42.3057 li
108.532 42.3057 li
109.129 42.3804 li
110.323 42.4551 li
110.397 42.4551 li
110.472 42.4551 li
110.546 42.4551 li
110.845 42.4551 li
111.367 42.4551 li
112.486 42.5298 li
114.65 42.6787 li
116.963 42.7534 li
119.127 42.8281 li
121.44 42.9028 li
123.753 42.9775 li
125.917 42.9775 li
128.23 43.0518 li
130.394 43.1265 li
132.483 43.1265 li
134.796 43.2012 li
136.96 43.2012 li
139.272 43.2012 li
139.348 43.2012 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 1 rgb
@
29.8892 43.9473 mo
29.8892 43.9473 li
29.9639 43.9473 li
30.0386 43.9473 li
30.1133 43.9473 li
30.4116 43.9473 li
30.9341 43.9473 li
32.0532 43.9473 li
34.3662 43.9473 li
36.5298 43.9473 li
38.6938 43.9473 li
41.0068 43.9473 li
43.1704 43.9473 li
43.2451 43.9473 li
43.3945 43.9473 li
43.6929 43.9473 li
44.2896 43.9473 li
45.4834 43.9473 li
45.5581 43.9473 li
45.6328 43.9473 li
45.7817 43.9473 li
46.0806 43.9473 li
46.6025 43.9473 li
47.7964 43.9473 li
47.8711 43.9473 li
48.0205 43.9473 li
48.3188 43.9473 li
48.8413 43.9473 li
49.8857 43.9473 li
49.9604 43.9473 li
50.0352 43.9473 li
50.1841 43.9473 li
50.4824 43.9473 li
51.0796 43.9473 li
52.2734 43.9473 li
52.3481 43.9473 li
52.4971 43.9473 li
52.7954 43.9473 li
53.3179 43.9473 li
54.437 43.9473 li
54.5117 43.9473 li
54.6611 43.8726 li
54.9595 43.8726 li
55.4819 43.8726 li
55.5562 43.8726 li
55.6309 43.8726 li
55.7056 43.8726 li
56.0039 43.8726 li
56.5264 43.8726 li
56.6011 43.8726 li
56.6758 43.8726 li
56.8247 43.8726 li
57.123 43.8726 li
57.7202 43.8726 li
57.7949 43.8726 li
57.8691 43.8726 li
57.9438 43.8726 li
58.2427 43.8726 li
58.8394 43.8726 li
58.9141 43.8726 li
58.9888 43.8726 li
59.1377 43.8726 li
59.3618 43.8726 li
59.8838 43.8726 li
59.9585 43.8726 li
60.0332 43.8726 li
60.1826 43.8726 li
60.481 43.8726 li
61.0029 43.8726 li
61.0776 43.8726 li
61.1523 43.8726 li
61.3018 43.8726 li
61.6001 43.8726 li
62.1968 43.8726 li
62.2715 43.8726 li
62.3462 43.8726 li
62.4209 43.8726 li
62.7192 43.8726 li
63.3164 43.8726 li
63.3906 43.8726 li
63.4653 43.8726 li
63.6147 43.8726 li
63.9131 43.8726 li
64.5098 43.8726 li
64.5845 43.8726 li
64.7339 43.8726 li
65.0322 43.8726 li
65.6294 43.8726 li
65.7036 43.8726 li
65.7783 43.8726 li
65.853 43.8726 li
66.1514 43.8726 li
66.6738 43.8726 li
66.7485 43.7979 li
66.8232 43.7979 li
66.9722 43.7979 li
67.1963 43.7979 li
67.793 43.7979 li
67.8677 43.7979 li
68.0166 43.7979 li
68.3154 43.7979 li
68.9121 43.7979 li
68.9868 43.7979 li
69.0615 43.7979 li
69.2104 43.7979 li
69.5093 43.7979 li
70.106 43.7979 li
70.1807 43.7979 li
70.3301 43.7979 li
70.6284 43.7979 li
70.7031 43.7979 li
70.7773 43.7236 li
70.8521 43.7236 li
71.1504 43.7236 li
71.2251 43.7236 li
71.2998 43.7236 li
71.4492 43.7236 li
71.6729 43.7236 li
72.27 43.7236 li
72.3442 43.7236 li
72.4189 43.7236 li
72.5684 43.7236 li
72.792 43.7236 li
72.8667 43.6489 li
72.9414 43.6489 li
73.0903 43.6489 li
73.3892 43.6489 li
73.4634 43.6489 li
73.5381 43.6489 li
73.6875 43.6489 li
73.9858 43.6489 li
74.583 43.5742 li
74.6572 43.5742 li
74.7319 43.5742 li
74.8813 43.5742 li
75.1797 43.5742 li
75.2544 43.5742 li
75.3291 43.4995 li
75.478 43.4995 li
75.7021 43.4995 li
75.7769 43.4995 li
75.8511 43.4995 li
76.0005 43.4995 li
76.2988 43.4248 li
76.3735 43.4248 li
76.4482 43.4248 li
76.5972 43.4248 li
76.896 43.3506 li
76.9702 43.3506 li
77.0449 43.3506 li
77.1196 43.2759 li
77.418 43.2759 li
77.4927 43.2759 li
77.5674 43.2759 li
77.7168 43.2012 li
77.9404 43.1265 li
78.0151 43.1265 li
78.0898 43.1265 li
78.2388 43.1265 li
78.2388 43.0518 li
78.3135 43.0518 li
78.3882 43.0518 li
78.4629 43.0518 li
78.5371 42.9775 li
78.6118 42.9775 li
78.7612 42.9028 li
79.0596 42.8281 li
79.1343 42.8281 li
79.209 42.7534 li
79.3579 42.7534 li
79.3579 42.6787 li
79.4326 42.6787 li
79.582 42.604 li
79.6567 42.604 li
79.6567 42.5298 li
79.731 42.5298 li
79.8804 42.4551 li
80.1787 42.231 li
80.2534 42.231 li
80.3281 42.1567 li
80.4775 42.0073 li
80.5518 42.0073 li
80.6265 41.9326 li
80.7759 41.7837 li
80.8506 41.709 li
80.9248 41.6343 li
81.0742 41.4106 li
81.1489 41.3359 li
81.2236 41.2612 li
81.3726 41.0376 li
81.3726 40.9629 li
81.4473 40.9629 li
81.522 40.8135 li
81.5967 40.5898 li
81.6709 40.5151 li
81.6709 40.4404 li
81.7456 40.291 li
81.895 39.9927 li
81.9697 39.918 li
81.9697 39.8438 li
82.0439 39.6943 li
82.0439 39.6196 li
82.1187 39.4707 li
82.1934 39.3213 li
82.1934 39.1719 li
82.2681 39.0972 li
82.3428 38.8735 li
82.4175 38.3511 li
82.4917 38.2769 li
82.4917 38.1274 li
82.5664 37.8291 li
82.6411 37.6797 li
82.6411 37.5308 li
82.7158 37.1572 li
82.7905 37.0083 li
82.7905 36.8589 li
82.8647 36.4858 li
83.0142 35.5903 li
83.0142 35.3667 li
83.0889 35.1431 li
83.1636 34.6206 li
83.1636 34.397 li
83.1636 34.0981 li
83.2378 33.5015 li
83.3125 33.2031 li
83.3125 32.9043 li
83.3872 32.2329 li
83.5366 30.8154 li
83.5366 30.3677 li
83.6108 29.9946 li
83.6855 29.0991 li
83.835 27.2339 li
83.835 26.7861 li
83.835 26.2637 li
83.9097 25.2192 li
84.0586 22.981 li
84.1333 22.3838 li
84.1333 21.7871 li
84.208 20.5933 li
84.208 20.0708 li
84.2827 19.4741 li
84.3574 18.355 li
84.3574 17.7578 li
84.4316 17.2358 li
84.4316 16.7134 li
84.4316 16.2656 li
84.5063 15.8179 li
84.5063 15.3701 li
84.5811 14.9971 li
84.5811 14.624 li
84.6558 14.3257 li
84.6558 14.0273 li
84.7305 13.8032 li
84.7305 13.6543 li
84.7305 13.5796 li
84.8047 13.5049 li
84.8794 13.5049 li
84.8794 13.6543 li
84.9541 13.8032 li
84.9541 13.9526 li
85.0288 14.251 li
85.0288 14.5493 li
85.0288 14.8481 li
85.1035 15.2212 li
85.1035 15.6689 li
85.1777 16.1162 li
85.1777 16.564 li
85.2524 17.6089 li
85.4019 19.8472 li
85.7002 24.4731 li
85.7002 25.0698 li
85.7002 25.667 li
85.7749 26.7861 li
85.8496 27.3086 li
85.8496 27.8306 li
85.9243 28.8008 li
85.9985 29.3232 li
85.9985 29.7705 li
86.0732 30.666 li
86.2227 32.2329 li
86.2974 32.606 li
86.2974 32.9043 li
86.3716 33.5762 li
86.4463 33.8745 li
86.4463 34.1729 li
86.521 34.77 li
86.5957 35.0684 li
86.5957 35.292 li
86.6704 35.7397 li
86.8193 36.6353 li
86.8193 36.8589 li
86.894 37.0083 li
86.9688 37.3813 li
86.9688 37.5308 li
87.0435 37.7544 li
87.1177 38.0527 li
87.1177 38.2021 li
87.1924 38.3511 li
87.2671 38.5752 li
87.4165 39.0972 li
87.4165 39.1719 li
87.4912 39.3213 li
87.5654 39.5449 li
87.5654 39.6196 li
87.6401 39.6943 li
87.7148 39.918 li
87.7148 39.9927 li
87.7896 40.0674 li
87.8643 40.2168 li
88.0132 40.5151 li
88.0132 40.5898 li
88.0132 40.6641 li
88.0879 40.7388 li
88.2373 40.9629 li
88.3115 41.0376 li
88.3115 41.1118 li
88.3862 41.1865 li
88.5356 41.3359 li
88.5356 41.4106 li
88.6104 41.4849 li
88.6846 41.5596 li
88.7593 41.709 li
88.834 41.709 li
88.834 41.7837 li
88.9087 41.8579 li
89.0576 41.9326 li
89.0576 42.0073 li
89.1323 42.0073 li
89.207 42.082 li
89.3564 42.1567 li
89.3564 42.231 li
89.4312 42.231 li
89.5801 42.3804 li
89.6548 42.3804 li
89.7295 42.4551 li
89.8784 42.5298 li
90.1025 42.6787 li
90.1772 42.6787 li
90.2515 42.6787 li
90.4009 42.7534 li
90.4756 42.7534 li
90.4756 42.8281 li
90.5503 42.8281 li
90.6992 42.9028 li
90.7739 42.9028 li
90.8486 42.9028 li
90.998 42.9775 li
91.2964 43.0518 li
91.3711 43.0518 li
91.4453 43.1265 li
91.5947 43.1265 li
91.8931 43.2012 li
91.9678 43.2012 li
92.0425 43.2012 li
92.1914 43.2759 li
92.4902 43.2759 li
92.4902 43.3506 li
92.5645 43.3506 li
92.6392 43.3506 li
92.7886 43.3506 li
93.0122 43.4248 li
93.0869 43.4248 li
93.1616 43.4248 li
93.311 43.4248 li
93.6094 43.4995 li
93.6841 43.4995 li
93.7583 43.4995 li
93.9077 43.4995 li
94.2061 43.4995 li
94.2808 43.4995 li
94.3555 43.4995 li
94.5049 43.5742 li
94.8032 43.5742 li
94.8779 43.5742 li
95.0269 43.5742 li
95.3252 43.5742 li
95.3999 43.5742 li
95.3999 43.6489 li
95.5493 43.6489 li
95.8477 43.6489 li
95.9224 43.6489 li
95.9971 43.6489 li
96.0713 43.6489 li
96.3701 43.6489 li
96.8921 43.7236 li
96.9668 43.7236 li
97.0415 43.7236 li
97.1909 43.7236 li
97.4893 43.7236 li
97.564 43.7236 li
97.6382 43.7236 li
97.7876 43.7236 li
98.0859 43.7236 li
98.1606 43.7236 li
98.2354 43.7236 li
98.3848 43.7236 li
98.6831 43.7236 li
99.2051 43.7979 li
99.2798 43.7979 li
99.3545 43.7979 li
99.5039 43.7979 li
99.8022 43.7979 li
100.325 43.7979 li
100.399 43.7979 li
100.474 43.7979 li
100.548 43.7979 li
100.847 43.7979 li
101.369 43.7979 li
101.444 43.7979 li
101.519 43.7979 li
101.667 43.7979 li
101.892 43.7979 li
102.488 43.7979 li
102.563 43.7979 li
102.712 43.7979 li
103.011 43.8726 li
103.533 43.8726 li
103.607 43.8726 li
103.682 43.8726 li
103.832 43.8726 li
104.13 43.8726 li
104.652 43.8726 li
104.727 43.8726 li
104.801 43.8726 li
104.951 43.8726 li
105.249 43.8726 li
105.846 43.8726 li
105.92 43.8726 li
105.995 43.8726 li
106.07 43.8726 li
106.368 43.8726 li
106.891 43.8726 li
106.965 43.8726 li
107.04 43.8726 li
107.189 43.8726 li
107.413 43.8726 li
108.01 43.8726 li
108.084 43.8726 li
108.159 43.8726 li
108.233 43.8726 li
108.532 43.8726 li
109.129 43.8726 li
109.204 43.8726 li
109.278 43.8726 li
109.427 43.8726 li
109.726 43.8726 li
110.323 43.8726 li
110.397 43.8726 li
110.472 43.8726 li
110.546 43.8726 li
110.845 43.8726 li
111.367 43.8726 li
112.486 43.8726 li
112.561 43.8726 li
112.636 43.8726 li
112.785 43.8726 li
113.009 43.8726 li
113.531 43.8726 li
114.65 43.8726 li
114.725 43.8726 li
114.799 43.8726 li
114.874 43.8726 li
115.173 43.9473 li
115.77 43.9473 li
116.963 43.9473 li
117.038 43.9473 li
117.187 43.9473 li
117.486 43.9473 li
118.008 43.9473 li
119.127 43.9473 li
119.202 43.9473 li
119.276 43.9473 li
119.426 43.9473 li
119.649 43.9473 li
120.246 43.9473 li
121.44 43.9473 li
121.515 43.9473 li
121.589 43.9473 li
121.739 43.9473 li
122.037 43.9473 li
122.56 43.9473 li
123.753 43.9473 li
125.917 43.9473 li
128.23 43.9473 li
130.394 43.9473 li
132.483 43.9473 li
134.796 43.9473 li
136.96 43.9473 li
139.272 43.9473 li
139.348 43.9473 li
1 0 0 rgb
@
grestore % PSGState
.1875 lw
2 lc
0 lj
3.23931 ml
[] 0 dsh
true sadj
139.348 87.7456 mo
29.8892 87.7456 li
false sop
0 0 0 rgb
@
29.8892 87.7456 mo
29.8892 .148926 li
@
29.8892 .148926 mo
139.348 .148926 li
@
139.348 .148926 mo
139.348 87.7456 li
@
0 lc
44.1406 87.7456 mo
44.1406 85.3579 li
@
gsave % PSGState
42.9468 90.1333 mo
42.9468 104.757 li
45.3345 104.757 li
45.3345 90.1333 li
eclp
grestore % PSGState
67.9424 87.7456 mo
67.9424 85.3579 li
@
gsave % PSGState
58.6899 90.1333 mo
58.6899 104.757 li
77.1943 104.757 li
77.1943 90.1333 li
eclp
grestore % PSGState
91.7441 87.7456 mo
91.7441 85.3579 li
@
gsave % PSGState
90.5503 90.1333 mo
90.5503 104.757 li
92.938 104.757 li
92.938 90.1333 li
eclp
grestore % PSGState
115.546 87.7456 mo
115.546 85.3579 li
@
gsave % PSGState
106.293 90.1333 mo
106.293 104.757 li
124.798 104.757 li
124.798 90.1333 li
eclp
grestore % PSGState
29.8892 80.4331 mo
32.2769 80.4331 li
@
gsave % PSGState
11.6089 73.1211 mo
11.6089 87.7456 li
27.5015 87.7456 li
27.5015 73.1211 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 109 /m put
def
/FontBBox {-568 -307 2000 1007} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |-
/m <1C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE11167932D
24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA1816E
9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747A2
556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68FD
574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F24910
7C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D18C
E6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE9556
17323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D98
7ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FAFE
C679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE82
B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B5179
96> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/CPMINP+TimesNewRomanPSMT /TimesNewRomanPSMT findfont def
/CPMINP+TimesNewRomanPSMT*1 
[
49{/.notdef}repeat /one 59{/.notdef}repeat /m 146{/.notdef}repeat
] CPMINP+TimesNewRomanPSMT nfnt
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
12.7871 83.959 mov
0.000228882 0 (m1) ash
grestore % PSGState
29.8892 62.2275 mo
32.2769 62.2275 li
@
gsave % PSGState
6.23682 54.9155 mo
6.23682 69.5396 li
27.5015 69.5396 li
27.5015 54.9155 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
CPMINP+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A73DAAFDCA97EBBC8D8E35A41D9404C5638B059E1CA50
B5366543C3D584AD9E19987218AC5999BB0F2477597AB6F8DD868788C8440CBF
4A338EF64ACD9BF2268656755741DB71FD86387D4A7AA1CFD19937BFD209E4FB
CD1952717C8CF8C0555CB2D0238DC43B2A6A2DE4D7366DB210D2673870D0B0C5
8344E6AEF91B916BAAEAEF37B22F065E870AFE6638E56D0B4AE01785D59EE234
02242D396440157FC51> |-
/five <1C60D8A8C9B7A73DB97C1FD4849B14157B765BEEE66B9438731A1E1DB
F6D904609867EBF49E3E19DC6BA786F7382AB36C8CFA3690DF4F8E7A258691DF
DD71792965BBA1DCE407BE309901C1513A762BED3C73A852D4EDA1BE20A2B364
C59E2224D36D9C8BEE5DE8D6C54C49D0F66DB7448A8FCE0E63D5DEE7BBBA026A
808CDA9AD5556005639017FF42B963FB833B4B64B6445B350600BDCDD563F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CPMINP+TimesNewRomanPSMT /Encoding get
dup 48 /zero put
dup 53 /five put
pop
%ADOEndSubsetFont
/CPMINP+TimesNewRomanPSMT*1 
[
48{/.notdef}repeat /zero /one 3{/.notdef}repeat /five 55{/.notdef}repeat /m 146{/.notdef}repeat
] CPMINP+TimesNewRomanPSMT nfnt
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
7.41504 65.709 mov
0.000228882 0 (m05) ash
grestore % PSGState
29.8892 43.9473 mo
32.2769 43.9473 li
@
gsave % PSGState
14.3696 36.6353 mo
14.3696 51.2593 li
27.5015 51.2593 li
27.5015 36.6353 li
eclp
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
15.5479 47.4585 mov
(00) sh
grestore % PSGState
29.8892 25.667 mo
32.2769 25.667 li
@
gsave % PSGState
14.3696 18.355 mo
14.3696 32.979 li
27.5015 32.979 li
27.5015 18.355 li
eclp
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
15.5479 29.2085 mov
(05) sh
grestore % PSGState
29.8892 7.46143 mo
32.2769 7.46143 li
@
gsave % PSGState
14.3696 .148926 mo
14.3696 14.7734 li
27.5015 14.7734 li
27.5015 .148926 li
eclp
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
15.5479 10.9585 mov
(10) sh
grestore % PSGState
44.1406 .148926 mo
44.1406 2.53662 li
@
67.9424 .148926 mo
67.9424 2.53662 li
@
91.7441 .148926 mo
91.7441 2.53662 li
@
115.546 .148926 mo
115.546 2.53662 li
@
139.348 .148926 mo
139.348 2.53662 li
@
139.348 80.4331 mo
136.96 80.4331 li
@
gsave % PSGState
141.735 73.1211 mo
141.735 87.7456 li
144.123 87.7456 li
144.123 73.1211 li
eclp
grestore % PSGState
139.348 62.2275 mo
136.96 62.2275 li
@
gsave % PSGState
141.735 54.9155 mo
141.735 69.5396 li
144.123 69.5396 li
144.123 54.9155 li
eclp
grestore % PSGState
139.348 43.9473 mo
136.96 43.9473 li
@
gsave % PSGState
141.735 36.6353 mo
141.735 51.2593 li
144.123 51.2593 li
144.123 36.6353 li
eclp
grestore % PSGState
139.348 25.667 mo
136.96 25.667 li
@
gsave % PSGState
141.735 18.355 mo
141.735 32.979 li
144.123 32.979 li
144.123 18.355 li
eclp
grestore % PSGState
139.348 7.46143 mo
136.96 7.46143 li
@
gsave % PSGState
141.735 .148926 mo
141.735 14.7734 li
144.123 14.7734 li
144.123 .148926 li
eclp
grestore % PSGState
gsave % PSGState
78.0898 109.533 mo
78.0898 124.157 li
91.2217 124.157 li
91.2217 109.533 li
eclp
grestore % PSGState
29.8892 43.9473 mo
139.348 43.9473 li
@
gsave % PSGState
28.9941 0 mo
28.9941 88.3423 li
140.019 88.3423 li
140.019 0 li
eclp
gsave % PSGState
37.9478 3.80518 mo
37.9478 18.4292 li
50.5571 18.4292 li
50.5571 3.80518 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
CPMINP+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550D
EC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B
177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB33
3E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB
0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70
BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895
DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737
B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272E
F1EF1464C3F0D45D7CBB8749AF571E09> |-
/q <1C60D8A8C9B7A73DB694895DD5E49D3BBCEE95B381618ED0718BA1F35CD3
9E95BCBD1002A9F89110DE3E7AD181B368295D0F054E6A3D9A7267329EB95AB8
13B7AE1696D9C600AC6A6B00419AEBFBF715793C3A2F30373AE9BFAB97302272
E9B4EA6D0F482F853122AF239C1F65C8335B7091413102CCD1675C767B686462
E8E1B94DFF670F4F69122307C3AAC013B5112B2F564262A5E8DE4D58B097F43D
017CDAA97C6843EB833175C60735563DF7F92AF1ACD211546A7958997473A18D
23764933CEE9DC71CCD4C3E61E53DA702E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CPMINP+TimesNewRomanPSMT /Encoding get
dup 97 /a put
dup 113 /q put
pop
%ADOEndSubsetFont
/CPMINP+TimesNewRomanPSMT*1 
[
48{/.notdef}repeat /zero /one 3{/.notdef}repeat /five 43{/.notdef}repeat /a 11{/.notdef}repeat 
/m 3{/.notdef}repeat /q 142{/.notdef}repeat
] CPMINP+TimesNewRomanPSMT nfnt
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
39.0454 14.6084 mov
(qa) sh
grestore % PSGState
grestore % PSGState
gsave % PSGState
146.958 0 mo
146.958 88.3423 li
257.983 88.3423 li
257.983 0 li
eclp
grestore % PSGState
gsave % PSGState
146.958 0 mo
146.958 88.3423 li
257.983 88.3423 li
257.983 0 li
eclp
grestore % PSGState
gsave % PSGState
146.958 0 mo
146.958 88.3423 li
257.983 88.3423 li
257.983 0 li
eclp
.75 lw
2 lc
147.854 46.1855 mo
147.928 46.1855 li
148.003 46.1855 li
148.151 46.1855 li
148.376 46.1855 li
148.973 46.2603 li
150.018 46.2603 li
152.33 46.4097 li
154.494 46.4844 li
156.658 46.6333 li
158.971 46.7827 li
161.135 46.9316 li
163.447 47.0811 li
165.761 47.3047 li
167.925 47.4541 li
170.237 47.7524 li
172.401 47.9766 li
174.565 48.2749 li
176.804 48.6479 li
176.878 48.7227 li
176.953 48.7227 li
177.102 48.7227 li
177.4 48.7974 li
177.923 48.8716 li
178.967 49.0957 li
179.042 49.0957 li
179.116 49.1704 li
179.266 49.1704 li
179.564 49.2446 li
180.161 49.394 li
181.354 49.6177 li
181.354 49.6924 li
181.43 49.6924 li
181.504 49.6924 li
181.579 49.6924 li
181.877 49.8418 li
182.474 49.9912 li
183.594 50.2896 li
183.668 50.3643 li
183.742 50.3643 li
183.892 50.4385 li
184.115 50.5132 li
184.713 50.6626 li
184.787 50.7373 li
184.937 50.8115 li
185.234 50.8862 li
185.757 51.1104 li
185.832 51.1104 li
185.906 51.1851 li
186.056 51.1851 li
186.354 51.334 li
186.951 51.6323 li
187.025 51.707 li
187.175 51.707 li
187.474 51.8564 li
188.07 52.1548 li
188.07 52.2295 li
188.145 52.2295 li
188.22 52.2295 li
188.368 52.3042 li
188.593 52.4531 li
189.189 52.8262 li
189.264 52.9009 li
189.413 52.9756 li
189.712 53.1245 li
190.234 53.5723 li
190.309 53.5723 li
190.383 53.647 li
190.532 53.7217 li
190.831 53.9453 li
191.428 54.4678 li
191.502 54.5425 li
191.577 54.6172 li
191.727 54.6919 li
192.024 54.9902 li
192.547 55.5869 li
192.621 55.6616 li
192.696 55.7363 li
192.846 55.8853 li
193.144 56.2583 li
193.74 56.9302 li
193.74 57.0049 li
193.815 57.0049 li
193.89 57.1538 li
194.039 57.3032 li
194.338 57.751 li
194.86 58.646 li
194.935 58.646 li
194.935 58.7207 li
195.009 58.8701 li
195.158 59.0938 li
195.382 59.5415 li
195.457 59.6162 li
195.457 59.6909 li
195.531 59.7651 li
195.681 60.064 li
195.979 60.5859 li
195.979 60.6606 li
196.054 60.7354 li
196.054 60.8848 li
196.203 61.1831 li
196.501 61.7798 li
197.023 63.0483 li
197.099 63.1978 li
197.099 63.272 li
197.173 63.4214 li
197.322 63.8691 li
197.621 64.6899 li
198.218 66.5552 li
198.218 66.7046 li
198.292 66.7788 li
198.367 67.0776 li
198.516 67.5254 li
198.74 68.6445 li
199.337 70.8828 li
199.411 71.0322 li
199.411 71.1812 li
199.486 71.4053 li
199.635 71.9272 li
199.635 72.0767 li
199.71 72.2261 li
199.784 72.4497 li
199.934 72.9722 li
199.934 73.1211 li
199.934 73.2705 li
200.008 73.4941 li
200.157 73.9419 li
200.232 74.0166 li
200.232 74.166 li
200.307 74.3896 li
200.307 74.4644 li
200.381 74.5391 li
200.456 74.688 li
200.456 74.7627 li
200.53 74.8374 li
200.53 74.9121 li
200.605 74.9863 li
200.605 75.061 li
200.68 75.1357 li
200.68 75.2104 li
200.755 75.2104 li
200.829 75.2104 li
200.903 75.2104 li
200.979 75.2104 li
200.979 75.1357 li
201.053 75.1357 li
201.053 75.061 li
201.053 74.9863 li
201.128 74.9121 li
201.128 74.7627 li
201.202 74.688 li
201.202 74.5391 li
201.276 74.3896 li
201.276 74.2402 li
201.352 74.0166 li
201.352 73.8672 li
201.426 73.6436 li
201.426 73.4194 li
201.426 73.1211 li
201.501 72.5991 li
201.575 72.3003 li
201.575 71.9272 li
201.649 71.1812 li
201.725 70.8081 li
201.725 70.4351 li
201.799 69.4653 li
201.799 69.0176 li
201.874 68.4951 li
201.948 67.376 li
201.948 66.7788 li
202.022 66.1074 li
202.098 64.8389 li
202.098 64.0928 li
202.098 63.4214 li
202.172 61.8545 li
202.321 58.5718 li
202.396 57.6763 li
202.396 56.7061 li
202.471 54.8408 li
202.62 50.8862 li
202.62 49.9165 li
202.694 48.8716 li
202.694 46.7827 li
202.844 42.5298 li
202.918 41.4849 li
202.918 40.4404 li
202.993 38.3511 li
203.142 34.3223 li
203.142 33.3521 li
203.217 32.3823 li
203.291 30.5913 li
203.291 29.6963 li
203.291 28.8008 li
203.366 27.0845 li
203.44 26.2637 li
203.44 25.5176 li
203.515 24.0254 li
203.664 21.3394 li
203.664 20.668 li
203.739 20.0708 li
203.813 18.877 li
203.813 18.355 li
203.889 17.9072 li
203.963 16.937 li
203.963 16.4893 li
204.037 16.1162 li
204.037 15.7432 li
204.112 15.4448 li
204.112 15.0718 li
204.187 14.7734 li
204.187 14.5493 li
204.262 14.251 li
204.262 14.0273 li
204.336 13.8779 li
204.336 13.6543 li
204.41 13.5049 li
204.41 13.356 li
204.485 13.2065 li
204.485 13.0571 li
204.56 12.9824 li
204.56 12.9082 li
204.635 12.8335 li
204.635 12.7588 li
204.709 12.6841 li
204.783 12.6841 li
204.858 12.6841 li
204.933 12.7588 li
205.008 12.8335 li
205.008 12.9082 li
205.082 12.9082 li
205.082 12.9824 li
205.156 13.0571 li
205.156 13.1318 li
205.231 13.356 li
205.306 13.4302 li
205.306 13.5049 li
205.381 13.729 li
205.455 13.8779 li
205.455 13.9526 li
205.529 14.1763 li
205.679 14.6987 li
205.978 15.8179 li
205.978 15.9673 li
206.052 16.042 li
206.127 16.3403 li
206.275 16.8628 li
206.5 17.9072 li
207.021 19.9961 li
207.097 20.0708 li
207.097 20.2202 li
207.171 20.4438 li
207.32 20.9663 li
207.619 21.8618 li
208.142 23.5034 li
208.142 23.6523 li
208.216 23.7271 li
208.29 23.9507 li
208.439 24.3237 li
208.738 25.1445 li
208.738 25.2192 li
208.813 25.2939 li
208.888 25.4429 li
209.036 25.8164 li
209.335 26.4878 li
209.335 26.5625 li
209.335 26.6367 li
209.409 26.8608 li
209.559 27.1592 li
209.857 27.7563 li
210.454 28.8008 li
210.528 28.8755 li
210.528 28.9502 li
210.604 29.0244 li
210.753 29.3232 li
211.051 29.7705 li
211.648 30.5913 li
211.648 30.666 li
211.723 30.666 li
211.723 30.7407 li
211.872 30.9644 li
212.17 31.3374 li
212.768 32.0093 li
212.842 32.0835 li
212.916 32.1582 li
213.065 32.3076 li
213.289 32.5313 li
213.812 33.0537 li
213.887 33.1284 li
213.961 33.2031 li
214.11 33.3521 li
214.334 33.5762 li
214.931 34.0239 li
215.006 34.0239 li
215.08 34.0981 li
215.229 34.2476 li
215.453 34.397 li
216.05 34.8442 li
216.125 34.8442 li
216.199 34.9189 li
216.349 34.9937 li
216.647 35.2173 li
217.244 35.5161 li
217.244 35.5903 li
217.318 35.5903 li
217.394 35.5903 li
217.468 35.665 li
217.767 35.8145 li
218.289 36.1128 li
218.363 36.1128 li
218.438 36.1875 li
218.587 36.2622 li
218.886 36.3369 li
219.408 36.6353 li
219.482 36.6353 li
219.557 36.6353 li
219.632 36.71 li
219.93 36.8589 li
220.452 37.0083 li
221.497 37.3813 li
221.571 37.4561 li
221.646 37.4561 li
221.796 37.5308 li
222.094 37.605 li
222.69 37.7544 li
223.81 38.1274 li
223.885 38.1274 li
223.959 38.1274 li
224.108 38.2021 li
224.332 38.2769 li
224.93 38.4258 li
225.974 38.6499 li
226.049 38.6499 li
226.123 38.7241 li
226.272 38.7241 li
226.57 38.7988 li
227.168 38.8735 li
228.287 39.0972 li
230.45 39.5449 li
232.614 39.8438 li
234.928 40.1421 li
237.091 40.3657 li
239.404 40.5898 li
241.717 40.8135 li
243.881 40.9629 li
246.194 41.1118 li
248.357 41.2612 li
250.521 41.3359 li
252.835 41.4849 li
254.998 41.5596 li
257.312 41.709 li
257.386 41.709 li
0 0 1 rgb
@
147.854 43.9473 mo
147.928 43.9473 li
148.003 43.9473 li
148.151 43.9473 li
148.376 43.9473 li
148.973 43.9473 li
150.018 43.8726 li
152.33 43.8726 li
154.494 43.8726 li
156.658 43.8726 li
158.971 43.8726 li
161.135 43.8726 li
161.209 43.8726 li
161.284 43.8726 li
161.433 43.8726 li
161.731 43.8726 li
162.328 43.8726 li
163.447 43.8726 li
163.522 43.8726 li
163.597 43.8726 li
163.746 43.8726 li
164.045 43.8726 li
164.642 43.8726 li
165.761 43.8726 li
165.835 43.8726 li
165.91 43.8726 li
166.059 43.8726 li
166.283 43.8726 li
166.806 43.8726 li
167.925 43.8726 li
167.999 43.8726 li
168.073 43.8726 li
168.223 43.8726 li
168.521 43.8726 li
169.044 43.8726 li
170.237 43.8726 li
170.313 43.8726 li
170.387 43.8726 li
170.536 43.8726 li
170.76 43.7979 li
171.356 43.7979 li
172.401 43.7979 li
172.476 43.7979 li
172.551 43.7979 li
172.699 43.7979 li
172.924 43.7979 li
173.446 43.7979 li
173.521 43.7979 li
173.595 43.7979 li
173.744 43.7979 li
173.968 43.7979 li
174.565 43.7979 li
174.64 43.7979 li
174.789 43.7979 li
175.087 43.7979 li
175.685 43.7979 li
175.759 43.7979 li
175.833 43.7979 li
175.982 43.7979 li
176.281 43.7979 li
176.804 43.7979 li
176.878 43.7979 li
176.953 43.7979 li
177.102 43.7979 li
177.4 43.7979 li
177.923 43.7236 li
177.997 43.7236 li
178.072 43.7236 li
178.221 43.7236 li
178.445 43.7236 li
178.967 43.7236 li
179.042 43.7236 li
179.116 43.7236 li
179.266 43.7236 li
179.564 43.7236 li
180.161 43.7236 li
180.235 43.7236 li
180.311 43.7236 li
180.46 43.7236 li
180.758 43.7236 li
181.354 43.7236 li
181.43 43.7236 li
181.504 43.7236 li
181.579 43.6489 li
181.877 43.6489 li
182.474 43.6489 li
182.549 43.6489 li
182.623 43.6489 li
182.772 43.6489 li
183.071 43.6489 li
183.594 43.6489 li
183.668 43.6489 li
183.742 43.6489 li
183.892 43.6489 li
184.115 43.5742 li
184.713 43.5742 li
184.787 43.5742 li
184.937 43.5742 li
185.234 43.5742 li
185.757 43.5742 li
185.832 43.4995 li
185.906 43.4995 li
186.056 43.4995 li
186.354 43.4995 li
186.951 43.4995 li
187.025 43.4995 li
187.175 43.4248 li
187.474 43.4248 li
188.07 43.4248 li
188.145 43.4248 li
188.22 43.4248 li
188.368 43.3506 li
188.593 43.3506 li
188.667 43.3506 li
188.741 43.3506 li
188.891 43.3506 li
189.189 43.3506 li
189.189 43.2759 li
189.264 43.2759 li
189.413 43.2759 li
189.712 43.2759 li
190.234 43.2012 li
190.309 43.2012 li
190.383 43.2012 li
190.532 43.2012 li
190.831 43.1265 li
190.905 43.1265 li
190.98 43.1265 li
191.129 43.0518 li
191.428 43.0518 li
191.502 43.0518 li
191.577 43.0518 li
191.727 42.9775 li
192.024 42.9775 li
192.547 42.8281 li
192.621 42.8281 li
192.696 42.8281 li
192.846 42.7534 li
193.144 42.6787 li
193.219 42.6787 li
193.293 42.6787 li
193.442 42.604 li
193.74 42.5298 li
193.815 42.5298 li
193.89 42.5298 li
194.039 42.4551 li
194.338 42.3804 li
194.412 42.3057 li
194.487 42.3057 li
194.562 42.231 li
194.86 42.1567 li
194.935 42.082 li
195.009 42.082 li
195.158 42.0073 li
195.382 41.8579 li
195.457 41.8579 li
195.531 41.7837 li
195.681 41.709 li
195.979 41.5596 li
196.054 41.5596 li
196.054 41.4849 li
196.203 41.4106 li
196.501 41.1865 li
196.576 41.1118 li
196.65 41.0376 li
196.726 40.9629 li
197.023 40.6641 li
197.099 40.6641 li
197.099 40.5898 li
197.173 40.5151 li
197.322 40.3657 li
197.396 40.291 li
197.472 40.2168 li
197.621 39.9927 li
197.695 39.918 li
197.77 39.8438 li
197.919 39.6196 li
198.218 39.1719 li
198.218 39.0972 li
198.292 39.0229 li
198.367 38.8735 li
198.516 38.5752 li
198.516 38.5005 li
198.591 38.4258 li
198.665 38.2769 li
198.74 37.978 li
198.814 37.8291 li
198.814 37.7544 li
198.889 37.605 li
199.038 37.1572 li
199.337 36.2622 li
199.411 36.1875 li
199.411 36.0381 li
199.486 35.8145 li
199.635 35.292 li
199.635 35.1431 li
199.71 35.0684 li
199.784 34.77 li
199.934 34.1729 li
199.934 34.0239 li
199.934 33.7998 li
200.008 33.5015 li
200.157 32.7554 li
200.456 31.1885 li
200.456 30.9644 li
200.53 30.7407 li
200.605 30.293 li
200.68 29.3232 li
200.979 27.1592 li
201.053 26.8608 li
201.053 26.5625 li
201.128 25.9653 li
201.276 24.6968 li
201.501 22.0854 li
201.575 21.7124 li
201.575 21.4141 li
201.649 20.668 li
201.799 19.3247 li
201.799 19.0264 li
201.874 18.6533 li
201.948 17.9819 li
202.098 16.7134 li
202.098 16.415 li
202.098 16.1162 li
202.172 15.5942 li
202.247 15.2959 li
202.247 14.9971 li
202.321 14.5493 li
202.396 14.3257 li
202.396 14.1021 li
202.396 13.8779 li
202.471 13.729 li
202.471 13.5796 li
202.545 13.4302 li
202.545 13.2813 li
202.62 13.1318 li
202.62 13.0571 li
202.694 12.9082 li
202.694 12.8335 li
202.769 12.7588 li
202.844 12.7588 li
202.918 12.7588 li
202.918 12.8335 li
202.993 12.9082 li
202.993 12.9824 li
202.993 13.1318 li
203.067 13.2065 li
203.067 13.356 li
203.142 13.5049 li
203.142 13.6543 li
203.217 13.8779 li
203.291 14.251 li
203.291 14.4751 li
203.291 14.6987 li
203.366 15.2212 li
203.44 15.4448 li
203.44 15.7432 li
203.515 16.3403 li
203.664 17.5342 li
203.664 17.9072 li
203.739 18.2803 li
203.813 19.0264 li
203.963 20.4438 li
204.262 23.4287 li
204.262 23.7271 li
204.336 24.1001 li
204.41 24.7715 li
204.56 26.1147 li
204.783 28.5767 li
204.858 28.8008 li
204.858 29.0991 li
204.933 29.6216 li
205.082 30.666 li
205.156 30.8901 li
205.156 31.1138 li
205.231 31.5615 li
205.381 32.3823 li
205.455 32.606 li
205.455 32.8301 li
205.529 33.2031 li
205.679 33.8745 li
205.978 35.1431 li
205.978 35.292 li
206.052 35.4414 li
206.127 35.665 li
206.275 36.1875 li
206.275 36.2622 li
206.275 36.4111 li
206.351 36.6353 li
206.5 37.0083 li
206.574 37.083 li
206.574 37.2319 li
206.648 37.3813 li
206.798 37.7544 li
207.021 38.3511 li
207.097 38.4258 li
207.097 38.5005 li
207.171 38.6499 li
207.32 38.9482 li
207.395 39.0229 li
207.47 39.1719 li
207.619 39.396 li
207.619 39.4707 li
207.693 39.4707 li
207.693 39.6196 li
207.843 39.769 li
208.142 40.1421 li
208.142 40.2168 li
208.216 40.291 li
208.29 40.3657 li
208.439 40.5151 li
208.515 40.5898 li
208.589 40.6641 li
208.738 40.8135 li
208.813 40.8882 li
208.888 40.9629 li
209.036 41.0376 li
209.335 41.3359 li
209.409 41.4106 li
209.559 41.4849 li
209.857 41.709 li
209.932 41.709 li
210.007 41.7837 li
210.155 41.8579 li
210.454 42.0073 li
210.528 42.0073 li
210.604 42.082 li
210.753 42.1567 li
211.051 42.231 li
211.126 42.3057 li
211.2 42.3057 li
211.35 42.3804 li
211.648 42.4551 li
211.723 42.4551 li
211.723 42.5298 li
211.872 42.5298 li
212.17 42.604 li
212.768 42.7534 li
212.842 42.7534 li
212.916 42.8281 li
213.065 42.8281 li
213.289 42.9028 li
213.364 42.9028 li
213.438 42.9028 li
213.588 42.9028 li
213.812 42.9775 li
213.887 42.9775 li
213.961 42.9775 li
214.11 43.0518 li
214.334 43.0518 li
214.931 43.1265 li
215.006 43.1265 li
215.08 43.1265 li
215.229 43.2012 li
215.453 43.2012 li
215.528 43.2012 li
215.603 43.2012 li
215.752 43.2759 li
216.05 43.2759 li
216.125 43.2759 li
216.199 43.2759 li
216.349 43.2759 li
216.647 43.3506 li
217.244 43.3506 li
217.318 43.3506 li
217.394 43.3506 li
217.468 43.4248 li
217.767 43.4248 li
218.289 43.4248 li
218.363 43.4248 li
218.438 43.4248 li
218.587 43.4995 li
218.886 43.4995 li
219.408 43.4995 li
219.482 43.4995 li
219.557 43.4995 li
219.632 43.4995 li
219.93 43.5742 li
220.452 43.5742 li
220.527 43.5742 li
220.602 43.5742 li
220.751 43.5742 li
220.975 43.5742 li
221.497 43.5742 li
221.571 43.5742 li
221.646 43.6489 li
221.796 43.6489 li
222.094 43.6489 li
222.69 43.6489 li
222.766 43.6489 li
222.84 43.6489 li
222.989 43.6489 li
223.213 43.6489 li
223.81 43.6489 li
223.885 43.6489 li
223.959 43.6489 li
224.108 43.6489 li
224.332 43.7236 li
224.93 43.7236 li
225.004 43.7236 li
225.153 43.7236 li
225.451 43.7236 li
225.974 43.7236 li
226.049 43.7236 li
226.123 43.7236 li
226.272 43.7236 li
226.57 43.7236 li
227.168 43.7236 li
227.242 43.7236 li
227.316 43.7236 li
227.466 43.7236 li
227.689 43.7236 li
228.287 43.7979 li
228.361 43.7979 li
228.437 43.7979 li
228.585 43.7979 li
228.884 43.7979 li
229.406 43.7979 li
230.45 43.7979 li
230.525 43.7979 li
230.6 43.7979 li
230.749 43.7979 li
231.048 43.7979 li
231.57 43.7979 li
232.614 43.7979 li
232.689 43.7979 li
232.764 43.7979 li
232.913 43.7979 li
233.211 43.7979 li
233.809 43.7979 li
234.928 43.7979 li
235.002 43.7979 li
235.076 43.8726 li
235.226 43.8726 li
235.45 43.8726 li
236.047 43.8726 li
237.091 43.8726 li
237.166 43.8726 li
237.24 43.8726 li
237.39 43.8726 li
237.688 43.8726 li
238.285 43.8726 li
239.404 43.8726 li
239.479 43.8726 li
239.554 43.8726 li
239.703 43.8726 li
240.001 43.8726 li
240.598 43.8726 li
241.717 43.8726 li
243.881 43.8726 li
246.194 43.8726 li
248.357 43.8726 li
250.521 43.8726 li
252.835 43.8726 li
254.998 43.8726 li
257.312 43.9473 li
257.386 43.9473 li
1 0 0 rgb
@
grestore % PSGState
2 lc
257.386 87.7456 mo
147.854 87.7456 li
@
147.854 87.7456 mo
147.854 .148926 li
@
147.854 .148926 mo
257.386 .148926 li
@
257.386 .148926 mo
257.386 87.7456 li
@
0 lc
162.179 87.7456 mo
162.179 85.3579 li
@
gsave % PSGState
160.985 90.1333 mo
160.985 104.757 li
163.373 104.757 li
163.373 90.1333 li
eclp
grestore % PSGState
185.98 87.7456 mo
185.98 85.3579 li
@
gsave % PSGState
176.729 90.1333 mo
176.729 104.757 li
195.233 104.757 li
195.233 90.1333 li
eclp
grestore % PSGState
209.782 87.7456 mo
209.782 85.3579 li
@
gsave % PSGState
208.589 90.1333 mo
208.589 104.757 li
210.977 104.757 li
210.977 90.1333 li
eclp
grestore % PSGState
233.584 87.7456 mo
233.584 85.3579 li
@
gsave % PSGState
224.332 90.1333 mo
224.332 104.757 li
242.837 104.757 li
242.837 90.1333 li
eclp
grestore % PSGState
147.854 80.4331 mo
150.241 80.4331 li
@
gsave % PSGState
129.573 73.1211 mo
129.573 87.7456 li
145.466 87.7456 li
145.466 73.1211 li
eclp
grestore % PSGState
147.854 62.2275 mo
150.241 62.2275 li
@
gsave % PSGState
124.201 54.9155 mo
124.201 69.5396 li
145.466 69.5396 li
145.466 54.9155 li
eclp
grestore % PSGState
147.854 43.9473 mo
150.241 43.9473 li
@
gsave % PSGState
132.334 36.6353 mo
132.334 51.2593 li
145.466 51.2593 li
145.466 36.6353 li
eclp
grestore % PSGState
147.854 25.667 mo
150.241 25.667 li
@
gsave % PSGState
132.334 18.355 mo
132.334 32.979 li
145.466 32.979 li
145.466 18.355 li
eclp
grestore % PSGState
147.854 7.46143 mo
150.241 7.46143 li
@
gsave % PSGState
132.334 .148926 mo
132.334 14.7734 li
145.466 14.7734 li
145.466 .148926 li
eclp
grestore % PSGState
162.179 .148926 mo
162.179 2.53662 li
@
185.98 .148926 mo
185.98 2.53662 li
@
209.782 .148926 mo
209.782 2.53662 li
@
233.584 .148926 mo
233.584 2.53662 li
@
257.386 .148926 mo
257.386 2.53662 li
@
257.386 80.4331 mo
254.998 80.4331 li
@
257.386 62.2275 mo
254.998 62.2275 li
@
257.386 43.9473 mo
254.998 43.9473 li
@
257.386 25.667 mo
254.998 25.667 li
@
257.386 7.46143 mo
254.998 7.46143 li
@
gsave % PSGState
196.054 109.533 mo
196.054 124.157 li
209.186 124.157 li
209.186 109.533 li
eclp
grestore % PSGState
gsave % PSGState
104.801 37.3813 mo
104.801 50.5132 li
119.426 50.5132 li
119.426 37.3813 li
eclp
grestore % PSGState
147.854 43.9473 mo
257.386 43.9473 li
@
gsave % PSGState
146.958 0 mo
146.958 88.3423 li
257.983 88.3423 li
257.983 0 li
eclp
gsave % PSGState
155.613 3.80518 mo
155.613 18.4292 li
168.745 18.4292 li
168.745 3.80518 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
CPMINP+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8
F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9A
F110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D39992
4398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D660
3C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83
F23AED1F56FC130F21> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CPMINP+TimesNewRomanPSMT /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
/CPMINP+TimesNewRomanPSMT*1 
[
48{/.notdef}repeat /zero /one 3{/.notdef}repeat /five 43{/.notdef}repeat /a /b 
10{/.notdef}repeat /m 3{/.notdef}repeat /q 142{/.notdef}repeat
] CPMINP+TimesNewRomanPSMT nfnt
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
156.779 14.6084 mov
-0.000335693 0 (qb) ash
grestore % PSGState
grestore % PSGState
gsave % PSGState
28.9941 96.5498 mo
28.9941 184.892 li
140.019 184.892 li
140.019 96.5498 li
eclp
grestore % PSGState
gsave % PSGState
28.9941 96.5498 mo
28.9941 184.892 li
140.019 184.892 li
140.019 96.5498 li
eclp
grestore % PSGState
gsave % PSGState
28.9941 96.5498 mo
28.9941 184.892 li
140.019 184.892 li
140.019 96.5498 li
eclp
.75 lw
2 lc
29.8892 147.511 mo
29.8892 147.511 li
29.9639 147.511 li
30.0386 147.585 li
30.1133 147.585 li
30.4116 147.585 li
30.9341 147.661 li
32.0532 147.809 li
34.3662 148.182 li
36.5298 148.481 li
38.6938 148.854 li
41.0068 149.301 li
43.1704 149.674 li
45.4834 150.272 li
47.7964 150.794 li
49.8857 151.391 li
52.2734 152.137 li
54.437 152.958 li
56.5264 153.779 li
58.8394 154.898 li
61.0029 156.091 li
63.3164 157.583 li
65.6294 159.3 li
65.7036 159.375 li
65.7783 159.449 li
65.853 159.524 li
66.1514 159.748 li
66.6738 160.195 li
67.793 161.24 li
67.8677 161.315 li
67.8677 161.389 li
68.0166 161.539 li
68.3154 161.836 li
68.9121 162.434 li
70.106 163.777 li
70.1807 163.851 li
70.1807 163.926 li
70.3301 164.075 li
70.6284 164.449 li
71.1504 165.12 li
72.27 166.538 li
74.583 170.119 li
74.6572 170.194 li
74.7319 170.342 li
74.8813 170.567 li
75.1797 171.014 li
75.7021 171.984 li
75.7769 171.984 li
75.7769 172.059 li
75.8511 172.208 li
76.0005 172.432 li
76.2988 172.879 li
76.896 173.775 li
76.9702 173.849 li
77.0449 173.924 li
77.1196 174.148 li
77.418 174.521 li
77.4927 174.521 li
77.4927 174.595 li
77.5674 174.67 li
77.7168 174.82 li
77.9404 175.193 li
78.0151 175.193 li
78.0151 175.267 li
78.0898 175.267 li
78.2388 175.417 li
78.2388 175.491 li
78.3135 175.491 li
78.3882 175.566 li
78.4629 175.64 li
78.5371 175.715 li
78.6118 175.79 li
78.6865 175.79 li
78.7612 175.864 li
78.8359 175.864 li
78.9106 175.939 li
78.9849 175.939 li
79.0596 175.939 li
79.1343 176.013 li
79.209 176.013 li
79.2837 176.013 li
79.3579 176.013 li
79.4326 176.013 li
79.5073 176.013 li
79.582 175.939 li
79.6567 175.939 li
79.731 175.939 li
79.731 175.864 li
79.8057 175.864 li
79.8804 175.79 li
79.9551 175.79 li
79.9551 175.715 li
80.0298 175.64 li
80.104 175.64 li
80.104 175.566 li
80.1787 175.491 li
80.2534 175.417 li
80.3281 175.267 li
80.4028 175.193 li
80.4775 175.043 li
80.5518 174.969 li
80.5518 174.894 li
80.6265 174.745 li
80.7759 174.372 li
80.8506 174.297 li
80.8506 174.222 li
80.9248 173.999 li
81.0742 173.551 li
81.0742 173.476 li
81.1489 173.328 li
81.2236 173.029 li
81.3726 172.506 li
81.3726 172.357 li
81.4473 172.208 li
81.522 171.91 li
81.5967 171.313 li
81.6709 171.164 li
81.6709 171.014 li
81.7456 170.641 li
81.895 169.895 li
81.9697 169.671 li
81.9697 169.522 li
82.0439 169.075 li
82.1934 168.253 li
82.4175 166.314 li
82.4917 166.089 li
82.4917 165.792 li
82.5664 165.269 li
82.7158 164.15 li
83.0142 161.762 li
83.0142 161.463 li
83.0889 161.166 li
83.1636 160.494 li
83.2378 159.151 li
83.5366 156.241 li
83.5366 155.868 li
83.6108 155.495 li
83.6855 154.749 li
83.835 153.256 li
84.0586 150.047 li
84.5811 143.333 li
84.6558 142.959 li
84.6558 142.512 li
84.7305 141.617 li
84.8794 139.9 li
85.1035 136.468 li
85.7002 129.828 li
85.7002 129.455 li
85.7002 129.006 li
85.7749 128.112 li
85.9243 126.47 li
86.2227 123.261 li
86.2974 122.888 li
86.2974 122.515 li
86.3716 121.769 li
86.521 120.352 li
86.8193 117.666 li
86.8193 117.367 li
86.894 117.069 li
86.9688 116.472 li
87.1177 115.278 li
87.1177 115.054 li
87.1924 114.755 li
87.2671 114.233 li
87.4165 113.189 li
87.4165 112.965 li
87.4912 112.741 li
87.5654 112.293 li
87.7148 111.398 li
88.0132 109.832 li
88.0132 109.682 li
88.0132 109.533 li
88.0879 109.234 li
88.2373 108.637 li
88.3115 108.488 li
88.3115 108.338 li
88.3862 108.115 li
88.5356 107.592 li
88.5356 107.518 li
88.6104 107.369 li
88.6846 107.219 li
88.6846 107.071 li
88.6846 106.996 li
88.7593 106.772 li
88.834 106.698 li
88.834 106.623 li
88.9087 106.473 li
89.0576 106.175 li
89.0576 106.1 li
89.1323 106.026 li
89.207 105.876 li
89.2817 105.802 li
89.3564 105.653 li
89.3564 105.578 li
89.4312 105.503 li
89.5054 105.429 li
89.5801 105.354 li
89.6548 105.28 li
89.7295 105.205 li
89.8042 105.13 li
89.8784 105.13 li
89.9531 105.056 li
90.0278 105.056 li
90.1025 105.056 li
90.1025 104.981 li
90.1772 104.981 li
90.2515 104.981 li
90.3262 104.981 li
90.4009 104.981 li
90.4756 104.981 li
90.5503 104.981 li
90.5503 105.056 li
90.6245 105.056 li
90.6992 105.056 li
90.7739 105.056 li
90.7739 105.13 li
90.8486 105.13 li
90.9233 105.13 li
90.9233 105.205 li
90.998 105.205 li
91.0723 105.28 li
91.147 105.354 li
91.2964 105.429 li
91.3711 105.503 li
91.4453 105.578 li
91.5947 105.727 li
91.8931 106.1 li
91.9678 106.175 li
92.0425 106.25 li
92.1914 106.399 li
92.4902 106.846 li
92.5645 106.921 li
92.6392 107.071 li
92.7886 107.219 li
93.0122 107.667 li
93.6094 108.563 li
94.8032 110.428 li
96.8921 113.711 li
96.9668 113.786 li
96.9668 113.86 li
97.0415 113.935 li
97.1909 114.159 li
97.4893 114.532 li
98.0859 115.352 li
99.2051 116.845 li
99.2798 116.845 li
99.2798 116.919 li
99.3545 116.994 li
99.5039 117.143 li
99.8022 117.516 li
100.325 118.113 li
101.369 119.232 li
101.444 119.307 li
101.519 119.381 li
101.667 119.531 li
101.892 119.83 li
102.488 120.277 li
103.533 121.247 li
103.533 121.322 li
103.607 121.322 li
103.682 121.396 li
103.832 121.545 li
104.13 121.769 li
104.652 122.217 li
105.846 123.113 li
108.01 124.53 li
110.323 125.873 li
112.486 126.917 li
114.65 127.813 li
116.963 128.708 li
119.127 129.379 li
121.44 130.051 li
123.753 130.648 li
125.917 131.17 li
128.23 131.619 li
130.394 132.066 li
132.483 132.439 li
134.796 132.812 li
136.96 133.111 li
139.272 133.409 li
139.348 133.409 li
0 0 1 rgb
@
29.8892 140.348 mo
29.8892 140.348 li
29.9639 140.348 li
30.0386 140.348 li
30.1133 140.348 li
30.4116 140.348 li
30.9341 140.348 li
32.0532 140.348 li
34.3662 140.348 li
36.5298 140.348 li
38.6938 140.348 li
41.0068 140.274 li
43.1704 140.274 li
45.4834 140.274 li
47.7964 140.199 li
47.8711 140.199 li
48.0205 140.199 li
48.3188 140.199 li
48.8413 140.199 li
49.8857 140.199 li
49.9604 140.199 li
50.0352 140.199 li
50.1841 140.199 li
50.4824 140.199 li
51.0796 140.199 li
52.2734 140.125 li
52.3481 140.125 li
52.4971 140.125 li
52.7954 140.125 li
53.3179 140.125 li
54.437 140.125 li
54.5117 140.125 li
54.6611 140.125 li
54.9595 140.049 li
55.4819 140.049 li
56.5264 140.049 li
56.6011 140.049 li
56.6758 140.049 li
56.8247 140.049 li
57.123 140.049 li
57.7202 139.975 li
57.7949 139.975 li
57.8691 139.975 li
57.9438 139.975 li
58.2427 139.975 li
58.8394 139.975 li
58.9141 139.975 li
58.9888 139.975 li
59.1377 139.975 li
59.3618 139.9 li
59.8838 139.9 li
59.9585 139.9 li
60.0332 139.9 li
60.1826 139.9 li
60.481 139.9 li
61.0029 139.826 li
61.0776 139.826 li
61.1523 139.826 li
61.3018 139.826 li
61.6001 139.826 li
62.1968 139.826 li
62.1968 139.751 li
62.2715 139.751 li
62.3462 139.751 li
62.4209 139.751 li
62.7192 139.751 li
63.3164 139.751 li
63.3906 139.676 li
63.4653 139.676 li
63.6147 139.676 li
63.9131 139.676 li
64.5098 139.602 li
64.5845 139.602 li
64.7339 139.602 li
65.0322 139.602 li
65.6294 139.527 li
65.7036 139.527 li
65.7783 139.527 li
65.853 139.527 li
66.1514 139.453 li
66.6738 139.453 li
66.7485 139.453 li
66.8232 139.378 li
66.9722 139.378 li
67.1963 139.378 li
67.793 139.303 li
67.8677 139.303 li
68.0166 139.229 li
68.3154 139.229 li
68.9121 139.154 li
68.9868 139.154 li
69.0615 139.08 li
69.2104 139.08 li
69.5093 139.08 li
70.106 138.93 li
70.1807 138.93 li
70.3301 138.856 li
70.6284 138.856 li
71.1504 138.707 li
71.2251 138.707 li
71.2998 138.707 li
71.4492 138.632 li
71.6729 138.632 li
72.27 138.483 li
72.3442 138.408 li
72.4189 138.408 li
72.5684 138.408 li
72.792 138.259 li
73.3892 138.11 li
73.4634 138.11 li
73.5381 138.035 li
73.6875 137.96 li
73.9858 137.886 li
74.583 137.662 li
74.6572 137.662 li
74.6572 137.587 li
74.7319 137.587 li
74.8813 137.513 li
75.1797 137.364 li
75.2544 137.364 li
75.3291 137.289 li
75.478 137.214 li
75.7021 137.065 li
75.7769 137.065 li
75.8511 136.991 li
76.0005 136.916 li
76.2988 136.766 li
76.896 136.393 li
76.896 136.319 li
76.9702 136.319 li
77.0449 136.245 li
77.1196 136.169 li
77.418 135.946 li
77.9404 135.499 li
78.0151 135.499 li
78.0898 135.423 li
78.2388 135.274 li
78.4629 135.05 li
79.0596 134.454 li
79.1343 134.379 li
79.209 134.304 li
79.3579 134.155 li
79.582 133.782 li
80.1787 133.036 li
81.3726 131.394 li
81.3726 131.32 li
81.4473 131.32 li
81.522 131.17 li
81.5967 130.947 li
81.895 130.574 li
82.4175 129.752 li
82.4917 129.752 li
82.4917 129.678 li
82.5664 129.604 li
82.7158 129.379 li
83.0142 129.082 li
83.0142 129.006 li
83.0889 128.932 li
83.1636 128.858 li
83.2378 128.708 li
83.5366 128.41 li
83.6108 128.41 li
83.6855 128.335 li
83.6855 128.26 li
83.7603 128.26 li
83.835 128.186 li
83.9097 128.112 li
84.0586 128.037 li
84.1333 127.962 li
84.208 127.962 li
84.2827 127.887 li
84.3574 127.887 li
84.4316 127.887 li
84.4316 127.813 li
84.5063 127.813 li
84.5811 127.813 li
84.6558 127.813 li
84.7305 127.813 li
84.8047 127.813 li
84.8794 127.813 li
84.9541 127.813 li
85.0288 127.813 li
85.1035 127.813 li
85.1777 127.813 li
85.2524 127.887 li
85.3271 127.887 li
85.4019 127.887 li
85.4019 127.962 li
85.4766 127.962 li
85.5508 127.962 li
85.5508 128.037 li
85.6255 128.037 li
85.7002 128.112 li
85.7749 128.186 li
85.9243 128.335 li
85.9985 128.335 li
86.0732 128.41 li
86.2227 128.559 li
86.2974 128.633 li
86.3716 128.708 li
86.521 128.932 li
86.8193 129.231 li
86.8193 129.305 li
86.894 129.379 li
86.9688 129.455 li
87.1177 129.678 li
87.4165 130.051 li
88.0132 130.947 li
88.0132 131.021 li
88.0879 131.096 li
88.2373 131.32 li
88.5356 131.767 li
89.0576 132.513 li
89.0576 132.588 li
89.1323 132.588 li
89.207 132.738 li
89.3564 132.886 li
89.5801 133.26 li
90.1025 133.931 li
90.1772 133.931 li
90.1772 134.006 li
90.2515 134.081 li
90.4009 134.23 li
90.6992 134.603 li
90.7739 134.603 li
90.7739 134.677 li
90.8486 134.752 li
90.998 134.901 li
91.2964 135.2 li
91.3711 135.2 li
91.3711 135.274 li
91.4453 135.274 li
91.5947 135.423 li
91.8931 135.722 li
92.4902 136.169 li
92.5645 136.245 li
92.6392 136.245 li
92.7886 136.393 li
93.0122 136.542 li
93.0869 136.618 li
93.1616 136.692 li
93.311 136.766 li
93.6094 136.916 li
93.6841 136.916 li
93.6841 136.991 li
93.7583 136.991 li
93.9077 137.065 li
94.2061 137.214 li
94.8032 137.513 li
94.8779 137.587 li
95.0269 137.662 li
95.3252 137.737 li
95.8477 137.96 li
95.9224 137.96 li
95.9971 138.035 li
96.0713 138.035 li
96.3701 138.184 li
96.8921 138.333 li
96.9668 138.333 li
97.0415 138.333 li
97.1909 138.408 li
97.4893 138.483 li
98.0859 138.632 li
98.1606 138.632 li
98.2354 138.632 li
98.3848 138.707 li
98.6831 138.781 li
99.2051 138.856 li
99.2798 138.856 li
99.2798 138.93 li
99.3545 138.93 li
99.5039 138.93 li
99.8022 139.005 li
100.325 139.08 li
100.399 139.08 li
100.474 139.08 li
100.548 139.154 li
100.847 139.154 li
101.369 139.229 li
101.444 139.229 li
101.519 139.229 li
101.667 139.303 li
101.892 139.303 li
102.488 139.378 li
102.563 139.378 li
102.712 139.378 li
103.011 139.453 li
103.533 139.453 li
103.607 139.527 li
103.682 139.527 li
103.832 139.527 li
104.13 139.527 li
104.652 139.602 li
104.727 139.602 li
104.801 139.602 li
104.951 139.602 li
105.249 139.602 li
105.846 139.676 li
105.92 139.676 li
105.995 139.676 li
106.07 139.676 li
106.368 139.751 li
106.891 139.751 li
106.965 139.751 li
107.04 139.751 li
107.189 139.751 li
107.413 139.751 li
108.01 139.826 li
108.084 139.826 li
108.159 139.826 li
108.233 139.826 li
108.532 139.826 li
109.129 139.9 li
109.204 139.9 li
109.278 139.9 li
109.427 139.9 li
109.726 139.9 li
110.323 139.9 li
110.397 139.9 li
110.472 139.9 li
110.546 139.975 li
110.845 139.975 li
111.367 139.975 li
112.486 140.049 li
112.561 140.049 li
112.636 140.049 li
112.785 140.049 li
113.009 140.049 li
113.531 140.049 li
114.65 140.049 li
114.725 140.049 li
114.799 140.049 li
114.874 140.049 li
115.173 140.125 li
115.77 140.125 li
116.963 140.125 li
117.038 140.125 li
117.187 140.125 li
117.486 140.125 li
118.008 140.125 li
119.127 140.199 li
119.202 140.199 li
119.276 140.199 li
119.426 140.199 li
119.649 140.199 li
120.246 140.199 li
121.44 140.199 li
121.515 140.199 li
121.589 140.199 li
121.739 140.199 li
122.037 140.199 li
122.56 140.199 li
123.753 140.274 li
125.917 140.274 li
128.23 140.274 li
130.394 140.348 li
132.483 140.348 li
134.796 140.348 li
136.96 140.348 li
139.272 140.348 li
139.348 140.348 li
1 0 0 rgb
@
grestore % PSGState
2 lc
139.348 184.295 mo
29.8892 184.295 li
@
29.8892 184.295 mo
29.8892 96.6992 li
@
29.8892 96.6992 mo
139.348 96.6992 li
@
139.348 96.6992 mo
139.348 184.295 li
@
0 lc
44.1406 184.295 mo
44.1406 181.908 li
@
gsave % PSGState
42.9468 186.683 mo
42.9468 201.307 li
45.3345 201.307 li
45.3345 186.683 li
eclp
grestore % PSGState
67.9424 184.295 mo
67.9424 181.908 li
@
gsave % PSGState
58.6899 186.683 mo
58.6899 201.307 li
77.1943 201.307 li
77.1943 186.683 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
CPMINP+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73D83638F79AE86E17D4CE334FAA90E146D21CDA0FE
B71815E9499D6C6A6E581E78F34038D792771470EBF894DABD777E9B4FDE68E7
E1544BCF1EFB2DCE59357B716B4D2ADF3EAC3A9FF8BD07EC79AF5536B9B74185
F8F7489AD909079119E88D2BB755D6F6AC02C01BDFADB347EC55DAC49C8BB047
661CC7AAA3BDC1DB8E01EC56137B53ED31B24F4502353853D049BB0515CA4217
D33D10484933F30AD1EAA43CFDF00AFA5462EE9B1772CE60A3392B8D9C1A3598
CF2273E36A1FF3A58B2E24B1EACE5E34650257902678998DAAFF235764CCCA14
3A> |-
/six <1C60D8A8C9B7A73DB682174C160AB8115D90A4524BD5B352C23110F23E
E4E20266716093AE0643A076F6C57BA527F49BB819243E28C4CA7F711F41FA01
318856C15674E51D546E83D25FE9DB7A4B9EDFDDE57E488CC507C2304526D6E8
0E07D1EEFCA86373B2F664DD3DA4646061C700F112AB44ED3896FA596FE81443
6AD1F1DC5FEDB207A575A17735F66E79BF0D0E423C92F1E9255D38F15B49459F
3693E95DCE92EBF25C243713EDA9138A49C42AA83683249878EEA825672AC6D9
9C32B9109B3D5797A7> |-
/seven <1C60D8A8C9B7A73DFE31854B8CA51F015562FECC80A8475F282F7722
52E10D05B7D43981266F60616595AB1BFBC47BFB03D1BE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CPMINP+TimesNewRomanPSMT /Encoding get
dup 51 /three put
dup 54 /six put
dup 55 /seven put
pop
%ADOEndSubsetFont
/CPMINP+TimesNewRomanPSMT*1 
[
48{/.notdef}repeat /zero /one /.notdef /three /.notdef /five /six 
/seven 41{/.notdef}repeat /a /b 10{/.notdef}repeat /m 3{/.notdef}repeat /q 
142{/.notdef}repeat
] CPMINP+TimesNewRomanPSMT nfnt
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
59.9028 197.504 mov
0.000305176 0 55 (673) wsh
grestore % PSGState
91.7441 184.295 mo
91.7441 181.908 li
@
gsave % PSGState
90.5503 186.683 mo
90.5503 201.307 li
92.938 201.307 li
92.938 186.683 li
eclp
grestore % PSGState
115.546 184.295 mo
115.546 181.908 li
@
gsave % PSGState
106.293 186.683 mo
106.293 201.307 li
124.798 201.307 li
124.798 186.683 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
CPMINP+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7A73DB6B62B7A95EE6C20B94EAC94CA9AB50BFD020369D
6A63C8EA15A0D9A89B2ED9293078F8D3EE629592E255C65B246> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CPMINP+TimesNewRomanPSMT /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/CPMINP+TimesNewRomanPSMT*1 
[
48{/.notdef}repeat /zero /one /.notdef /three /four /five /six 
/seven 41{/.notdef}repeat /a /b 10{/.notdef}repeat /m 3{/.notdef}repeat /q 
142{/.notdef}repeat
] CPMINP+TimesNewRomanPSMT nfnt
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
107.512 197.504 mov
0.000305176 0 55 (674) wsh
grestore % PSGState
29.8892 176.983 mo
32.2769 176.983 li
@
gsave % PSGState
11.6089 169.671 mo
11.6089 184.295 li
27.5015 184.295 li
27.5015 169.671 li
eclp
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
12.7871 180.504 mov
0.000228882 0 (m1) ash
grestore % PSGState
29.8892 158.778 mo
32.2769 158.778 li
@
gsave % PSGState
6.23682 151.465 mo
6.23682 166.089 li
27.5015 166.089 li
27.5015 151.465 li
eclp
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
7.41504 162.254 mov
0.000228882 0 (m05) ash
grestore % PSGState
29.8892 140.498 mo
32.2769 140.498 li
@
gsave % PSGState
14.3696 133.185 mo
14.3696 147.809 li
27.5015 147.809 li
27.5015 133.185 li
eclp
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
15.5479 144.004 mov
(00) sh
grestore % PSGState
29.8892 122.217 mo
32.2769 122.217 li
@
gsave % PSGState
14.3696 114.905 mo
14.3696 129.529 li
27.5015 129.529 li
27.5015 114.905 li
eclp
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
15.5479 125.754 mov
(05) sh
grestore % PSGState
29.8892 104.011 mo
32.2769 104.011 li
@
gsave % PSGState
14.3696 96.6992 mo
14.3696 111.324 li
27.5015 111.324 li
27.5015 96.6992 li
eclp
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
15.5479 107.503 mov
(10) sh
grestore % PSGState
44.1406 96.6992 mo
44.1406 99.0869 li
@
gsave % PSGState
42.9468 79.687 mo
42.9468 94.3115 li
45.3345 94.3115 li
45.3345 79.687 li
eclp
grestore % PSGState
67.9424 96.6992 mo
67.9424 99.0869 li
@
gsave % PSGState
66.7485 79.687 mo
66.7485 94.3115 li
69.1362 94.3115 li
69.1362 79.687 li
eclp
grestore % PSGState
91.7441 96.6992 mo
91.7441 99.0869 li
@
gsave % PSGState
90.5503 79.687 mo
90.5503 94.3115 li
92.938 94.3115 li
92.938 79.687 li
eclp
grestore % PSGState
115.546 96.6992 mo
115.546 99.0869 li
@
gsave % PSGState
114.352 79.687 mo
114.352 94.3115 li
116.739 94.3115 li
116.739 79.687 li
eclp
grestore % PSGState
139.348 96.6992 mo
139.348 99.0869 li
@
gsave % PSGState
138.153 79.687 mo
138.153 94.3115 li
140.541 94.3115 li
140.541 79.687 li
eclp
grestore % PSGState
139.348 176.983 mo
136.96 176.983 li
@
gsave % PSGState
141.735 169.671 mo
141.735 184.295 li
144.123 184.295 li
144.123 169.671 li
eclp
grestore % PSGState
139.348 158.778 mo
136.96 158.778 li
@
gsave % PSGState
141.735 151.465 mo
141.735 166.089 li
144.123 166.089 li
144.123 151.465 li
eclp
grestore % PSGState
139.348 140.498 mo
136.96 140.498 li
@
gsave % PSGState
141.735 133.185 mo
141.735 147.809 li
144.123 147.809 li
144.123 133.185 li
eclp
grestore % PSGState
139.348 122.217 mo
136.96 122.217 li
@
gsave % PSGState
141.735 114.905 mo
141.735 129.529 li
144.123 129.529 li
144.123 114.905 li
eclp
grestore % PSGState
139.348 104.011 mo
136.96 104.011 li
@
gsave % PSGState
141.735 96.6992 mo
141.735 111.324 li
144.123 111.324 li
144.123 96.6992 li
eclp
grestore % PSGState
gsave % PSGState
78.0898 198.919 mo
78.0898 213.544 li
91.2217 213.544 li
91.2217 198.919 li
eclp
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
79.2524 209.741 mov
(q1) sh
grestore % PSGState
gsave % PSGState
0 84.9312 mo
0 98.063 li
14.6245 98.063 li
14.6245 84.9312 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
CPMINP+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B
4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25
003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0
F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11E
C41D90433CE0F55F0A42A96AF852FD50FA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CPMINP+TimesNewRomanPSMT /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/CPMINP+TimesNewRomanPSMT*1 
[
48{/.notdef}repeat /zero /one /two /three /four /five /six 
/seven 41{/.notdef}repeat /a /b 10{/.notdef}repeat /m 3{/.notdef}repeat /q 
142{/.notdef}repeat
] CPMINP+TimesNewRomanPSMT nfnt
CPMINP+TimesNewRomanPSMT*1  [0 -11.9382 -11.9382 0 0 0 ]mfnt sfnt
7.80371 96.8696 mov
0 0.000350952 (q2) ash
grestore % PSGState
29.8892 140.498 mo
139.348 140.498 li
@
gsave % PSGState
28.9941 96.5498 mo
28.9941 184.892 li
140.019 184.892 li
140.019 96.5498 li
eclp
gsave % PSGState
38.022 100.355 mo
38.022 114.979 li
50.4824 114.979 li
50.4824 100.355 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
CPMINP+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438ECC5
4400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F42A
6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F9C
2999730E7919239B324086FEA852156F456647AA0692084759C352D699897179
9F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CPMINP+TimesNewRomanPSMT /Encoding get
dup 99 /c put
pop
%ADOEndSubsetFont
/CPMINP+TimesNewRomanPSMT*1 
[
48{/.notdef}repeat /zero /one /two /three /four /five /six 
/seven 41{/.notdef}repeat /a /b /c 9{/.notdef}repeat /m 3{/.notdef}repeat 
/q 142{/.notdef}repeat
] CPMINP+TimesNewRomanPSMT nfnt
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
39.1201 111.153 mov
(qc) sh
grestore % PSGState
grestore % PSGState
gsave % PSGState
146.958 96.5498 mo
146.958 184.892 li
257.983 184.892 li
257.983 96.5498 li
eclp
grestore % PSGState
gsave % PSGState
146.958 96.5498 mo
146.958 184.892 li
257.983 184.892 li
257.983 96.5498 li
eclp
grestore % PSGState
gsave % PSGState
146.958 96.5498 mo
146.958 184.892 li
257.983 184.892 li
257.983 96.5498 li
eclp
.75 lw
2 lc
147.854 161.016 mo
147.928 161.016 li
148.003 161.016 li
148.151 161.09 li
148.376 161.166 li
148.973 161.315 li
150.018 161.688 li
152.33 162.434 li
154.494 163.18 li
156.658 164 li
158.971 164.97 li
161.135 165.866 li
163.447 166.911 li
165.761 167.956 li
167.925 169 li
170.237 170.194 li
172.401 171.313 li
174.565 172.432 li
176.804 173.625 li
178.967 174.67 li
179.042 174.67 li
179.116 174.745 li
179.266 174.82 li
179.564 174.894 li
180.161 175.193 li
180.235 175.193 li
180.311 175.267 li
180.46 175.267 li
180.758 175.417 li
181.354 175.64 li
181.43 175.64 li
181.504 175.715 li
181.579 175.715 li
181.877 175.864 li
181.952 175.864 li
182.026 175.864 li
182.176 175.939 li
182.474 176.013 li
182.549 176.013 li
182.623 176.088 li
182.772 176.088 li
183.071 176.163 li
183.146 176.163 li
183.221 176.237 li
183.295 176.237 li
183.594 176.312 li
183.668 176.312 li
183.742 176.312 li
183.892 176.386 li
183.967 176.386 li
184.041 176.386 li
184.115 176.386 li
184.19 176.386 li
184.265 176.461 li
184.414 176.461 li
184.488 176.461 li
184.563 176.461 li
184.713 176.461 li
184.787 176.461 li
184.861 176.461 li
184.937 176.536 li
185.011 176.536 li
185.086 176.536 li
185.16 176.536 li
185.234 176.536 li
185.31 176.536 li
185.384 176.536 li
185.459 176.536 li
185.533 176.536 li
185.607 176.536 li
185.683 176.536 li
185.757 176.536 li
185.832 176.536 li
185.906 176.536 li
185.98 176.536 li
186.056 176.536 li
186.13 176.536 li
186.205 176.536 li
186.279 176.536 li
186.354 176.536 li
186.429 176.536 li
186.503 176.461 li
186.578 176.461 li
186.652 176.461 li
186.727 176.461 li
186.802 176.461 li
186.951 176.461 li
186.951 176.386 li
187.025 176.386 li
187.175 176.386 li
187.249 176.386 li
187.324 176.312 li
187.474 176.312 li
187.548 176.312 li
187.622 176.237 li
187.771 176.237 li
188.07 176.163 li
188.07 176.088 li
188.145 176.088 li
188.22 176.088 li
188.368 176.013 li
188.593 175.939 li
188.667 175.864 li
188.741 175.864 li
188.891 175.79 li
189.189 175.64 li
189.189 175.566 li
189.264 175.566 li
189.413 175.491 li
189.712 175.267 li
189.786 175.267 li
189.86 175.193 li
189.936 175.118 li
190.234 174.894 li
190.309 174.82 li
190.383 174.745 li
190.532 174.595 li
190.831 174.372 li
190.831 174.297 li
190.905 174.297 li
190.98 174.222 li
191.129 174.074 li
191.428 173.775 li
191.428 173.701 li
191.502 173.625 li
191.577 173.551 li
191.727 173.402 li
192.024 173.029 li
192.547 172.208 li
192.621 172.208 li
192.621 172.133 li
192.696 171.984 li
192.846 171.76 li
193.144 171.313 li
193.74 170.342 li
193.74 170.268 li
193.815 170.194 li
193.89 170.044 li
194.039 169.746 li
194.338 169.223 li
194.86 167.956 li
194.935 167.88 li
194.935 167.806 li
195.009 167.657 li
195.158 167.358 li
195.382 166.687 li
195.979 165.343 li
195.979 165.269 li
196.054 165.195 li
196.054 165.045 li
196.203 164.672 li
196.501 163.926 li
197.023 162.359 li
197.099 162.209 li
197.099 162.135 li
197.173 161.912 li
197.322 161.463 li
197.621 160.568 li
198.218 158.628 li
199.337 154.45 li
201.501 145.87 li
203.664 136.991 li
205.978 127.664 li
205.978 127.514 li
206.052 127.44 li
206.127 127.141 li
206.275 126.62 li
206.5 125.649 li
207.021 123.709 li
207.097 123.634 li
207.097 123.486 li
207.171 123.261 li
207.32 122.814 li
207.619 121.844 li
208.142 120.127 li
208.142 119.979 li
208.216 119.904 li
208.29 119.68 li
208.439 119.232 li
208.738 118.337 li
209.335 116.621 li
209.335 116.546 li
209.335 116.472 li
209.409 116.248 li
209.559 115.875 li
209.857 115.128 li
210.454 113.711 li
210.528 113.562 li
210.528 113.487 li
210.604 113.338 li
210.753 113.04 li
211.051 112.368 li
211.648 111.249 li
211.648 111.174 li
211.723 111.099 li
211.723 110.951 li
211.872 110.652 li
212.17 110.129 li
212.768 109.234 li
212.768 109.16 li
212.842 109.084 li
212.916 109.01 li
213.065 108.787 li
213.289 108.414 li
213.364 108.338 li
213.438 108.264 li
213.588 108.041 li
213.812 107.742 li
213.887 107.667 li
213.961 107.518 li
214.11 107.369 li
214.334 107.071 li
214.931 106.548 li
215.006 106.473 li
215.08 106.399 li
215.229 106.325 li
215.453 106.026 li
215.528 106.026 li
215.603 105.952 li
215.752 105.802 li
216.05 105.653 li
216.125 105.578 li
216.199 105.503 li
216.349 105.429 li
216.647 105.28 li
216.722 105.205 li
216.796 105.205 li
216.945 105.13 li
217.244 104.981 li
217.318 104.981 li
217.394 104.907 li
217.468 104.907 li
217.542 104.907 li
217.542 104.832 li
217.617 104.832 li
217.767 104.832 li
217.767 104.757 li
217.841 104.757 li
217.916 104.757 li
218.064 104.683 li
218.14 104.683 li
218.289 104.608 li
218.363 104.608 li
218.438 104.608 li
218.587 104.608 li
218.662 104.608 li
218.736 104.534 li
218.886 104.534 li
218.96 104.534 li
219.035 104.534 li
219.109 104.534 li
219.184 104.534 li
219.259 104.459 li
219.333 104.459 li
219.408 104.459 li
219.482 104.459 li
219.557 104.459 li
219.632 104.459 li
219.706 104.459 li
219.781 104.459 li
219.855 104.459 li
219.93 104.459 li
220.005 104.459 li
220.079 104.459 li
220.154 104.459 li
220.229 104.459 li
220.303 104.459 li
220.378 104.459 li
220.452 104.459 li
220.527 104.459 li
220.602 104.459 li
220.676 104.459 li
220.751 104.459 li
220.751 104.534 li
220.825 104.534 li
220.975 104.534 li
221.049 104.534 li
221.124 104.534 li
221.273 104.534 li
221.348 104.534 li
221.348 104.608 li
221.497 104.608 li
221.571 104.608 li
221.646 104.608 li
221.796 104.683 li
222.094 104.683 li
222.169 104.757 li
222.243 104.757 li
222.393 104.757 li
222.69 104.832 li
222.766 104.832 li
222.84 104.907 li
222.989 104.907 li
223.213 104.981 li
223.81 105.205 li
223.885 105.205 li
223.959 105.205 li
224.108 105.28 li
224.332 105.354 li
224.93 105.578 li
225.974 106.026 li
226.049 106.026 li
226.123 106.1 li
226.272 106.175 li
226.57 106.325 li
227.168 106.548 li
228.287 107.145 li
230.45 108.264 li
232.614 109.383 li
234.928 110.578 li
237.091 111.697 li
239.404 112.816 li
241.717 113.935 li
243.881 114.905 li
246.194 115.875 li
248.357 116.77 li
250.521 117.591 li
252.835 118.412 li
254.998 119.083 li
257.312 119.83 li
257.312 119.904 li
257.386 119.904 li
0 0 1 rgb
@
147.854 140.125 mo
147.928 140.125 li
148.003 140.125 li
148.151 140.125 li
148.376 140.125 li
148.973 140.125 li
150.018 140.125 li
152.33 140.049 li
154.494 140.049 li
156.658 139.975 li
158.971 139.975 li
161.135 139.9 li
163.447 139.826 li
165.761 139.751 li
167.925 139.676 li
170.237 139.602 li
172.401 139.527 li
174.565 139.378 li
176.804 139.229 li
178.967 139.08 li
181.354 138.856 li
183.594 138.632 li
185.757 138.408 li
188.07 138.11 li
190.234 137.811 li
192.547 137.438 li
194.86 137.065 li
194.935 137.065 li
195.009 137.065 li
195.158 137.065 li
195.382 136.991 li
195.979 136.916 li
196.054 136.916 li
196.203 136.916 li
196.501 136.841 li
197.023 136.766 li
197.099 136.766 li
197.173 136.766 li
197.322 136.766 li
197.621 136.692 li
198.218 136.618 li
198.292 136.618 li
198.367 136.618 li
198.516 136.618 li
198.74 136.542 li
199.337 136.542 li
199.411 136.542 li
199.486 136.542 li
199.635 136.468 li
199.934 136.468 li
200.008 136.468 li
200.157 136.468 li
200.456 136.468 li
200.53 136.468 li
200.605 136.393 li
200.68 136.393 li
200.755 136.393 li
200.829 136.393 li
200.979 136.393 li
201.053 136.393 li
201.128 136.393 li
201.276 136.393 li
201.352 136.393 li
201.426 136.393 li
201.501 136.393 li
201.575 136.393 li
201.649 136.393 li
201.725 136.393 li
201.799 136.393 li
201.874 136.393 li
201.948 136.393 li
202.098 136.393 li
202.172 136.393 li
202.247 136.393 li
202.321 136.393 li
202.396 136.393 li
202.471 136.393 li
202.545 136.393 li
202.62 136.393 li
202.694 136.393 li
202.769 136.393 li
202.844 136.393 li
202.918 136.393 li
202.993 136.393 li
203.067 136.393 li
203.142 136.393 li
203.217 136.393 li
203.291 136.393 li
203.366 136.393 li
203.44 136.393 li
203.515 136.393 li
203.59 136.393 li
203.664 136.393 li
203.739 136.393 li
203.813 136.393 li
203.889 136.393 li
203.963 136.393 li
204.037 136.393 li
204.112 136.393 li
204.262 136.393 li
204.336 136.393 li
204.41 136.393 li
204.56 136.393 li
204.783 136.393 li
204.858 136.393 li
204.933 136.393 li
205.082 136.393 li
205.381 136.468 li
205.455 136.468 li
205.529 136.468 li
205.679 136.468 li
205.978 136.468 li
206.052 136.468 li
206.127 136.468 li
206.275 136.542 li
206.5 136.542 li
207.021 136.618 li
207.097 136.618 li
207.171 136.618 li
207.32 136.618 li
207.619 136.692 li
208.142 136.692 li
208.216 136.766 li
208.29 136.766 li
208.439 136.766 li
208.738 136.766 li
209.335 136.841 li
210.454 137.065 li
212.768 137.364 li
214.931 137.737 li
217.244 138.035 li
219.408 138.333 li
221.497 138.632 li
223.81 138.856 li
225.974 139.005 li
228.287 139.229 li
230.45 139.378 li
232.614 139.453 li
234.928 139.602 li
237.091 139.676 li
239.404 139.751 li
241.717 139.826 li
243.881 139.9 li
246.194 139.975 li
248.357 139.975 li
250.521 140.049 li
252.835 140.049 li
254.998 140.125 li
257.312 140.125 li
257.386 140.125 li
1 0 0 rgb
@
grestore % PSGState
2 lc
257.386 184.295 mo
147.854 184.295 li
@
147.854 184.295 mo
147.854 96.6992 li
@
147.854 96.6992 mo
257.386 96.6992 li
@
257.386 96.6992 mo
257.386 184.295 li
@
0 lc
162.179 184.295 mo
162.179 181.908 li
@
gsave % PSGState
160.985 186.683 mo
160.985 201.307 li
163.373 201.307 li
163.373 186.683 li
eclp
grestore % PSGState
185.98 184.295 mo
185.98 181.908 li
@
gsave % PSGState
176.729 186.683 mo
176.729 201.307 li
195.233 201.307 li
195.233 186.683 li
eclp
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
177.898 197.504 mov
-0.000335693 0 (673) ash
grestore % PSGState
209.782 184.295 mo
209.782 181.908 li
@
gsave % PSGState
208.589 186.683 mo
208.589 201.307 li
210.977 201.307 li
210.977 186.683 li
eclp
grestore % PSGState
233.584 184.295 mo
233.584 181.908 li
@
gsave % PSGState
224.332 186.683 mo
224.332 201.307 li
242.837 201.307 li
242.837 186.683 li
eclp
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
225.508 197.504 mov
-0.000335693 0 (674) ash
grestore % PSGState
147.854 176.983 mo
150.241 176.983 li
@
gsave % PSGState
129.573 169.671 mo
129.573 184.295 li
145.466 184.295 li
145.466 169.671 li
eclp
grestore % PSGState
147.854 158.778 mo
150.241 158.778 li
@
gsave % PSGState
124.201 151.465 mo
124.201 166.089 li
145.466 166.089 li
145.466 151.465 li
eclp
grestore % PSGState
147.854 140.498 mo
150.241 140.498 li
@
gsave % PSGState
132.334 133.185 mo
132.334 147.809 li
145.466 147.809 li
145.466 133.185 li
eclp
grestore % PSGState
147.854 122.217 mo
150.241 122.217 li
@
gsave % PSGState
132.334 114.905 mo
132.334 129.529 li
145.466 129.529 li
145.466 114.905 li
eclp
grestore % PSGState
147.854 104.011 mo
150.241 104.011 li
@
gsave % PSGState
132.334 96.6992 mo
132.334 111.324 li
145.466 111.324 li
145.466 96.6992 li
eclp
grestore % PSGState
162.179 96.6992 mo
162.179 99.0869 li
@
gsave % PSGState
160.985 79.687 mo
160.985 94.3115 li
163.373 94.3115 li
163.373 79.687 li
eclp
grestore % PSGState
185.98 96.6992 mo
185.98 99.0869 li
@
gsave % PSGState
184.787 79.687 mo
184.787 94.3115 li
187.175 94.3115 li
187.175 79.687 li
eclp
grestore % PSGState
209.782 96.6992 mo
209.782 99.0869 li
@
gsave % PSGState
208.589 79.687 mo
208.589 94.3115 li
210.977 94.3115 li
210.977 79.687 li
eclp
grestore % PSGState
233.584 96.6992 mo
233.584 99.0869 li
@
gsave % PSGState
232.391 79.687 mo
232.391 94.3115 li
234.778 94.3115 li
234.778 79.687 li
eclp
grestore % PSGState
257.386 96.6992 mo
257.386 99.0869 li
@
gsave % PSGState
256.192 79.687 mo
256.192 94.3115 li
258.58 94.3115 li
258.58 79.687 li
eclp
grestore % PSGState
257.386 176.983 mo
254.998 176.983 li
@
257.386 158.778 mo
254.998 158.778 li
@
257.386 140.498 mo
254.998 140.498 li
@
257.386 122.217 mo
254.998 122.217 li
@
257.386 104.011 mo
254.998 104.011 li
@
gsave % PSGState
196.054 200.114 mo
196.054 214.738 li
209.186 214.738 li
209.186 200.114 li
eclp
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
197.248 210.935 mov
-0.000335693 0 (q1) ash
grestore % PSGState
gsave % PSGState
104.801 133.931 mo
104.801 147.063 li
119.426 147.063 li
119.426 133.931 li
eclp
grestore % PSGState
147.854 140.498 mo
257.386 140.498 li
@
gsave % PSGState
146.958 96.5498 mo
146.958 184.892 li
257.983 184.892 li
257.983 96.5498 li
eclp
gsave % PSGState
155.613 100.355 mo
155.613 114.979 li
168.745 114.979 li
168.745 100.355 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
CPMINP+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D2030
65B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD3329A
86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB857
EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5CCB
01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD104
E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A618879362783A
36815EA1CE5876FAC4F83CDFE1BD4A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CPMINP+TimesNewRomanPSMT /Encoding get
dup 100 /d put
pop
%ADOEndSubsetFont
/CPMINP+TimesNewRomanPSMT*1 
[
48{/.notdef}repeat /zero /one /two /three /four /five /six 
/seven 41{/.notdef}repeat /a /b /c /d 8{/.notdef}repeat /m 
3{/.notdef}repeat /q 142{/.notdef}repeat
] CPMINP+TimesNewRomanPSMT nfnt
CPMINP+TimesNewRomanPSMT*1  [11.9382 0 0 -11.9382 0 0 ]mfnt sfnt
156.779 111.153 mov
-0.000335693 0 (qd) ash
grestore % PSGState
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
] del_res
/CPMINP+TimesNewRomanPSMT*1 ufnt
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 12.0.1
%%For: (RSLab) (Yale)
%%Title: (supfiglowreim2.eps)
%%CreationDate: 9/18/2008 11:34 AM
%AI9_DataStream
%Gb"-6B3-Uoeh285pDEl?As#cm.gH`IZ,o!W1)OiC$a>V-HLF$>mVfj]8uaA+._$IC:S0_oke1-gPY,@VR[UK<3P"#EDH,q]fCe9U
%o4^WggM+WidYacsrgKA4Wh7d%6A_eD=AUQLg9r?+(":I^P,5r5>#nZu"^g"t5(A(5)Vq03o=<H:'Up2hFsin7r_mO,pFEH:UlrHl
%I=*mOP@"9f4MULVPadXbPWc'seiF&Ds-to1.ug=QrA213l$'3$;6Nu0aqhGYLN<?g<c5?1/)@RtPmAcg&*r-GO6XRUk>SJl_i]%m
%Wt2"ik8ib,F;04;pib]nj1AJVJpu:NgRmuJ6_9YUjH%bn[gTQo?HCd:PKid[GGj3n,ZWpS')=2%F&I@eGIm06\)(rVc*44oC7hVh
%9".7q/*g)6:Wp&'5J>sFU+d9ZCdD+pXJ)(pH9ngCXKLh\=p%;S'K*!C<n>hYMnS1G6ga>gm6CF=<io9%[2F)omI"]eJ&,eu$0GHU
%(jtoQ;/;d_l<Q<D_R<0QZeqk84rfNo?N-n]_!)\ImjBW*<b]>"]!-^R+5]'GI+jaRB0cL1b!39lf>qC$ei7GOOH(qq)D"6+Xe]N"
%Oj\uXVA4_?TVP;Q[3UseSGqI4pp*i#M:6GI1N_9P^XaA""^/1[$S^/5A_@9W_Td8;lHQ!$Ub2Fq$mTP-s0nR!ZeiRO]A6Z.kru2L
%ikAJ-['G1=*@NeF`TAOC!j8!6F]\hWfG,LQ=8(/@K04c9^0@SODGkt`G4+\.fr]Ci`fF<W2KH"gb29V6XB<$]GIs9/<J`6r<9_nQ
%0/-,n#">Rg'SC7'Dft?lI'-XuIBBp15O^f0>]7LeH24E;2qP(;]5Ps_:8Lh4SN^-/bsq+92@?G\U\<-\*L>-ZVUN*gJGR@U5i&oP
%gE\65r';DfI083JeJct1k:Kd4,l_sp&(Yd*+f_rr8fJU4Xs5bq?Z+G8eRnOXQq/6@Kq5iUen]+>E@7=CZsZD$AOFX(J%+1?`q)Fa
%LQQpu2rAD1V[=trfs#Klq:p%toae+0?%&]#ef48d]P]2ZTRZpNo$M,oF)V)chJ/$TS*X1#Z'tQk4CbjNX>!5Vf#Mt>hYcg&])QJf
%^4BtjAinUmCY*=h?^9gCDCtVYSX(ib8$M87bWi'9=@iDNUB3;1)r;O\U!H?oq>5g:aKk<of6=&#n)1BfQ&ca8"p6r$fiE+sZ6#[=
%!c>3Xc";OT\)<:\J-3k-9"?/36EW^_c]uSp:eQXl^#Zo:9hT?P-FUH?gMWEWpFUSS)MDi8kmN:=KgY9^6e\G*pV"oAO)DZ(nPASW
%o7:]:g_nI!IJKC[q:pDaMEX.LCURZZe:>.i@&\9h(#!WG),Gs5]0`!i\<U#!3@_GlZU9`kID&*cYB_cg<AjNa3\=@0V<V;!Fgk$R
%aO-Xi2JM]Ye#+Pe6B`.(hlG?.Xs62gnP*BhVCd5nqXa*go+-9)-,fT!JQ%&hPpf_`G95$jE!GCP#I'<BYs9.#WU\c^6Tq&j#TTIF
%#O5#9==tD;PF_qjf.#,\n2I89oND('G4n_4`n305_uoYs#c==hG1T$<4L6)h5/-"7B"Rlpg2=P[;h&?ce`Kd^I8oIFJ\V8UUbe3H
%)#Z6b?NG8PrjMuA/+qIeO"/K0YYLj8LJND7cWtdf!T%amht:k=8QA9*+LE)C%GK)#GNUQ+enffF?"F2l,Ib^4OOA@P23#,"_]"&\
%s5(nV'fbSgkHs+2cXHL%4Eha%GW/4#E*sm?_cl[sEZ5D#naC,r$2mb?J<ZEJ$f@^ao<X-s5l1,TdR"dDQFW/MqS,mS!HFX!>Cr.Z
%J(HlQXdY$W#k7Q[mn13WLcGE^4uGRiSPP:n*9-shUacrDg0AjCTCD:WrgRSfIT.5NG+(O4HUBdA;$FJ#^o[n)<N@A!j>l8;6;O15
%a?);.L2'!JT+BFdEk@=nIi@COF<1\9BL4(f#F3V=H6+-"ej3ZB\^.,E+oKEMROos2)&oHLWA=9<dOcY!9<rEUlqFpji#D)ks576G
%nCo&#rfbp]qrsS3.:#ZaZP-O5Z3kGHJh<l!9'9UTi%JOmDZHtk-umkFX0/=Os3^h9oJ;(c59l8b7mMk@'?60KpDb5S5`/#[!ZO@M
%lD*72p.7eoq7i#5U0;m8%0']/]&P^&hce`d8prK/*&B0%i6ml:qN,T0XQoh*E2ZGuUKV&rG-p=i8f*f3j?q2nE8f`Iok,OGV>Uo,
%0),)M5Sp;IA]CdP3%Vhn0$9IDb^ViCS#FmRn4*SHj:&35abT?eIoehJSJ$*,[g`fDSp13K3KHIbDcaffnQG0YW\B$%oKjV/(Oq'F
%?$Z93X%;D\e!#8O8,fFNZ07I!IKNRP1h<MK\>$O.+>'td:S:X.=Q)^BN\IDZVh,<mpWWYl\aEsD6HAW(:B'_=rQS"n3Y*ogS]-Dj
%I+OY`%Fa;G-#A1S_h=e4-3hYCpGi,$`i[b,f>^>Pq7Tg'5Vs%1CB%=L3J.Un[?WXdecR[jSqDEj';N>?D]L5jR%I_)rTpG35M&G$
%0nBb(QiI!P4\\![p#l@)*Mm:7Vp4](F,`05rl'L'HN$_/Sl.4M3d4K&I/M/G_ESV;BCA..G#j`Iq-Q.^s+ZU"5P8dcXnTmN"-cDL
%rHAa2N?N+_D`)Y',T*/TAPL^^rfuMb"q`c/Ve-`5[(Y0dQ[1G$/CJWX^"N=mNA3DQJ(N'WkM-#D:@?LN>,*#@B.kEi`+W<+QK>Jh
%H6Ib,oNnBaqH\BKV2q&s[%rj$0O01rhnlgm55aiW^:WWn$9E"hs,38MdU(:OZQ4/F9Dc-B>L-C+NnNYh]DL*Z[&`G(N.g\H::D(+
%BN86DG.LWPr;NX6Pm"%\Z!*hFV]O;i:=WB..rO6>X4\6BX*iDY,5,1(]K66OS>!A@eZ).8_KNN[h/0a`G$"[fI]ZfRro?Uha)-F4
%M.+dB0]JjNX]+P_3B:?1\1*]k05f/qBm8P)g2jaV:-V`B.ZNTk]-=A>9&"jIdV#ufG13:&]j#c^J(2*UR;M0!W^ff[>#)P4'rYcm
%f65DEbIXDs<chc(X1)_=^>>HPGk-)Pc\e?HHjIo<gQb7+<M=sTYO-WN(8Et1P)m9$%SYJ_^+8"X<*:Hg?@;#3#3_@IfP@\?Y7[-]
%I^5S1l7M3T)N"H_`d!B<bIjQUBfWNVr4CNtTrg5Wb(VdI1F-S,$d0f(d7tM<6Tff#46=$+Y1BTrq_ap+BQj@#I=)0R;`Zs6DmhC)
%!!n87.`tm^?K1!JZBBsE\;.a`Ij_s!ep3=cBO_?ToCnA(QCs088]R\<)9L/dlH25q-=t,pi_#;u!sSICBSg+Q]k5)lE&mB?agGG>
%hm4.ne7lY0A>u@Jlk@,.o4Jhb<NE_:;1_EpS:m1gc^nat^M?X0@MAH321:rSrI&p44-TYJ!Ub6iW'A03kV,l-j]9"h;Z@<925/AE
%]^IZm?Xp_%mURi-7T2EK",1'q)pe%j5GjkK[^)F='\3JQBXXqu]h3Bmf(%OSTad5Op>R'aH?^&%!>F$^X-7sL2S-hq(YKW>HE-!t
%F>d]TR?-(Z[?$]`?5hX9kPM5'mNf&2on/`W.<7u]a0&DElT@IYIL1eX"A:tgS#p".8<#?Xr\U6tE8AhIZLn3u$*U[fT#$d\cg>JU
%$\EnU;MFNY.+ENkDKOlm8IMpiT)XWl*L:HK?aG50.J+D-gdeu;m>Rk,Z-f.IX`g!Mq6=5C;S:kV.;86GisT,@Q6p+OX;/=LTVtY!
%eSRIMR!L_6'flu="J?1r7DoWTR4"75RbbGV4'Btoc[Qr!fFr''bgG%P*&\5J6^^cul,5DR8qMKugSEPUPr0M"7Wtb='$h@s;,5mi
%B73n0f>+OfV21l55gdr`\*1n[N#PB?4s1R#"<"K2)b-XTHIV^5UEj!!j]fgL5B4D!4W$m@gShf;NqRZ:Yph2@[9oAojH;bnkdl-t
%6",_;:<pA]4A5*BfO&b(P=L&\WR?g'4VhjT5pF"b[Qn'#2dW$'>KSFAA8eNV(DQdpr2BpF_Uj<"G3dtFKY3NZQ#(83iem*;J&b%M
%He=&pPu`KhJJE82.#76oH5opKC2T"o$T^/"8O$=Wea1e4bSV+J.;6CPg]+<EZ"=s*LL*URO#^9eHc"!u*ebWkf4oKhQ6@<*Us;Sf
%MA/Y)2LEZW>O[K[?"-H-CRt<;6QeY4M>IK]YZ$J9g[o#O=O)-5>)Jp%+qN`qjs9bV6JYPG8pknj.$T(Cp%V@eP.d4o'Wf^_Z".(L
%e,<Z9\^cR!;m@=CfIN>^DCCH!g';O1:@K#OTj$2hHB7G,IDOIN\F@HsV6Tjd;'S]<hrW,LAJelYE([$*I86_58$-uOYL;gGJ(gRg
%Zo^.HY8oEF/D>BQ[t#b]ioMl".:MasAG[9/b+7Z.`nKun1d0S31J:OXBC:A?)V8ImNP(tFe7T^-Q7J\(X2o*\-U+##&fW<$&SF)b
%LI!I98Oq_qUI5WE'H:cqUkW"+05hJA1d+K<]&"R\5Wk:DGmuAr/im$hb<uukJ5%j73=dkC#p/RI0(ZqoEI6Hg2eojn8Bl3+qSp.U
%HMFuo<MrUDaIb!Vf#/[!J\#`uQ>pbh?8!lmQCI#T<N:)CD*?C+mIohtp\NqLpO6PoGWs>I2<qN;H?XjUj19Vh$%Ha$Y#N^(*H!_$
%a4#_D]Y<tD%:3nqXhJpXIB5DLW%B%QQ+>G'Vjo$W9N[H/?+#SDS$um]_u$e3nkr'V6_EN'p,_TLdeOkeBH06rbq%nmf\H/l*AfQ1
%oCudSc!T7m`o\dt<m!"$A_\&][>r\gmrM_ab>3iff"oYcY2*6c[[)ATTp]rm>.Z2jDm(H(hpkkT\Zku_cPF_/CIXjSSguG;Sj7pT
%L=>DcA+qp9Nck09Gg!+6p-c.+*l^CQgP_UYBOuWsb%[bq+C<qd<k3RNgc+,gJ<4f(UES4C^6:TN:q?6^\$A"PjUFABlWBXFosKT3
%]_MTQY^,_/]@aZ2hsK;BLUXj/hWt")qeTrHpCddY@BDjPUg^%4]/`G$%^`f(Q>(R(a`_p08+NeU9?GM7[G%%?hd7M.Op*EI=+ACm
%VQWVNX_KZ$F%aYkpfN$2n$V]Wf#OB/.Q2ng9BGj&[0RrqitIFGb]6+P=8,Vgjkqu.e]k@q.=(+8N6Y.*\C0N*EY^[Cb4Wp1,A@ln
%jAX/bYJ8i$h^a'+lAX=E2T)CMF/@`@a>;2CedO+.4_^IpH8Ic:[&WGa&$;d2+51pW%5JiO_bR7J'uMRuaJ#`mY<JOG[CS5hAeo<=
%<_5)`6/?\'heFOtXWA9k<k]nEpVL+)>PuRG7'ru/c)tBV*E(H+10j538h/TD6"m=6b-0sGaes.reuD]`].48k3ZOS>W6+eRIPIkQ
%MR5DDGS/ftVGrqcA^%2O$?sPR=)iT8L9D@J!g-OpZt2_fdd;D7fBW$lZtD#4f]m:GeZE$(32nGWd&PbCX[4i!E;+7Q.hSm%j5t]r
%Hlpo(L9s0lB8<t-rIt73[6O&2'<biIe^MKO26tcgg8QPj[!K&$SNb9qnlj#[E"28ReIHK"B/60_?;*:a,?m<Z4+;R7C3:1+oYk]`
%.=AXPlK!59D.u#Ce^i$LaAsr82Lfk_<cOu3)EsC7YO6:]\%9=PHFQ2R]*iKKmdPWdZ;kT#c]qfg7h#.CP3t@Q$fS3/r+UR#g6NZ2
%lGN<^_eU"M`nt`^noSb#U=H;cWDroQ$#S3R=SOb^G.1;"<qBZbX*@0b5F;t_i?rb;fK:tAH^.a^W\V8Ng%(2H:O8PU(U2G8TiJ&`
%cPJSDT[dWO1535R43aa9enTDO:)N<LD<5Aa[^po6Du3>`q0(qKAIMef$EZWN^nJ1QSDb6q!PZ):bFku?b.A#_?^u%K#P@(S-h>5^
%J#a7MG3,]SX\*-#q1m]We=+Z<hAHufGPt=/SNNtKj/bN)?d7<b)*MPHPm9Yj3V9HFWV^9kX8mNlFY&#K6p5s^[N6g2,G,#RhO&<n
%Jm\VHLT.hYoCPi''V65/r8@4[o59C\)fNJD]r/[MD'!QWD^/VuPhD8@kbi?aqrt>_P\A']6(,<5NdQ7nY-Fup5CGS?=c@`Sq!7`i
%b9NHX^tP72=uu-!V_?M+[da.h>b+HhdYn#R00Xg<3Gj":K1*?(R!WaA^A`KM.5r%@oQDIo*;7l*g>h8-3>))`TC,Ql/+Vs%KsH.I
%q=O9l]Q3HR/Q_uo*&$T>:NmLijYHDkF5uM,08=.=@oM-kZVdo%Pm[Ca[E,7-b3CW?L1l8qARZu.n[cF\Q'Q(Og!b=\;0Y-GG2-53
%:Q*mPiT]%Uk%qjY)C_?(TD3Q9U/[\t.5Frr3;J,$>D,.2\akAJ\^5Z/F24cQ9EFNU^fl":N\0VM=/^Jk^\p11+'F9?A+LWe7Ju]1
%YMr9=m]ZmG-gM6YD#[D1Q]Dn!G6^9ej+8fAl82A+R2WJeWXuWqEr/mI)O0($Dd]ufVP(bl-+C_\>^cE^#'e\%;Z$>G]AV__I&fXG
%o#k`b_djLV.Wc?\WciM*fd`L@J)mh74Z*RGTs3L=<q.#SNbYuE\#PuoE33:Kl_f1lXZA<smL>NH#&^KAY>o?GFTZihRif@FB<K*T
%Kk;;K0.YgsrN-^g+JMk4)*p3kO(e4ONjS)nC&[)j.X/8`<`(f3C__)F2ka6G7aVAsQAm6^YO^OlA?/,FLhmg&N&)Q^JVIsKdfo:]
%RuEcpFnIO^\bkjA7T_Za``LY,s10jh*ql[5Iq,O?nVqZ.oke,t1D4sppbDB^<88/4T!M>oDDOIDc"m76cdg)-oA5On<i12_FF%In
%8Cs-XbYlWd0B8#21XW>WRl;;%`%!'L>4o-LCk&9<aaVJ&2d$MV/9b:e\c[RhDUBZ"-LDYNJ-W7?hJ+!nmZ/#fReBtUT^W.DZcNaQ
%EG*hdnbEdp3JD(#mo`oBN'L@BB?Zb__pO^@L-5.**IVskr4ln>40hZ7%.2WX]cGS(L[SqZ_>EiHoW#j_h#mg(Tt5:=]tQ!nSIs+:
%Gl5Ch:Y"oq&PeB5(a8]@-AWXWdF3@:bF?MM3?3653#akE*"Busk6\#jpDc(9=","].(s))P@rMIPl"YUK\;%,CN3eHou.]uk3Wt&
%c]M$G7@rg9dM&rm+4OBCYO.n[H%_rpq&'dp/q%!g^>tnn[4a/n),kKD9"3PlSq_-\I5IIg>UZ+ipEc0C>^(kg3FA5Q58a4W7QC4H
%(<.PdGi\QD2S>.5<k?!@2>#hVeVgb^G2C0"HZOCg\KX@eZ8%\R>_EJ)AZ+/n#V>ic1iq%aH:ZZsBRH.O5<,!oa(uf0VP&R.)\H"+
%hi]K'dp%rfnX*$(g.9TrpKM]Vfi^N,JgTWPW!0jX%o\sIpW\#rcS5t5JL]bi2B^W)b-0!,@5_DN^mWPhH2_'?`ud6]S;SVr2LnM6
%9"R6a'S!o_qKrF^2$,!:=<_,,iN_,bY%'/SmUis[:kg:ce;7A<CJq9]SdS)%1".m*0L[1`D,rTB8S:W*d(@g74/U(bOA),8-5g?a
%Rr7RI--iaX.1Ao@-B_qU'LGe7c/!ig*C?t.VKWfroVoI6'@E_q'@I<R;6k(naa1$amdu4WTdOl"dqDOq9,i<'@Db0F&l)pF]f(p8
%j&ZA`\B/MJD=k6M]W1nlDH<8,J/N*h=05=4mIk=[7!iU.P%]=4f&n_kr,R-@M.?O<-Q9)JmRem#l<A;c'!t(WgdZ&tTkCg>Iebmf
%<:l4+T&%q(,MJaTQX:E><a%bZVOlTT!j0VWHguD!Fl^RUkj$c!?N^^6B;IuAS'-dZ\jX'H\CI'3i+NaF-Fjm/d1[EREn)(s/:OQs
%m"m*4p)m!="s>=TF2ELIM1`!9B_/t&6Zo<p9n3'R3s1b[c;W<#K/3OC)qTP<Ntrq`+!;b^RQhe6-Bs]^Cm=<nZ:M2qN-0ktCOAOO
%i3#`&W8:IBJ/)n@Z[u#c5W%Gtqr?ROT*"3#G&ICJ=M.L?rh"'"$iY=Fc68P*7TV4uFZ/9*"PG`*Ae^rM__-14#Gd^DZ,5_The%qC
%Q[bq-3^!T;no&\o_LBgN:+uBZ8)3>gIZE+R@0qV+q^[LX`O.Zb(+B3'gCXn*U10NmkP3gU_L2Jq8oI'L$uS+TE7g,!I%c0sbocBb
%@gF5GPBXb>-hRI/,$57\9&u)hd3KQlGfo_g,iVkYk77?FYD+eF+^l!c#6f1*:\4;oa@NP.4f3`JJ^5h)QaGAY74/^!L*ZI_6-Khr
%2nPekAcVD`O!hX/3$.boO%+9bgmmfG/0&X`rb1(%O2f$0:&]C70+J^lB&PT=NJidn[op)Gl^`b.&'8,(\:XY!i#o+/omBXJ,>:p/
%lUdS$"SR7@bk:$R5Ciql2j?SL`*@D-&_ArX'S>?H36@'AXlgIn45$L('FnM&^H>5:r:0KfW"T_Wlc2U:-Aug_)J^:4(R!$1>T=&0
%FPN$*1Y;XE."j!0(&=->!Ho$V`SH;C*#uJ_=?hRB$hLSm<tofnp4!W/BCUr<dF_fCIY7JRXIT*F?P4qg47mPUs%$n?/!;U<Yc=(J
%gQuN,[40f.4bXIN`LtW37+C9#dr=a;Cem/eAcgbio:El0R"2fr(oXjG!Q@0fK:Ku'2eM8G.,RC/K5nBIo*/tLT"A8b4mk3:(P%oH
%b2)'f!)tcVmKU)W&f=ZrT\UK:(RJ)8j%c%Mca[;S>hBN!bhXskECMhB!uZ!N@rZ$STHe,<@9.N(8)hZ[IsSQ$W8:`f/&I<2$tYW2
%*7p1\NFKIqgVm7rR6R;'1(IS076niR7ARpt]spWm2U%[&0U7__KIhZt"FmQiIn0`+4U8$d&%+LAUe3.p$Z##NYPY@E+X83fEoRGg
%`5<1k"YN2_\FU<^rfbERKB,Y`jmQW:?bVn3>2-:05@9[s3-&HZr@bY7Y;#4UmpceSDeKNGZNQ"I+0hR8__L,T7Oh"YrJ/q_.dU9b
%0^#2bBg(h0rL],]m6Eoo@fF8B@%D_:O82Jd.'M&]`s!YYnBd2`(7ps,itjQ:bE3[QTdp'hO$3i4m.8Cg6Ei\c4,.F*2LCqql7M4I
%-C\\ha1,Q95gkQqfWoH`Xa3M(q%m0liNf,Yd^b2tWJ]A_^e%PML3>W/%NT[i.I3=#0aP"ecoAdG!;[Ju6kK&pch6kY).@23f&hnX
%lCh\9\VZ4(LYC77`SJ4i(fPruAq+hk8?ARBRh)39M'rm]`4!F<NV)lq$X]OC>nNl:$(")N\]AEl>LE0aTo')E#Q!hT=8[6c"8u-A
%6:&<*,efG.c53+ra.G:XV=V[hntkg`0V_2%$b"4@ni>mXd-5rJ\U5il,Wg*/T6&kBkOQ1'P[W&:icFonDX-5Cl$T17F`[@ViMhb6
%Vt7mjntfIRim?q;nHj=eQG#>$3a[7e?cl%8)_R[75*mp99GoOT00Y^U9Xsa!5fY,p*DMlIBuWL#I<75BY999EI:D@,pfR(>A@[TZ
%khoJhFtfU+?pdnD@nG4g5^]osQN.49Q"Q29N.FSpWl8,u.2ro?[euBK4bYU^Bsg15Mge2C<lO;^=I\3f2>@Hr$pJ%tNAnpHBm5"n
%=)=L,nVNWk\HIR]R#'G5ckT'NUrduR0i3_XD(.bu$+1058E9!TMnTMW9,uo62!/C2\.H&,/.A]%i"j<GaRt-R4qM[9M@VF5RW^&p
%_#Y"`R!.)BgF!_uMd*dK8>=&rbXZ46-/h-*d>COaD8!6nn@XUYbobji[fV`3POd7>\L6IbQ#\NrIS\5@e"iVc7%p'P2`j(b[IS*?
%9RubTkWWh`5d)$F\BiOA'.qM\phmJBM[I+GSi@agQd]_+:)l>X8XbU(@QB-*`Nd?AL#5$<n,(0rH]$.a)>>#3j[Q&8khV7o_Wa#*
%nSLB8npW/AB/FoEHUlreOm;/>H7#6$<*2nheaA]dPC,g+"1#^=[Df'-d)c)JC)_!J7h@79BrA.pOU3*IdGhpld$n]8qTes!eUg#G
%C9(G(%Puu9QG*Huig=R)lHV^+h(s2W7ibFBHi-B0O:*Itb.W`u*b4s?eq!U)W-e2[/$V8Tc7#?;&4Rh3]6i)UlT6_jqVW$epl(I@
%=aRhpks7p\hDe,)q"DL6];4#68DOs.j-&\QrFYBcZ%M(nI&AZo?JfDcCL<f9h(N4!4+S)tbXT&`<A\;Rs4Qhd(6gLM:NRA-kd8`O
%=l&UFa_BMIm!V`+qm5+N/LW[?cQA\<p;m\;8kc7o^.].oL+YYa09JgMVG@Q^>O-?U##aE+mV:]_Ms6Nci0FtC9cug,02hVJ2d*tC
%6^PUO:9TJi7+Riu8F&u7@;m>8:CLpM#tEdP'D_"E8?=a3,7.+s3\j8Y'L_JIcA*@mH3:L6>L;hr(b?a]Jb=aSdjnKr)qK>A6^nr=
%5q%s_;;"7PJkd(*W32_7-,1S9)jVB]:^WDRZ.7Cr\a]]%"NP=^]0feQgnZYZR5JYX:MKo^_<!IE#KKIq@_,Xh^qeSZ2H`.\##+P[
%o\$R8PI_SgUu=ObLA?8]`>p-Ld%sHtACf7;8]+;H@kFTA[P<n*`GiVfTMH?.+\k4-^Yt@IL57)cc--iK"NeRTqTI)U`IC*h<1/$Y
%bg<sU6"XHO*027!o3C,#T:@ja\AIs5TWffEW;k)S#fk)d1\3$\$mb"q3\sR9g^Yn3ouP?uGZs#Z)f92YhqTf\*Y4L'(Zmsme^cFP
%DV2mW4R]otR>T-k9,r6a[Ik$CFLa[7QT%H1?'<RXSm7r[Xpuu"(5"=XK;H_SMWXg):;C";%)tgH3j-jUPQbM@@R<:b/eG]<1!_N,
%JCZfC_=^BH+kG+LZ[i\Rl)u.lOW^<L.NXomUY(W/XiM0m4$=8G8#WP^:hV<Gj&oL=0`06D\2FCc]f<#f*KuA8haTHnINq^iGgGeG
%D^5:ef!D+79UPT_o+5LIptg#:%qW_u9?bUA\u.2n$+&RL2".5T2d-W2,N3>[+&3m0%ZRkZ,Y2]FRNu,5oe`UaJKsr'P%8LG7[,0V
%'b-c\Mg9(_8Wq&M7Zo$T'd`b(F\`Ct-++6&HjVbt1mG3d(BbC.aU"ZdN+>/m-05_K8q6Y'K-]PI>G+HSPXh/[<Ut!K;I2[oVk7Z$
%-fme]Sg."QMi\*3SWoK#4qShf1_-(@7q)^e6igfk<OB]slg+;]6TPd"0mJQt%TDaDV^7>U_V.>k1DVf6-87PlD>emT0:ljo-^4l/
%9TWL?jo>aL;GHlH@:8GAB-=r?+sS8MDV[d2^aI6,iNQ'q-f\3Qo3i*6H([*u+22T@>Z;b&`iJ!nZ9>I9?Tq[S.]qgDe&Cn2Wd.&$
%>2QhB[FYai`Yl@EMX/sY@W=Q?M`3;Z[[cr'o#'@!AtSX,KZ.2.[kr9gAP"V_*M3=E*TrLY7HRCX>C8WikDe%tX8:T;jO.-d1>,I8
%\r9:oX6(U1Q-*b*dE-j$L\:U<9X<Pc9WOWj2V4sr&XK'T\?2bSpCprJmCAQA$E7^R13%#PE]15R\Y[9kQt/EkI/M1_^5Yas]891m
%qs9I3f/u,&)_Oj$goJ+gUKXe=,rQfO3m8pe\5MSLAi$/]CMTZ</j;\2H5r;RfXK'p0L>\W=+!35BLo\Q7-1f1]bJ"T4@.A_,?g*J
%VL(dgM!F?bo(RoY^nuF*%5'qoY@"f1CBRm97oO*_(el2MJm_^.`Y*]tf@PP$&gOu\>J9$('4r6\"QT!-Y+`#M$aW9AF#3=YHATmi
%2]FoT[M+fRia_6#Z%I\aX;><R1L$!QB7cWG&s&-%TW+!*J@OA5HJble\6HZ7=GcC.@"(XcWF"RJe[Vf`V*Zil$k9<Zk#O[k5Wl'b
%^'$?`;'bjhAbGjDmmiPn(H/c;]DNq%Tam=>(EbO,Y`CiMDr=%-rY#)P!rPQZfGA_\'BB%)'Dm*(b[a+uI7Xq5&L@((AbF$2]*D!q
%$T#o7)(VITlq86S1h:'&R$F8()B)I^?W^@$^cFuJfGDP?4nn6_')TQB7$bW%'Dl5AW)4o8Ko)qZ#3(1Iqnhp>SF^?GM1&f4p$XI"
%RFi<V<M\,)G[b"_d70\Z2_q-#PSe`YD'Xsd@:#=/jSdG^I:69,4R3ta@UE5<+29s/Ph6e<eX)0>pDbH`0<Bb=Ai"C8T5VEIX?QWr
%),XjMR%P,7"U7chj2g2*?rOa'RksOkI,'"6$@])(5G\8lqni1th5dq)GP:a]&OUrTJ%!%3_;1^Q]o:8$oBV30V"[9;kj5@R?JD%f
%3Pm@4be6'[>Prg#CdrN)?W]d"KR4HF2)dZTWCVal+%/;'DJ.9'H^T4<8[jGr2s&ATm0)&6-LI!>'nhJ08P.IuRU2-0`-&,9d56f3
%qXp[bH&#Ypl;sD'$+n_4[OI%^c[YcJ^nFg-?2hk[FH?>!qMKTXA2ZU>ru:h*^Qa)[B@!*^6noK@ih>E$ru:h*^B!TdQ1$]bja[9s
%)0PsddTd(8[brh=Md+QM@]L,Irg+PmgNK^T;1,-3>s4P7Xcl=t4EcQ@mO-`(iD6T3pi'_=>O.CO[lcI*l'8i:nCkU-+rl;nO3DD1
%HO>,^oF77SbFbB<Z&p19G;(@*"sY(XY_<"-e;uqDV)5"MQYhTRNGUh=:Q$YrpaOk0:;5r%cD/^JjHhHW0%:5ClQ)U`37J:M9+jYL
%CS_aP,9/unAh_+d@"(XK;5-HcYEi.$$J+GqGMr=4@Jd91i)oH*&uF8/$62,J-JOjmU&J^eZq:J-I8:e,r4F3(2A4DuG1P!lU4^Ot
%_^pt>B*kOdgl!*f[65JYr%TWS=ie%LYX_-!f/iAq8W47rlo]M".9*\kb!lS4fWhl["J:hDaT]tF^>,2a7-=moWPLf267YZo64r\_
%-<K4:q\]L;"e-D+L2Ye:k^1;Z;1RpZMrK-"'T-R:n]Y7ZI_6LOKd(3C(U!`VE'F^(re1S[,i=Xh5K''aEnC'Tp\q"Z7*H80a-_5R
%;LMmp3)E52@"AYkrAWrMr0oG;=R06i+8>cR>Lc;^UU^'E;*6&+rYmoQf1Wpu525i*.pi!jK.IXHqa,.P#sYDNDlM`UID]^pb.mQ\
%=9gS6EBeHkHn+t3?)42,0N"bp-UnXX>#>h/b15'h<YV*sRimj9Dh0+A#S*>PcR2WP1\5-5$I.Wf4XME4I_6@QUWCo1j\cE7KQ5fq
%\LT8N^(T<b1TcGK2.!m*&1s%7-V5L^5*Kr4-Fo:UHF].\`\EnLH("/3HI7RK.JD0"Uq'IHq@kWMn`GW+o5;NC5<AUD!Js[XV^9U"
%/S:3"np.-+O$icC1\>7G]UX.&]"HduYb^#-,@mO]gT.-:@4!5Qd$J1PM(tBF3dfe$+LE@G*P6OP/bH$Gb:ock0./K`,u2IO);_#2
%'4UCcf(.M6]3JUemJPfXYO.itXNmB./N4d7%/=]2Lu]F?1Zcg7E`JN6q6`N7,%;/HCsMB+?U!Dal3Z@J0/KdfIW9MKS$g8dBtD`_
%X6K2oS#_>QnReNe!ScLmGr`01W@Z<^$hcFWeTBrqb[&^UI(+)uLb2V?PreKlX6IX-cQcYbhL<V]7U8_I'9aYbUapm/=1J9Kg77_O
%=B(!MbF-T>bt$:FJ)W>5.@Q:a%_!(ALa\O4Q]<7n29%#OK8mpMbe/^q5<Vb47,4:dU0HG9*l!_Ke_9Rl4WW"5^YtBd7)[o>kZ1?Q
%o<NjP-h-@_q9?AOg>B6[\]CLm3OL7]-mq1'jpQV[5uc7BI'[&J%Sdl6PpVB`Y-TM:0J*J]EUYb3kO;,hm/kX7TCKOW2SA'26$ujs
%9@&o.;$O!j@nLhM;R4*?a?DWS!mn(/T_VSMXcK>?@1%n@9Rj$.U)c4F<$%U/*BM^<[*`OE<qQ$Tr^r/"4YAof4OmMZ>`UBV!qpZD
%Wg*:dKT-+C@#5Ns?,pZr&B1"K-Ahia'_[o370\Mpm1XP0D"JGHetZ"a0jpU%MtJK;_1ob:9"-=WIb%Lk@%2=?>*$'u]%p->GO/nO
%]e>?p,O0#0%'^*oS&?1AI@I'#h*h"6Tg,e4I.V;aHWmC%s*&RdqL*&\(2:u_7.h_oOA8Q?BWXbJ>O/-9"M]04kD+mV,:"4!LpONf
%*r:a!`b`dBe"eMU0H7=<D#3^rA+!^rL(5+1fFj"G^];'B^AX\N`oheDeN)j$Y<YLm]@DouV"Q+1:`9*bg;hiQ6<f[:Qf;nA8UOHB
%s4LA60i7=^?_:e`mLq<78&hS'(=dh]MTue&=`0Gb-,*.`Qs1I?TJe#JronnB6fJ9(W\+2gBW*EBIQoDMD7qP7MXFS=aHMA4KMuKM
%@4')ClD(e4%qqS'lZo='Imi&?DBim(A2-T3NC#fQ4)Y<t8JJX7<'DKJc8.^X@[*6#'bW`=8n&'q%a@K`e.1<t7>%:3BC_;*aA*"\
%&?4;th0PqD-Cpu@!)-`KM;dVa0HX-tZKO4nZ.J9%r-Wj@.>^Xf&JJp-;(7@,q1rgn4)XC-5LVi<=^gNG*rTZ(8^2EG?<5/,e)J?Z
%i@c_BR*AE5<Z(:e*8+nWdCSL30.R`H3I^1t_GnV,@6\^6TdU9WG?LWS:P%:L^M$>fe15#h`9SFbgS'rN1ZX7Fr?[[;I,Uba1uYm\
%n:8[_/j(*t['uY8&*%Ri9F^r#.sBl[r/af>^M9&'_S_sP[2R;DL[f'qb^VGHKno2LO`"!f?_Hlf_S^V4hA;\=b_:gIKAj9[$5TSV
%00G2SPp4Fa'Ghf[%ZZA*6eXT7$P2:<Q0NAb8`C*gj+g#H;atcc@JjtthE`jVKno11D(-VqEjuf3hAu$rmEf(a6XG$$"nkJ1[iM=M
%998DjRN*oWom,M)Cg>P*MIto[J)OhK.jiqA95riu5PGj%ET&'B9?7tfB"T5L_Sc.P68DRG]C7M[:B:Rf:_t0FZ*ta"io&bJ0bRf;
%(sb<h=^\09&*%Ri%%E`;/j,(&nHLF[-5H<uaFG'JL?s?V[_pU6l#B:Cba_QjgkCOR^,#+!)",7.Qf+RH*JV)<#J9IZ^6X;CCX<G"
%6Y]a8FjE?(8t5npRn=='n?C6'$\)i.D%md-`nts\jL!l!4C!`Vm4d('HJF$*+/uK?V*Q^rN9j[)K7H<pGW;4lT(p1?7/%CUi82i5
%gC@0\h,?;sGGKNC2WV`mriRZ.^?mUfkSis-_t_sr;^%!b"'p.2"Ae@H_S^WW#?TVM/j+5:(4P!]mjT7A_Sc@nE<j5I0Mm\Rp_C4?
%#.j:X^6ZiBNd`WDN2\+q\J>Zh?abDj(EUSolDKem,sKG)L[eu\0]W*s(EUTRFr5P,%<CE9'K,,lL]4h%4Rq\l?Fs!YhmOKl_S_&8
%:-[,qPBc3FG*l8'm!7RK-peU]>^.)=0f&]>p^7Vm,t?0Y38B4C+uT=M*s'F)TGJZhH[J`jPi';14H,=b:AIh;#J]a^5W%A8LG@Ya
%r[p<l[uR=fb&>4<Oo3)6UhQYm??kZu.rrL0_4%op4"_#hPC/d@Ab.MCF\%+X3B32T`5h`_8X-qh7;:bL]N1>&P<NV6PNGtO)'9m)
%9oh21m]^<5,X(X2X*^C\>Nre[_(i8P2Ks3r+lt?69ik<7XKJgbrKZcOP\H*<So7f$g4%d*YC,-Ya60dsL!Q1OoriLPlh-o)rq3sB
%N87O7.fB"M2Q9o=>>tES?RP^%qpg\*B=2Af^O2I*c*k[b]hRl+'p"RQo@<-j^@D*fXEL7d?"@\''>Fo2g;]alB.(=[q2_AqAo0ES
%pj+X/-JN;Fj'_6J_<UZGRb9ME?Z*<]B>39CDm\YD/Pd^[UmeHVT:K;IA`rL5`g#)Y$fl"plL^NE?Jf%TatM(&d\\aAdV_;'R<HXI
%^"jR@2kE),e'4#EQZtEtS6PcZ<VPie:'0:E>e>(3`#JL<nM";/$ah2W=M3L;YRAdt/``o!"dsVkk4bW53EoV?gBjVk+U8Fc44S5L
%'4\m]EGg0AIEPTeCIdD$f4QTINHVHeV.d'iiucgV.d"2-39dGQht&Ge!!D6S)^IdkXAD)BS!577<PXW`IVHOXL`G8HK#&HB\bnV:
%9$7YR=I^L!dMXbdMr,K*jk;#k?aP'eH#dU='W[UQ[?g,2mB#D1e]"gWrdIiC]r'WgjVfY=*uC9QKe6g$#qEO]EpCm\^J%+gHT*[a
%o'1[@EGqpQ``;eMmWAlK^OJJlPqF\un2D3Rd79MJc1jD$s&\in2US\'>W7<*%1caeQZIIrgA+Ig&=YJ;`GE>^jt+VC#2Z]BJj5Ub
%ae*ORh6c.e@b.ppjRdJq>Z18IW-:n'gR+W2/n_W$\)mGM[g/h3]/0?e]3B7sbjc5;k+:B6$f1suS9/]#gh/YHV,m-:I3<SA2V5\t
%Xl3ZRa3HJ::>phNrkYX9`OTu[A]a>#o%(aJKSRL!]X:R:nUV*rWVJ/bXe+ICa*cuEYB*7ij*=hhH,@c]:'OB((YQCt]W`s9Q$/\8
%jJbrNH$(&TGKf?#5!C@e@\W8<37<0aZ_#9125/5FBW)l?EO8ST<nA+lR76b=T<*NQ?Y9a:cS&rMg=Y4&47uXOlVf5.[G+9f;S'$T
%CmC@(WXPqhWOP*l4Pj:cX'F8g7h`;T]5-`?E;D^p03qY?,TN0;/S!o1qgPYLYN04CGBJrjLU5(I1iDq)X/<L>IP26N.N?Ds4;EA/
%SCRWY.Y#%IlfrrB9G5p+PJa)N^T$iaIo%5W<;sdRb/XM;mF_^HaPS!r1Ss!pqrfA1TD<0\<re2]oobP&$Sh_PK&LFT%VH.bq/5PX
%1Q\@YgVK6FF**\K?f$"&h#"9+&I3e+9rSg"B316OfhUf-rQ?PBSqKiP$R>SKc&g^h\TGH<J*,p%iW!&s%6a1*a=Y&EJ[;_K-'AT>
%UL]p7*dR?@MkT9;\HqNCQK533.F&J+>;h+2U0mK(e9H)EnLWK)o>O:F\*d/5K>?Y*m^(_#cNRXAEuR269hEL0lq*B>[(@6n%o=a#
%4etb[jf4^pKS6&V(52H>-F"81FT^cWQSH(>I"[H0nH-jtTk%KUQ]rA_,HFbLX.-ZrebP[)\DMV(@s8\u^&*p6Ohg1LCSeDF^'gIl
%&"HVAN"0Jc\L>/X:R`a`SWa7F`)b4^5TGs!EiZ-64l2a/'7&74<d2:c''it_N)1@>i3I/->*p57pS%K7D08"N!$^_*aYHhA?XOf=
%ns)ZJ-m5W7eI*(:fUgr"B#f?R6^=^-KHg!(`:a;,88iP(&BjI'Cb(QV905ZV$')E@!IAj_,c(bT]aA[?*Ki'l.Tg%aH)OJSHfU!=
%(Z6a:Wk4o::G0gd/QnEH*n3o_W*EjSDYbB(G]M$_W-A;22M!'a2H73j7%Q&tUmLtdqh,ZoQ(RIT(ZkIJYoQ`=r3U[R%\m144E?,0
%dl<3b0pYQ03@esA+]F"br`oa,rD0u-"[\T9]1-*JVMk#rjMDZ?*_A[1rrQ'JNEglFQb/:uShVO+b<2(kGEk\kljP>;!HVKu$5D_j
%NnmA:N@E$1lr"^g?5I9r,=+Qf?FTg*#VM4_&i)0N->7]-a<>DG>DA5l?YLYtR5*4.XM#kG4RF^/[Qn`kq>Bq1iQt$WIaf;#6'2uZ
%Hr6=-['u=4DT5Q^m9T)-8O4Ih0I5MaAT5\nS<25B;dPiu2jMG@0,I;tm_(kd`fIGK^mu1\B[3[E\7B^C@I"YogVoQBN<X/[A`k;'
%U<k)X%=Pbqb#91NlW?%r9n8$M@?)(XWo@)<W6/5RfAVfTl(W@c^B^<ES-sjMhmDn&ZaK+Y0ZC2A*ujNX3c5s.JNC0kc)e?RplqeB
%NK&+.\N.jZ3@\2!V1j=n.9&(rQ0L.i:b?@$I:C*nj*<+Na*NcH6S;_`b-'<UABB9EEAL#[JD!%<&IAT+AU]?S/;+C-pu9JJYM-P`
%@:N''=B^#%5KqnjR,Pla:V=M@CGY`3+FB&r>@hO='-sgQ_jL%(,1&ZuK>ioC"2?(Q?IY!&!khL&F2,XLHdc#f5cC)$UB6l1>n)7W
%a-fj%NLb4Pd/A8"Si?Xe'?rMDTq=/&E'E%J.ettF\XA]ml(/u[np8N(Rp6[8h1fO[Skgtu28q[:>/s+qeCE9,0./>r3\jb*kbuAA
%$CNQY"@.HcRQ.h]<j-@<ZLC"amY:J+[)s`U8sg$9\)ra_`(`)`A<9n6Vh2S*<Nu1D[c18J?(fq.U(/)K0LR;P#?oroM<RN(*TXhq
%4U4;'E98KD#I/Ob1Q_3UcDr)LI0tr,UW)U%d*'=`k$O'lU<SCXF6dmL-]72rqliSj\N0,*?mhSh4^Vd$-q.-=M&`D=3f&B`bhCe+
%>5-`;;LNQH5S'6%qXd:L'>L2/'L,mK.-jqi%5T:W<Q?T-o?+ItjgABh?B*PA]f.u^GLIMRo^^+jPcK17Ng[51R^=hC=Qe032OQ<o
%-R:%*"\4E_mGOTs8+#'R:hA7Vrk"'\e"?:DCYV7QE#aq&b1QVZok\HYU1[E=leX)V"=8iWLIBn3F$>0cIP-b6W9]aa)<]3=@c;]L
%nZhk$m^<I8KuS$fl.X;Vc0RT%nL-ZI4C?Y[rG?MUSJS[,FQV.rN[3UjXZWi6DQQ#M9mO0lF,aJ8VXf]'+5tG'fqq8'cFu*FO4N*D
%EHFXp0krjm:3dPHOM5t@D+t[t<KP*a-Mt+R9$uro5V6t,L3UjO]dg;$A$U-fp;t$'0$([W#g_GFL-h-rgqdTJ"%C?qWhHV$rQZl3
%CX^dUjZ#id$a?(;b0%s$M1Wln#,LMTK(ADZE_j0B;#-ANb^=klqRWt]X_rCtDuQ0]>&dR??Q_ch_/+S'>;4Y+R_34WmWdQ-652`&
%S)%&A2Cc/)JT2?tMTKV,['0RWa@)Fgm][o,+F5[YTKgbg5ap!\Ynf1\5'/rf;\bW1IL>pk[(H`gN%#lgg0;+sQcV,_7#ibaFLN(J
%c+Q?2<3`Y*WI6hY&8fE1.B$*/dTMU+Y0k:28@#YTiXA-SmtP3KFh'rDp%TNQ/Nhoo:PLS4[pTS)$,[U7>@95n)9+AcJhH7T$tCDt
%Tm^oEJj^$"k8#K.q3A6&,6h@d#oU`:gqrZ-oOJfVE!ni68miLE;OTc'k;JgF/LL&'IX0_#ROP\NZc#P2qRFKQ>1M`Fp[&$%7mk\k
%7Hl+>\3WInUeLL9TsV?WDgm\FBS"kA<FpLt%JB51qr*^DEO)fEN+A(+JpKNl0oTPN"\P?QePBCq]XUj0,@6%C$aKn).pdmK$R^=D
%K]5E;[m2%OLrG9+DLp()@Mk-)GQ;W4o-NJ%UJXZa0rF(SN?0l&)RWV6*OlXM,)faQAk"7VKQ.C2D[%"2?LfJeb09S-;(/o@r!(Oj
%.o"EU?cFdCjZgge&#f[3bG%m6$h`=M.Oj`Jfi;`FF.#Jgr,/[?K,F1/P-80]6D1o@</1KM<)JB>rW+[sY8*G@F0AT*T21D_Q7<%V
%K^0ADR9LOnRo9\"]DG![L[ONQ.A\b/LM"^u0o?7!,A8)B2Q!W72DnR#a*na2^GlE/FAF<Vi<hI<$-0:P)UDZ&Nk)mE@4?)c9rj!*
%^\?4aqd&OP8sV9O>mWluXZI1\ZXY$1en2I3>eG%rP/*cW\(^57jX9Unm#C#UmG/m[ap=%P1m?._=OCCJGm-*Ef4GPb%N!4[A=i:g
%o,J_=e"n<Sm;:2Eh*bS&%LZ@mdlCoHjk$Bi6G&K%)7/?JI[jd^&mmqH:UFDjWKLj?:a;'dUL.*@]bfI+auo@U"4="E[WENJ%kP`F
%]dgUclqK=MY#G'.m6hX)5RpZeqX&Dk;BD<sjBHVT#ID#G[$8e]NEVc6aHK=NDosFHYktFUFeLQ`m+EBH)n$,lkD1jYm/l9)&Lsu6
%DkRKVG1\I&`[Q7[5Dq%I0dWQ@?D!kpU#kC6qcDJ:&[I0bar[u4B0cD[H>9e[]:#]BjbtrK[_iPgkOM31G)NOSC8(THL3@O"1ikId
%:6!ZBNJLjR3.l44WumlKW@[Ta?\2fc[ED7cq/,R#1\i;RU98;`<7^.+]h4<<5=sDLaV?hocjVg,k_dUr*f**"hEYP(MVs*udloWY
%cP>ULb9.e9&$@W0bFg@;3S,+0AYf>%M)^.gbCF4$iYif[i&H3^Q4\q+FLVM]TF5e""=sYoKoFr=@h))N"#m7^f9eK5WJ`ZfCCJ9>
%;Y8,F`*?e;QB@oN?tGLA%:g>+9\T2$$3XrHb:$irIbono^?lITJTqM^QfF$V%^qPuCegagZ#l52?_)_1@2)"ba]-hV>^/B)h.LJZ
%hsWQU!QUVc/"u0D!lt+A;]^G?nP1_]`Q26kXXtr$g)JD!&^MlHYnh8u=FN51`Z#e:(q%9o3JOtP`2b32b\6>[nS/@_JW\S>imeZj
%D?dFW3)QudC'dhkK:9p4Hm?qg4sRsRForcN<n%7e$"m6[cAiL?Q4U+n.-qf@<_pkS!h'G,l;cd+-QSg__T1\e$?EX%5A-mN>%45D
%IhVk3@$<81J/iR7VA:eaeETW#]1'S05kt46LZ>Jq9@\H5C@NX37O?t7A'cQ6R*!hjb%tNDP<RKZc8!BWlbo4TqhCB&>cn39dPgCI
%l/`G.b;^JfSK'Zu2!"&,o1"bt/D4%=VLO`\Y%cn#-I#d9Aj^`^@r5)SQlld%35"pFVs;dOFnn)91GKYsHc#Ji+B-nh`!#FOM*$g[
%gj!IGmX29VXIO&2"nSmc@:I=NknrI7=#Z!e<'5a4fiiSFMS4:1g7YVCV\;"r(XkW^k\l_n(CMctR>YIGTBpb])'&IbGC')MK=&t0
%R*`C3F[PcHrL<T/33GuW0HnfX>7N-`bH)R)Y_HN[VRes6]MCk@=Y(JRKPV8:.oa'hIWBE>A0R`&"k1/nk1le]8<u0UnQ<M2E0P6d
%fg&q,,Q%5-qcEd>:FP]%_>u')*AI\R7OS1G@>Q$Z,kZjQPoTlCQ>@edM_^Xf(GPK>#-nZ+PH@S2Q?L4)]A:H2%:Xd"^Ds"6TYPJY
%#9ZguQX!bc](GPI6/l<j6O?!M\@&4M*maP9+[hoKhqM,.l?@OGZP:atZ;*@h?-mQO\fm_3mTe%KYVNc]fB'098K!5+^ddAs.'*3P
%/`3+@N=hUCM:D?rSlN)Oh,KOZo;iQ*K8W_OSW#j6CnH7:N@(oh0pD!sAO&$]f-%O4q?+cMQS;D2VLUtP\ig!M>P(8H-p%mg1f+>^
%1kV</5E*S6>?B^LaBanlqL2\NW[(LYfCulN_2?$_-B#lfne6#icbJm3+*P;$hPdt5+H,Fk&W4ne%XgAk@1Ir7H>u_b+;!=Ypic;\
%`Q3uXcT23O]hMl=_C)n:>"('J.mKXs>9k[pSUCEA<Mu.KGeW^R0i9.=VR0=BQSdfDG%!ae\uu['W"$\dY7g.)7OK7P[riF,/?\j4
%)_@_a5Lq"INRH8Ic7Xik*.)i8+`\gCCq_lU]GKj/4s&VfGIqCcQob9H.n`8?2l8c/r^8mXK>Z!?_Em*N!;Y6doQb_]Uc#.-A\*"J
%2)bL.k6qFp]3Ld:P@cJ/q:&q&5M=kp2H`bEg!6jjXA.<l2R][0@h*^nPhj7aKhiZ`Y.hN,@\2a*>KaM[IqKYj\DEO>0kE])GWsXI
%2q<gHooa&1R=EDd7*ZE>K=:4ZXq^"&R>p1h2uO[OnFc#W+)@HMjN1<=ot@*Dg_b@[q8C4tqH/U-DQC0/N7T>+DM"rG:-FI.Z0'lG
%o'nnE0,/f6ISbV<+!d`q<BLs2<gAZ6Bc2*,Zjtp,gd5=MEP3\#i@Q<;ekod?Kr,9ianClq;I5^Oq+TI.o?T/gZ4Q4H.5/qY@'<-'
%h1Q-E<'@c/S,2_jo^=Y/@/o<CWrm]C'%fE?^u^YaP6CSTW^[H\2+c^]8WcfT,k[VU\cXusl.je"JR"$!?67D>o+HoXLQ`8BG\M?o
%?pFlA7;hflUn]mVMI#LS6"+e;R#WpPkU8S/Pa;Q]YdD+RIB$i^"bdNTW7F7+7##]`IIXDV7le>[J8#i<>FkV=[hP&@(uHI($7&>s
%17NOsf$/J+g3GnK(Tjs!hk4)9Fuin<KKs$Gg:99%(rk=!9]V$#[P!Qa>u*,/R5G,:L<"+"CXs&5)UQ]hQo,#9#*.gnbSl(-K5uOj
%Rl+lH]W7\.Cn88a)L-a">XFiCIHna*&H@Ph6XUd/TiT("2$B5-@c'sSCt;]gP]>gD\ZG;3M3(#IYu$a0(FK\aL69-Z7u0V95EQ]%
%YW^Qp`)l$!-R.MT@>0Aqih<]7G)XBo6,V^uA8Zigd-tL#ckS:3D*9.P(rL;#AfXR^0S\O%WP9dD15oYO"_!tD(re8b,3@pgKeeU$
%:pr,`/D4mR]&D$j?bKdZEpZW9h6K2Wa?D>kHo1$dQE$;mXKEXaM1*9&>$]r?5!5V6^-+]>UQsK\]^Ul/*N_$pbC]Y>Zb%%dRk[,p
%*3E2ZA\M2P5h<TA4D_D`R!^Tr\cjoAYG2#2aRcU;<DGaI*3D?R=8-cY]spbq5=lE3YuSTlconb!g;'prTVHm/QUg7QF`l#`!TWb#
%f9=e#&_%oGnRIS[d`cA,`l!b.(st5#JFP<<-o!rF-t%FO-IN0WE`t+6"4t9eK=qL?HNhp4$d@<_B'aLD&cZK5FS3I*=@?5<GfC5`
%!Cp:"GfJTYcq&&?PfGM$PD!9l1XuZUH+JbM1nT"VZb-?kbI&8hK-nhU&@nRJK#T:;P+^dnUd0X!SSf2)+`jpj>(-pF&c$$-g=\$C
%86iasE;c[?1asG5ndXUNqPhh]_Db$@G`&?nr(-%]a#BC,nM?m!*oCq4c6!?5p\4sU=;cPN\ApOujGOTLM);`cF[d#=#*kmA''<`.
%j1lJmKh8$J,Ai^edFafc,gpr>c&C#!''VMu6K4tHhM;+Va&_]$VYCS&`-Lp!:].A%&1Fl-@ef.BnqsH)2N'rSf!tqDWiRU)g"A.K
%GQ[[=S>g=(QhL1s:d<Ln^SDK@5q]bRL5h?lkj:JQY!H8P"irG(P/s),7)jcf(^)=E*0G66g@iB;7Sm`8IO'$j1P1e.R%F^+pPbar
%QK)UEa$%7)LpIsUFSrKXDZk2L7`*'Si:Y_f%8/98Y/90=>:RZ46(*(BPST64F,"`IN6n:2B$MN^bn,FE0,J-ao(1qZ/mcr-q4fdF
%[hY\O>A"g(@=]=4>+\IYes[TlW)4`se.qn#h+[rh.j"sSBV:+<D3[^d*Ehm?VF"2BJ&'fr9>L"8r=NruD\oVup\j<hXd%N.%bDfm
%[ef+jNtlG<D_$:1,:X=j)=J<a``urE)>XAP/!Zh,_4X$ND%4L*oT]KM1_LLj%2p7_SL\ba/M,Sk?r0kZb14Pab'pONn@:(AcYf(T
%P6_s29!f:!Zo;ZAF?+(J,"GTdkYYkEB`COu_?G\dRNsS=3g.`A?BYL];!M@-c>/TY#YLO'`+q-qY(Iuh:bMggZ%M%]4qm\(2gYX%
%ccT!i7SqF^3LE5[Tb3O1Bqr(LKUFWP&[H&dM1<RH+M4_W4$0%[2Nd0\W25jhgO^"oj\PJFN?\"n_XcX@KG,!eKcc4($tobQ[rqC[
%bePM!&4+5._=O941d!33jkR-3ZXI,b;#.!l%8Y+h_+D<CNObb#\l(B6.mKu*6,(2No0q/Sbgi4c,7F@G":\/Ln8^W\.;6dS+fm35
%^6oT_BY[JOK_'T[VAPR,0*0tO(a@l,;,/A4c0W@amlu)D"idk<B3CfjIpE(=F*H\X*PU$*("Ae`k1ZiQ2d-Bm:d<f'FiR<jN+u48
%4?17I5lF6JR_Uk86eZ/X*MF);rs"Sr?j%JqLg1uRLg1_^T^cA2rBE)oHmD0X/r2Vt#:2Q7f^[CMZE_*9UCe3ZMeWPV]4hj!X"q$N
%=iQO4RsmkQk4@r02hF(i-i4)S5Q@RG6/su^`;@^K,Y1U7ce[te,A?Hm^T(&Fc5k7;RT/@(1kJb7mBNY.l_et2`K^UU2QSDTIQZq/
%_Rb?(l9>p4jVT-cF;0&qdkG39=`4TTi&Y!V,=1!\>q-kgO^AnK6(,(SB<p&M,:GD\O!n3a3YF9gY"%h0(mKp]/_t<Rq9Sp5.-F$N
%;U\H;;)5>Y-&g\YUOkdM8WK7Pq'GD3,!hP(1i"(KTX9spMZj!n60/&)LqJcko%!YXG!H3W7DGRao7,D"7q\Dfp8Ic6p;(4M=?+XJ
%bo21.__\.urokFAg\%d6>>cM+D'L;uK7$jPHML/8rc-]`9,i?&Q1hlc/:%5(@RGI`S<REHDUMW_cS"0I)b[#4I9^))S:TBT\VrHV
%oX<@_qAK<@`nR.=f2V4bJi]6Tck#5bT$!>ChdkVV\4]Fdp\?,D)%LEkG3Heh+Y)n\FZtWr_/'KISramZh'.>pf=R,/RAQa_/^Q`N
%3jj6V85FT)C<(J_h64b@<Of;fHf2NEKn"%o=31OoFc%!F]XTWbf17JeCqmO41<n/b?oIb.\Mm&"n2EmThIg-=ja_a8OF,R$,@<KN
%FgM7-?GX![m,82t&#cc=-e5"sq=,FVo$ihBb8r=H4+2_#KE@H^U:\h<L(t_]>a<uUbKjCJjA/hFoC\*ef\'8M0"6?,Ngf4c4AurR
%I+;6:Gb:;mEB76k[qG,c[RTAn!G&lK=I!=fV<GCC7W.*!A4PYLE#)S`fnb*H(&[cFY-?ftDsjSJUbl"qi8ldo1]l*XF87:QDcJ:C
%(<BOHFk4QHM\Ug1k+'(f`]JHO!J>h1RQ2YVR)f;d!L:>Y-JYkqL1&'(NSUjF<QsIYVap>t1bNY.lBg<X]b[S2T:[A+LcCY'NLpNd
%B8#0i[H.<0;Qka\[[(qak);st4*I!o/C/;Q^".%s8G7K:"PE<G`cbCka[+k?TEKV[]\"\t^)*f^\A+H(_'QE`L^SUMU=4]l*""pu
%4W]=W(Xs9pdc@d3b&TOeo)2F$+1CL=ogTk0c!otA>[^j&cPtDH\Qu8,ec+=ZBKgoqef*@d5+O3o(:Ub)IA?MkXObhkIOe3M_3)'T
%>T9<e9+-gBVYOG]WWD/,8u8fgEUi4+rGhkI:mc1BGDiNmKgfnFJnBg\6mrjo2$t(I2I>appT<tLjiYT$FL<;BPgcb@0/NoPNQjV!
%ag[(D`o`QWku_PuK;1`nMVb[if3Rs6@1IS1TQeR%MSk9')It=5?Pa/DmOa'5DLUfD61:+*g<:(52!EaNaA/\+\S0@%AWSb?;\ong
%\[N!A/G*Eg%=5Jb\hRSWERCF\?g=g:]P,[(A^DefN;B87``6[fim1mekhS!"c2??cKAJ247#1Q:M[$k!##ed(gW2#doPPNTQW$Cr
%d@dBS39D%Ild6li2.6g$4!VjY<4p$kqECpQ0;B^P7*kb/L;&V()D$3j7lBpM<%2uR=8[JG*;KfNN%3r$asQC;WhD)@8s'L`HJM(K
%oOV!DV=hE\C?Wj>82,#/ql#7`N%3ppBJnF*:rt>b9#Y+MjkN?`oOV"$+YL.ej"dW6e:gr;ql&Y3]o7hNH$\=;2)jl5<6f1:n"Uft
%19-R_4]g]m<:nb^U#bkl-KPi\lb"8;#N^*RMuAk13h;b4]GR0[l^fiq8*0CXruJ25PLfo2qTm7K/7%9@0*]Jg7eZs%BM_6;MOJJ:
%S,3Z'p((rFFBYQ.:M6)M%#]jBD"2>.R)ScCWPT(hPm:P:(c4Re2*?*Fk@eB7[KZ"^LL8Z(,<O3,<=<=@O_qR:D]W5jEGb-h31kOL
%kEphW(N0Kg[NuOs:'8qcor.Y<4Bp2gGfFBmC*o-gX?q1fO:6'#?<Nbqeg"p#?7BMM!u$Xdl$`Nj=//GK1iQDaBKh[:;YP:T;#5&^
%cT94a_45Hn/K0buNe+(%LJjniRu%-:"R*5Dr?drLg\Sg6mBtg'X8GnK9e3.+IhM[75>=3k.ooj$Fne<oFRL[O=,)r7b;8BG]I*4n
%=(le:lHe:4ZVbH:PKjj.Ee!P*HR#(We'\b'H81tA5"Q8]*$3?9$e5@QoHEmoPV1mTbQ"C;qKDl4Ka@&S4S]6^g4A/\!;<%lQJPEp
%ge$aF8kr`F?DpM"<Dh8QU1d\423mg3LWQQf2/UT5n%fPE3NHnL)%O5r!si)gn'k\LWP=HlJ(a)19`"<=l-oZ;92ZZ4-=nc%;0=`J
%APL&t'U'+38TP2+;iiD1;[8bi=[f_u3PD&J-r&d(,+Hq0e';]sC6>*FfH/"J7>+VBqsMK]:"D_V<,J>!P#VoZW)([<Q7OknB+8&Y
%0JdM/\Ej2o%9l<GOKoM"c@qLaWp0^bCeZ.9QITf0@5;p20dCJUZ@LV2=j\WECTt)F1Qa(8D,i>;dM#R()Nnn:An>i6+O-?/ObPJe
%9T_oY-MEhVB4Xe9+n\u9<]3X/)7F669[Up8I$cB&[YSXPDMa`hfrQ/E1PE!UZ6)E-aL$0&AiZ5*Z.aHHP&q9l'\3>@fnr4FXI6(S
%0K#m]RdJ/&XJ%?UW4&f_b`j\0JCuD&Ve@EpCe_25Qk#@D'bRcOPEo]82R9d:BIoW6mBN(E<7qs?=Yd>aB!E+^8MV-[RC;P(XK3\p
%@Zk26%V-KTLrm60M3obaWe^]GYac#JQg);)3KcsdF_&(F:$.Ci<)#.PaO!n=6F]5[ZZ1te%\$U"0m/5M179j]B%_opl)GK6JEjMZ
%L9?WGBEK&I2;2KpZj_]RP!s`!9<-5j=N65Sft*jj9LG+u(p$3UU6pfWM.4'!.O#)@O,a>A[2<MEKUHhI$?J\KVb"D8+PjIS-EE<S
%0Z-lRd%HcC0N0c=&HbYiILK>f6J?rIBMgZqj+8Xa0n:.jD2XcUfT-QL$q'PpH<-2OK4'G1ap_4jOoe1[1^;X=9Uf$6c$:%kT'"(P
%XCOl-LaeK]];!H2bV3<X/V;(K?1E_RMCr@mDCQiB8Sf6,V,NQ:mNY@G3i/8ROpS&V+XT3c?q3#m"dl<OV$HqK1(Aus=bi*4>4bhI
%q?gAN5T?!52INtiMO8-V828a(!,eWqU$AkkfEqV-XVnK,8X":O=c.moJ1hdp;k7Lc\fZQG66hs,VA$te0Z>00!.JT`3l=ok<=,PW
%Wq3A?djB1hk7#cJK3"maRSsV1%tPE`+p7nS";>Mo<FGLR<X>X;%]1+SFo*ju-*%unK4_.o8GfJ4S$j?]Q3e@)O`brB77I]`K!*0/
%P[R@L:+EIf<5elhKK9,CSW4RR>r!r4.[&c)Y$3Y5.BBaY&ge&Z#0ar)qCY/6\k,.c[oc4H9@=*CW.sSHY_38fZBc(&--I/;F@7K(
%%ua2)CBX@1'$O0h`;r[>-3+NjR"*QlJ<m=[/nj6V6r<T'C$E,H!JEJa*7._oSe4q<K7P/[.4UX:EroI@$ei\q!7W:9%Y1Qg-k6OR
%,^g[OclEZE$V5(V#M1L31c=>Q#4`nkD9.lWMgu#[<<P1sCYc;d]E_9LSOPjRFp*\!#4,dOBa>QPN._EIpq@LD2-X*dcrTArn;CLK
%eSmQ7[PLT+#eK=5[LF;T-j+4=gEEMdK!K"B!DkOO70$>X(&)k7Yt[IsK`D;qRUct+f4?f>C8PE!TIK1V"XVh3J?\b&nX-[$=JL`Z
%8ZM2DQD)\i8r@0d+RVfq%Y0jZ]8bHRE[!2/B.`.8UmaTrZEsT;I?B453RI)R$h@TTETpTB+?@fD%j$CK,5EY/JVKo2YCcgBB`tN[
%&3t]a@HAAO\cPFrN!Oa1bm!X!nG9,bG]NR[0F,GtW"')[M=)JLL0G:N#J):*8_4*,hn;)=:Q'`GkLb4pR$;E6"L1oMK*.$q'f,hn
%WnSaXrtOE+5Uf%-I:j/t_C."6,TQP>P7elB%RE(JTH-j$FB'&A&EZ[8E'Xks+OhVm;fb3(a4&@$/tiOf0HT'""V;V3h3+4aH5_[c
%Rd.<`PdLg2=ge<^=DPJf%L!p/]c`erL2%$f!lJ#4#;gPX]dS"Q\h&B9A5RM\TLg;"dhEn"AN?J>KIG1UZ6\5:+P"S7&CV*1-%oi5
%2?>DcZ3:fX1u4peXeV1i,9:nO!#h``\;@gr-(lhMX2P6>qGkIs-t:@P-qb7QF]fJ7:!kO/1Jq>\EUc-NiB^C`CEuS="Q@-(QLmGF
%:1+lA1rskIppM1+]*g*cF$c@@0O'*j]:eMQLp/0l9[a>X*.\P<m3fbM!<849RC)H#e&e+QYYkW9\A%&U)3g>)PPNcF$Hfl&Cu"$q
%69qdm2,.2Q[d:(?P`%E1phe9VdfiJ#[N#jS"1f]ch:YUQ/uu@TVAQB[b0)9fA@?OnUM)2W9\,buNrp]O@CJ?I=`03;mX![3QL;I]
%U^RA`bA5f5%74G+4=Fu_O$F9+$#")?aHn3q:D!_,=*6e:ojS<J2]%+5YorUP[bbPZ_bin2d$V`%RuDs/Xq4F]QoHRj+H?Ro_h"Pl
%-#Es2BOH(n`b#iL9;,V;@[p:b6/4:&Ah$KeQ;J2`e^_OM@[IY(W@58[\:ba3P\#.P7=qh^('fGg9cJ\>M?B:Sjjgf81NEKY<04q!
%W5,_;,GW2;+tA,9h^^<mU2%KMH2re0MkDQ)eLmU'!7*G$5npb4d'f2>#j8$RNYG^Jh:HL4U$%AK3CH3-)biWRi?P,ICXKV^?%JBF
%(_i1enI?[T"KDHrI#He$6BT*8<"1j]L$GCM4!8:/!R*lRJ@74m8JV:=AHY<:0Q[O&NLISabNsJ=;1)<,+D@GL9E5eBGJ8bTZXQ"h
%%^Iqm'q=SSfg+APp0BEnqAN=k_fOVA*W"dcX9UH+!EB3<nn%tjG#'#H24!W.);2^!#=);:WOuUe9Me(f9o:,#SJ*7V)*+BY6.ND+
%&?YIHW#B2P"/rF;+$a,?!uNHaZuLdS%N0PS7]@QaN5ZoQ=]PM*h,Y&:VQA-f5k:Zj;NU@g8cU.-(!9M":4eiVTt2@S(0R_&b]7$T
%(`u[e["i>rOP'C@"C>O?5kr;MBe!dn&4!0D=;(J($Qs>7c14M`$>sL^V#Zb4_GkJ9.fmj<hA$'EV.U(,8r`iVC'm%:'\q`'-@i$V
%8[M!FaV_XA4&+<1&9jS=#!gh^Zlqld$jS%JXFT!B!Y:s*0XH[h]0`>?-(Q&j!%OG6#=)CP8e<7+!DB;T1D!Tp.Y+`(Li(uR_BGtc
%f.C!G6"!#K&@>+g!:#<?#=+3=IN5:YaQ3_?l>2rj\@Ns>3%S=f!C=pf!h`!+l69nV\cCaT;T4g/\o\P&V;T!=1"N&`.(E+ck)]0U
%=U,nBC,)KGL''c?&:tPf:W]&WhDtun.eQV()o.;A$Bg*05b)7g"G*((HX3r0mRLWR,#cq+ihIfBQ+=DPTRf9Z^sKGWQ^eOk[n)K"
%Ag$D)2+PG1Dg&BaoL-Q'[NabMV&cHbH66F:,.bG67J.OMm<L<R5=Ae9IZ1iTr>9Z3nsJHHj>"]oaCC6gOiJFX,DS937NQ"k7NQST
%N.+GZ<COi"7Ig*hm0AM"6AB:``>jr8J6@UN@^[EdK0XS&%Ub`9R3H6A&WjmMYGd!)_PA%tMd(pl&VC`%TkVBJrU]56=U!"^W\\X#
%W2b[<Z7nRXe0*$?*^^%45Z63r.q#6JMO6hD%1Ya$O0Au<]WVXl3IYC$At_RY^hgBR+Jp"J0JLm"@N$G&Tp%sa/1p@oXkS:1SM7&m
%@ObTV*(7KkI`usnWJdGT<4,.gVQt^_""#A-Mb9V<MO:IJ+kmE5MA`?e2^NsSY+OO2;*VZ7UOIAN7fD\&N;D4Qb]0utQt7*YVAc`i
%@_++Y,%fd_iPQY]]cX#@HNCGu?,W])hN(O[4c_UpHNCHi6c9C3=D&C1%"q^0hJ[-Q7KW\h(_$TZ0O#!NUO`D-jobb\0cC>Ua)!6&
%E#:W%'bO?C39%hh'EO7T;$;?,7M,on-$IUk,2b0k73FiB48W"-p.#_i0cEL=a(Q.fO#^&?!bSbB`*kK_^lQl.!Y08R$2bVL,S2ZQ
%%_PF:$2bVL,iCC)OMHq)5QX/>!t"lB%4'jd"fG'00fU@j3DHC1$t9tk)i)f`"@#A.&H!@S6L\JA#_C#u&:u!u5mVpu"sNar)MI%h
%BFk6+3C*oPAo!WYTR<aJ;[g)Y3D>X=!+n8i)irZmTH"DKi%ZU0_2kR3200<<?iWkZ>_p<OE0(aIi.G_8Je+Tl$\!oM0)-P-\q$;V
%V1CF?kQ6f*TaQ=n&MJCMZidM[huu>W0_s%ZW?2Kj;j)d#ad<Ejfnus/0dlGk1!=M[)JJ&]+&gDa6j"M2ZOEkm]7CKAN!;HOR*@OM
%M`H>!QE)(:E=\QDil4.V0bX6=LM5I1'ZO)o)d/DALmTVIeX"6l=bJ>Y89LMMAYYsN[XAts3(T?0PuUmqF(6_Fh9HJ4&3q.>_5i;c
%F@?>plBN"%G"Q?HUgY*(YF6,Z&I#`QX;dWPJ2B0:f72W/%($71Nr.Ugbn*,YS&&;=gt3%lR":oEgB#[P2/8\%D';Xg#Kf<CA+=aE
%2L+8@)mI05G2.l_hH5K)am;p.=\D))cKnGh:!AUVi6?7(.%?\&2@]$b5T8@m)[P9H%\JXmm8DHNk?9E^bcu@a.QXPCgTJ*:N=3!F
%P!O-k4(nm*g1k2'$%e0<f8U0s9t`[Q)MJ4A1kQ^#>skq;6,MBUGn:H42hFH,%;JN0i^XDUU*b*'E%'e#TC@#K2pqg44@9NAiGJI0
%p^-C-OO+Wd]E"P<QigV9KH$kAU7W!o_L"=g:baO\eq8^V=;XdX$P=i#5DKJLGE<K9@UVg4(U$-":XHp'Hf62%kdmKn&>Uc%akYK^
%S;N<HO)@!$%8!ge97%+&&/h"tG*@ZVTL:)OYqIqe`5ZpO>63)-Cj/,iL'.Yj9lVC1BFKaD;<\47pmds/a?*]gcn`S]&3,kifaT)J
%OW>PI!>d]M.S78WJu5\c!f/s.En_c-)@A*$c&8]3+?DRmpN7+eJY6GMmcu-)6c!^M92Pg'Q6mC^6fKs7ZmAiXd1NKa!RNT5Q^f=W
%"8Fb[<*m@p$\BGYG):lqJ>`UW+U(/;p>TFMBEs.-guJQKM;"'taPo>o<#p""Qt@e`K"CB(HU*c1!=`%K6V'aU80l:.8YSY,`a)9H
%1q+J<(dc5P#pCR)jHaKb5hP==]ESZc6#,,Z&\roE]"K@$,R@#"/79g4"?IY0OPlYpMYB#"B=Nhhn[X2b(`MUS;\#$#kPT9b%(g`Y
%5t&ctNMHP'=0[\aW(MdPZLA3[SFlq'=<n&*q]J?:[L?\t'H$Hh],b@C&3Mag_]DW`Ob9=IMqhD?Pi(<eR&3>YqMO6#=&@8\LeQ(\
%-4QD/*S3"$*n^nlo7Mj/#p9M`RdQH:[TuR/E"3F,]E17[OqPRCF280nn=:[saG#=VQ?j,7c6O+ZM0t4i@Yu+16%^u_n?XrW!'/*.
%KGFT_Wpg6CJ@=liCqEOag^3@7r(6;ZG50@1-a3\A#$XrWTIWOJ2DQg`O>p>JLeh@I0MenRk!cE3SA,q->G:&CXZ0U1i^/#j'aK'E
%(C+]PlB\5,"m6)5,=m2kSrN_n6]_q+d.,FSW0:moR'h&aB\SM(iMBB]o]0%3!/:$-H3#FaQdcC.i<3]PLk[*DK<BS2TV<?VT@40U
%iM:N9FQIa#Wl5LSW#!Z-ks`"!$A/k2<!uj'Tu\G!ia4ZXTbmaGK5LYtVq?4p0UrL2"i,)gQ5Aj2J2Gir&"9S>=/D*X"&dA\d*WI<
%1bD"9oKm+Kc-m&c&O;OoC-9R(AN4PX$^KZjLgI$=+(V'#S-..HQ/P"f<5rtq,3HBX3(u15[j#3*Y`uUCE,dcJTOYt!U2TrPMn\.9
%2u:N)ZM5BbW8beR#af1m!Kb:Xpd#[Fj-b>*p_s7@R$EF3=o=7$AFVU-d#]e?#[45?!%m=lF2VK?GfPTEfGu'2lFI8+a;l@7.TR8E
%R/%<"9N)Ti2sA9mZCi:(W&fqu+)'EF3a'f?&%Y%kSmdikqXK1hkf45!Ej-Yoq@PtsOTV7n(odSqOf"TKO9H("TZ-9T4NN,/r#c@c
%i]o/1a:IQrqp2O*F&>:+BIQCNZiY0XEC53%E86%-a?kRX+:Abo5Z9B$F!3l!cu9tZ4D:0m2r,#g5KH0EGgHm3nq/J]8-!L0*"^g<
%!g'EcIQnP`?fVH/BCgDA)dhY2=aZ>Re9%rf2nk(Q;+&gN[kUe!ecHsb[UPd3MBB,(\hQj,OMrdH5o-dPJ@6m>ac0H_5rWCI!(B*r
%Jft&N_o,7ikWFa:P$$.lKCXY`k[<K2T_opjKCXY\k]laZT_t00H6*YT7+WZ8TMgT=9X>I%OMt8r5o*\d#;&MPF'`Yt&%]#GIZVNL
%nXph*-%M9mBRh5L]%Be@bl\F6ehVh'/R;W&?4[n`i][oTU5Ji`'OSnE;NV'S0)7jtA/3U8>6m=LK#RY\C'_(,#jS]JenG^*glLFR
%eGUOI>l:!3e.j/'"@6.EH2odE2-;5b7kBMfYU9"u$ZtumQDTJ?"65XKFfK+f'3b\Bda5sfE7'Iup*/dHd#G!a5rYNu"20LO*`Rb8
%=F<N-LN+J[0$))_q*7IDEPPNL4VRN@PQ0=>R'7*ZR$nJ)')'Su5Uj][,YY@0X\6Z0?:\t(+8s?<Ck[=N`#Be7%M^R/Hk`6+d4kl6
%Xsf5Ac7LNcSVFqP>Z3uB+T<800:2)U9\i'g&Dn!/6^tdVeGTP.q.@aqi-[q$&ss/cNr%fj&Bn,&%FTmBDM2NF];(jjaSEY''m)b2
%A+d)$Z!&PRiZdR*l=/PYCpZL%o0!NZ*uleGKp&G1(DmCsO4I7V\`%iW2`=V8'uQ+X_#MLgX/KoMrW0W5O7AsKV9"C@]Iq899g]C-
%Jc-+>f&[tlk%02EoLU6V0f.73gqf0"V;q<Rn=rr\3eq':a02E$Vl.V.Q-\0-UK[OJ!_PLtg24:uEIl*Y?QQmOa/Z@nSMC(m`LTZ&
%1eEk%pB1@9C=C@?,5`@nP[FWG!XU-S7>$J[5i7NtB9:KT=1i]t1Q0I<e#-C&]<@f`4IPULiGNP"f6@@8UBeXOfL_*MrPbs;jOTiU
%lj=^h?SVNC-RWiJa`a:%guKp\hW35U9]#`<omnt6.L=[^IlQ$<AS09.SuNT#5PrRedr!l7?ej?7h!&V3HM0B-6tpc&LI2X6QlP_'
%R<lhq@,ka\V]dTMGqQ,iNQLM$Ab%C$lY"P/UtSMU?p=;]WTbr&bJC(/dq@lkdl2a)oJpu.:FRK,liu?Gon#1;mf3%RWG1OFmq*s%
%lo]c4)>Qoa$^[;f&Zj7ej2J;OLMMmg97PK\I<VsR')1AGYph"-!3.%"?$'<'L2OmQ[0t.IIgJ?LNU7=iI;Fu>Z'2j?Z.jHW2!dBF
%%IOu/i6LpV6&#t92P51<hE/\gDHkb'HO2pG=mY[ih-uH>Z!Y-]Y@$)ZJA'lkNU7JYjSHUJDR[F9Ln@?<]+Kf%_kpiq^2@nni)`SB
%5OCR>KZ2kDqI'YT[2.gTOI(7;m%]%VS*cb2k+DYNc1CkYk1R#/+D%Jk<1*?r+Zsch5^K%`Y?kQ[q;Am\qiDc]^V'BOanJ-2W$!8&
%rt'h^9+/[Dam8X-rbKGm5P\U"<L=S,a*F4c.tR\-=HFljjZro9e29S?.ZKNJq>f]0!hu>6$8nbSTa/p/<pN`X:QfCe8&iZ#dU0aY
%%D&.l+C?;mWe-e+L,-mY;Of"K6&F)d:Qr^b/d0?ojB+kK$8r\.oPIT%8g53GmufG(bDN$Z,`P3[8PWq3)[?ZY##-V4;B-k`fhQPY
%"0u<SKWV?OJ?rKD85LLUYOjVa:mU.'(pjsH"K_2S+0`.RKB+:#8P!I7M%L;n>XcBjjM:lB`p3bJ?TGX^1qj#jiCQ:4-I%Xh^ko1'
%Als&Z7C[AXOpN7$Hr3_pjB"6Q-neIB],Enh"P7%DauMJ)$k(uJ8Q[f9%bWlp9Yc#3K'jp_0_r+Am[&Cs5X`<hh+L"jndm@#._MD%
%:/F?nOQjjgQWkOFm!eTL"&bSJ(X3)Y,bYVO0*kcR'3V2sSH[XV=f7?3fYq`DorosG,U,UDoQ!1>LYSK?fkt,&1VuLt"W!L]+0[\%
%iJipD[TdASCmBW+*#G53-oVu7K!YZORk=K%>K.=qZ39fcnLVcOC-geg8FFd>DBj_-P!jAEo/p.CPKXAb*1-ml=[oV<af:OkhU^9\
%U_HS-iX'j0OnS.B9najE6r:Up9&q#YG3`.:m=e=ZVgc(;U6?An"hPS1_?-B/QBL!Q3iE84WIb1l0HQ^TIW\#(mNeo#;MQLLOUTtM
%MR72-Vds?@P,)E=[me9)L?kj6+XPqG3]=t`g4unBcO93%P>27Vgtqep**j_CIL"HSGq*X;,<:`Q5fEOCc`lJ1#(fgA;[s71V*b8D
%QL*ZUmif%4QktngXN-9OTE2&8-pbo^H5Xm+<U^W_nt`sT-K%l>.r3^"j[q'-=>\%>qkl]B?%\9OWiYe5;E:74(8aN()kS^t8BD=F
%N9aHaO'p$"4(XXY$1LFVq$/o>"a9>r6fF\)eIL?lC'H+iTYh1?G3+EA!/S(DPKQ'rlLKS\nSlQrO%^k\$?aQ3k<X^EMUf"6.bosk
%F338F5gDs2iN.&MDRdbiJ[EMo5f_6dG]HXhr#Jb\.e"]dK9!ogg6H6>*#m8ff/*)c3/F%[VEtdchf,r;=#R(Em9#ff+XncH6P:qd
%rG:-SF]e5+a_t.@:"<'?1rf\.h-?)NKuF[%o6&`Qhrh41YdIIPYg-jU]PsVHMhhO+W&s5Q=2b5^_m:HN!UobR^?E99<::3>Ln1mr
%qD!dt"Gl.1`(3ER_a5Zl#uZVu)]6?&?8>*UU&43]pF,L$)Gan6%gViNhRbue-\mP&E8RB6#p/%04*[lA$u2!rR;oI`FdsH"Z"qo<
%SEINtoM9Xm<NDngA,f*"!!Bn!=:+EIY=K-qG]t\(OQ%RiANf!7MEsk(mniW+QWtEhqIIu>l5q>J5V&f#&!Q3)<h_VHoeGYGZ@Zp5
%q&UP&62IZa<Yr`,8QFIF6>WU.p40RWhltR%?S9#&[lN2D$UWQtZd]T*\K/U$]RTaQj-c)M-Wa*U9!E+jgT'j)&0DV+pP5.GpPFrk
%cL[!KaFJufc$*0?K=gspYa1L7'X`r)Y`6VuO=JekTp,KZlr9Ig:`-F?*%,I"<o0;i`3+T#\-o#:P(8c1^]g6-_sL&1*PClcCmHI]
%$KneFFu5_/:r7s>QH5a\=>;WM;<JQG?]GD:[ZdI^AVcW8Tt2cUDd.rH%uX_K[t[X)U2',LB_ld2VdR&-\%j96($qO-7Vmlu]7[&n
%l39>1IbsN1T[r<=][dgtq)3?FM1APa#?XC85!U\G"M@Ih)N#",SC_KEr[1bkP"\o0Yd=n0&'@EF4@NI=^p:_F$jj.aeG4br=-NN_
%$5ETWqk.mX]UtbkKXW9%J-@t8q/;EB&\m-fqjI16!l9G3Cl]/4pUu*rg$nLpp>$b??(Bm.\uV*7jZM[XmJA]\$DADaLkuEB7mt#O
%%Veihi702>L!,cP=Rh$9X]DX.YX61AQe2LeYFG6*8q*Jc@d1H[3<9dHcs4Jk*!c;r;'r6B4fin<oA'e"Iq>AT.6Jhi:Vp@T=*j<E
%6EGGNUS!0=[+]Z_^(UXqWT/^>:XuAApsQd\GSS3_7'iLo]6"cn>U)u4e90e0)"0na(Um$hgkC@@6050>aoL"FLI(%VC;U9)9B48l
%Y#.]'VRR7V=AF\Vd:+Z2NlL;d[2eo1Ts`pf?Y67"i=Ur.38c%_'rUj:GYnQo/`hCbNV@rlb*sqDJ[G!&r<)<5I;kH')>P/-c9'Z&
%)1/ToaS-B?Dr'Nb@$P<[G<%;6_FZQMEZStTDQ0k*NpAj09C?>m]L;glH8)iP7<"b*GX;$>cIdY[O[U7XgN[MHKK`dXnAT5bE3RK2
%i?tN,#eVOC_fFb`/bP^&.[_-R%1ZLeD8^4B'>/!+hsq#&oYLis!@\CU*P"h'$aRJYAHJXfF+L8Tc]"/9YK$Xq\I`c(N<;qAVVH2%
%V.)$EgnR,&`5-+A:TSV_+I^qg"p\32m]HeFCNe8??`,GX81pMY6nsQM0HR6)"lO'h5G4fC-cf;;n4AJE;=DbY282s'bQ7N/6Lh.u
%1'kD8p4.4+:.\?cF$NKo2lZDs%[E0H>co2g<iR%B&2fj=6Ul7,.l5;#d[h)Jh&BagbUTab#+X;]hk;pa"e"d`X0ufV$$*-d+rBg1
%+oQhtO^OH]nm)Y6f#TN47+1Nq6HX/H&2+K2"Js%TGne&7MAghlf/t/EIWDr7>\hF^#PkWq%a/^gl[5A9O"<[.)s#,&$=OXoq-]@M
%!)K2R.W&plI"^)aiUqO^P4-4.7n898+]I=#34me2.7iTn;K]/8l)!E*;crs&'lchf&nl>YjnC9d(cK8ljZ&<"=d?R>XX5\,X#Cb)
%(YPD^LZH9F$c`YO]?hG;eVG#$O=u`[(*0+N^Nj%Xf.A<."ecR_UAVP.@4s8,h::Ee/Kh*A>RS:I-bh#JrgK#=N_+sr\],m^3J5<s
%'/\f<%ll!$TuA8Ze=`V@[BZZ@J/X[]:ns0p>#[7BNCkNGl<P!^/65C9qBHf9iVrPHUIcifrqK&'r_2hH8,da3*@VL2$#AW'CT^%B
%.m7pPTS6M^PfG>l;Qp!WVmK>oE1CRT&n0?r(236n"D`9Vr"="3"BetT6$[GiKIGs+AQop0:66ca&u5_D),aD2#[s=d,$IN*ZFYUB
%)PKo&'ESo;=8n[`'`oT/.V[3s)(!/#?259oXml(h9:82"<oWSAk^Goj%It^]kquQ)U)VLJVdlaR7=s.4?]IW7fAJt!8+dc`]MF!%
%4u<Qg6*#kRn2g/gBG*R^S-0Cr,QV/Q)B6hT<o!+N4-'#bpOW3f5Z)=LE$lDHaGC',Eah=dS61lG.5#G8M$42Lb0pBjD.eUp](/WH
%gd!\`X$l]Do+D\KP"=oa9=VD]^s5SDcmmEFPX7a`QKh[mfXOk!L(Bu0Sa2Br)Yk1`Y![eAT'dcb3aAQ%@(?aZEN2B:SEUS&LXJ>L
%7#-RXcf*U#'0FM`6-aOBE2\o(U#n?\aE\7%Eh:1VV)WXi6\(WRO<CGX,fhDD$!IqPb)#DSL(%.EiiMW:*FmV)Zl4)u3@3Z*<+2#^
%.$<FeM<k[IPp>e>m]L6/lo^-G3)(SP.pk648J4c@#-cT&,m.81,S(9]9gD[6AuA`Va=.l2Ef*;9RUkAfE-@C5JsUR0<"5FiAJ(SI
%=X5DY#@$P-Vcc!Y+@%tBB/ke@!:c.-,/(#BcH,Lk'[+QgO>AX)jGXMFLh%qP:-&\t2URrC/hMV*g"R0H.ge6&N".6*[$*G=(t;=;
%8<B#oS<fBdD`Dm>SZ%[D'`DriX.?3J:ICG3iQk5aIdmp%Z-./CS6X[ka`)!%J;Z;0gmJ\7FU5F-(pYVZXhc"q/Z$?6Q0mptGL2AI
%RaU./d<8-;5M2R3<uQRL$I'2gMuTTQXR5'Z-dm`CNMBH5<f<Cc_'R6@G1OB9@6*p2&@_7!SEQJqG,2Us&_CB,ViH"OJ>J9B[Ca4f
%TbFs2R."8tJ?(#pLF&NsK@`/8,]r=jB-UC=9K>*-(>LmjgE+eoDV9/B6l22$Xa!q"L'TpnqdtuBE'?5(>B0Lo!NPk[:1eM:Lc_$D
%#q>9^'dpQ%U%aFj=R3=E3Le!eeF%,gf6VQePdp.F%Q[[u-'WYP[H3FYk,UR<`4=8IV8Kk:/Pj:]s#maYJ`UV(/7I38RV2_C^)cq;
%Mkd=ToM59-b'!c\QqiCBe<g@N_nqq`!!DdQ990L"b$fPuPhJC"i`.QrJAt'5@FlJC8OMufZiSHM8qJZLN-kf7c'nUA4sa*S[55]P
%:MYdr0`Wab$soNK6eGGIQNu<n5fn2*EC0t2T,-pb2$P6`]"2098J*\_l(Q'],q1$+:`\<L=+j7:%b+,E7#$pSnK,9V8_FdAbDkoY
%Xb1s_34AH!p3(D1D^G-%L2%aa6$GoALj)A;/7N_Y5mk\D\7;q0OQ!Qm/bL;7+ZO/g$C6_2,INh_!@N8CYam<f\JXP@XIjWL(]1Vh
%HjUs[[@@F`C-!+8G>qSk(XS8::.mI;9EfGY$sc(DeGtL=4^nO?=hsci[UarVg>_%!a]Xcmi7eB=&jV6jC:rGJ^(-55"G)d?J0k/#
%!A*/))29;98&G%-.QG6@\[:h!fRAYGBl)[B"^;g.mX#H3*E$AD^/qMWp-YWKA,C7qG0i-fa0[EO_(!7l)M?JVJ.Pp70I7*r!SV>@
%_;/po+@UU)'WPChc4Q!JaYnqm<g$Pr9Hk"lG`m0$&Db`U"4o(?9H)hL]+%T+':@1FGmV4DD1L>q!/Ul7[N'Muc+:RHa\<!O+kQC:
%Bc<Ctq#mW#YN@kKdo^Z3Je;k1%c5uqfGeU53P2r*5HpZm1Z0kb_2".(!FiO)h>%T\TO@R+r^^I#%6fe_=UkAs@Ta0>P[eD:ro@#j
%$XM?dEcXWmm]%u(C5XGr98`5Z43N+EO:rc7l-L%cr8H'Z+T*t$_BNc.4L!\(eCQJrF2e]c4'0:kQ7X]J/_%\Hj[pdh\J"m<Dn-M;
%HXOAs$$*2%G<T-77"Q%]hl=Hp=(r1)p&+:;3]#5i$h$$Z>`0#oFZpr2>'L:3j]VecaVN_pUraC/23ide:m*E=B56U5"==Xa@+GM1
%fOS2=\B]8h7YHr'&Rj9FNJE[r&YW`M33V47b(rlW1*SR2\c=T_@t)XmPS)m$OA(2jC_%pc)%imOTfH_/<^qb*PnDu?qeE[SN!NMU
%'^ru!m?-7N)1gTO=jLnugrA![^<C_3<fcg]c?b+hVN-,G,g!qal7L+&ZM"P0lm.Vp/NVqM3M*=D1Ofp/n.]?aBd43*dhDHERa7$f
%g.6la_ZCU/fkDZCef:o.0H8@3J90j\dnVqqE6\]pL85lZ32;7q7LD&\Ulu(r`F^*sVO&@L<Du^%,pDR(pMcWON(`Y4iF9S_;ICA]
%SMc-R$gK[XAZ:HkVU2QjR>LF]aGYhSbaBS[T:*G7g[fYDS)Xr02oihE-Rlir,.<$Q*Rqu5=8kX5i(*e6@qW5p=R2)6Nia\JrW.As
%g'+kJg^m7o:X"u]&mXgO^cnppJFf:4Jp=q+;d-u!"a"$N;hWbb57Vq/l&/AT=O6n(:Tha[E0["Z??Zdn%5iRV1J=A2d*eg3h"aki
%[V''-bFe@Pnu$XtP09Ko6F6>p_@qE-e^clM0-"\/?r8]Pao00h1"OQu\?AOA5P^@A^WgBjGBC'`F2%Z')h+K*M'L2HHW7X7kg_8)
%,X&BI]S%BV]VJ@b`DGBH*W0BbE"DW(1d2A[_',DilK'\X-V',j.(+d$,MqqA7r64_2dg-EBK/R)m2c,cGWQCD3#qbaDYV1qc2-u5
%2WtB))V$%HA=qAQ[H5>BekID=XST>:>sGi_?I5c0)!'q9(h,/W7lBUS`*Tdq7f8N`h0h)+d0`Y!X>:^Sl"k=Bi(#Zj?6p<?Lp&AC
%Q1&]mGJVk31D]'9FDNVh-T143]O%qi`qu$5SW5:8f%GS+4IqN"(&Y.FSaQ)UZVF$gV.Q9XfPB(*C%1\82RliXK/005Aq]'S@1_S.
%*BI:\)odeYEsie&(baI2+^DZg]_GP;XEPKXKm?nIEFI]?]/=G4*7qQq5ohS<bJCpF]hA7^pb(s=\AurKrou5n#sV23d%HRUK[7<+
%Z0a(8V5,9KG;n9=0[1+=[q+%Wamk8!(scQ#$%I.SqM'=UnK%9jW4^s,jQ>P;2qqeu<0dc_SsSdO"iZNClFtbE1u1VLUI-QaBfXb`
%SPEiY'\13)bWbnS:ZnXikI51RWh:_=!D@)J,33A`X$f4\Z?'suGX`-<9LQ4iGZ@$XRJrFC3C.on!<u_83,B)h&0rRGreK$L:ARA3
%H3"KF%R]smIgSqNIe4cFFItUfh,jE3L("gNcpCTJ'^Z`(8MH7J'BpjVQK[`BTt49()O)62[h1G9S$Z9[DY*QLIerK9S`B]d:fNps
%.RX4JdN'aW&j6o@de@MP'C<Z[-OuZ+;=/Kjr.gLP,6SCHk7B!Xd/=$?n+p]El@Q5t\lfJ1SN%UMn2BPOD_s)lJcJ+t,`q)KTbJ0:
%A<>]3&m?Qoh94I_Qf679aaG@qG/1N,nTH#XmXY_c1``$Trdq5[Fs$0jdMFi5^<o2D/T/VF$O'E6O;'c!KZ!oGKuTh\hDZ!kj]F8.
%'Td&:Yq1a/HZX:>33%pFVW%Lb:=DK,F2-%+E6lWgXE"jJ,'6@$)o^Top4:)HKQp@'"4aA'T`RLcVia'+;_HXO@+>RZ/(-a;X*[Tg
%AKNh*NjLe0AasT1g'49<*SK7K&Y_-9ao10sah6Line#rc*ia5,IN#E>dIetO"^OGS5?!'!H[WPV->$5+_8V!dE+*,Ef.SUl,H#_4
%^,#F']RGJ(>=:SNItPe5h!#fbLP,Y\!F@"mVZ9#;';Um];\OSgiLbc+e&cAC$@._+"APi7!I,mL5bR$m\gD'CM(irq*=]1`+V92F
%LFCZmBHXK,U3R7Fl[>B$Ka;!^XCCI%V_nOSE*=HeQ+H1_=&IX5O]hn@Q-?Dc%V[?2ct;TG%GI4QW>CQY>]TU)XjL8n#g#Yp24-1-
%`Vpbj?:I?BD[Gt+4$mMG&`'L$rp'rK9BeqtaBA_$`d'\1YLjona`WT"'dRmT\NG.oJ&Cp0J5pCumLFiV>0_=cml_L.3ntrHloMb.
%\A2b[EmGjFZ;B>_$ZmO<$:1[<-S-r2M'-"\*iQG\1UT98-C!<TIX=le+)l+3&jKEM]I1d^WD'I)lg0M-9GGW[opX#AP+HRB05X4n
%fbimd%.P_OkoIs]Q8Wf_n/^6Fqq_dBK@ZboO-LT:PEhhFf.CfH(NSkN)5p@e$I4_aKeQSB`Rm=N&20Mq"D$icH(\0U]n,n"iC75Z
%l+[qi.`E6FV`N%RIUtt\6t''kg:M2Z?l_7**U/1+5!.MI?XT^pC7i3-VuJ+MR>D?:B2kG(Cu(T\c*!`n$Q>\pejmc<4KGdB32s9c
%l9&o?VZ%::@A`F:9bFK3K!0>shNrrP)s2`H5_\(3Y(<\p&_tbY]3isjN58@Fn>>F@M>jOL`1rRqdQ?2D?o2;_l;Q*@k4uI+N_:JJ
%NcT(5#mhVBZd177=<e2cc3L\&J_lUb8qqq]EYuFGec$5^-E>AIJ9]gsh7[H]97G$s3?spu\hEbrDasD_JKa<(fOrT+(3Y9%Wh1h&
%MJ[W479j;]V0(Eu]79a,]#"6neq7\n)o77#MYej+p0:8ok3`<b*k4ibdL1Z9q"WdIW=5aA8mjsE3K7b:b6nsaAOQ=5@2CieJr><R
%^06,H'Hr1X`.MdK!C;N%!E/HJ^tB9:7m_=08qNu&rR5sW2%$RjrJS0N)V&n'T66M:\?Kp(LTlXMH"p6+kW@p7P7pB8l>$B9e>fWj
%omea!F[nf=,okl3!EdhHEKG5$"jRcq!p?e`@_`@h2aGOLcB.V("YRsq6G:rX!u3W5Q/+A5V'j<\8R)EiH.<8$QQ:H/EW?/'aYA*.
%k"soU&%fuj,PShp0Sj?"K7-gOpTNX2]%>c'i+8>.J;oF.Db,`8!]s!cW3,iVN>CdJ&>l52imiJiMZKJSlY>ef]4g('c;"ntAQi>h
%(Zeeo1@$X&-kQq_cB/6lF\b`R733:AhEfh7.,bdr?@$RQ[#YJ(AP3C^LP1?_UdR8Z96Or1idEpkUJ/7CnEf!1A3YBe_R[YgNo'%'
%cE\LM72.N,L5dj[s-`VNT*J=`DBZi[F@+kORlD6BoYa1#qO+86TYEi_]UT;669r&s0R&VK*Zg":QXP2Pd$f6FoPbP-&dXP,&QoB%
%YYpX7L0"$u?daj072@)[6Ei\9@"m<*m4E<FC,c2a<=Artjd4k>d;^I%RKHrqhDY"[VOQN\$M9#nBgmSmJa=qPP`@U90$:oE;E2WP
%6cgf(Yak@s,*5<5EhR12_$*R@8QZ!d6eD"P_(oT>`]HC#mhS@WU1e"uL4r'9?<u5Q=aF1uO"M!%3&5uf^Z[RY%Sdt?SU)0cQ^dZ>
%M&\07&l?BhY;R)p"mHO-.tor[m8rgcU&%4=_#UIl#MCUOcul(qD;dt"S<D"s^kk`_QsE]e(FXPRDr;)T;[p5P<fWrCeCBCZ1t"73
%@<dUIJI8Ilags/_`R/_#EbCJJ!dB^4p^$BUG3,`7S9P<\&'kG2H7:WMUl8kG,3Vr.mF$GP.gAnBf>70@lDh\Na`ZN$.,#Y4pNW4c
%,n8WJYf!l2gS1Iin<?FCS!??>:_+/l6i=CSRN=`$h`%oK`0"M7\02Q]#:/\rNM7G1FeZ"C;-YR<%dT(5l5Xdm=^u7rgus;fqdRI6
%V2&SqMiH.)kr<'&X!#Jbj?@?XCe4"0GnICgP@M?S:Sgfme6a?Ur5TKLCl[CDaR^>_H%$t^c`]juq=R9@^E/6pf-Bh`3[C;(:Y>8s
%&sL.4RsKNH'$maOiqZ$ZMNl$[/KV8d'oG3fiE5.Hg0:56Kh(,j:?[Rb$;t1)3>(qjP_:I2gEUND1]@[M;.%S:H2u4eKGP5s?[L:A
%M!bT.rUN@(h@YnE+X1qOH8L`Yb^W9c;ULrsIb+Z7s*7"jSj8&`:9068`;1AajXY\2e&"Pgl]djZ\]AoT#Zg&C+Cl<\LFqGG3r1'F
%LI4K(0m"^0/r5;fidgG"Mdd<p+=DhGKnq3N+sQ;#mtg0oXc#[^P<ahg'F:Hrl/:I\&_??*7cC!)cpD$%7rXm'oaY8T8csZL5,*T8
%Xb^Tc*1S>Ljq&+.<$Ic-Mn,:5])sX6jrIX-XFN@p77VH.>=+UFPYORg%cr6_+_jgdThn6I'^*:c5'_5#3);pVk=OmsTB-X'H%8;j
%=lMQ#bV9dBG:<=RZh(^Bq?IQ6NMp>op./X^&DX<%79]W=CdRY8bcDM>COF2HN=Q'3#GH?\nt#I[!A#X&8Bj/JB'Y`0"ec'[,h@Wq
%.7"#l.g87J,nR'#f!(<-&lq?@VNc45U[PT91n`VCd=cWM5n3'AKqdGa9S=Th-k_g)s+OOIctGu@NmU7KE(&cmo*?j-s*7?!Jr)iV
%r87[F+BV#D>nGP::<+OJ2;!8b[0\Z9XOD095c!(aL=355I?cXRp)6fsb+Em"/L$(T6-$BH#`aLPaOZ^oQ+QKd:M?CSac/icO3r+>
%BU4nQCKM'"g9aBkD6B!D#`&.J6Uh]AK:8P\rCIP1;NC@un/;Jh:nl`K7W_,sH,o"j_J0K'?@RsXTe(LlLl^P9G\,JEJnZX>('hTD
%c6>U9m#kV;T6HY22;;RL8H91a-.`^3Pf0-^c<fctQFIUXQdoQr^_7D-eSW<'-7GBh.=d'f\b@+T_#YV1GK4EhI0q%RV6R8GAs^FJ
%/YJ1B"VeUDXoS^iSLcc&Bj:Z,go0Ai-U0eB_V,GrIJ.S]leAfX2a.TICQ34ZJ$`%E4^P+jm`E_^MjaP=:l@Hc@4?YQYdqtj:O[\@
%U/@Q]lFZedq!8(qT09P/%s?\h[b^BG6J2tqcTY[t/uLpIlIC6?_'^klIV;bS:)qpb!&nAnfsg\0E62o]!<PoFrE^sR$"TcrqB`C6
%*s<p*l^:Vo+Z%%Q!g<UO@ctE7A4Ak?b`FiR=G>Br@MG>'X<7C\?,)EY7uQK3f1>&Is5*?.36IC%._spr]6>r0lA/-O,;Bs#i=Z*7
%BR%H[CfjKRb`&oD_h0FY'M*16MM/rB^pImWL.oIr+;'h,*_C/NR]XW/RAo@FUF"mdQ!d/h&4p-F0*W'@nGWM!2hX'01!-EA#R$*=
%AjHES5D3$3U'7U%/1HrIggS<hQ4\tG$6p@7@UtV<o<;9fX05I2G]T1g`):NL32U-#*>3Bm^[rIWCRhu9O[[oX3Rm#P`ia;TF2=#V
%!m0HUN01%5%;Y*T-$oebW34tA%u,P=oZ&d9018Mk\>i<\2b`s>oD9k(`eN5cc0Gc!'6SMWe(/C*k-T8SJGF!`':5i-1X'Eg,^npL
%8J/.i/0!tS9*h*3E*eY"R1ob(D!n5JA'SCnn%eC=OD!Q1;cAP*2-OUgp<-ZCj@@5gF68ndPIL2i6r/uP&]*CmFN,V\cB)'1G/ub"
%fG>N;c?:LhGX$LdjE,HT0/:*LM35O_-U)5YADV4Vg7f[#IdP(pXdp<Ag<O^tVm\YkQquJ-(5Q7DM"-GJRD^Fm^"dT1cKjLQkpP)c
%raTr1]CV&n_r%`tk@d/?k`S0-7%E;!Z)R"2(>lV`Xb"a6#9;''PK7R#mZ30CN7/i6fFXs@*]V^!Se*p9'-fa=51#ab4X0I%]<a5s
%`J<Ku?k?pJmk_(1Ngh+S0lk1Dj1]ft'-elP@ZA^p*\DBnW$_Y7o;)/M(hM/D<[N/k4R:'&$;<SYc>`o/gYk<%MPQZaem+W*L9Paa
%SE42hi69-Aj&mCDB%BcWc(<1'V!B93iOi6":#%m_?2Tq47`CsU?/c#C<Y#i4of4NNKb-2)B1)S^T$?+*4';qK0oDGG2G5-[?/k\e
%Cpr9X]M2ehhO5<rM$><3)<Zi&G"&kmfR7sFA;u9s'-l2b`$e>+0T#f4L.AnBbjJ!%AO]P;`;1'nh^A&5(-bfg8VefMOss,,TDd"#
%@R&X;Mj6Ihdtj:\qh'$ub=mlc=q[U9Qc)E/1U*)']7EOQ/2<=N9'ea=VS?1ED-iW-!_Qo9kRL91D_>p;Ogi+Oo&c?0hH[/',&`$P
%j=ML2]QpB:\'2q/f^,H=_+,tArkbB62Rj)3[e''06:F#n9\kEtd?:g.T:Y\1qj)Kg"93W9K5@uGLW8Hfh0$It;+#Bgd\,g!Ao0Bs
%'O3kb$5M1V.4W:<nRJ5VEkFa8_8"c2H$`&#CdC7W)l9:L.0$C.Z1X[IYmXUnrJnCU;rjfi?*$0Z!e#%ME/^N4LRU>7?T]KtmGnId
%bRFqmVD?0eP'qAPOD)7m#sVBT^[3J<h^U@6kuQ(AAl"heWA[:Wo*,!Kh!"l_D_WV7?U#r;!SX_L^,L3/%ebmmK9@E6g*K\rLCpuq
%U)!d3*a^%ViVog%)`U]tk2oC[2s9R4cQ"jcdAVSVqN_*5aCXGe1d-tMn:NNPE&TP.pWP)^k0/g'4`SQZR?U:MHD-[*OfQm:BmM!%
%i!3o?;T\X^q<YEUb[(6#EsM_]JL6bR4SXl3@`E$FM<pFuS3:t!./pbUo$+^\^M3,E[:]bnCS^j4:"1]%mDo7aF/Pn3qm@BZ7s2Jp
%(K0#YCkrq4(kXPf#7>f!e@L%LoWoVr3SdLjqXpOs[YZ*+0fQ1fQitPW?Ek"Nea,SOjOihN#J3poh.S`h6Sjqq2>lNc`@CN?2>"k,
%nTJ6[nb0jXkXSZ,(AiRj5<7M+4&UMfi4_T\eIU<*+59&AYB@R1IuOIjCXtTe%sp2b0u@XGYHZ=I2!/W!'+5l`]s$&n%8\"EZTrB/
%%ib/c=Im.8a6uV[D-SaH#>I\VF]+^VH`Wslph$VQ_V=,.p=p_@$hck2Dnhsjb-SoJmCYBQoetKpJo-)+TtOj+1s=[+A9QWIDRRdG
%NRfb%b+-S\8+mRE@7^@M(1DW*&b:2(fRo?m<hp\l%jTT7YuiiT!lD..Ie#-MM"9^>!hHp$'+)=^#>6Qc6c;]VW"?)(_RW`A5Ps%m
%ME[>pT>.F&Fa`FTE:9uqRdd$4PR.(&6glOfm*c#mQV9X@D?`>bS,ZBUC("L]T4-)pVs.X'@fI@sW6]n@Dq1a@c*U>.fj'2n8ShYb
%ccfKm.5Fpf68Fg:[,-`upUifo'UtapjHP[t]1<hL2eu-&"&V]YdR.6YkX5R_4u9Ddb+G.SW\=nu8d@^@#`?J\`'4A>(8\mr/j40T
%Tm]F[NMJsVT6\AR0$04*mdFGM%tJ@iG,JSUS^P39L,Kup@RAYa)j2<kc\hD3G%*Yd#!4R)K'`\6X9l=6rNREr:@,o&?p!`il[YNC
%V(t-c($g>iR'aVOOtG8`g.B(^oBX>XU5ZLo%SSoj44P6Y:cV+KU7<Ye8lp,W37]p5$ghWNlprOkZGGmlcB?m74#+l[C6L_l#]%d\
%8W8i4^a)hc%'i_:;57tbFc_JKla%V![+S35nmlVrA`3W`-RtdH6W$8$M)un2VG%7W5+5<(*[N6KU?!dYb0A$:lG\<oYO@.Cf6:ij
%-'9%0U/F2aBqgAV?R5=j7QF_A5t!Oal7SVE[;AKOT',,q-@1Ur7]g\DUP,AW-MISam!;o+4j+M6DF]PG1i$]"bt5#0#GOo!`2Er$
%Zg3!d"neQ]m)%lrmb6aohor5Jh;+"\U(X4r>DZ3\rYoIqXYaLJLt]'\2!:8<[2'/=R.P.>ClXHTk<$+ZmDY(1&u.)J@AQf_<uG`M
%Sf%-K:Q/2[r'D`)hnodL4l?31W@d!@UMMT]"(o7&rBfq>l?c[GpVa"Vh._=0ZZj0\5iMl?pG0@`\4&^A"9"F_0?pf;`c&0;o!D3*
%h\rmu]\c&`:]+8FZSq>K#L#!S!OL)AM=K>6g0iVm^)q_b'LWiA:.*Aal;T$f6F>TUcp%"q<m9:=;nJRU>+W=H3sdWY,4Cc4XG?^H
%<_Q`Tg<)KO7I)F!c#]a+;FbbnOS+9N_N(4M[n[d>4uga.]#7N'*U*g.:#^LUFaWQg:MS>+02m514+kg^]MfmmD'cq7RC9s\r=*%S
%>^L^1qVI##23=EuI@@(]HFA$3VNdI*O-s$i^J#VhZc/JfKMbfJ3']ti7dZV7>c77&+4;-#(j0%)dKV/)68bfqE6K7l=jY2pg93T_
%1[D#(.SHTOPP417F.jtKoEM4b2qh//qFOJ]8SH"7kuR+jf<*$V)Ji%mVQYk84U#$<(^j"G[[VqI-W;k<[Q^2/ZkR)$g'>h?N5ETc
%M6^H^0X;4+%d`-;Y3RJ]PdUSFmOnpP7+&$h*C?G8W/ZM=R4##e%dgFeTH:C_LX2acZ6PGmI)>a0-FMRcdn-.t^7?t7Q@+a9hLm%k
%mO"DBY2af([P>0*S_3Y>h9;'eFCJ%sG.,tr'>'r%-Iu_VC"M\uS(L9/p=",FSk=RhGn\rUd_DcP2mL+g)i<Br'?e.hlg<8k=CO]l
%0>Jl#`k-@?(0U#alll$H(<HG2ccSE1"d8$WlfTECgT@*Fdm&b0b)9b(2R-S3SPF%-M$7rVm]hVfYoc=V[nMHU>,`H=O%h!p[X2h^
%r=@U,='KK-;f*!0Oi]15Ys>JK'lo4,VdZr:Cc\8th."h>XmHmn:+L%ffYmW18V^VhZ0=[(G)K(me$N=q@\qRdo@@F#M5'AaRgF,%
%9u'ClWGOQ&;VLQEl'0V>QVAi)[C^690rs,AF/rX7-C[ad$XGLuIYtSF(*Ia59WYH\ee[W+/NTH,fP]*)+LgPsiJ6$&!SX8(5r-pG
%_OD9o$h[:-C5:-Ecl*jcN9bdTGlo7l92s;B(V@7f.@o&mb'UCTcWpuX/("L1Q"YbB7*u'?8,ADYMf.Q*Bd4839h."8\3kin=d*9(
%D6O;f5(#U0QkQ!qM_l$;c&c/$-HKNL%&r?&Jtdq-&\@A;nppHEd%9a,c]<,Xc3.q-5OsIecguM;<M&*s[<7jl,c.!h6lb+cWF'Fm
%gorY%marGN=OI^NI9bYr]9QiIB?2Z31Rq7lH?oK]3k%<rKuDiarFftbfaQJI&'3R<"-i5ZriNQqZ5MZ;);b!dq/i#Jq'%'5k-TT.
%Z0&D"Sg&Ytl^9W.9sDghA*^!LVtFi125e]\RaWV)c"[-F^H8-+S]'?Sf'b3A?InRRg0QZl#tAf(`8+bN8L!TrZ@2n`p9K-C[T9UD
%2-_.!fc=7e3FRnGcc3pY"LXjNj;)l#en5[Ek9fno[JtoIB9<3t=&(,NBO*W(/9uI$oOb(Fjb16^E#J<9apIg8<1<9YS?SUXN+@or
%i0KX_'"]Zl'*erm9Qt8Cj5@+Ta]XEhMj/UF`YU7ALaFhk/b4ie1nJE;-85bR"=>91?b3'WR_U1<j%IoZ7MD-lBm_q2#&/GgT*B"W
%je)flHkiC\BmcbQ#&/I=V?Ua^Z)@k@>_/mYBj=rF"[$&7Y'KSD?*O0K?0SV>qj\^h3O(2^XGF-r"squ=#njFr/+5A,7UfW<(E%KP
%&t<MnKWDT!'q^t.+u/X^,Xr#eYgoL]_A0bR(EtR`rJQIAI#3t)_U[2+)oC._K8m`t0/0DrN/XR84[[or@*&C#nQ31h6DTF.(`-XN
%7`S(JN/eB[AXkP4/jkSVcB=%/X-Lo3IQai<[19BH!*9T"6Si5?,`b^KG`&SsflC\dSPQ?[EG!3jP)7F@1ZQX"aRl1sN)%Zdc'c;@
%o!pcco80sk26k9_$D*B`,-f14P4'SLOt][j:?@nkiY^?+CITT<*`uq>o?>dQR?7i(@\r0jep*t7%*/@ckgZ4A8ZjF1Ne#>EM)7!Y
%%4&psY`Z'ZM8Z=%=m#q?`(6jjZ#Ylj_=B8I;GJ/KfdVc#oNk(Ir"b-OgEJ@)ch2+Y*LGG:H=eGjSf#RY-T7$me-n5l'-iDlYfXV5
%`5kT@)%?&R\>hSF3c'Hq;r"a2M46E)eDcS7CorZ;+.F+XA,SlkT%Cp%n`i%Vot)P?ITOkFm@"mf;Z.Z9c;;83X$b5_n!RD(8["M.
%a2t73M;CgsfTFG5-@0Y$2N/\)S:68sq;*Gr,N%0LB&l$N%C>Sq/S6?DZe<R>GIF%[ps'(Cqqd`uB&5V5d]@fAe@9]LWnI)sM%/T@
%?8LRS,9,LEQUU-\8d,#!Q_iI+I!r&e6=OO$"8b`4]m7Jg4(l(qJUb?-;)[UPZ^/'!7k"87oGHT#aNsOuZc[Zl/=uS4?GC"m/>'>W
%%l`(1$M'[DO3@89S?@e3`V]igF-D:[#Dok$@\9/Um8E9u:tZWq$^Q*07(T'AntSP0#pOo'fI'1h/XH?+Q2S-]jntF7J[r5er$h6$
%26\q3=6Pi:rjlG3g)b)Ir`*f2Vf-=D[RXK!j,pe.YLl?\HSc2aeb83/^T-\3mpIgC(])i,AYG,Sa7Y%4['iL'BeB^!a8/eQO#DC[
%[6;Z!*KQ6H"oDtMO7'Qm[RUT"ASmKg/CaCG'_j^1*SLnpg"ILR0m7Dp%JPe7*ZM5^m4fC!G][ILiTH)oc,T:gGdB'G/_.oKjd$+!
%AYkhUYMf`0/^;Z4G2[&J5%)Pmp&j0uNQj4J?c,YL=:Gp.i6AtQYa?bG]ZU/ne2DR]5<2uV:Af&iqdR'+1IV4W(p?4i2Im"YkjLD,
%jFDaIT_%8qkEP\%I_Z0df]J>THnXGcA&-BgZ;Ys(WpEVrPLu_Z-J@SP]qt2(I+ZkQphfJU/u0;,7!C.t45&6b2A)!g<U3dML4$_#
%k="!tg(a-9F]+ZX_=Y)&DDrUn<@1_*koYr1Bf2,%Gkd.VIHnS%:%rl\If=4njnZTBnbo,^7a_IPZuSN87sRFpHe.`lIT9\L+XbaN
%qF^eVTE"<IroWtTk25q5qKMu/hgYRbs8D%TJ,?]6q#,^?j59n-TE"Q(s7&='q:"g3k3r?GO8o*DTDnTrs6u*Lo#H7UjaZ+dl_hMt
%dkC`KcgNMOrUYO=a8Z6n&(q2:s80S.&-)'AJ+N[?&+H*j~>
%AI9_PrivateDataEnd
