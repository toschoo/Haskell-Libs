%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: nodissip.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: RSLab
%%CreationDate: 10/11/2009
%%BoundingBox: 0 0 412 465
%%HiResBoundingBox: 0 0 411.8233 464.3931
%%CropBox: 0 0 411.8233 464.3931
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2009-07-20T05:26:39-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-10-11T17:55:15-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-10-11T17:55:15-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>228</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADkAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qxvzjp1jf3fluG9t0&#xA;uoV1XmIpEZ15CxuhUqoI7/tfD44qpa3Y/lnpYjTWbTSbFHBnV7mKCJAsEkYMjOwVVVZJY1qxpyZV&#xA;6sBiqMsND8k6hbfWbPS7CaHnJEWFtEKSQyNFKjAoCGSRGVgdwRTFVWHyb5RhiSKPRbFY41CIv1aI&#xA;0CigG64q6Lyb5RiUqmi2IUszkfVoju7FmO6+JxVw8m+URK0o0Wx9R1VGb6tFuFJIH2f8o4q03kvy&#xA;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&#xA;V2KuxV2KuxV2KuxV2KuxV//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:5FEB9D6D0F75DE11BE8D92A5F4B461A3</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:6471875FAFB6DE11B4FDDD679613440E</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -464.393 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 464.393 li
411.823 464.393 li
411.823 0 li
cp
clp
[1 0 0 1 0 0 ] concat
1 lw
2 lc
1 lj
3.23931 ml
[] 0 dsh
true sadj
24.1992 284.92 mo
24.6357 285.169 li
25.0718 284.359 li
25.5083 285.107 li
25.9448 285.232 li
26.3188 285.232 li
26.7554 284.359 li
27.1914 284.795 li
27.6279 285.169 li
28.0645 284.795 li
28.5005 285.232 li
28.937 285.232 li
29.3735 285.107 li
29.8096 285.107 li
30.2461 285.169 li
30.6201 285.232 li
31.0566 285.294 li
31.4927 284.858 li
31.9292 284.795 li
32.3657 285.232 li
32.8018 285.045 li
33.2383 284.92 li
33.6748 284.858 li
34.1108 285.294 li
34.5474 285.107 li
34.9214 285.169 li
35.3579 285.169 li
35.7944 285.294 li
36.2305 285.232 li
36.667 284.485 li
37.1035 285.294 li
37.5396 285.232 li
37.9761 285.045 li
38.4126 284.609 li
38.8486 284.92 li
39.2227 285.169 li
39.6592 285.045 li
40.0957 285.169 li
40.5317 285.232 li
40.9683 285.045 li
41.4048 285.232 li
41.8408 284.92 li
42.2773 285.045 li
42.7139 284.92 li
43.1504 285.045 li
43.5244 285.169 li
43.9604 285.169 li
44.397 285.107 li
44.8335 284.546 li
45.2695 284.858 li
45.7061 285.294 li
46.1426 284.795 li
46.5786 284.92 li
47.0151 285.169 li
47.3892 285.045 li
47.8257 284.609 li
48.2622 285.294 li
48.6982 284.983 li
49.1348 285.232 li
49.5713 285.169 li
50.0073 284.609 li
50.4438 284.795 li
50.8804 284.359 li
51.3164 284.734 li
51.6904 284.92 li
52.127 285.045 li
52.5635 285.107 li
52.9995 285.294 li
53.436 285.232 li
53.8726 284.983 li
54.3086 285.232 li
54.7451 285.045 li
55.1816 285.045 li
55.6177 285.232 li
55.9922 284.858 li
56.4282 284.609 li
56.8647 285.107 li
57.3013 285.169 li
57.7373 284.67 li
58.1738 285.107 li
58.6104 284.234 li
59.0464 284.92 li
59.4829 283.673 li
59.9194 285.294 li
60.2935 285.294 li
60.7295 285.232 li
61.166 284.67 li
61.6025 284.67 li
62.0386 284.858 li
62.4751 283.985 li
62.9116 284.67 li
63.3477 285.232 li
63.7842 284.734 li
64.1582 284.734 li
64.5947 285.294 li
65.0313 284.795 li
65.4673 284.609 li
65.9038 284.983 li
66.3403 284.297 li
66.7764 284.858 li
67.2129 284.795 li
67.6494 284.983 li
68.0859 285.107 li
68.4595 284.609 li
68.896 284.048 li
69.3325 284.858 li
69.769 284.421 li
70.2051 285.169 li
70.6416 284.609 li
71.0781 284.297 li
71.5146 284.234 li
71.9512 285.232 li
72.3877 283.673 li
72.7612 284.297 li
73.1973 284.297 li
73.6338 284.609 li
74.0703 283.362 li
74.5068 284.67 li
74.9434 284.858 li
75.3799 284.485 li
75.8159 283.798 li
76.2524 284.421 li
76.689 283.049 li
77.0625 284.11 li
77.499 283.175 li
77.9355 284.048 li
78.3721 284.048 li
78.8086 284.734 li
79.2446 284.485 li
79.6812 283.922 li
80.1177 284.67 li
80.5537 284.92 li
80.9902 284.048 li
81.3643 284.485 li
81.8008 284.421 li
82.2368 284.359 li
82.6733 284.421 li
83.1099 284.359 li
83.5459 284.92 li
83.9824 283.922 li
84.4189 284.048 li
84.855 283.798 li
85.2295 282.988 li
85.6655 283.237 li
86.1021 282.864 li
86.5386 283.736 li
86.9746 284.172 li
87.4111 283.113 li
87.8477 281.991 li
88.2837 282.052 li
88.7202 284.67 li
89.1567 284.048 li
89.5308 283.175 li
89.9673 284.234 li
90.4033 283.486 li
90.8398 282.427 li
91.2759 283.175 li
91.7124 283.736 li
92.1489 281.991 li
92.5854 283.985 li
93.0215 280.931 li
93.458 281.803 li
93.832 284.858 li
94.2686 282.8 li
94.7046 283.362 li
95.1411 283.673 li
95.5776 281.118 li
96.0137 283.612 li
96.4502 282.864 li
96.8867 283.922 li
97.3228 281.928 li
97.7593 280.058 li
98.1333 282.302 li
98.5698 281.055 li
99.0063 282.8 li
99.4424 280.246 li
99.8789 283.612 li
100.315 281.867 li
100.751 280.246 li
101.188 282.052 li
101.625 281.367 li
101.999 282.988 li
102.435 281.118 li
102.871 279.809 li
103.308 281.554 li
103.744 280.557 li
104.18 281.43 li
104.617 281.43 li
105.053 279.185 li
105.489 282.24 li
105.926 281.991 li
106.3 280.121 li
106.736 279.933 li
107.172 278.686 li
107.609 278.936 li
108.045 280.806 li
108.481 279.933 li
108.918 276.628 li
109.354 277.938 li
109.791 280.121 li
110.227 274.323 li
110.601 275.881 li
111.038 276.567 li
111.474 276.754 li
111.91 280.931 li
112.347 280.619 li
112.783 276.504 li
113.219 277.065 li
113.656 274.759 li
114.092 280.806 li
114.528 276.754 li
114.902 275.507 li
115.339 279.684 li
115.775 274.697 li
116.211 275.944 li
116.648 271.892 li
117.084 276.504 li
117.521 272.39 li
117.957 272.39 li
118.394 276.255 li
118.83 273.201 li
119.204 274.01 li
119.64 275.195 li
120.077 273.45 li
120.513 269.335 li
120.949 264.223 li
121.386 271.081 li
121.822 269.149 li
122.258 272.204 li
122.695 269.523 li
123.069 263.974 li
123.505 264.411 li
123.941 264.287 li
124.378 263.663 li
124.814 263.787 li
125.25 263.85 li
125.687 258.301 li
126.124 258.489 li
126.56 262.666 li
126.996 259.423 li
127.37 263.476 li
127.807 257.678 li
128.243 261.605 li
128.679 249.326 li
129.116 252.005 li
129.552 252.068 li
129.988 252.193 li
130.425 250.509 li
130.861 251.507 li
131.297 245.273 li
131.671 239.538 li
132.108 239.351 li
132.544 243.278 li
132.981 235.361 li
133.417 243.029 li
133.854 221.023 li
134.29 226.821 li
134.726 217.345 li
135.163 226.821 li
135.599 223.641 li
135.973 214.54 li
136.409 213.854 li
136.846 217.095 li
137.282 205.189 li
137.718 198.644 li
138.155 194.466 li
138.591 203.88 li
139.027 204.066 li
139.464 195.651 li
139.9 207.621 li
140.274 195.277 li
140.711 211.859 li
141.147 202.072 li
141.583 204.876 li
142.02 215.289 li
142.456 229.875 li
142.893 228.441 li
143.329 227.195 li
143.765 238.602 li
144.139 257.99 li
144.576 251.694 li
145.012 269.086 li
145.448 275.133 li
145.885 278.375 li
146.321 280.431 li
146.757 285.169 li
147.194 284.546 li
147.63 281.367 li
148.066 277.813 li
148.441 275.819 li
148.877 276.13 li
149.313 276.816 li
149.75 270.894 li
150.186 270.022 li
150.623 270.52 li
151.059 266.905 li
151.495 262.977 li
151.932 262.104 li
152.368 258.987 li
152.742 262.353 li
153.179 267.902 li
153.615 263.165 li
154.051 265.72 li
154.487 261.731 li
154.924 261.418 li
155.36 266.281 li
155.797 264.66 li
156.233 262.104 li
156.669 266.468 li
157.043 262.915 li
157.48 267.589 li
157.916 263.476 li
158.353 268.401 li
158.789 266.281 li
159.225 271.019 li
159.662 272.952 li
160.098 268.712 li
160.535 270.333 li
160.908 272.764 li
161.345 276.443 li
161.781 278.125 li
162.218 277.627 li
162.654 277.813 li
163.09 282.052 li
163.526 278.25 li
163.963 283.424 li
164.399 280.619 li
164.836 281.554 li
165.209 284.546 li
165.646 284.734 li
166.083 284.172 li
166.52 284.92 li
166.956 284.67 li
167.393 279.248 li
167.828 276.255 li
168.265 259.735 li
168.701 248.39 li
169.138 236.484 li
169.511 257.99 li
169.947 271.954 li
170.384 283.736 li
170.82 284.421 li
171.257 279.809 li
171.693 279.31 li
172.13 272.328 li
172.565 273.013 li
173.002 270.894 li
173.438 271.331 li
173.813 273.013 li
174.249 269.958 li
174.686 270.271 li
175.122 271.456 li
175.559 269.585 li
175.995 268.774 li
176.432 272.016 li
176.867 272.328 li
177.304 273.013 li
177.74 270.894 li
178.114 277.564 li
178.551 277.065 li
178.986 279.061 li
179.423 282.052 li
179.859 283.736 li
180.296 284.359 li
180.732 271.829 li
181.169 285.045 li
181.604 280.307 li
181.979 277.065 li
182.416 275.695 li
182.853 272.39 li
183.288 275.445 li
183.725 276.068 li
184.161 278.125 li
184.598 277.813 li
185.034 276.068 li
185.471 279.871 li
185.906 275.756 li
186.28 279.31 li
186.717 280.868 li
187.153 281.554 li
187.59 281.118 li
188.025 278.064 li
188.462 280.868 li
188.898 278.936 li
189.335 276.816 li
189.771 277.191 li
190.208 278.437 li
190.582 279.747 li
191.019 280.37 li
191.455 278.064 li
191.892 279.373 li
192.327 276.504 li
192.764 279.809 li
193.2 280.307 li
193.637 280.058 li
194.073 276.379 li
194.51 279.559 li
194.883 279.747 li
195.319 281.055 li
195.756 282.988 li
196.192 279.061 li
196.629 282.302 li
197.064 278.313 li
197.501 281.18 li
197.938 280.868 li
198.374 283.175 li
198.748 281.554 li
199.185 279.996 li
199.621 277.813 li
200.058 280.931 li
200.494 280.431 li
200.931 281.741 li
201.367 282.925 li
201.803 283.549 li
202.239 279.498 li
202.676 280.868 li
203.05 282.177 li
203.485 281.43 li
203.922 281.118 li
204.358 281.991 li
204.795 282.8 li
205.231 282.365 li
205.668 279.622 li
206.104 281.118 li
206.54 282.614 li
206.977 283.3 li
207.352 280.931 li
207.788 282.427 li
208.224 280.37 li
208.66 282.864 li
209.097 282.551 li
209.533 284.11 li
209.97 282.302 li
210.406 279.684 li
210.842 282.925 li
211.278 283.612 li
211.652 281.928 li
212.089 282.177 li
212.524 281.43 li
212.961 281.928 li
213.397 282.302 li
213.834 284.92 li
214.271 283.673 li
214.707 282.864 li
215.144 281.492 li
215.58 281.367 li
215.954 282.365 li
216.391 284.234 li
216.827 283.3 li
217.263 283.237 li
217.699 283.486 li
218.136 282.8 li
218.572 282.8 li
219.009 284.048 li
219.445 283.049 li
219.818 283.175 li
220.255 282.988 li
220.691 283.424 li
221.128 284.485 li
221.564 283.673 li
222.001 282.739 li
222.438 283.113 li
222.874 284.67 li
223.311 283.861 li
223.747 284.795 li
224.12 282.614 li
224.557 284.546 li
224.993 283.798 li
225.43 283.049 li
225.866 282.614 li
226.302 283.175 li
226.738 284.609 li
227.175 284.858 li
227.611 284.92 li
228.048 282.988 li
228.422 284.234 li
228.858 283.362 li
229.295 284.858 li
229.731 282.365 li
230.168 283.985 li
230.604 283.673 li
231.04 283.673 li
231.477 284.11 li
231.913 284.297 li
232.35 283.113 li
232.723 283.798 li
233.159 283.424 li
233.596 284.485 li
234.032 284.92 li
234.469 282.427 li
234.905 284.172 li
235.342 284.734 li
235.777 284.297 li
236.214 283.549 li
236.65 284.359 li
237.025 284.421 li
237.461 284.421 li
237.897 284.795 li
238.334 284.546 li
238.771 284.297 li
239.207 284.67 li
239.644 284.485 li
240.079 284.546 li
240.516 285.232 li
240.89 284.609 li
241.326 284.485 li
241.763 284.11 li
242.198 284.485 li
242.635 283.049 li
243.071 284.234 li
243.508 284.297 li
243.944 283.175 li
244.381 283.985 li
244.816 285.107 li
245.191 285.045 li
245.628 284.858 li
246.064 283.922 li
246.5 285.169 li
246.937 283.985 li
247.373 282.676 li
247.81 283.424 li
248.246 283.549 li
248.683 283.798 li
249.118 284.609 li
249.492 284.172 li
249.929 284.609 li
250.365 285.294 li
250.802 284.795 li
251.237 285.045 li
251.674 284.67 li
252.11 285.107 li
252.547 284.234 li
252.983 284.172 li
253.42 284.297 li
253.794 284.359 li
254.23 284.795 li
254.667 285.232 li
255.104 285.045 li
255.539 285.045 li
255.976 284.983 li
256.412 285.294 li
256.849 284.858 li
257.285 284.421 li
257.658 285.045 li
258.095 284.609 li
258.531 285.232 li
258.968 285.107 li
259.404 285.232 li
259.841 285.232 li
260.276 285.107 li
260.713 284.983 li
261.149 284.858 li
261.586 285.294 li
261.96 284.983 li
262.396 285.294 li
262.833 285.107 li
263.27 285.169 li
263.706 285.294 li
264.143 285.232 li
264.579 284.92 li
265.015 285.294 li
265.451 285.169 li
265.888 284.983 li
266.262 283.736 li
266.697 285.294 li
267.134 285.232 li
267.57 284.546 li
268.007 284.92 li
268.443 285.045 li
268.88 284.359 li
269.315 285.045 li
269.752 284.297 li
270.188 284.421 li
270.563 284.67 li
271 284.734 li
271.436 284.795 li
271.872 285.294 li
272.309 285.232 li
272.745 285.294 li
273.182 284.546 li
273.618 284.234 li
274.054 247.392 li
274.49 249.262 li
274.864 282.489 li
275.301 283.798 li
275.736 285.107 li
276.173 285.232 li
276.609 284.609 li
277.046 285.045 li
277.482 285.045 li
277.919 284.92 li
278.354 284.609 li
278.729 284.048 li
279.166 283.861 li
279.603 284.609 li
280.039 283.362 li
280.475 283.549 li
280.911 284.983 li
281.348 284.485 li
281.784 282.988 li
282.221 285.294 li
282.657 285.232 li
283.03 285.169 li
283.467 283.049 li
283.903 276.567 li
284.34 257.616 li
284.775 225.449 li
285.212 207.122 li
285.648 226.384 li
286.085 239.724 li
286.521 258.177 li
286.958 264.223 li
287.332 275.631 li
287.769 276.318 li
288.205 280.182 li
288.642 282.427 li
289.078 284.546 li
289.514 284.234 li
289.95 285.232 li
290.387 285.294 li
290.823 285.169 li
291.26 285.169 li
291.633 285.294 li
292.069 285.045 li
292.506 284.297 li
292.942 282.864 li
293.379 283.424 li
293.815 284.67 li
294.251 284.92 li
294.688 283.798 li
295.124 282.365 li
295.499 281.18 li
295.935 281.304 li
296.371 281.991 li
296.808 281.367 li
297.244 282.177 li
297.681 281.118 li
298.117 279.123 li
298.553 281.18 li
298.989 281.616 li
299.426 283.736 li
299.8 284.297 li
300.236 281.616 li
300.672 283.362 li
301.108 283.736 li
301.545 279.622 li
301.981 283.736 li
302.418 282.988 li
302.854 285.169 li
303.29 285.169 li
303.727 283.3 li
304.102 284.67 li
304.538 285.107 li
304.975 284.234 li
305.41 284.359 li
305.847 281.18 li
306.283 277.876 li
306.72 271.517 li
307.156 269.21 li
307.593 261.481 li
308.028 255.996 li
308.402 255.434 li
308.839 242.093 li
309.275 217.22 li
309.711 205.5 li
310.147 185.739 li
310.584 194.217 li
311.021 170.902 li
311.457 158.871 li
311.894 166.165 li
312.33 149.707 li
312.704 169.967 li
313.141 168.347 li
313.577 178.072 li
314.014 187.547 li
314.449 176.077 li
314.886 190.914 li
315.322 191.848 li
315.759 194.092 li
316.195 209.989 li
316.568 200.139 li
317.005 202.383 li
317.441 214.726 li
317.878 206.873 li
318.314 210.238 li
318.751 227.755 li
319.188 218.654 li
319.624 219.527 li
320.061 233.054 li
320.497 227.693 li
320.87 236.109 li
321.307 232.681 li
321.743 235.86 li
322.18 235.236 li
322.616 233.802 li
323.053 242.032 li
323.488 238.915 li
323.925 246.957 li
324.361 244.213 li
324.798 245.584 li
325.172 244.462 li
325.608 259.86 li
326.045 252.193 li
326.481 254.935 li
326.918 249.575 li
327.354 251.195 li
327.791 258.239 li
328.227 250.696 li
328.663 261.294 li
329.1 255.808 li
329.474 259.922 li
329.909 259.486 li
330.346 259.237 li
330.782 258.987 li
331.219 256.868 li
331.655 259.174 li
332.092 257.99 li
332.527 260.296 li
332.964 257.242 li
333.4 262.417 li
333.775 263.476 li
334.212 262.603 li
334.647 261.232 li
335.084 261.98 li
335.521 266.094 li
335.957 260.546 li
336.394 262.417 li
336.83 267.964 li
337.266 264.411 li
337.64 265.533 li
338.076 268.152 li
338.513 264.162 li
338.948 265.221 li
339.385 265.221 li
339.821 264.722 li
340.258 266.219 li
340.694 270.644 li
341.131 268.462 li
341.566 268.089 li
341.941 264.099 li
342.378 266.78 li
342.814 266.842 li
343.251 270.77 li
343.687 272.577 li
344.123 272.702 li
344.56 274.136 li
344.996 269.274 li
345.433 273.263 li
345.869 268.899 li
346.242 271.143 li
346.679 272.265 li
347.115 269.46 li
347.552 269.523 li
347.987 271.642 li
348.424 270.333 li
348.86 272.016 li
349.297 274.136 li
349.733 272.265 li
350.17 271.58 li
350.544 278.998 li
350.98 271.456 li
351.417 274.198 li
351.854 269.585 li
352.29 276.816 li
352.726 274.573 li
353.162 272.889 li
353.599 272.265 li
354.035 271.767 li
354.408 274.261 li
354.845 274.385 li
355.281 275.445 li
355.718 275.57 li
356.154 272.079 li
356.591 275.819 li
357.027 273.077 li
357.463 278 li
357.899 270.333 li
358.336 273.388 li
358.711 275.258 li
359.146 277.003 li
359.583 277.191 li
360.02 272.016 li
360.456 270.458 li
360.893 276.193 li
361.329 276.379 li
361.766 277.689 li
362.201 277.689 li
362.638 274.01 li
363.012 276.255 li
363.448 272.889 li
363.884 273.7 li
364.32 276.443 li
364.757 277.003 li
365.193 277.065 li
365.63 273.512 li
366.066 273.825 li
366.502 276.193 li
366.938 278 li
367.313 277.564 li
367.75 274.323 li
368.187 278.437 li
368.622 271.954 li
369.059 276.628 li
369.495 277.315 li
369.932 277.627 li
370.368 275.507 li
370.804 275.944 li
371.24 277.501 li
371.614 274.697 li
372.051 277.377 li
372.487 276.567 li
372.923 275.695 li
373.359 273.7 li
373.796 275.195 li
374.232 276.255 li
374.669 277.689 li
375.105 276.13 li
375.479 278.811 li
375.916 274.883 li
376.353 278.437 li
376.789 274.946 li
377.225 278.375 li
377.661 276.255 li
378.098 276.692 li
378.534 276.692 li
378.971 277.501 li
379.407 278.125 li
379.78 276.754 li
380.217 276.816 li
380.653 278.749 li
381.09 277.564 li
381.526 280.246 li
381.962 278.064 li
382.398 278 li
382.835 278.25 li
383.271 275.071 li
383.708 277.627 li
384.082 273.388 li
384.519 277.315 li
384.955 278.125 li
385.392 278.5 li
385.828 275.695 li
386.265 280.307 li
386.7 277.564 li
387.137 279.123 li
387.573 278.625 li
388.01 277.938 li
388.383 278.25 li
388.819 277.128 li
389.256 277.315 li
389.692 277.751 li
390.129 278.375 li
390.565 278.125 li
391.002 277.44 li
391.438 276.443 li
391.874 274.198 li
392.249 278.064 li
392.686 275.881 li
393.121 280.431 li
393.558 273.7 li
393.994 278.811 li
394.431 279.684 li
394.867 278.25 li
395.304 278.125 li
395.739 279.248 li
396.176 279.434 li
396.55 278.811 li
396.986 279.373 li
397.423 276.628 li
397.858 277.813 li
398.295 278.375 li
398.731 278.064 li
399.168 278.313 li
399.604 280.37 li
400.041 277.876 li
400.477 278.25 li
400.852 280.744 li
401.288 276.567 li
401.725 279.31 li
402.16 278.625 li
402.597 278.998 li
403.033 275.631 li
403.47 278.811 li
403.906 279.185 li
404.343 279.559 li
404.778 277.252 li
405.152 281.118 li
405.589 279.248 li
406.025 281.243 li
406.462 279.31 li
406.897 277.501 li
407.334 276.816 li
407.771 278.874 li
408.207 278.936 li
408.644 275.819 li
409.08 278.998 li
409.454 279.061 li
409.891 277.377 li
410.327 280.806 li
410.764 278.064 li
411.199 279.498 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 .686275 .686275 rgb
@
24.1992 139.562 mo
24.6323 139.252 li
25.0654 139.747 li
25.498 139.314 li
25.9312 139.995 li
26.3643 139.995 li
26.7974 138.943 li
27.2305 139.562 li
27.6636 139.747 li
28.0347 139.066 li
28.4678 139.995 li
28.9004 139.747 li
29.3335 140.056 li
29.7666 139.252 li
30.1997 139.933 li
30.6328 139.809 li
31.0659 139.933 li
31.499 139.562 li
31.9316 139.747 li
32.3647 139.871 li
32.7979 139.995 li
33.231 139.995 li
33.6641 139.314 li
34.0967 139.438 li
34.5298 139.376 li
34.9629 139.933 li
35.334 139.685 li
35.7671 139.562 li
36.2002 139.933 li
36.6333 139.933 li
37.0664 139.809 li
37.499 139.933 li
37.9321 139.933 li
38.3652 139.685 li
38.7983 139.562 li
39.2314 140.056 li
39.6646 139.871 li
40.0972 139.871 li
40.5303 139.809 li
40.9634 139.995 li
41.3965 139.933 li
41.8296 139.871 li
42.2007 139.995 li
42.6338 139.747 li
43.0669 139.995 li
43.4995 139.933 li
43.9326 139.747 li
44.3657 139.995 li
44.7988 139.314 li
45.2319 139.809 li
45.665 139.314 li
46.0977 139.685 li
46.5308 140.056 li
46.9639 139.623 li
47.397 139.933 li
47.8301 139.871 li
48.2632 139.871 li
48.6958 139.995 li
49.1289 139.933 li
49.5 139.809 li
49.9331 139.685 li
50.3662 139.438 li
50.7993 139.623 li
51.2324 139.005 li
51.6655 139.623 li
52.0981 139.809 li
52.5313 139.685 li
52.9644 139.252 li
53.3975 139.809 li
53.8306 139.438 li
54.2637 139.685 li
54.6963 138.819 li
55.1294 139.252 li
55.5625 138.633 li
55.9956 139.623 li
56.4287 138.695 li
56.7998 139.871 li
57.2329 139.314 li
57.666 139.376 li
58.0986 139.685 li
58.5317 139.747 li
58.9648 139.128 li
59.3979 139.562 li
59.8311 139.252 li
60.2642 139.376 li
60.6968 139.314 li
61.1299 139.623 li
61.563 139.747 li
61.9961 139.376 li
62.4292 139.995 li
62.8623 140.056 li
63.2949 139.747 li
63.728 139.5 li
64.0991 139.376 li
64.5322 139.438 li
64.9653 139.5 li
65.3984 139.685 li
65.8315 138.943 li
66.2646 139.314 li
66.6973 139.623 li
67.1304 138.881 li
67.5635 139.005 li
67.9966 138.881 li
68.4297 138.943 li
68.8628 139.252 li
69.2954 138.943 li
69.7285 139.747 li
70.1616 139.562 li
70.5947 139.128 li
71.0278 138.757 li
71.3989 139.314 li
71.832 138.386 li
72.2651 139.066 li
72.6978 139.438 li
73.1309 138.386 li
73.564 139.128 li
73.9971 138.448 li
74.4302 139.562 li
74.8633 139.19 li
75.2959 138.819 li
75.729 138.201 li
76.1621 139.623 li
76.5952 138.077 li
77.0283 139.066 li
77.4614 138.201 li
77.894 139.376 li
78.2656 137.768 li
78.6982 138.633 li
79.1313 138.324 li
79.5645 139.252 li
79.9976 139.438 li
80.4307 139.314 li
80.8638 138.819 li
81.2964 138.695 li
81.7295 138.448 li
82.1626 138.819 li
82.5957 138.139 li
83.0288 138.262 li
83.4619 137.768 li
83.8945 138.448 li
84.3276 138.448 li
84.7607 138.015 li
85.1938 138.139 li
85.5649 138.819 li
85.998 137.644 li
86.4312 137.582 li
86.8643 137.582 li
87.2969 136.53 li
87.73 139.314 li
88.1631 138.448 li
88.5962 138.757 li
89.0293 137.334 li
89.4619 138.201 li
89.895 137.025 li
90.3281 137.644 li
90.7612 137.149 li
91.1943 137.829 li
91.6274 137.891 li
92.0605 136.53 li
92.4932 137.396 li
92.8643 137.087 li
93.2974 137.953 li
93.7305 135.107 li
94.1636 136.53 li
94.5967 137.396 li
95.0298 137.706 li
95.4629 136.468 li
95.8955 135.107 li
96.3286 135.85 li
96.7617 137.458 li
97.1948 133.623 li
97.6279 136.839 li
98.0605 134.612 li
98.4937 137.149 li
98.9268 135.726 li
99.3599 133.313 li
99.793 136.592 li
100.164 135.541 li
100.597 134.984 li
101.03 136.221 li
101.463 137.21 li
101.896 135.726 li
102.329 135.974 li
102.762 133.251 li
103.195 131.334 li
103.628 135.417 li
104.062 134.427 li
104.494 132.571 li
104.927 134.18 li
105.36 131.953 li
105.793 134.365 li
106.227 133.066 li
106.659 133.809 li
107.092 132.818 li
107.464 135.107 li
107.896 129.292 li
108.33 134.798 li
108.763 133.994 li
109.196 132.2 li
109.629 134.303 li
110.062 133.251 li
110.495 131.272 li
110.928 133.747 li
111.361 131.396 li
111.794 129.107 li
112.227 132.509 li
112.66 131.272 li
113.093 127.87 li
113.526 132.2 li
113.959 128.426 li
114.33 129.911 li
114.763 129.911 li
115.196 127.932 li
115.629 129.354 li
116.062 129.478 li
116.495 124.591 li
116.928 127.437 li
117.361 125.271 li
117.794 125.333 li
118.228 122.488 li
118.66 121.375 li
119.093 126.509 li
119.526 123.354 li
119.959 117.725 li
120.393 122.179 li
120.826 122.735 li
121.258 118.343 li
121.63 125.89 li
122.063 115.869 li
122.496 122.24 li
122.929 120.261 li
123.362 113.085 li
123.795 118.838 li
124.228 116.054 li
124.661 114.817 li
125.094 113.889 li
125.527 112.776 li
125.96 111.662 li
126.393 111.167 li
126.826 105.538 li
127.259 111.353 li
127.692 108.755 li
128.125 109.25 li
128.558 94.5269 li
128.929 98.9189 li
129.362 96.2588 li
129.795 98.8569 li
130.229 96.6299 li
130.661 85.8662 li
131.094 100.465 li
131.527 88.8359 li
131.96 90.3203 li
132.394 86.856 li
132.827 84.2578 li
133.259 76.0303 li
133.692 76.0303 li
134.125 76.2778 li
134.559 72.9375 li
134.992 64.1533 li
135.425 69.1641 li
135.857 63.1636 li
136.229 65.8237 li
136.662 62.7925 li
137.095 63.3491 li
137.528 57.7817 li
137.961 67.6177 li
138.394 57.2866 li
138.827 59.3901 li
139.26 64.6484 li
139.693 52.833 li
140.126 53.3276 li
140.559 65.1431 li
140.992 73.4941 li
141.425 86.7324 li
141.858 79.4326 li
142.291 83.7012 li
142.724 85.5571 li
143.157 95.1455 li
143.528 106.033 li
143.961 102.754 li
144.395 105.786 li
144.828 119.581 li
145.26 125.024 li
145.693 125.396 li
146.126 131.891 li
146.56 136.901 li
146.993 134.551 li
147.426 139.376 li
147.858 139.995 li
148.292 139.747 li
148.725 139.314 li
149.158 139.5 li
149.591 136.839 li
150.024 137.21 li
150.395 136.468 li
150.828 132.695 li
151.261 133.561 li
151.694 134.551 li
152.127 126.818 li
152.56 130.777 li
152.993 128.736 li
153.426 132.014 li
153.859 133.685 li
154.292 130.839 li
154.725 132.509 li
155.158 130.282 li
155.591 127.808 li
156.024 128.798 li
156.457 132.695 li
156.89 132.695 li
157.323 127.127 li
157.694 133.066 li
158.127 133.932 li
158.561 129.664 li
158.994 135.479 li
159.427 135.603 li
159.859 133.87 li
160.292 135.479 li
160.726 135.664 li
161.159 136.901 li
161.592 138.51 li
162.024 138.572 li
162.458 139.005 li
162.891 139.438 li
163.324 139.623 li
163.757 139.995 li
164.19 139.623 li
164.623 139.623 li
164.994 138.881 li
165.427 136.097 li
165.86 129.664 li
166.293 126.076 li
166.727 116.364 li
167.159 104.857 li
167.592 101.084 li
168.025 78.8145 li
168.458 78.4429 li
168.892 100.651 li
169.324 108.693 li
169.757 131.52 li
170.19 138.633 li
170.623 139.747 li
171.057 138.201 li
171.489 135.664 li
171.922 133.251 li
172.294 131.705 li
172.727 132.633 li
173.159 130.035 li
173.593 127.622 li
174.025 128.736 li
174.459 128.055 li
174.892 128.612 li
175.324 129.107 li
175.758 125.457 li
176.19 128.179 li
176.624 130.777 li
177.057 133.375 li
177.49 133.561 li
177.923 135.85 li
178.355 138.819 li
178.789 139.623 li
179.222 139.066 li
179.593 129.911 li
180.026 94.3413 li
180.459 98.2383 li
180.893 135.045 li
181.325 138.572 li
181.758 136.035 li
182.191 130.159 li
182.624 128.859 li
183.058 127.808 li
183.49 130.159 li
183.924 131.272 li
184.356 133.19 li
184.789 132.076 li
185.223 131.21 li
185.655 132.509 li
186.089 133.066 li
186.46 138.015 li
186.893 139.066 li
187.325 139.933 li
187.759 135.603 li
188.191 127.499 li
188.625 130.097 li
189.058 131.458 li
189.491 131.086 li
189.924 134.736 li
190.356 133.19 li
190.79 132.757 li
191.223 134.427 li
191.656 134.365 li
192.089 134.736 li
192.521 134.18 li
192.955 129.107 li
193.388 133.19 li
193.759 131.767 li
194.192 133.004 li
194.625 133.747 li
195.059 132.324 li
195.491 130.715 li
195.924 131.024 li
196.357 132.88 li
196.79 133.87 li
197.224 131.829 li
197.656 134.674 li
198.09 133.251 li
198.522 134.056 li
198.955 134.18 li
199.389 131.767 li
199.821 135.231 li
200.255 134.427 li
200.688 133.313 li
201.059 133.251 li
201.492 131.829 li
201.925 133.747 li
202.357 132.324 li
202.791 136.406 li
203.224 136.345 li
203.657 134.922 li
204.09 135.85 li
204.522 135.417 li
204.956 134.798 li
205.389 135.664 li
205.822 135.726 li
206.255 135.912 li
206.688 135.231 li
207.121 134.674 li
207.554 136.283 li
207.987 138.139 li
208.358 135.107 li
208.791 134.489 li
209.225 134.551 li
209.657 137.52 li
210.091 135.541 li
210.523 136.035 li
210.956 137.025 li
211.39 136.53 li
211.822 137.458 li
212.256 136.468 li
212.688 136.221 li
213.121 136.345 li
213.555 136.901 li
213.987 135.293 li
214.421 138.386 li
214.854 136.716 li
215.225 135.293 li
215.658 136.53 li
216.091 137.52 li
216.523 137.644 li
216.957 138.201 li
217.39 135.603 li
217.823 136.839 li
218.256 136.345 li
218.689 137.768 li
219.122 136.592 li
219.555 137.52 li
219.988 136.592 li
220.421 136.221 li
220.854 138.262 li
221.287 137.396 li
221.72 138.201 li
222.153 137.087 li
222.524 137.458 li
222.957 136.839 li
223.391 138.881 li
223.823 137.891 li
224.257 138.386 li
224.689 138.077 li
225.122 138.201 li
225.556 136.839 li
225.988 138.324 li
226.422 138.262 li
226.854 138.386 li
227.288 138.386 li
227.721 138.633 li
228.153 138.943 li
228.587 138.695 li
229.02 138.386 li
229.453 137.087 li
229.824 138.139 li
230.257 139.562 li
230.689 138.881 li
231.123 139.128 li
231.556 138.139 li
231.989 138.262 li
232.422 139.128 li
232.855 138.201 li
233.288 139.438 li
233.721 139.005 li
234.154 138.757 li
234.587 139.562 li
235.021 139.252 li
235.453 139.562 li
235.887 139.376 li
236.319 140.056 li
236.752 137.829 li
237.123 138.943 li
237.557 139.5 li
237.989 138.448 li
238.423 139.252 li
238.855 138.819 li
239.289 139.314 li
239.722 137.644 li
240.154 137.953 li
240.588 138.139 li
241.021 138.201 li
241.454 138.757 li
241.887 137.953 li
242.319 137.706 li
242.753 138.819 li
243.186 137.272 li
243.619 138.633 li
244.052 139.19 li
244.423 137.21 li
244.856 138.448 li
245.289 137.953 li
245.722 138.572 li
246.155 136.345 li
246.588 138.201 li
247.021 137.953 li
247.454 136.839 li
247.887 138.695 li
248.32 137.644 li
248.753 136.221 li
249.187 138.51 li
249.619 139.5 li
250.053 138.695 li
250.485 138.572 li
250.918 138.262 li
251.289 139.871 li
251.723 138.757 li
252.155 138.819 li
252.589 139.128 li
253.021 139.747 li
253.455 139.5 li
253.888 139.623 li
254.32 139.871 li
254.754 139.562 li
255.187 139.623 li
255.62 139.252 li
256.053 139.747 li
256.486 139.933 li
256.919 139.685 li
257.352 139.933 li
257.785 138.881 li
258.218 139.809 li
258.589 140.056 li
259.022 139.376 li
259.455 139.809 li
259.888 139.685 li
260.321 139.562 li
260.754 139.871 li
261.188 139.995 li
261.62 139.933 li
262.054 139.933 li
262.486 139.933 li
262.919 139.19 li
263.353 138.077 li
263.785 139.19 li
264.219 139.933 li
264.651 139.685 li
265.084 139.933 li
265.518 140.056 li
265.889 139.685 li
266.321 140.056 li
266.755 139.933 li
267.188 134.86 li
267.621 99.1665 li
268.054 136.035 li
268.486 139.19 li
268.92 139.933 li
269.353 139.995 li
269.786 139.809 li
270.219 139.19 li
270.652 139.623 li
271.085 139.5 li
271.518 139.933 li
271.951 139.995 li
272.384 139.438 li
272.817 138.077 li
273.188 130.592 li
273.621 86.5469 li
274.055 3.2207 li
274.487 46.894 li
274.92 110.858 li
275.354 133.19 li
275.786 135.417 li
276.22 138.015 li
276.652 138.819 li
277.085 139.747 li
277.519 139.871 li
277.951 139.747 li
278.385 139.933 li
278.817 139.933 li
279.251 139.995 li
279.684 139.314 li
280.116 139.19 li
280.487 139.933 li
280.921 139.933 li
281.354 139.871 li
281.787 139.871 li
282.22 136.283 li
282.653 136.839 li
283.086 126.076 li
283.519 119.457 li
283.952 96.6919 li
284.385 67.3701 li
284.818 38.6665 li
285.251 20.4795 li
285.684 38.543 li
286.117 55.7402 li
286.55 74.2983 li
286.983 98.1768 li
287.354 104.363 li
287.787 112.033 li
288.221 123.168 li
288.653 126.694 li
289.086 131.643 li
289.52 131.643 li
289.952 133.994 li
290.386 134.674 li
290.818 136.406 li
291.252 136.963 li
291.685 136.839 li
292.117 139.438 li
292.551 138.572 li
292.983 139.066 li
293.417 138.695 li
293.85 139.809 li
294.282 139.747 li
294.654 139.933 li
295.087 139.747 li
295.52 139.995 li
295.953 139.314 li
296.386 139.995 li
296.819 139.933 li
297.252 140.056 li
297.685 139.933 li
298.118 140.056 li
298.551 139.562 li
298.984 139.623 li
299.417 139.995 li
299.851 139.995 li
300.283 139.128 li
300.716 139.933 li
301.149 139.623 li
301.582 138.757 li
301.953 137.334 li
302.387 139.438 li
302.819 138.324 li
303.252 136.468 li
303.686 134.18 li
304.118 133.747 li
304.552 133.19 li
304.984 134.674 li
305.418 133.561 li
305.851 127.932 li
306.283 115.188 li
306.717 110.363 li
307.149 105.105 li
307.583 92.1763 li
308.016 74.4839 li
308.449 71.4526 li
308.882 71.8857 li
309.253 43.2446 li
309.686 40.5225 li
310.119 34.9551 li
310.552 31.1196 li
310.985 12.4995 li
311.418 24.9336 li
311.852 24.9336 li
312.284 27.5938 li
312.717 22.521 li
313.15 21.9023 li
313.583 25.9233 li
314.017 28.9546 li
314.449 37.6152 li
314.882 23.8818 li
315.315 26.666 li
315.748 28.707 li
316.182 38.8525 li
316.553 44.6055 li
316.985 58.4004 li
317.419 35.2026 li
317.852 52.6475 li
318.284 58.7715 li
318.718 67.6177 li
319.15 64.0298 li
319.584 65.6377 li
320.017 69.5972 li
320.449 63.7202 li
320.883 73.061 li
321.315 70.5249 li
321.749 80.6699 li
322.182 80.2988 li
322.615 87.2275 li
323.048 82.835 li
323.419 85.3716 li
323.852 87.1035 li
324.285 87.9697 li
324.718 91.9907 li
325.151 95.3311 li
325.584 94.2178 li
326.018 98.1147 li
326.45 91.7432 li
326.883 87.6602 li
327.316 94.5269 li
327.749 102.383 li
328.183 98.7334 li
328.615 99.2285 li
329.049 101.332 li
329.481 101.27 li
329.914 100.96 li
330.348 105.415 li
330.719 100.342 li
331.151 107.146 li
331.585 105.105 li
332.018 108.631 li
332.45 109.93 li
332.884 108.322 li
333.316 106.157 li
333.75 109.25 li
334.183 110.982 li
334.616 114.446 li
335.049 110.425 li
335.481 111.601 li
335.915 112.095 li
336.348 114.879 li
336.781 107.022 li
337.214 116.797 li
337.646 113.085 li
338.019 112.405 li
338.451 113.395 li
338.884 116.858 li
339.317 120.694 li
339.75 115.931 li
340.184 116.054 li
340.616 119.89 li
341.049 120.014 li
341.482 117.787 li
341.915 114.26 li
342.349 113.209 li
342.781 116.549 li
343.215 117.106 li
343.647 119.147 li
344.08 117.91 li
344.514 115.064 li
344.946 121.56 li
345.317 117.415 li
345.751 119.642 li
346.184 124.22 li
346.617 120.014 li
347.05 123.354 li
347.482 119.209 li
347.916 123.23 li
348.349 121.003 li
348.782 123.787 li
349.215 118.096 li
349.647 122.55 li
350.081 124.529 li
350.514 125.89 li
350.947 122.735 li
351.38 123.044 li
351.813 121.931 li
352.185 127.87 li
352.617 124.034 li
353.05 123.168 li
353.483 119.952 li
353.916 121.127 li
354.35 120.261 li
354.782 125.457 li
355.216 123.54 li
355.648 124.591 li
356.081 126.076 li
356.515 122.735 li
356.947 119.147 li
357.381 122.859 li
357.813 124.962 li
358.246 126.385 li
358.68 125.333 li
359.112 125.705 li
359.483 127.746 li
359.917 124.467 li
360.35 125.148 li
360.783 124.653 li
361.216 123.106 li
361.648 125.519 li
362.082 124.962 li
362.515 126.385 li
362.948 120.756 li
363.381 121.869 li
363.814 124.962 li
364.247 129.54 li
364.68 127.251 li
365.113 126.076 li
365.546 124.962 li
365.979 129.169 li
366.412 127.808 li
366.783 126.385 li
367.217 129.23 li
367.649 125.828 li
368.082 124.406 li
368.516 128.55 li
368.948 124.406 li
369.382 129.54 li
369.814 127.437 li
370.247 127.004 li
370.681 128.921 li
371.113 127.808 li
371.547 127.375 li
371.979 126.447 li
372.412 127.004 li
372.846 130.963 li
373.278 126.694 li
373.712 130.097 li
374.083 126.385 li
374.516 130.777 li
374.949 128.983 li
375.382 127.622 li
375.814 130.22 li
376.248 127.622 li
376.681 129.292 li
377.114 128.859 li
377.547 128.241 li
377.98 130.282 li
378.413 128.859 li
378.846 127.313 li
379.279 125.396 li
379.712 131.582 li
380.146 126.447 li
380.578 130.839 li
381.012 130.53 li
381.383 128.612 li
381.815 129.726 li
382.248 127.746 li
382.682 131.582 li
383.114 129.849 li
383.548 125.396 li
383.98 129.973 li
384.414 128.488 li
384.847 128.303 li
385.279 127.746 li
385.713 127.994 li
386.146 131.086 li
386.579 129.726 li
387.012 131.272 li
387.444 128.488 li
387.878 130.468 li
388.249 129.045 li
388.682 128.488 li
389.115 130.839 li
389.548 127.065 li
389.981 130.963 li
390.414 125.519 li
390.847 131.396 li
391.28 127.87 li
391.713 129.354 li
392.146 130.963 li
392.579 130.53 li
393.012 130.097 li
393.445 129.169 li
393.878 134.118 li
394.312 129.478 li
394.744 131.21 li
395.178 131.705 li
395.549 129.107 li
395.981 130.406 li
396.414 131.024 li
396.848 131.458 li
397.28 130.592 li
397.714 129.849 li
398.146 132.695 li
398.58 130.715 li
399.013 130.653 li
399.445 128.736 li
399.879 131.334 li
400.312 128.921 li
400.745 130.468 li
401.178 127.932 li
401.611 133.809 li
402.044 131.148 li
402.477 131.582 li
402.848 130.035 li
403.281 128.736 li
403.714 131.396 li
404.147 132.386 li
404.58 131.52 li
405.014 129.416 li
405.446 130.653 li
405.879 129.045 li
406.313 133.066 li
406.745 133.623 li
407.179 130.715 li
407.611 133.19 li
408.044 131.024 li
408.478 131.21 li
408.91 130.282 li
409.344 129.911 li
409.776 131.396 li
410.147 129.23 li
410.581 133.375 li
@
24.1992 429.412 mo
24.6367 429.224 li
25.0742 430.037 li
25.5117 428.849 li
25.8867 429.912 li
26.3242 429.599 li
26.7617 429.037 li
27.1992 429.849 li
27.6367 429.912 li
28.0742 429.849 li
28.5117 430.099 li
28.9492 430.037 li
29.3242 430.099 li
29.7617 429.474 li
30.1992 430.037 li
30.6367 429.474 li
31.0742 429.349 li
31.5117 430.099 li
31.9492 429.912 li
32.3867 429.974 li
32.7617 429.537 li
33.1992 429.849 li
33.6367 428.537 li
34.0742 428.599 li
34.5117 430.099 li
34.9492 429.912 li
35.3867 429.974 li
35.7617 429.662 li
36.1992 430.037 li
36.6367 428.474 li
37.0742 429.849 li
37.5117 429.412 li
37.9492 429.974 li
38.3867 429.349 li
38.8242 429.099 li
39.1992 429.849 li
39.6367 430.162 li
40.0742 430.099 li
40.5117 430.037 li
40.9492 430.037 li
41.3867 429.662 li
41.8242 429.224 li
42.2617 429.412 li
42.6367 429.724 li
43.0742 429.224 li
43.5117 429.974 li
43.9492 429.974 li
44.3867 429.412 li
44.8242 429.662 li
45.2617 429.599 li
45.6367 430.037 li
46.0742 430.099 li
46.5117 429.474 li
46.9492 429.349 li
47.3867 430.099 li
47.8242 429.974 li
48.2617 429.349 li
48.6992 429.974 li
49.0742 429.162 li
49.5117 430.099 li
49.9492 430.099 li
50.3867 429.787 li
50.8242 429.599 li
51.2617 429.849 li
51.6992 429.912 li
52.1367 428.599 li
52.5117 429.849 li
52.9492 430.099 li
53.3867 429.724 li
53.8242 429.662 li
54.2617 429.599 li
54.6992 429.599 li
55.1367 429.599 li
55.5117 429.287 li
55.9492 429.599 li
56.3867 429.474 li
56.8242 429.662 li
57.2617 429.912 li
57.6992 429.787 li
58.1367 429.662 li
58.5742 430.037 li
58.9492 429.849 li
59.3867 429.787 li
59.8242 429.662 li
60.2617 429.412 li
60.6992 429.349 li
61.1367 429.974 li
61.5742 429.724 li
62.0117 430.099 li
62.3867 429.974 li
62.8242 430.099 li
63.2617 430.037 li
63.6992 429.599 li
64.1367 429.287 li
64.5742 429.599 li
65.0117 429.474 li
65.3867 430.037 li
65.8242 428.662 li
66.2617 430.099 li
66.6992 429.724 li
67.1367 429.849 li
67.5742 430.099 li
68.0117 429.912 li
68.4492 429.787 li
68.8242 430.037 li
69.2617 430.099 li
69.6992 429.287 li
70.1367 429.974 li
70.5742 429.912 li
71.0117 430.037 li
71.4492 430.037 li
71.8242 429.537 li
72.2617 429.412 li
72.6992 429.537 li
73.1367 430.037 li
73.5742 430.037 li
74.0117 429.912 li
74.4492 429.912 li
74.8867 428.849 li
75.2617 428.912 li
75.6992 429.724 li
76.1367 428.287 li
76.5742 430.099 li
77.0117 429.849 li
77.4492 428.162 li
77.8867 429.224 li
78.3242 429.849 li
78.6992 428.787 li
79.1367 429.787 li
79.5742 428.912 li
80.0117 429.412 li
80.4492 429.849 li
80.8867 428.474 li
81.3242 428.037 li
81.6992 428.787 li
82.1367 429.724 li
82.5742 429.912 li
83.0117 430.099 li
83.4492 429.224 li
83.8867 429.974 li
84.3242 429.662 li
84.7617 429.662 li
85.1367 428.787 li
85.5742 429.412 li
86.0117 429.849 li
86.4492 428.537 li
86.8867 429.849 li
87.3242 429.162 li
87.7617 429.037 li
88.1992 428.849 li
88.5742 428.537 li
89.0117 428.037 li
89.4492 429.099 li
89.8867 429.099 li
90.3242 429.849 li
90.7617 428.037 li
91.1992 429.724 li
91.5742 429.599 li
92.0117 429.099 li
92.4492 428.849 li
92.8867 428.412 li
93.3242 429.349 li
93.7617 427.849 li
94.1992 429.474 li
94.6367 428.037 li
95.0117 428.787 li
95.4492 426.787 li
95.8867 429.412 li
96.3242 429.724 li
96.7617 428.724 li
97.1992 428.912 li
97.6367 428.224 li
98.0742 428.537 li
98.4492 427.974 li
98.8867 428.474 li
99.3242 426.599 li
99.7617 426.224 li
100.199 428.724 li
100.637 428.349 li
101.074 428.724 li
101.449 427.599 li
101.887 428.349 li
102.324 426.662 li
102.762 426.787 li
103.199 426.974 li
103.637 426.037 li
104.074 428.474 li
104.512 428.474 li
104.887 428.099 li
105.324 427.912 li
105.762 428.037 li
106.199 424.599 li
106.637 426.787 li
107.074 423.787 li
107.512 426.974 li
107.949 428.599 li
108.324 427.287 li
108.762 426.599 li
109.199 427.849 li
109.637 425.849 li
110.074 427.787 li
110.512 426.537 li
110.949 426.287 li
111.324 426.287 li
111.762 428.162 li
112.199 425.599 li
112.637 427.474 li
113.074 427.099 li
113.512 425.974 li
113.949 426.474 li
114.387 424.037 li
114.762 423.287 li
115.199 426.599 li
115.637 423.849 li
116.074 422.662 li
116.512 423.037 li
116.949 423.537 li
117.387 424.099 li
117.824 426.412 li
118.199 423.099 li
118.637 425.162 li
119.074 416.162 li
119.512 424.349 li
119.949 420.599 li
120.387 425.537 li
120.824 424.349 li
121.199 418.224 li
121.637 425.599 li
122.074 422.599 li
122.512 418.224 li
122.949 420.662 li
123.387 419.787 li
123.824 423.224 li
124.262 417.912 li
124.637 419.224 li
125.074 416.787 li
125.512 416.599 li
125.949 415.662 li
126.387 415.162 li
126.824 415.412 li
127.262 417.974 li
127.699 409.224 li
128.074 412.662 li
128.512 410.537 li
128.949 407.974 li
129.387 410.974 li
129.824 411.849 li
130.262 414.099 li
130.699 410.162 li
131.074 406.412 li
131.512 402.787 li
131.949 400.412 li
132.387 409.224 li
132.824 398.287 li
133.262 393.537 li
133.699 395.912 li
134.137 393.287 li
134.512 389.162 li
134.949 389.724 li
135.387 383.099 li
135.824 383.099 li
136.262 370.724 li
136.699 376.474 li
137.137 366.974 li
137.574 365.037 li
137.949 359.787 li
138.387 345.662 li
138.824 332.724 li
139.262 332.162 li
139.699 337.474 li
140.137 325.787 li
140.574 313.912 li
140.949 303.474 li
141.387 313.037 li
141.824 315.162 li
142.262 310.974 li
142.699 315.224 li
143.137 344.224 li
143.574 352.349 li
144.012 376.912 li
144.387 397.662 li
144.824 417.537 li
145.262 424.412 li
145.699 428.287 li
146.137 421.787 li
146.574 409.662 li
147.012 396.037 li
147.387 378.662 li
147.824 369.849 li
148.262 356.224 li
148.699 367.349 li
149.137 368.162 li
149.574 362.349 li
150.012 348.349 li
150.449 367.474 li
150.824 370.037 li
151.262 369.849 li
151.699 374.912 li
152.137 387.537 li
152.574 374.724 li
153.012 381.162 li
153.449 379.537 li
153.887 390.849 li
154.262 398.912 li
154.699 386.974 li
155.137 395.912 li
155.574 390.912 li
156.012 396.287 li
156.449 399.037 li
156.887 396.412 li
157.262 408.287 li
157.699 407.912 li
158.137 408.224 li
158.574 411.787 li
159.012 408.287 li
159.449 411.287 li
159.887 410.662 li
160.324 408.474 li
160.699 412.787 li
161.137 413.787 li
161.574 416.849 li
162.012 421.037 li
162.449 419.037 li
162.887 420.787 li
163.324 418.099 li
163.762 417.287 li
164.137 418.474 li
164.574 421.537 li
165.012 422.412 li
165.449 419.349 li
165.887 425.787 li
166.324 424.224 li
166.762 421.537 li
167.137 424.224 li
167.574 428.599 li
168.012 428.412 li
168.449 429.287 li
168.887 429.599 li
169.324 421.849 li
169.762 419.224 li
170.199 428.474 li
170.574 419.974 li
171.012 419.724 li
171.449 421.162 li
171.887 419.287 li
172.324 419.412 li
172.762 418.037 li
173.199 419.912 li
173.637 424.224 li
174.012 416.537 li
174.449 420.599 li
174.887 419.912 li
175.324 420.662 li
175.762 420.349 li
176.199 425.099 li
176.637 422.412 li
177.012 424.849 li
177.449 423.099 li
177.887 425.912 li
178.324 421.599 li
178.762 426.787 li
179.199 421.099 li
179.637 423.912 li
180.074 424.287 li
180.449 426.724 li
180.887 422.349 li
181.324 424.662 li
181.762 425.599 li
182.199 427.224 li
182.637 424.474 li
183.074 426.162 li
183.512 425.537 li
183.887 428.662 li
184.324 423.599 li
184.762 426.099 li
185.199 428.162 li
185.637 425.787 li
186.074 425.787 li
186.512 425.037 li
186.887 426.287 li
187.324 424.912 li
187.762 424.662 li
188.199 427.099 li
188.637 424.662 li
189.074 426.912 li
189.512 427.787 li
189.949 426.912 li
190.324 427.849 li
190.762 428.037 li
191.199 426.474 li
191.637 428.912 li
192.074 426.037 li
192.512 425.787 li
192.949 428.662 li
193.387 427.662 li
193.762 427.912 li
194.199 427.787 li
194.637 429.412 li
195.074 426.287 li
195.512 425.412 li
195.949 427.724 li
196.387 425.412 li
196.762 427.037 li
197.199 428.412 li
197.637 426.099 li
198.074 429.099 li
198.512 426.912 li
198.949 428.412 li
199.387 427.662 li
199.824 425.787 li
200.199 427.599 li
200.637 428.787 li
201.074 428.974 li
201.512 427.474 li
201.949 428.849 li
202.387 428.349 li
202.824 429.599 li
203.262 427.162 li
203.637 427.474 li
204.074 429.099 li
204.512 427.974 li
204.949 426.349 li
205.387 429.224 li
205.824 429.412 li
206.262 429.037 li
206.637 423.287 li
207.074 428.224 li
207.512 427.912 li
207.949 426.162 li
208.387 429.599 li
208.824 428.412 li
209.262 425.912 li
209.699 428.537 li
210.074 427.974 li
210.512 428.599 li
210.949 427.912 li
211.387 428.287 li
211.824 428.474 li
212.262 429.849 li
212.699 428.099 li
213.137 429.037 li
213.512 426.349 li
213.949 427.912 li
214.387 427.162 li
214.824 428.912 li
215.262 429.099 li
215.699 429.662 li
216.137 427.974 li
216.512 428.849 li
216.949 429.037 li
217.387 429.787 li
217.824 427.287 li
218.262 429.537 li
218.699 428.037 li
219.137 430.099 li
219.574 426.224 li
219.949 427.724 li
220.387 429.787 li
220.824 430.037 li
221.262 428.912 li
221.699 429.287 li
222.137 429.662 li
222.574 428.974 li
223.012 428.724 li
223.387 427.662 li
223.824 429.224 li
224.262 428.787 li
224.699 429.412 li
225.137 429.474 li
225.574 429.474 li
226.012 427.412 li
226.387 429.037 li
226.824 429.537 li
227.262 428.537 li
227.699 429.162 li
228.137 428.787 li
228.574 429.412 li
229.012 429.099 li
229.449 429.537 li
229.824 430.037 li
230.262 427.912 li
230.699 429.162 li
231.137 428.099 li
231.574 429.662 li
232.012 430.037 li
232.449 428.037 li
232.824 429.287 li
233.262 429.537 li
233.699 430.099 li
234.137 429.849 li
234.574 429.037 li
235.012 429.599 li
235.449 429.287 li
235.887 426.599 li
236.262 429.287 li
236.699 429.099 li
237.137 427.599 li
237.574 430.099 li
238.012 429.974 li
238.449 429.912 li
238.887 429.412 li
239.324 429.724 li
239.699 429.787 li
240.137 429.724 li
240.574 429.537 li
241.012 429.662 li
241.449 430.099 li
241.887 429.412 li
242.324 428.599 li
242.699 428.662 li
243.137 429.287 li
243.574 429.349 li
244.012 429.849 li
244.449 427.974 li
244.887 429.662 li
245.324 430.037 li
245.762 429.724 li
246.137 429.787 li
246.574 429.849 li
247.012 429.662 li
247.449 429.224 li
247.887 430.037 li
248.324 429.912 li
248.762 429.349 li
249.199 429.599 li
249.574 429.599 li
250.012 429.537 li
250.449 430.099 li
250.887 430.037 li
251.324 429.974 li
251.762 429.912 li
252.199 429.099 li
252.574 430.099 li
253.012 429.912 li
253.449 429.662 li
253.887 429.974 li
254.324 429.912 li
254.762 430.162 li
255.199 429.974 li
255.637 429.974 li
256.012 429.912 li
256.449 429.787 li
256.887 430.099 li
257.324 429.287 li
257.762 429.599 li
258.199 429.849 li
258.637 430.037 li
259.074 429.662 li
259.449 429.474 li
259.887 430.099 li
260.324 429.912 li
260.762 430.099 li
261.199 429.974 li
261.637 429.537 li
262.074 430.099 li
262.449 429.599 li
262.887 430.099 li
263.324 430.037 li
263.762 429.662 li
264.199 430.099 li
264.637 430.099 li
265.074 429.849 li
265.512 429.037 li
265.887 429.974 li
266.324 430.099 li
266.762 427.912 li
267.199 428.974 li
267.637 429.724 li
268.074 429.349 li
268.512 430.037 li
268.949 429.849 li
269.324 430.162 li
269.762 429.849 li
270.199 429.787 li
270.637 429.849 li
271.074 429.787 li
271.512 429.662 li
271.949 429.662 li
272.324 428.849 li
272.762 429.724 li
273.199 429.974 li
273.637 429.662 li
274.074 429.724 li
274.512 429.474 li
274.949 429.537 li
275.387 429.412 li
275.762 429.599 li
276.199 429.787 li
276.637 428.912 li
277.074 429.537 li
277.512 427.974 li
277.949 428.724 li
278.387 429.974 li
278.824 428.412 li
279.199 428.037 li
279.637 427.537 li
280.074 428.599 li
280.512 429.162 li
280.949 429.412 li
281.387 428.599 li
281.824 426.974 li
282.199 427.099 li
282.637 427.724 li
283.074 427.287 li
283.512 428.849 li
283.949 416.599 li
284.387 408.787 li
284.824 424.162 li
285.262 429.599 li
285.637 429.287 li
286.074 430.099 li
286.512 430.099 li
286.949 428.599 li
287.387 429.787 li
287.824 428.162 li
288.262 428.474 li
288.699 428.037 li
289.074 426.224 li
289.512 427.537 li
289.949 428.412 li
290.387 424.162 li
290.824 426.224 li
291.262 423.662 li
291.699 426.599 li
292.074 426.662 li
292.512 425.974 li
292.949 423.974 li
293.387 423.537 li
293.824 425.662 li
294.262 423.724 li
294.699 421.912 li
295.137 420.537 li
295.512 423.662 li
295.949 421.974 li
296.387 417.662 li
296.824 418.037 li
297.262 418.287 li
297.699 413.787 li
298.137 415.349 li
298.574 412.662 li
298.949 413.724 li
299.387 409.662 li
299.824 408.974 li
300.262 408.662 li
300.699 409.912 li
301.137 411.974 li
301.574 401.224 li
301.949 400.349 li
302.387 397.787 li
302.824 400.162 li
303.262 394.474 li
303.699 407.724 li
304.137 399.537 li
304.574 407.287 li
305.012 412.912 li
305.387 428.912 li
305.824 429.349 li
306.262 427.974 li
306.699 423.349 li
307.137 404.724 li
307.574 387.662 li
308.012 357.974 li
308.387 320.724 li
308.824 307.162 li
309.262 310.287 li
309.699 302.974 li
310.137 317.662 li
310.574 310.474 li
311.012 294.974 li
311.449 311.724 li
311.824 320.287 li
312.262 340.662 li
312.699 346.599 li
313.137 346.287 li
313.574 352.412 li
314.012 354.099 li
314.449 355.349 li
314.887 367.787 li
315.262 374.912 li
315.699 372.287 li
316.137 373.224 li
316.574 390.162 li
317.012 377.787 li
317.449 383.599 li
317.887 388.099 li
318.262 396.537 li
318.699 397.412 li
319.137 394.474 li
319.574 403.724 li
320.012 394.412 li
320.449 401.599 li
320.887 400.912 li
321.324 399.537 li
321.699 393.537 li
322.137 401.724 li
322.574 399.849 li
323.012 408.287 li
323.449 401.662 li
323.887 407.412 li
324.324 408.662 li
324.762 405.412 li
325.137 404.224 li
325.574 409.537 li
326.012 416.912 li
326.449 411.037 li
326.887 410.912 li
327.324 408.662 li
327.762 411.099 li
328.137 412.474 li
328.574 416.599 li
329.012 412.849 li
329.449 418.849 li
329.887 417.599 li
330.324 419.474 li
330.762 421.037 li
331.199 418.599 li
331.574 414.224 li
332.012 418.037 li
332.449 418.724 li
332.887 421.099 li
333.324 420.849 li
333.762 417.787 li
334.199 413.037 li
334.637 417.787 li
335.012 414.287 li
335.449 413.537 li
335.887 418.787 li
336.324 419.724 li
336.762 419.599 li
337.199 421.662 li
337.637 419.912 li
338.012 420.037 li
338.449 423.974 li
338.887 419.412 li
339.324 424.974 li
339.762 418.287 li
340.199 422.162 li
340.637 423.474 li
341.074 418.224 li
341.449 423.412 li
341.887 419.912 li
342.324 425.287 li
342.762 420.537 li
343.199 423.912 li
343.637 421.912 li
344.074 424.787 li
344.512 423.287 li
344.887 419.724 li
345.324 422.787 li
345.762 423.037 li
346.199 421.474 li
346.637 424.224 li
347.074 422.662 li
347.512 422.662 li
347.887 419.474 li
348.324 421.537 li
348.762 427.662 li
349.199 424.474 li
349.637 424.912 li
350.074 422.474 li
350.512 421.662 li
350.949 425.349 li
351.324 424.474 li
351.762 422.974 li
352.199 423.412 li
352.637 424.724 li
353.074 423.412 li
353.512 424.787 li
353.949 424.724 li
354.387 425.474 li
354.762 424.349 li
355.199 426.662 li
355.637 423.224 li
356.074 424.787 li
356.512 419.349 li
356.949 423.849 li
357.387 425.974 li
357.762 421.287 li
358.199 426.099 li
358.637 424.662 li
359.074 424.099 li
359.512 425.287 li
359.949 423.099 li
360.387 421.162 li
360.824 425.912 li
361.199 424.599 li
361.637 425.287 li
362.074 425.412 li
362.512 427.037 li
362.949 426.037 li
363.387 421.849 li
363.824 425.724 li
364.262 425.162 li
364.637 423.912 li
365.074 427.287 li
365.512 425.224 li
365.949 425.474 li
366.387 420.974 li
366.824 422.037 li
367.262 425.662 li
367.637 427.724 li
368.074 425.099 li
368.512 428.224 li
368.949 426.974 li
369.387 426.099 li
369.824 423.849 li
370.262 424.412 li
370.699 425.599 li
371.074 426.349 li
371.512 426.599 li
371.949 423.099 li
372.387 423.162 li
372.824 426.224 li
373.262 426.287 li
373.699 424.912 li
374.137 425.787 li
374.512 425.474 li
374.949 425.724 li
375.387 424.287 li
375.824 425.474 li
376.262 424.599 li
376.699 424.537 li
377.137 426.787 li
377.512 427.662 li
377.949 424.287 li
378.387 424.287 li
378.824 425.912 li
379.262 426.537 li
379.699 426.849 li
380.137 426.787 li
380.574 426.412 li
380.949 429.037 li
381.387 428.162 li
381.824 426.162 li
382.262 428.162 li
382.699 427.787 li
383.137 423.724 li
383.574 426.474 li
384.012 427.099 li
384.387 427.349 li
384.824 426.474 li
385.262 426.537 li
385.699 427.474 li
386.137 424.224 li
386.574 423.412 li
387.012 425.162 li
387.387 424.849 li
387.824 428.037 li
388.262 425.162 li
388.699 423.537 li
389.137 427.662 li
389.574 425.849 li
390.012 427.787 li
390.449 420.787 li
390.824 426.787 li
391.262 426.974 li
391.699 423.287 li
392.137 427.412 li
392.574 425.724 li
393.012 427.412 li
393.449 426.099 li
393.824 425.724 li
394.262 425.537 li
394.699 424.537 li
395.137 425.162 li
395.574 425.037 li
396.012 428.412 li
396.449 426.912 li
396.887 426.349 li
397.262 426.537 li
397.699 426.412 li
398.137 428.162 li
398.574 426.349 li
399.012 425.974 li
399.449 426.412 li
399.887 425.224 li
400.324 427.537 li
400.699 426.974 li
401.137 426.787 li
401.574 425.974 li
402.012 428.849 li
402.449 423.474 li
402.887 426.412 li
403.324 426.599 li
403.699 425.724 li
404.137 429.287 li
404.574 426.787 li
405.012 423.537 li
405.449 424.599 li
405.887 426.599 li
406.324 425.537 li
406.762 425.849 li
407.137 428.474 li
407.574 426.537 li
408.012 427.599 li
408.449 427.224 li
408.887 425.662 li
409.324 427.787 li
409.762 425.724 li
410.199 428.099 li
410.574 426.349 li
@
gsave % PSGState
24.1992 146.528 mo
24.1992 288.162 li
411.199 288.162 li
411.199 146.528 li
eclp
grestore % PSGState
gsave % PSGState
24.1992 146.528 mo
24.1992 288.162 li
411.199 288.162 li
411.199 146.528 li
eclp
grestore % PSGState
gsave % PSGState
24.1992 146.528 mo
24.1992 288.162 li
411.199 288.162 li
411.199 146.528 li
eclp
.5 lw
24.1992 284.92 mo
24.6357 285.169 li
25.0718 284.359 li
25.5083 285.107 li
25.9448 285.232 li
26.3188 285.232 li
26.7554 284.359 li
27.1914 284.795 li
27.6279 285.169 li
28.0645 284.795 li
28.5005 285.232 li
28.937 285.232 li
29.3735 285.107 li
29.8096 285.107 li
30.2461 285.169 li
30.6201 285.232 li
31.0566 285.294 li
31.4927 284.858 li
31.9292 284.795 li
32.3657 285.232 li
32.8018 285.045 li
33.2383 284.92 li
33.6748 284.858 li
34.1108 285.294 li
34.5474 285.107 li
34.9214 285.169 li
35.3579 285.169 li
35.7944 285.294 li
36.2305 285.232 li
36.667 284.485 li
37.1035 285.294 li
37.5396 285.232 li
37.9761 285.045 li
38.4126 284.609 li
38.8486 284.92 li
39.2227 285.169 li
39.6592 285.045 li
40.0957 285.169 li
40.5317 285.232 li
40.9683 285.045 li
41.4048 285.232 li
41.8408 284.92 li
42.2773 285.045 li
42.7139 284.92 li
43.1504 285.045 li
43.5244 285.169 li
43.9604 285.169 li
44.397 285.107 li
44.8335 284.546 li
45.2695 284.858 li
45.7061 285.294 li
46.1426 284.795 li
46.5786 284.92 li
47.0151 285.169 li
47.3892 285.045 li
47.8257 284.609 li
48.2622 285.294 li
48.6982 284.983 li
49.1348 285.232 li
49.5713 285.169 li
50.0073 284.609 li
50.4438 284.795 li
50.8804 284.359 li
51.3164 284.734 li
51.6904 284.92 li
52.127 285.045 li
52.5635 285.107 li
52.9995 285.294 li
53.436 285.232 li
53.8726 284.983 li
54.3086 285.232 li
54.7451 285.045 li
55.1816 285.045 li
55.6177 285.232 li
55.9922 284.858 li
56.4282 284.609 li
56.8647 285.107 li
57.3013 285.169 li
57.7373 284.67 li
58.1738 285.107 li
58.6104 284.234 li
59.0464 284.92 li
59.4829 283.673 li
59.9194 285.294 li
60.2935 285.294 li
60.7295 285.232 li
61.166 284.67 li
61.6025 284.67 li
62.0386 284.858 li
62.4751 283.985 li
62.9116 284.67 li
63.3477 285.232 li
63.7842 284.734 li
64.1582 284.734 li
64.5947 285.294 li
65.0313 284.795 li
65.4673 284.609 li
65.9038 284.983 li
66.3403 284.297 li
66.7764 284.858 li
67.2129 284.795 li
67.6494 284.983 li
68.0859 285.107 li
68.4595 284.609 li
68.896 284.048 li
69.3325 284.858 li
69.769 284.421 li
70.2051 285.169 li
70.6416 284.609 li
71.0781 284.297 li
71.5146 284.234 li
71.9512 285.232 li
72.3877 283.673 li
72.7612 284.297 li
73.1973 284.297 li
73.6338 284.609 li
74.0703 283.362 li
74.5068 284.67 li
74.9434 284.858 li
75.3799 284.485 li
75.8159 283.798 li
76.2524 284.421 li
76.689 283.049 li
77.0625 284.11 li
77.499 283.175 li
77.9355 284.048 li
78.3721 284.048 li
78.8086 284.734 li
79.2446 284.485 li
79.6812 283.922 li
80.1177 284.67 li
80.5537 284.92 li
80.9902 284.048 li
81.3643 284.485 li
81.8008 284.421 li
82.2368 284.359 li
82.6733 284.421 li
83.1099 284.359 li
83.5459 284.92 li
83.9824 283.922 li
84.4189 284.048 li
84.855 283.798 li
85.2295 282.988 li
85.6655 283.237 li
86.1021 282.864 li
86.5386 283.736 li
86.9746 284.172 li
87.4111 283.113 li
87.8477 281.991 li
88.2837 282.052 li
88.7202 284.67 li
89.1567 284.048 li
89.5308 283.175 li
89.9673 284.234 li
90.4033 283.486 li
90.8398 282.427 li
91.2759 283.175 li
91.7124 283.736 li
92.1489 281.991 li
92.5854 283.985 li
93.0215 280.931 li
93.458 281.803 li
93.832 284.858 li
94.2686 282.8 li
94.7046 283.362 li
95.1411 283.673 li
95.5776 281.118 li
96.0137 283.612 li
96.4502 282.864 li
96.8867 283.922 li
97.3228 281.928 li
97.7593 280.058 li
98.1333 282.302 li
98.5698 281.055 li
99.0063 282.8 li
99.4424 280.246 li
99.8789 283.612 li
100.315 281.867 li
100.751 280.246 li
101.188 282.052 li
101.625 281.367 li
101.999 282.988 li
102.435 281.118 li
102.871 279.809 li
103.308 281.554 li
103.744 280.557 li
104.18 281.43 li
104.617 281.43 li
105.053 279.185 li
105.489 282.24 li
105.926 281.991 li
106.3 280.121 li
106.736 279.933 li
107.172 278.686 li
107.609 278.936 li
108.045 280.806 li
108.481 279.933 li
108.918 276.628 li
109.354 277.938 li
109.791 280.121 li
110.227 274.323 li
110.601 275.881 li
111.038 276.567 li
111.474 276.754 li
111.91 280.931 li
112.347 280.619 li
112.783 276.504 li
113.219 277.065 li
113.656 274.759 li
114.092 280.806 li
114.528 276.754 li
114.902 275.507 li
115.339 279.684 li
115.775 274.697 li
116.211 275.944 li
116.648 271.892 li
117.084 276.504 li
117.521 272.39 li
117.957 272.39 li
118.394 276.255 li
118.83 273.201 li
119.204 274.01 li
119.64 275.195 li
120.077 273.45 li
120.513 269.335 li
120.949 264.223 li
121.386 271.081 li
121.822 269.149 li
122.258 272.204 li
122.695 269.523 li
123.069 263.974 li
123.505 264.411 li
123.941 264.287 li
124.378 263.663 li
124.814 263.787 li
125.25 263.85 li
125.687 258.301 li
126.124 258.489 li
126.56 262.666 li
126.996 259.423 li
127.37 263.476 li
127.807 257.678 li
128.243 261.605 li
128.679 249.326 li
129.116 252.005 li
129.552 252.068 li
129.988 252.193 li
130.425 250.509 li
130.861 251.507 li
131.297 245.273 li
131.671 239.538 li
132.108 239.351 li
132.544 243.278 li
132.981 235.361 li
133.417 243.029 li
133.854 221.023 li
134.29 226.821 li
134.726 217.345 li
135.163 226.821 li
135.599 223.641 li
135.973 214.54 li
136.409 213.854 li
136.846 217.096 li
137.282 205.189 li
137.718 198.644 li
138.155 194.466 li
138.591 203.88 li
139.027 204.066 li
139.464 195.651 li
139.9 207.62 li
140.274 195.277 li
140.711 211.859 li
141.147 202.072 li
141.583 204.877 li
142.02 215.288 li
142.456 229.875 li
142.893 228.441 li
143.329 227.195 li
143.765 238.602 li
144.139 257.99 li
144.576 251.694 li
145.012 269.086 li
145.448 275.133 li
145.885 278.375 li
146.321 280.431 li
146.757 285.169 li
147.194 284.546 li
147.63 281.367 li
148.066 277.813 li
148.441 275.819 li
148.877 276.13 li
149.313 276.816 li
149.75 270.894 li
150.186 270.022 li
150.623 270.52 li
151.059 266.905 li
151.495 262.977 li
151.932 262.104 li
152.368 258.987 li
152.742 262.353 li
153.179 267.902 li
153.615 263.165 li
154.051 265.72 li
154.487 261.731 li
154.924 261.418 li
155.36 266.281 li
155.797 264.66 li
156.233 262.104 li
156.669 266.468 li
157.043 262.915 li
157.48 267.589 li
157.916 263.476 li
158.353 268.401 li
158.789 266.281 li
159.225 271.019 li
159.662 272.952 li
160.098 268.712 li
160.535 270.333 li
160.908 272.764 li
161.345 276.443 li
161.781 278.125 li
162.218 277.627 li
162.654 277.813 li
163.09 282.052 li
163.526 278.25 li
163.963 283.424 li
164.399 280.619 li
164.836 281.554 li
165.209 284.546 li
165.646 284.734 li
166.083 284.172 li
166.52 284.92 li
166.956 284.67 li
167.393 279.248 li
167.828 276.255 li
168.265 259.735 li
168.701 248.39 li
169.138 236.484 li
169.511 257.99 li
169.947 271.954 li
170.384 283.736 li
170.82 284.421 li
171.257 279.809 li
171.693 279.31 li
172.13 272.328 li
172.565 273.013 li
173.002 270.894 li
173.438 271.331 li
173.813 273.013 li
174.249 269.958 li
174.686 270.271 li
175.122 271.456 li
175.559 269.585 li
175.995 268.774 li
176.432 272.016 li
176.867 272.328 li
177.304 273.013 li
177.74 270.894 li
178.114 277.564 li
178.551 277.065 li
178.986 279.061 li
179.423 282.052 li
179.859 283.736 li
180.296 284.359 li
180.732 271.829 li
181.169 285.045 li
181.604 280.307 li
181.979 277.065 li
182.416 275.695 li
182.853 272.39 li
183.288 275.445 li
183.725 276.068 li
184.161 278.125 li
184.598 277.813 li
185.034 276.068 li
185.471 279.871 li
185.906 275.756 li
186.28 279.31 li
186.717 280.868 li
187.153 281.554 li
187.59 281.118 li
188.025 278.064 li
188.462 280.868 li
188.898 278.936 li
189.335 276.816 li
189.771 277.191 li
190.208 278.437 li
190.582 279.747 li
191.019 280.37 li
191.455 278.064 li
191.892 279.373 li
192.327 276.504 li
192.764 279.809 li
193.2 280.307 li
193.637 280.058 li
194.073 276.379 li
194.51 279.559 li
194.883 279.747 li
195.319 281.055 li
195.756 282.988 li
196.192 279.061 li
196.629 282.302 li
197.064 278.313 li
197.501 281.18 li
197.938 280.868 li
198.374 283.175 li
198.748 281.554 li
199.185 279.996 li
199.621 277.813 li
200.058 280.931 li
200.494 280.431 li
200.931 281.741 li
201.367 282.925 li
201.803 283.549 li
202.239 279.498 li
202.676 280.868 li
203.05 282.177 li
203.485 281.43 li
203.922 281.118 li
204.358 281.991 li
204.795 282.8 li
205.231 282.365 li
205.668 279.622 li
206.104 281.118 li
206.54 282.614 li
206.977 283.3 li
207.352 280.931 li
207.788 282.427 li
208.224 280.37 li
208.66 282.864 li
209.097 282.551 li
209.533 284.11 li
209.97 282.302 li
210.406 279.684 li
210.842 282.925 li
211.278 283.612 li
211.652 281.928 li
212.089 282.177 li
212.524 281.43 li
212.961 281.928 li
213.397 282.302 li
213.834 284.92 li
214.271 283.673 li
214.707 282.864 li
215.144 281.492 li
215.58 281.367 li
215.954 282.365 li
216.391 284.234 li
216.827 283.3 li
217.263 283.237 li
217.699 283.486 li
218.136 282.8 li
218.572 282.8 li
219.009 284.048 li
219.445 283.049 li
219.818 283.175 li
220.255 282.988 li
220.691 283.424 li
221.128 284.485 li
221.564 283.673 li
222.001 282.739 li
222.438 283.113 li
222.874 284.67 li
223.311 283.861 li
223.747 284.795 li
224.12 282.614 li
224.557 284.546 li
224.993 283.798 li
225.43 283.049 li
225.866 282.614 li
226.302 283.175 li
226.738 284.609 li
227.175 284.858 li
227.611 284.92 li
228.048 282.988 li
228.422 284.234 li
228.858 283.362 li
229.295 284.858 li
229.731 282.365 li
230.168 283.985 li
230.604 283.673 li
231.04 283.673 li
231.477 284.11 li
231.913 284.297 li
232.35 283.113 li
232.723 283.798 li
233.159 283.424 li
233.596 284.485 li
234.032 284.92 li
234.469 282.427 li
234.905 284.172 li
235.342 284.734 li
235.777 284.297 li
236.214 283.549 li
236.65 284.359 li
237.025 284.421 li
237.461 284.421 li
237.897 284.795 li
238.334 284.546 li
238.771 284.297 li
239.207 284.67 li
239.644 284.485 li
240.079 284.546 li
240.516 285.232 li
240.89 284.609 li
241.326 284.485 li
241.763 284.11 li
242.198 284.485 li
242.635 283.049 li
243.071 284.234 li
243.508 284.297 li
243.944 283.175 li
244.381 283.985 li
244.816 285.107 li
245.191 285.045 li
245.628 284.858 li
246.064 283.922 li
246.5 285.169 li
246.937 283.985 li
247.373 282.676 li
247.81 283.424 li
248.246 283.549 li
248.683 283.798 li
249.118 284.609 li
249.492 284.172 li
249.929 284.609 li
250.365 285.294 li
250.802 284.795 li
251.237 285.045 li
251.674 284.67 li
252.11 285.107 li
252.547 284.234 li
252.983 284.172 li
253.42 284.297 li
253.794 284.359 li
254.23 284.795 li
254.667 285.232 li
255.104 285.045 li
255.539 285.045 li
255.976 284.983 li
256.412 285.294 li
256.849 284.858 li
257.285 284.421 li
257.658 285.045 li
258.095 284.609 li
258.531 285.232 li
258.968 285.107 li
259.404 285.232 li
259.841 285.232 li
260.276 285.107 li
260.713 284.983 li
261.149 284.858 li
261.586 285.294 li
261.96 284.983 li
262.396 285.294 li
262.833 285.107 li
263.27 285.169 li
263.706 285.294 li
264.143 285.232 li
264.579 284.92 li
265.015 285.294 li
265.451 285.169 li
265.888 284.983 li
266.262 283.736 li
266.697 285.294 li
267.134 285.232 li
267.57 284.546 li
268.007 284.92 li
268.443 285.045 li
268.88 284.359 li
269.315 285.045 li
269.752 284.297 li
270.188 284.421 li
270.563 284.67 li
271 284.734 li
271.436 284.795 li
271.872 285.294 li
272.309 285.232 li
272.745 285.294 li
273.182 284.546 li
273.618 284.234 li
274.054 247.392 li
274.49 249.262 li
274.864 282.489 li
275.301 283.798 li
275.736 285.107 li
276.173 285.232 li
276.609 284.609 li
277.046 285.045 li
277.482 285.045 li
277.919 284.92 li
278.354 284.609 li
278.729 284.048 li
279.166 283.861 li
279.603 284.609 li
280.039 283.362 li
280.475 283.549 li
280.911 284.983 li
281.348 284.485 li
281.784 282.988 li
282.221 285.294 li
282.657 285.232 li
283.03 285.169 li
283.467 283.049 li
283.903 276.567 li
284.34 257.616 li
284.775 225.449 li
285.212 207.122 li
285.648 226.384 li
286.085 239.724 li
286.521 258.177 li
286.958 264.223 li
287.332 275.631 li
287.769 276.318 li
288.205 280.182 li
288.642 282.427 li
289.078 284.546 li
289.514 284.234 li
289.95 285.232 li
290.387 285.294 li
290.823 285.169 li
291.26 285.169 li
291.633 285.294 li
292.069 285.045 li
292.506 284.297 li
292.942 282.864 li
293.379 283.424 li
293.815 284.67 li
294.251 284.92 li
294.688 283.798 li
295.124 282.365 li
295.499 281.18 li
295.935 281.304 li
296.371 281.991 li
296.808 281.367 li
297.244 282.177 li
297.681 281.118 li
298.117 279.123 li
298.553 281.18 li
298.989 281.616 li
299.426 283.736 li
299.8 284.297 li
300.236 281.616 li
300.672 283.362 li
301.108 283.736 li
301.545 279.622 li
301.981 283.736 li
302.418 282.988 li
302.854 285.169 li
303.29 285.169 li
303.727 283.3 li
304.102 284.67 li
304.538 285.107 li
304.975 284.234 li
305.41 284.359 li
305.847 281.18 li
306.283 277.876 li
306.72 271.517 li
307.156 269.21 li
307.593 261.481 li
308.028 255.996 li
308.402 255.434 li
308.839 242.093 li
309.275 217.22 li
309.711 205.5 li
310.147 185.739 li
310.584 194.217 li
311.021 170.902 li
311.457 158.871 li
311.894 166.165 li
312.33 149.707 li
312.704 169.967 li
313.141 168.347 li
313.577 178.072 li
314.014 187.547 li
314.449 176.077 li
314.886 190.914 li
315.322 191.848 li
315.759 194.092 li
316.195 209.989 li
316.568 200.139 li
317.005 202.383 li
317.441 214.727 li
317.878 206.872 li
318.314 210.238 li
318.751 227.755 li
319.188 218.654 li
319.624 219.527 li
320.061 233.054 li
320.497 227.693 li
320.87 236.109 li
321.307 232.681 li
321.743 235.86 li
322.18 235.236 li
322.616 233.802 li
323.053 242.032 li
323.488 238.915 li
323.925 246.957 li
324.361 244.213 li
324.798 245.584 li
325.172 244.462 li
325.608 259.86 li
326.045 252.193 li
326.481 254.935 li
326.918 249.575 li
327.354 251.195 li
327.791 258.239 li
328.227 250.696 li
328.663 261.294 li
329.1 255.808 li
329.474 259.922 li
329.909 259.486 li
330.346 259.237 li
330.782 258.987 li
331.219 256.868 li
331.655 259.174 li
332.092 257.99 li
332.527 260.296 li
332.964 257.242 li
333.4 262.417 li
333.775 263.476 li
334.212 262.603 li
334.647 261.232 li
335.084 261.98 li
335.521 266.094 li
335.957 260.546 li
336.394 262.417 li
336.83 267.964 li
337.266 264.411 li
337.64 265.533 li
338.076 268.152 li
338.513 264.162 li
338.948 265.221 li
339.385 265.221 li
339.821 264.722 li
340.258 266.219 li
340.694 270.644 li
341.131 268.462 li
341.566 268.089 li
341.941 264.099 li
342.378 266.78 li
342.814 266.842 li
343.251 270.77 li
343.687 272.577 li
344.123 272.702 li
344.56 274.136 li
344.996 269.274 li
345.433 273.263 li
345.869 268.899 li
346.242 271.143 li
346.679 272.265 li
347.115 269.46 li
347.552 269.523 li
347.987 271.642 li
348.424 270.333 li
348.86 272.016 li
349.297 274.136 li
349.733 272.265 li
350.17 271.58 li
350.544 278.998 li
350.98 271.456 li
351.417 274.198 li
351.854 269.585 li
352.29 276.816 li
352.726 274.573 li
353.162 272.889 li
353.599 272.265 li
354.035 271.767 li
354.408 274.261 li
354.845 274.385 li
355.281 275.445 li
355.718 275.57 li
356.154 272.079 li
356.591 275.819 li
357.027 273.077 li
357.463 278 li
357.899 270.333 li
358.336 273.388 li
358.711 275.258 li
359.146 277.003 li
359.583 277.191 li
360.02 272.016 li
360.456 270.458 li
360.893 276.193 li
361.329 276.379 li
361.766 277.689 li
362.201 277.689 li
362.638 274.01 li
363.012 276.255 li
363.448 272.889 li
363.884 273.7 li
364.32 276.443 li
364.757 277.003 li
365.193 277.065 li
365.63 273.512 li
366.066 273.825 li
366.502 276.193 li
366.938 278 li
367.313 277.564 li
367.75 274.323 li
368.187 278.437 li
368.622 271.954 li
369.059 276.628 li
369.495 277.315 li
369.932 277.627 li
370.368 275.507 li
370.804 275.944 li
371.24 277.501 li
371.614 274.697 li
372.051 277.377 li
372.487 276.567 li
372.923 275.695 li
373.359 273.7 li
373.796 275.195 li
374.232 276.255 li
374.669 277.689 li
375.105 276.13 li
375.479 278.811 li
375.916 274.883 li
376.353 278.437 li
376.789 274.946 li
377.225 278.375 li
377.661 276.255 li
378.098 276.692 li
378.534 276.692 li
378.971 277.501 li
379.407 278.125 li
379.78 276.754 li
380.217 276.816 li
380.653 278.749 li
381.09 277.564 li
381.526 280.246 li
381.962 278.064 li
382.398 278 li
382.835 278.25 li
383.271 275.071 li
383.708 277.627 li
384.082 273.388 li
384.519 277.315 li
384.955 278.125 li
385.392 278.5 li
385.828 275.695 li
386.265 280.307 li
386.7 277.564 li
387.137 279.123 li
387.573 278.625 li
388.01 277.938 li
388.383 278.25 li
388.819 277.128 li
389.256 277.315 li
389.692 277.751 li
390.129 278.375 li
390.565 278.125 li
391.002 277.44 li
391.438 276.443 li
391.874 274.198 li
392.249 278.064 li
392.686 275.881 li
393.121 280.431 li
393.558 273.7 li
393.994 278.811 li
394.431 279.684 li
394.867 278.25 li
395.304 278.125 li
395.739 279.248 li
396.176 279.434 li
396.55 278.811 li
396.986 279.373 li
397.423 276.628 li
397.858 277.813 li
398.295 278.375 li
398.731 278.064 li
399.168 278.313 li
399.604 280.37 li
400.041 277.876 li
400.477 278.25 li
400.852 280.744 li
401.288 276.567 li
401.725 279.31 li
402.16 278.625 li
402.597 278.998 li
403.033 275.631 li
403.47 278.811 li
403.906 279.185 li
404.343 279.559 li
404.778 277.252 li
405.152 281.118 li
405.589 279.248 li
406.025 281.243 li
406.462 279.31 li
406.897 277.501 li
407.334 276.816 li
407.771 278.874 li
408.207 278.936 li
408.644 275.819 li
409.08 278.998 li
409.454 279.061 li
409.891 277.377 li
410.327 280.806 li
410.764 278.064 li
411.199 279.498 li
1 0 0 rgb
@
24.1992 285.107 mo
24.3237 285.107 li
24.4487 285.107 li
24.6978 285.107 li
25.1343 285.107 li
26.0693 285.107 li
28.002 285.107 li
28.1265 285.107 li
28.251 285.107 li
28.5005 285.107 li
28.937 285.107 li
29.8721 285.107 li
31.8047 285.107 li
31.9292 285.107 li
32.0537 285.107 li
32.3032 285.107 li
32.8018 285.107 li
33.8618 285.045 li
35.9189 285.045 li
36.0439 285.045 li
36.1685 285.045 li
36.418 285.045 li
36.9165 285.045 li
37.9761 285.045 li
40.0332 285.045 li
40.1577 285.045 li
40.2827 285.045 li
40.5317 285.045 li
40.9683 285.045 li
41.9658 285.045 li
43.8984 284.983 li
44.0229 284.983 li
44.085 284.983 li
44.3345 284.983 li
44.8335 284.983 li
45.7686 284.983 li
47.7012 284.983 li
47.8257 284.983 li
47.9502 284.983 li
48.1997 284.983 li
48.6362 284.983 li
49.6333 284.983 li
51.5039 284.92 li
51.6284 284.92 li
51.7529 284.92 li
51.9399 284.92 li
52.439 284.92 li
53.374 284.92 li
55.2441 284.858 li
55.3687 284.858 li
55.4932 284.858 li
55.7427 284.858 li
56.3037 284.858 li
57.3013 284.858 li
59.3584 284.795 li
59.4829 284.795 li
59.6079 284.795 li
59.8569 284.795 li
60.3555 284.795 li
61.4155 284.795 li
63.4106 284.734 li
63.5352 284.734 li
63.6597 284.734 li
63.9092 284.734 li
64.4077 284.734 li
65.3428 284.67 li
67.2759 284.67 li
67.4004 284.609 li
67.4624 284.609 li
67.7119 284.609 li
68.2104 284.609 li
69.1455 284.609 li
71.0781 284.546 li
71.2031 284.546 li
71.3276 284.546 li
71.5771 284.485 li
72.0757 284.485 li
73.1353 284.485 li
75.1924 284.359 li
75.3169 284.359 li
75.4419 284.359 li
75.6909 284.359 li
76.2524 284.359 li
77.2495 284.297 li
79.3691 284.172 li
79.4937 284.172 li
79.6182 284.172 li
79.8677 284.172 li
80.3667 284.172 li
81.3643 284.11 li
81.4888 284.11 li
81.6133 284.048 li
81.8628 284.048 li
82.3618 284.048 li
83.4209 283.985 li
83.5459 283.985 li
83.6704 283.922 li
83.9199 283.922 li
84.4189 283.922 li
85.416 283.861 li
87.4731 283.673 li
87.5981 283.673 li
87.7227 283.673 li
87.9097 283.612 li
88.4082 283.612 li
89.3433 283.549 li
89.4678 283.486 li
89.5928 283.486 li
89.8418 283.486 li
90.2783 283.424 li
91.2759 283.362 li
91.3384 283.3 li
91.4629 283.3 li
91.7124 283.3 li
92.2109 283.237 li
93.146 283.113 li
95.0161 282.925 li
95.1411 282.864 li
95.2656 282.864 li
95.5776 282.864 li
96.0762 282.739 li
97.0732 282.614 li
97.1982 282.614 li
97.3228 282.614 li
97.5723 282.551 li
98.1333 282.489 li
99.1309 282.302 li
99.2554 282.302 li
99.3804 282.24 li
99.6294 282.177 li
100.19 282.116 li
101.188 281.928 li
103.245 281.492 li
103.37 281.43 li
103.494 281.43 li
103.744 281.367 li
104.18 281.243 li
105.178 280.994 li
105.302 280.994 li
105.427 280.931 li
105.614 280.868 li
106.112 280.744 li
107.11 280.431 li
107.172 280.431 li
107.297 280.37 li
107.546 280.307 li
108.045 280.121 li
108.98 279.809 li
110.913 278.998 li
111.038 278.998 li
111.162 278.936 li
111.412 278.811 li
111.848 278.562 li
112.783 278.125 li
112.908 278.064 li
113.032 278 li
113.282 277.876 li
113.718 277.627 li
114.653 277.065 li
114.778 277.003 li
114.902 276.941 li
115.151 276.754 li
115.588 276.443 li
116.523 275.819 li
116.648 275.695 li
116.772 275.631 li
117.022 275.445 li
117.521 275.071 li
118.456 274.261 li
118.58 274.136 li
118.705 274.01 li
118.954 273.761 li
119.453 273.263 li
120.451 272.204 li
120.575 272.016 li
120.7 271.892 li
120.949 271.58 li
121.51 270.957 li
122.508 269.585 li
122.632 269.398 li
122.757 269.21 li
123.007 268.837 li
123.505 268.026 li
123.63 267.839 li
123.755 267.589 li
124.066 267.154 li
124.565 266.281 li
124.69 266.032 li
124.814 265.783 li
125.064 265.284 li
125.563 264.287 li
126.56 261.98 li
126.684 261.731 li
126.81 261.418 li
127.059 260.858 li
127.557 259.611 li
127.682 259.299 li
127.807 258.925 li
127.994 258.301 li
128.493 256.868 li
128.617 256.494 li
128.742 256.12 li
128.991 255.372 li
129.428 253.75 li
130.363 250.26 li
130.487 249.824 li
130.612 249.326 li
130.861 248.39 li
131.36 246.333 li
132.295 241.844 li
132.42 241.22 li
132.544 240.66 li
132.794 239.413 li
133.23 236.857 li
134.228 231.309 li
134.352 230.498 li
134.477 229.688 li
134.726 228.067 li
135.225 224.763 li
136.285 217.844 li
136.409 216.971 li
136.534 216.098 li
136.784 214.415 li
137.282 211.111 li
137.407 210.301 li
137.532 209.552 li
137.781 208.057 li
137.906 207.309 li
138.092 206.623 li
138.342 205.375 li
138.467 204.815 li
138.591 204.254 li
138.716 203.755 li
138.841 203.319 li
138.965 202.882 li
139.09 202.508 li
139.215 202.259 li
139.339 202.01 li
139.464 201.822 li
139.589 201.76 li
139.713 201.76 li
139.838 201.822 li
140.025 201.947 li
140.15 202.197 li
140.274 202.508 li
140.399 202.882 li
140.524 203.381 li
140.648 204.004 li
140.773 204.752 li
140.898 205.563 li
141.022 206.498 li
141.147 207.495 li
141.271 208.68 li
141.396 209.927 li
141.521 211.298 li
141.646 212.794 li
141.958 216.098 li
142.082 217.906 li
142.207 219.838 li
142.456 223.953 li
142.581 226.072 li
142.706 228.316 li
142.955 232.992 li
143.454 242.905 li
143.579 245.397 li
143.703 247.954 li
143.953 253.002 li
144.451 262.541 li
144.576 264.786 li
144.7 266.905 li
144.825 268.961 li
144.95 270.894 li
145.074 272.702 li
145.199 274.447 li
145.386 276.006 li
145.511 277.501 li
145.636 278.811 li
145.76 280.058 li
145.885 281.118 li
146.01 282.052 li
146.134 282.864 li
146.259 283.549 li
146.383 284.11 li
146.508 284.546 li
146.633 284.858 li
146.757 285.045 li
146.882 285.107 li
147.007 285.107 li
147.132 284.983 li
147.256 284.795 li
147.381 284.546 li
147.506 284.172 li
147.63 283.798 li
147.755 283.3 li
147.88 282.739 li
148.004 282.24 li
148.129 281.554 li
148.254 280.868 li
148.503 279.498 li
148.628 278.749 li
148.752 278 li
149.002 276.504 li
149.501 273.575 li
149.688 272.889 li
149.812 272.204 li
150.062 270.832 li
150.186 270.208 li
150.311 269.585 li
150.56 268.462 li
150.685 267.964 li
150.81 267.528 li
150.997 266.592 li
151.121 266.219 li
151.246 265.844 li
151.495 265.159 li
151.62 264.847 li
151.745 264.536 li
151.869 264.287 li
151.932 264.037 li
152.057 263.787 li
152.181 263.601 li
152.306 263.414 li
152.431 263.226 li
152.555 263.102 li
152.68 262.977 li
152.804 262.853 li
152.929 262.79 li
152.992 262.666 li
153.116 262.603 li
153.241 262.603 li
153.366 262.541 li
153.49 262.541 li
153.615 262.541 li
153.74 262.541 li
153.864 262.541 li
153.989 262.603 li
154.113 262.666 li
154.176 262.728 li
154.301 262.79 li
154.425 262.853 li
154.55 262.915 li
154.675 263.04 li
154.799 263.165 li
154.924 263.226 li
155.049 263.351 li
155.236 263.601 li
155.36 263.787 li
155.485 263.913 li
155.734 264.223 li
156.233 264.91 li
156.296 265.096 li
156.42 265.284 li
156.669 265.658 li
157.168 266.468 li
158.104 268.213 li
158.228 268.462 li
158.353 268.712 li
158.602 269.21 li
159.101 270.271 li
160.161 272.39 li
162.218 276.816 li
162.342 277.128 li
162.467 277.377 li
162.717 278 li
163.215 279.185 li
163.34 279.498 li
163.464 279.809 li
163.714 280.37 li
164.212 281.616 li
164.337 281.928 li
164.525 282.24 li
164.774 282.8 li
164.898 283.113 li
165.023 283.362 li
165.272 283.922 li
165.397 284.172 li
165.522 284.359 li
165.646 284.609 li
165.771 284.795 li
165.896 284.92 li
166.021 285.045 li
166.145 285.107 li
166.27 285.107 li
166.394 285.107 li
166.52 284.983 li
166.644 284.795 li
166.769 284.546 li
166.893 284.11 li
167.018 283.612 li
167.142 282.988 li
167.268 282.116 li
167.393 281.118 li
167.454 279.871 li
167.578 278.375 li
167.704 276.567 li
167.828 274.51 li
167.953 272.079 li
168.077 269.398 li
168.202 266.343 li
168.326 263.102 li
168.451 259.611 li
168.577 256.182 li
168.701 252.878 li
168.826 250.073 li
168.888 247.891 li
169.013 246.832 li
169.138 246.957 li
169.262 248.514 li
169.387 251.444 li
169.511 255.621 li
169.636 260.546 li
169.761 265.844 li
169.886 271.019 li
170.011 275.631 li
170.135 279.373 li
170.26 282.177 li
170.322 283.985 li
170.446 284.92 li
170.571 285.107 li
170.695 284.795 li
170.82 283.985 li
170.945 282.988 li
171.07 281.803 li
171.195 280.557 li
171.319 279.373 li
171.444 278.188 li
171.568 277.065 li
171.693 276.006 li
171.756 275.133 li
171.88 274.261 li
172.005 273.512 li
172.13 272.889 li
172.254 272.328 li
172.38 271.892 li
172.504 271.456 li
172.629 271.143 li
172.753 270.832 li
172.878 270.583 li
173.002 270.395 li
173.127 270.271 li
173.189 270.146 li
173.313 270.083 li
173.438 270.083 li
173.563 270.022 li
173.688 270.022 li
173.813 270.083 li
173.938 270.083 li
174.063 270.146 li
174.187 270.271 li
174.312 270.333 li
174.436 270.458 li
174.562 270.583 li
174.686 270.708 li
174.998 270.957 li
175.122 271.081 li
175.247 271.268 li
175.496 271.58 li
175.995 272.265 li
176.119 272.453 li
176.244 272.64 li
176.493 273.077 li
176.681 273.263 li
176.805 273.45 li
177.055 273.886 li
177.18 274.136 li
177.304 274.385 li
177.553 274.883 li
177.678 275.133 li
177.802 275.445 li
178.052 276.068 li
178.177 276.379 li
178.364 276.754 li
178.488 277.128 li
178.613 277.564 li
178.737 278.064 li
178.862 278.562 li
178.986 279.123 li
179.111 279.747 li
179.236 280.37 li
179.361 281.118 li
179.485 281.991 li
179.61 282.864 li
179.735 283.736 li
179.859 284.546 li
180.047 285.107 li
180.171 284.858 li
180.296 282.864 li
180.42 277.627 li
180.546 267.34 li
180.67 253.875 li
180.795 247.081 li
180.919 255.808 li
181.044 271.456 li
181.169 281.679 li
181.293 284.983 li
181.419 284.67 li
181.543 283.113 li
181.729 281.43 li
181.854 279.996 li
181.979 278.874 li
182.104 277.938 li
182.229 277.252 li
182.353 276.754 li
182.478 276.379 li
182.603 276.13 li
182.728 275.944 li
182.853 275.756 li
182.977 275.695 li
183.102 275.57 li
183.226 275.57 li
183.351 275.57 li
183.476 275.57 li
183.601 275.57 li
183.725 275.57 li
183.85 275.631 li
183.974 275.695 li
184.099 275.756 li
184.223 275.756 li
184.349 275.819 li
184.535 275.944 li
184.785 276.068 li
184.909 276.13 li
185.034 276.193 li
185.283 276.379 li
185.407 276.504 li
185.532 276.567 li
185.657 276.692 li
185.782 276.754 li
185.906 276.879 li
186.031 277.003 li
186.156 277.191 li
186.28 277.315 li
186.405 277.501 li
186.53 277.689 li
186.655 277.938 li
186.779 278.25 li
186.904 278.625 li
187.028 279.123 li
187.153 279.871 li
187.277 280.931 li
187.403 282.614 li
187.527 284.67 li
187.652 282.8 li
187.84 255.871 li
187.964 274.198 li
188.089 285.107 li
188.213 282.551 li
188.338 280.495 li
188.462 279.31 li
188.587 278.686 li
188.712 278.313 li
188.837 278.125 li
188.961 278 li
189.086 277.876 li
189.21 277.876 li
189.335 277.876 li
189.46 277.876 li
189.585 277.876 li
189.709 277.876 li
189.834 277.938 li
189.959 277.938 li
190.083 278 li
190.333 278.064 li
190.458 278.125 li
190.582 278.125 li
190.831 278.25 li
191.33 278.375 li
191.393 278.437 li
191.517 278.437 li
191.767 278.562 li
192.265 278.686 li
192.39 278.749 li
192.515 278.749 li
192.701 278.874 li
192.826 278.874 li
192.951 278.936 li
193.076 278.998 li
193.2 278.998 li
193.325 279.061 li
193.449 279.123 li
193.574 279.185 li
193.698 279.31 li
193.762 279.498 li
193.886 279.871 li
194.011 281.118 li
194.135 280.931 li
194.261 282.489 li
194.385 280.058 li
194.51 279.622 li
194.634 279.498 li
194.759 279.434 li
194.883 279.434 li
194.946 279.498 li
195.07 279.498 li
195.195 279.498 li
195.319 279.559 li
195.569 279.622 li
196.067 279.684 li
196.131 279.747 li
196.255 279.747 li
196.504 279.809 li
197.003 279.933 li
197.938 280.121 li
198.063 280.182 li
198.188 280.182 li
198.437 280.246 li
198.998 280.37 li
199.995 280.557 li
202.052 280.931 li
202.177 280.994 li
202.302 280.994 li
202.552 281.055 li
203.05 281.118 li
204.109 281.304 li
206.167 281.616 li
206.291 281.616 li
206.416 281.616 li
206.666 281.679 li
207.103 281.741 li
208.1 281.867 li
210.032 282.116 li
210.157 282.116 li
210.219 282.116 li
210.469 282.177 li
210.967 282.24 li
211.902 282.365 li
213.834 282.551 li
213.959 282.551 li
214.084 282.614 li
214.333 282.614 li
214.77 282.676 li
215.705 282.739 li
217.637 282.925 li
221.378 283.3 li
221.502 283.3 li
221.627 283.3 li
221.876 283.3 li
222.375 283.362 li
223.435 283.424 li
225.492 283.612 li
229.544 283.922 li
229.669 283.922 li
229.793 283.922 li
230.042 283.922 li
230.479 283.985 li
231.477 284.048 li
233.347 284.11 li
237.149 284.359 li
237.274 284.359 li
237.398 284.359 li
237.71 284.359 li
238.209 284.421 li
239.207 284.485 li
241.326 284.546 li
241.45 284.609 li
241.575 284.609 li
241.825 284.609 li
242.323 284.609 li
243.383 284.67 li
245.44 284.795 li
245.564 284.795 li
245.689 284.795 li
245.938 284.795 li
246.438 284.795 li
247.435 284.858 li
247.56 284.858 li
247.685 284.858 li
247.996 284.858 li
248.495 284.858 li
249.492 284.92 li
249.617 284.92 li
249.741 284.92 li
249.991 284.92 li
250.489 284.983 li
251.486 284.983 li
251.612 284.983 li
251.799 284.983 li
252.049 284.983 li
252.547 285.045 li
253.544 285.045 li
253.669 285.045 li
253.794 285.045 li
254.043 285.045 li
254.479 285.045 li
254.604 285.045 li
254.729 285.045 li
254.979 285.107 li
255.415 285.107 li
255.539 285.107 li
255.664 285.107 li
255.913 285.107 li
256.35 285.107 li
256.474 285.107 li
256.599 285.107 li
256.849 285.107 li
257.347 285.107 li
257.472 285.107 li
257.534 285.107 li
257.783 285.107 li
257.907 285.107 li
258.033 285.107 li
258.282 285.107 li
258.407 285.107 li
258.531 285.107 li
258.656 285.107 li
258.719 285.107 li
258.843 285.107 li
258.968 285.107 li
259.092 285.107 li
259.217 285.107 li
259.342 285.107 li
259.467 285.107 li
259.592 285.107 li
259.716 285.107 li
259.903 285.107 li
260.152 285.107 li
260.401 285.107 li
260.651 285.107 li
260.775 285.107 li
260.9 285.107 li
260.963 285.107 li
261.088 285.107 li
261.212 283.922 li
261.337 279.622 li
261.524 285.107 li
261.648 285.107 li
261.773 285.107 li
261.897 285.107 li
262.022 285.107 li
262.146 285.107 li
262.272 285.107 li
262.396 285.107 li
262.646 285.107 li
263.145 285.107 li
263.27 285.107 li
263.395 285.107 li
263.644 285.107 li
264.204 285.107 li
264.328 285.107 li
264.454 285.045 li
264.703 285.045 li
264.828 285.045 li
264.952 285.045 li
265.201 285.045 li
265.327 285.045 li
265.451 285.045 li
265.576 285.045 li
265.7 285.045 li
265.825 285.045 li
266.013 285.045 li
266.137 285.045 li
266.262 285.045 li
266.386 285.045 li
266.511 285.045 li
266.636 285.107 li
266.761 285.107 li
266.885 285.107 li
267.01 285.045 li
267.134 283.985 li
267.259 275.382 li
267.384 212.296 li
267.509 223.641 li
267.633 275.195 li
267.758 283.362 li
267.882 284.795 li
268.007 285.107 li
268.131 285.107 li
268.318 285.107 li
268.443 285.107 li
268.567 285.045 li
268.693 285.045 li
268.817 284.983 li
268.942 284.983 li
269.066 284.92 li
269.315 284.92 li
269.44 284.858 li
269.565 284.858 li
269.815 284.858 li
269.939 284.795 li
270.002 284.795 li
270.251 284.795 li
270.376 284.734 li
270.5 284.734 li
270.625 284.734 li
270.749 284.734 li
270.875 284.67 li
271 284.67 li
271.124 284.67 li
271.249 284.67 li
271.373 284.67 li
271.498 284.67 li
271.561 284.67 li
271.685 284.67 li
271.81 284.67 li
271.934 284.67 li
272.059 284.67 li
272.185 284.67 li
272.309 284.734 li
272.434 284.795 li
272.558 284.795 li
272.683 284.858 li
272.807 284.983 li
272.932 285.045 li
272.994 285.107 li
273.118 285.107 li
273.243 284.983 li
273.368 284.485 li
273.493 283.113 li
273.618 279.747 li
273.742 271.954 li
273.867 255.747 li
273.991 228.566 li
274.116 199.828 li
274.241 192.409 li
274.366 211.049 li
274.49 236.857 li
274.553 256.556 li
274.678 268.774 li
274.803 275.756 li
274.927 279.809 li
275.052 282.052 li
275.176 283.424 li
275.301 284.172 li
275.425 284.67 li
275.551 284.92 li
275.675 285.045 li
275.8 285.107 li
275.924 285.107 li
275.987 285.107 li
276.111 285.107 li
276.236 285.045 li
276.36 284.983 li
276.485 284.92 li
276.609 284.92 li
276.734 284.858 li
276.984 284.734 li
277.108 284.67 li
277.233 284.609 li
277.421 284.485 li
277.919 284.234 li
278.043 284.172 li
278.169 284.11 li
278.354 283.985 li
278.854 283.798 li
278.979 283.736 li
279.104 283.673 li
279.29 283.612 li
279.415 283.549 li
279.539 283.486 li
279.789 283.424 li
279.914 283.362 li
280.039 283.3 li
280.163 283.3 li
280.288 283.237 li
280.351 283.237 li
280.475 283.237 li
280.6 283.175 li
280.724 283.175 li
280.849 283.175 li
280.974 283.175 li
281.099 283.175 li
281.224 283.237 li
281.285 283.237 li
281.409 283.3 li
281.535 283.362 li
281.659 283.424 li
281.784 283.486 li
281.908 283.612 li
282.033 283.736 li
282.158 283.922 li
282.282 284.048 li
282.345 284.234 li
282.594 284.609 li
282.719 284.795 li
282.844 284.983 li
282.969 285.107 li
283.093 285.107 li
283.218 285.045 li
283.28 284.734 li
283.405 284.172 li
283.529 283.175 li
283.654 281.679 li
283.778 279.434 li
283.903 276.318 li
284.027 272.141 li
284.153 266.78 li
284.277 260.234 li
284.34 252.628 li
284.464 244.275 li
284.59 234.863 li
284.714 225.885 li
284.839 218.342 li
284.963 212.794 li
285.088 209.802 li
285.275 209.303 li
285.399 211.173 li
285.524 214.852 li
285.648 219.776 li
285.773 225.449 li
285.898 231.371 li
286.023 237.231 li
286.147 242.779 li
286.272 247.954 li
286.396 252.628 li
286.521 256.805 li
286.646 260.484 li
286.771 263.725 li
286.896 266.592 li
287.021 269.024 li
287.145 271.207 li
287.27 273.077 li
287.395 274.697 li
287.52 276.13 li
287.645 277.315 li
287.769 278.375 li
287.894 279.31 li
288.018 280.121 li
288.143 280.868 li
288.329 281.43 li
288.454 281.991 li
288.579 282.427 li
288.703 282.864 li
288.829 283.237 li
288.953 283.549 li
289.078 283.798 li
289.202 284.048 li
289.327 284.234 li
289.451 284.421 li
289.576 284.546 li
289.701 284.67 li
289.826 284.795 li
289.95 284.858 li
290.075 284.92 li
290.199 284.983 li
290.324 285.045 li
290.448 285.107 li
290.574 285.107 li
290.698 285.107 li
290.823 285.107 li
290.947 285.107 li
291.072 285.107 li
291.26 285.107 li
291.384 285.107 li
291.509 285.045 li
291.633 285.045 li
291.758 284.983 li
291.883 284.983 li
292.008 284.92 li
292.132 284.858 li
292.257 284.858 li
292.381 284.795 li
292.631 284.67 li
292.756 284.609 li
292.881 284.546 li
293.13 284.421 li
293.565 284.172 li
294.501 283.612 li
294.626 283.549 li
294.75 283.424 li
295 283.3 li
295.499 282.988 li
296.434 282.365 li
296.559 282.302 li
296.684 282.177 li
296.933 282.052 li
296.995 281.991 li
297.119 281.928 li
297.369 281.803 li
297.493 281.741 li
297.618 281.679 li
297.868 281.554 li
297.992 281.492 li
298.117 281.43 li
298.241 281.43 li
298.304 281.367 li
298.429 281.304 li
298.553 281.304 li
298.678 281.243 li
298.803 281.243 li
298.927 281.18 li
299.052 281.18 li
299.177 281.18 li
299.302 281.18 li
299.426 281.18 li
299.488 281.18 li
299.613 281.18 li
299.737 281.18 li
299.862 281.243 li
299.986 281.243 li
300.111 281.304 li
300.236 281.367 li
300.361 281.43 li
300.486 281.492 li
300.61 281.554 li
300.735 281.616 li
300.859 281.741 li
300.984 281.867 li
301.234 282.116 li
301.358 282.24 li
301.545 282.365 li
301.795 282.676 li
301.92 282.864 li
302.044 283.049 li
302.293 283.362 li
302.418 283.549 li
302.543 283.736 li
302.792 284.11 li
302.917 284.297 li
303.041 284.485 li
303.166 284.67 li
303.29 284.795 li
303.478 284.92 li
303.603 285.045 li
303.727 285.107 li
303.853 285.107 li
303.977 285.107 li
304.102 285.107 li
304.226 284.983 li
304.351 284.858 li
304.475 284.67 li
304.6 284.359 li
304.725 284.048 li
304.85 283.612 li
304.975 283.049 li
305.099 282.427 li
305.224 281.679 li
305.41 280.868 li
305.535 279.933 li
305.659 278.811 li
305.784 277.627 li
305.909 276.255 li
306.034 274.759 li
306.158 273.138 li
306.408 269.46 li
306.532 267.404 li
306.657 265.159 li
306.907 260.359 li
307.031 257.741 li
307.156 254.998 li
307.468 249.138 li
307.593 246.083 li
307.717 242.905 li
307.966 236.42 li
308.465 223.018 li
308.59 219.901 li
308.714 216.784 li
308.964 210.737 li
309.089 207.807 li
309.213 204.939 li
309.462 199.454 li
309.525 196.835 li
309.649 194.342 li
309.898 189.667 li
310.023 187.547 li
310.147 185.552 li
310.397 181.937 li
310.522 180.315 li
310.646 178.819 li
310.771 177.448 li
310.896 176.263 li
311.021 175.142 li
311.146 174.207 li
311.208 173.334 li
311.332 172.585 li
311.457 172.025 li
311.582 171.525 li
311.707 171.152 li
311.831 170.84 li
311.956 170.715 li
312.08 170.591 li
312.205 170.653 li
312.33 170.715 li
312.455 170.902 li
312.58 171.152 li
312.704 171.525 li
312.829 171.9 li
312.892 172.398 li
313.016 172.897 li
313.141 173.458 li
313.265 174.082 li
313.39 174.768 li
313.514 175.516 li
313.765 177.074 li
314.263 180.502 li
314.387 181.438 li
314.513 182.373 li
314.698 184.305 li
315.198 188.295 li
316.195 196.399 li
316.258 197.396 li
316.382 198.394 li
316.632 200.327 li
317.131 204.066 li
318.065 211.173 li
318.189 211.984 li
318.314 212.794 li
318.501 214.478 li
319.001 217.594 li
319.935 223.33 li
320.061 224.015 li
320.186 224.638 li
320.435 225.948 li
320.87 228.441 li
320.995 229.002 li
321.119 229.626 li
321.37 230.748 li
321.806 232.93 li
321.931 233.491 li
322.055 233.99 li
322.304 234.987 li
322.74 236.919 li
323.737 240.472 li
323.862 240.971 li
323.987 241.408 li
324.237 242.218 li
324.735 243.902 li
324.86 244.275 li
324.985 244.65 li
325.234 245.459 li
325.733 246.893 li
325.857 247.268 li
325.982 247.58 li
326.294 248.265 li
326.792 249.575 li
327.791 251.88 li
327.915 252.193 li
328.04 252.442 li
328.289 253.002 li
328.85 254 li
329.847 255.871 li
329.973 256.12 li
330.097 256.307 li
330.346 256.744 li
330.845 257.553 li
331.904 259.049 li
332.029 259.237 li
332.154 259.423 li
332.341 259.735 li
332.84 260.359 li
333.775 261.543 li
333.899 261.668 li
334.024 261.792 li
334.273 262.104 li
334.772 262.603 li
335.707 263.601 li
335.831 263.725 li
335.957 263.85 li
336.206 264.099 li
336.643 264.536 li
337.64 265.346 li
339.51 266.842 li
339.634 266.967 li
339.76 267.029 li
340.07 267.216 li
340.569 267.589 li
341.63 268.213 li
341.754 268.338 li
341.879 268.401 li
342.128 268.588 li
342.627 268.837 li
343.687 269.46 li
343.812 269.523 li
343.936 269.585 li
344.186 269.709 li
344.685 269.958 li
345.744 270.458 li
347.801 271.392 li
347.926 271.456 li
348.051 271.517 li
348.3 271.58 li
348.799 271.767 li
349.857 272.204 li
351.854 272.889 li
351.978 272.889 li
352.103 272.952 li
352.352 273.013 li
352.912 273.201 li
353.91 273.512 li
355.905 274.074 li
356.029 274.074 li
356.154 274.136 li
356.403 274.198 li
356.902 274.323 li
357.838 274.51 li
359.708 274.946 li
359.832 275.009 li
359.957 275.009 li
360.206 275.071 li
360.643 275.195 li
361.641 275.382 li
363.511 275.756 li
363.635 275.756 li
363.76 275.756 li
364.009 275.819 li
364.508 275.944 li
365.567 276.068 li
367.625 276.443 li
367.75 276.443 li
367.874 276.443 li
368.123 276.504 li
368.622 276.567 li
369.682 276.754 li
371.738 277.003 li
371.863 277.065 li
371.988 277.065 li
372.238 277.065 li
372.674 277.128 li
373.672 277.252 li
375.541 277.501 li
375.666 277.501 li
375.792 277.501 li
376.041 277.564 li
376.539 277.627 li
377.475 277.689 li
379.407 277.938 li
379.531 277.938 li
379.656 277.938 li
379.844 277.938 li
380.342 278 li
381.277 278.125 li
383.146 278.25 li
386.949 278.562 li
387.074 278.625 li
387.198 278.625 li
387.449 278.625 li
387.947 278.686 li
388.944 278.749 li
391.002 278.874 li
395.055 279.185 li
395.179 279.185 li
395.304 279.185 li
395.553 279.185 li
396.052 279.248 li
396.986 279.31 li
398.919 279.434 li
402.722 279.622 li
402.846 279.622 li
402.971 279.622 li
403.221 279.622 li
403.719 279.684 li
404.778 279.747 li
406.836 279.809 li
410.95 279.996 li
411.013 279.996 li
411.075 280.058 li
411.137 280.058 li
411.199 280.058 li
0 0 0 rgb
@
grestore % PSGState
.75 lw
411.199 288.162 mo
24.1992 288.162 li
0 0 0 rgb
@
24.1992 288.162 mo
24.1992 146.902 li
@
24.1992 146.902 mo
411.199 146.902 li
@
411.199 146.902 mo
411.199 288.162 li
@
0 lc
24.1992 288.162 mo
24.1992 284.92 li
@
41.4048 288.162 mo
41.4048 286.23 li
@
58.6104 288.162 mo
58.6104 286.23 li
@
75.8159 288.162 mo
75.8159 286.23 li
@
93.0215 288.162 mo
93.0215 286.23 li
@
110.227 288.162 mo
110.227 284.92 li
@
127.37 288.162 mo
127.37 286.23 li
@
144.576 288.162 mo
144.576 286.23 li
@
161.781 288.162 mo
161.781 286.23 li
@
178.986 288.162 mo
178.986 286.23 li
@
196.192 288.162 mo
196.192 284.92 li
@
213.397 288.162 mo
213.397 286.23 li
@
230.604 288.162 mo
230.604 286.23 li
@
247.81 288.162 mo
247.81 286.23 li
@
265.015 288.162 mo
265.015 286.23 li
@
282.221 288.162 mo
282.221 284.92 li
@
299.426 288.162 mo
299.426 286.23 li
@
316.568 288.162 mo
316.568 286.23 li
@
333.775 288.162 mo
333.775 286.23 li
@
350.98 288.162 mo
350.98 286.23 li
@
368.187 288.162 mo
368.187 284.92 li
@
385.392 288.162 mo
385.392 286.23 li
@
402.597 288.162 mo
402.597 286.23 li
@
24.1992 285.294 mo
27.3784 285.294 li
@
24.1992 280.495 mo
26.1318 280.495 li
@
24.1992 275.695 mo
26.1318 275.695 li
@
24.1992 270.832 mo
26.1318 270.832 li
@
24.1992 266.032 mo
26.1318 266.032 li
@
24.1992 261.232 mo
27.3784 261.232 li
@
24.1992 256.369 mo
26.1318 256.369 li
@
24.1992 251.569 mo
26.1318 251.569 li
@
24.1992 246.769 mo
26.1318 246.769 li
@
24.1992 241.969 mo
26.1318 241.969 li
@
24.1992 237.106 mo
27.3784 237.106 li
@
24.1992 232.306 mo
26.1318 232.306 li
@
24.1992 227.506 mo
26.1318 227.506 li
@
24.1992 222.644 mo
26.1318 222.644 li
@
24.1992 217.844 mo
26.1318 217.844 li
@
24.1992 213.043 mo
27.3784 213.043 li
@
24.1992 208.181 mo
26.1318 208.181 li
@
24.1992 203.381 mo
26.1318 203.381 li
@
24.1992 198.581 mo
26.1318 198.581 li
@
24.1992 193.781 mo
26.1318 193.781 li
@
24.1992 188.918 mo
27.3784 188.918 li
@
24.1992 184.118 mo
26.1318 184.118 li
@
24.1992 179.318 mo
26.1318 179.318 li
@
24.1992 174.456 mo
26.1318 174.456 li
@
24.1992 169.656 mo
26.1318 169.656 li
@
24.1992 164.855 mo
27.3784 164.855 li
@
24.1992 159.993 mo
26.1318 159.993 li
@
24.1992 155.193 mo
26.1318 155.193 li
@
24.1992 150.393 mo
26.1318 150.393 li
@
24.1992 146.902 mo
24.1992 150.081 li
@
41.4048 146.902 mo
41.4048 148.834 li
@
58.6104 146.902 mo
58.6104 148.834 li
@
75.8159 146.902 mo
75.8159 148.834 li
@
93.0215 146.902 mo
93.0215 148.834 li
@
110.227 146.902 mo
110.227 150.081 li
@
127.37 146.902 mo
127.37 148.834 li
@
144.576 146.902 mo
144.576 148.834 li
@
161.781 146.902 mo
161.781 148.834 li
@
178.986 146.902 mo
178.986 148.834 li
@
196.192 146.902 mo
196.192 150.081 li
@
213.397 146.902 mo
213.397 148.834 li
@
230.604 146.902 mo
230.604 148.834 li
@
247.81 146.902 mo
247.81 148.834 li
@
265.015 146.902 mo
265.015 148.834 li
@
282.221 146.902 mo
282.221 150.081 li
@
299.426 146.902 mo
299.426 148.834 li
@
316.568 146.902 mo
316.568 148.834 li
@
333.775 146.902 mo
333.775 148.834 li
@
350.98 146.902 mo
350.98 148.834 li
@
368.187 146.902 mo
368.187 150.081 li
@
385.392 146.902 mo
385.392 148.834 li
@
402.597 146.902 mo
402.597 148.834 li
@
411.199 285.294 mo
408.021 285.294 li
@
411.199 280.495 mo
409.267 280.495 li
@
411.199 275.695 mo
409.267 275.695 li
@
411.199 270.832 mo
409.267 270.832 li
@
411.199 266.032 mo
409.267 266.032 li
@
411.199 261.232 mo
408.021 261.232 li
@
411.199 256.369 mo
409.267 256.369 li
@
411.199 251.569 mo
409.267 251.569 li
@
411.199 246.769 mo
409.267 246.769 li
@
411.199 241.969 mo
409.267 241.969 li
@
411.199 237.106 mo
408.021 237.106 li
@
411.199 232.306 mo
409.267 232.306 li
@
411.199 227.506 mo
409.267 227.506 li
@
411.199 222.644 mo
409.267 222.644 li
@
411.199 217.844 mo
409.267 217.844 li
@
411.199 213.043 mo
408.021 213.043 li
@
411.199 208.181 mo
409.267 208.181 li
@
411.199 203.381 mo
409.267 203.381 li
@
411.199 198.581 mo
409.267 198.581 li
@
411.199 193.781 mo
409.267 193.781 li
@
411.199 188.918 mo
408.021 188.918 li
@
411.199 184.118 mo
409.267 184.118 li
@
411.199 179.318 mo
409.267 179.318 li
@
411.199 174.456 mo
409.267 174.456 li
@
411.199 169.656 mo
409.267 169.656 li
@
411.199 164.855 mo
408.021 164.855 li
@
411.199 159.993 mo
409.267 159.993 li
@
411.199 155.193 mo
409.267 155.193 li
@
411.199 150.393 mo
409.267 150.393 li
@
gsave % PSGState
24.1992 146.528 mo
24.1992 288.162 li
411.199 288.162 li
411.199 146.528 li
eclp
grestore % PSGState
gsave % PSGState
24.1992 .375 mo
24.1992 142.902 li
411.199 142.902 li
411.199 .375 li
eclp
grestore % PSGState
gsave % PSGState
24.1992 .375 mo
24.1992 142.902 li
411.199 142.902 li
411.199 .375 li
eclp
grestore % PSGState
gsave % PSGState
24.1992 .375 mo
24.1992 142.902 li
411.199 142.902 li
411.199 .375 li
eclp
.5 lw
2 lc
24.1992 139.562 mo
24.6323 139.252 li
25.0654 139.747 li
25.498 139.314 li
25.9312 139.995 li
26.3643 139.995 li
26.7974 138.943 li
27.2305 139.562 li
27.6636 139.747 li
28.0347 139.066 li
28.4678 139.995 li
28.9004 139.747 li
29.3335 140.056 li
29.7666 139.252 li
30.1997 139.933 li
30.6328 139.809 li
31.0659 139.933 li
31.499 139.562 li
31.9316 139.747 li
32.3647 139.871 li
32.7979 139.995 li
33.231 139.995 li
33.6641 139.314 li
34.0967 139.438 li
34.5298 139.376 li
34.9629 139.933 li
35.334 139.685 li
35.7671 139.562 li
36.2002 139.933 li
36.6333 139.933 li
37.0664 139.809 li
37.499 139.933 li
37.9321 139.933 li
38.3652 139.685 li
38.7983 139.562 li
39.2314 140.056 li
39.6646 139.871 li
40.0972 139.871 li
40.5303 139.809 li
40.9634 139.995 li
41.3965 139.933 li
41.8296 139.871 li
42.2007 139.995 li
42.6338 139.747 li
43.0669 139.995 li
43.4995 139.933 li
43.9326 139.747 li
44.3657 139.995 li
44.7988 139.314 li
45.2319 139.809 li
45.665 139.314 li
46.0977 139.685 li
46.5308 140.056 li
46.9639 139.623 li
47.397 139.933 li
47.8301 139.871 li
48.2632 139.871 li
48.6958 139.995 li
49.1289 139.933 li
49.5 139.809 li
49.9331 139.685 li
50.3662 139.438 li
50.7993 139.623 li
51.2324 139.005 li
51.6655 139.623 li
52.0981 139.809 li
52.5313 139.685 li
52.9644 139.252 li
53.3975 139.809 li
53.8306 139.438 li
54.2637 139.685 li
54.6963 138.819 li
55.1294 139.252 li
55.5625 138.633 li
55.9956 139.623 li
56.4287 138.695 li
56.7998 139.871 li
57.2329 139.314 li
57.666 139.376 li
58.0986 139.685 li
58.5317 139.747 li
58.9648 139.128 li
59.3979 139.562 li
59.8311 139.252 li
60.2642 139.376 li
60.6968 139.314 li
61.1299 139.623 li
61.563 139.747 li
61.9961 139.376 li
62.4292 139.995 li
62.8623 140.056 li
63.2949 139.747 li
63.728 139.5 li
64.0991 139.376 li
64.5322 139.438 li
64.9653 139.5 li
65.3984 139.685 li
65.8315 138.943 li
66.2646 139.314 li
66.6973 139.623 li
67.1304 138.881 li
67.5635 139.005 li
67.9966 138.881 li
68.4297 138.943 li
68.8628 139.252 li
69.2954 138.943 li
69.7285 139.747 li
70.1616 139.562 li
70.5947 139.128 li
71.0278 138.757 li
71.3989 139.314 li
71.832 138.386 li
72.2651 139.066 li
72.6978 139.438 li
73.1309 138.386 li
73.564 139.128 li
73.9971 138.448 li
74.4302 139.562 li
74.8633 139.19 li
75.2959 138.819 li
75.729 138.201 li
76.1621 139.623 li
76.5952 138.077 li
77.0283 139.066 li
77.4614 138.201 li
77.894 139.376 li
78.2656 137.768 li
78.6982 138.633 li
79.1313 138.324 li
79.5645 139.252 li
79.9976 139.438 li
80.4307 139.314 li
80.8638 138.819 li
81.2964 138.695 li
81.7295 138.448 li
82.1626 138.819 li
82.5957 138.139 li
83.0288 138.262 li
83.4619 137.768 li
83.8945 138.448 li
84.3276 138.448 li
84.7607 138.015 li
85.1938 138.139 li
85.5649 138.819 li
85.998 137.644 li
86.4312 137.582 li
86.8643 137.582 li
87.2969 136.53 li
87.73 139.314 li
88.1631 138.448 li
88.5962 138.757 li
89.0293 137.334 li
89.4619 138.201 li
89.895 137.025 li
90.3281 137.644 li
90.7612 137.149 li
91.1943 137.829 li
91.6274 137.891 li
92.0605 136.53 li
92.4932 137.396 li
92.8643 137.087 li
93.2974 137.953 li
93.7305 135.107 li
94.1636 136.53 li
94.5967 137.396 li
95.0298 137.706 li
95.4629 136.468 li
95.8955 135.107 li
96.3286 135.85 li
96.7617 137.458 li
97.1948 133.623 li
97.6279 136.839 li
98.0605 134.612 li
98.4937 137.149 li
98.9268 135.726 li
99.3599 133.313 li
99.793 136.592 li
100.164 135.541 li
100.597 134.984 li
101.03 136.221 li
101.463 137.21 li
101.896 135.726 li
102.329 135.974 li
102.762 133.251 li
103.195 131.334 li
103.628 135.417 li
104.062 134.427 li
104.494 132.571 li
104.927 134.18 li
105.36 131.953 li
105.793 134.365 li
106.227 133.066 li
106.659 133.809 li
107.092 132.818 li
107.464 135.107 li
107.896 129.292 li
108.33 134.798 li
108.763 133.994 li
109.196 132.2 li
109.629 134.303 li
110.062 133.251 li
110.495 131.272 li
110.928 133.747 li
111.361 131.396 li
111.794 129.107 li
112.227 132.509 li
112.66 131.272 li
113.093 127.87 li
113.526 132.2 li
113.959 128.426 li
114.33 129.911 li
114.763 129.911 li
115.196 127.932 li
115.629 129.354 li
116.062 129.478 li
116.495 124.591 li
116.928 127.437 li
117.361 125.271 li
117.794 125.333 li
118.228 122.488 li
118.66 121.375 li
119.093 126.509 li
119.526 123.354 li
119.959 117.725 li
120.393 122.179 li
120.826 122.735 li
121.258 118.343 li
121.63 125.89 li
122.063 115.869 li
122.496 122.24 li
122.929 120.261 li
123.362 113.085 li
123.795 118.838 li
124.228 116.054 li
124.661 114.817 li
125.094 113.889 li
125.527 112.776 li
125.96 111.662 li
126.393 111.167 li
126.826 105.538 li
127.259 111.353 li
127.692 108.755 li
128.125 109.25 li
128.558 94.5269 li
128.929 98.9189 li
129.362 96.2588 li
129.795 98.8569 li
130.229 96.6299 li
130.661 85.8662 li
131.094 100.465 li
131.527 88.8359 li
131.96 90.3203 li
132.394 86.856 li
132.827 84.2578 li
133.259 76.0303 li
133.692 76.0303 li
134.125 76.2778 li
134.559 72.9375 li
134.992 64.1533 li
135.425 69.1641 li
135.857 63.1636 li
136.229 65.8237 li
136.662 62.7925 li
137.095 63.3491 li
137.528 57.7817 li
137.961 67.6177 li
138.394 57.2866 li
138.827 59.3901 li
139.26 64.6484 li
139.693 52.833 li
140.126 53.3276 li
140.559 65.1431 li
140.992 73.4941 li
141.425 86.7324 li
141.858 79.4326 li
142.291 83.7012 li
142.724 85.5571 li
143.157 95.1455 li
143.528 106.033 li
143.961 102.754 li
144.395 105.786 li
144.828 119.581 li
145.26 125.024 li
145.693 125.396 li
146.126 131.891 li
146.56 136.901 li
146.993 134.551 li
147.426 139.376 li
147.858 139.995 li
148.292 139.747 li
148.725 139.314 li
149.158 139.5 li
149.591 136.839 li
150.024 137.21 li
150.395 136.468 li
150.828 132.695 li
151.261 133.561 li
151.694 134.551 li
152.127 126.818 li
152.56 130.777 li
152.993 128.736 li
153.426 132.014 li
153.859 133.685 li
154.292 130.839 li
154.725 132.509 li
155.158 130.282 li
155.591 127.808 li
156.024 128.798 li
156.457 132.695 li
156.89 132.695 li
157.323 127.127 li
157.694 133.066 li
158.127 133.932 li
158.561 129.664 li
158.994 135.479 li
159.427 135.603 li
159.859 133.87 li
160.292 135.479 li
160.726 135.664 li
161.159 136.901 li
161.592 138.51 li
162.024 138.572 li
162.458 139.005 li
162.891 139.438 li
163.324 139.623 li
163.757 139.995 li
164.19 139.623 li
164.623 139.623 li
164.994 138.881 li
165.427 136.097 li
165.86 129.664 li
166.293 126.076 li
166.727 116.364 li
167.159 104.857 li
167.592 101.084 li
168.025 78.8145 li
168.458 78.4429 li
168.892 100.651 li
169.324 108.693 li
169.757 131.52 li
170.19 138.633 li
170.623 139.747 li
171.057 138.201 li
171.489 135.664 li
171.922 133.251 li
172.294 131.705 li
172.727 132.633 li
173.159 130.035 li
173.593 127.622 li
174.025 128.736 li
174.459 128.055 li
174.892 128.612 li
175.324 129.107 li
175.758 125.457 li
176.19 128.179 li
176.624 130.777 li
177.057 133.375 li
177.49 133.561 li
177.923 135.85 li
178.355 138.819 li
178.789 139.623 li
179.222 139.066 li
179.593 129.911 li
180.026 94.3413 li
180.459 98.2383 li
180.893 135.045 li
181.325 138.572 li
181.758 136.035 li
182.191 130.159 li
182.624 128.859 li
183.058 127.808 li
183.49 130.159 li
183.924 131.272 li
184.356 133.19 li
184.789 132.076 li
185.223 131.21 li
185.655 132.509 li
186.089 133.066 li
186.46 138.015 li
186.893 139.066 li
187.325 139.933 li
187.759 135.603 li
188.191 127.499 li
188.625 130.097 li
189.058 131.458 li
189.491 131.086 li
189.924 134.736 li
190.356 133.19 li
190.79 132.757 li
191.223 134.427 li
191.656 134.365 li
192.089 134.736 li
192.521 134.18 li
192.955 129.107 li
193.388 133.19 li
193.759 131.767 li
194.192 133.004 li
194.625 133.747 li
195.059 132.324 li
195.491 130.715 li
195.924 131.024 li
196.357 132.88 li
196.79 133.87 li
197.224 131.829 li
197.656 134.674 li
198.09 133.251 li
198.522 134.056 li
198.955 134.18 li
199.389 131.767 li
199.821 135.231 li
200.255 134.427 li
200.688 133.313 li
201.059 133.251 li
201.492 131.829 li
201.925 133.747 li
202.357 132.324 li
202.791 136.406 li
203.224 136.345 li
203.657 134.922 li
204.09 135.85 li
204.522 135.417 li
204.956 134.798 li
205.389 135.664 li
205.822 135.726 li
206.255 135.912 li
206.688 135.231 li
207.121 134.674 li
207.554 136.283 li
207.987 138.139 li
208.358 135.107 li
208.791 134.489 li
209.225 134.551 li
209.657 137.52 li
210.091 135.541 li
210.523 136.035 li
210.956 137.025 li
211.39 136.53 li
211.822 137.458 li
212.256 136.468 li
212.688 136.221 li
213.121 136.345 li
213.555 136.901 li
213.987 135.293 li
214.421 138.386 li
214.854 136.716 li
215.225 135.293 li
215.658 136.53 li
216.091 137.52 li
216.523 137.644 li
216.957 138.201 li
217.39 135.603 li
217.823 136.839 li
218.256 136.345 li
218.689 137.768 li
219.122 136.592 li
219.555 137.52 li
219.988 136.592 li
220.421 136.221 li
220.854 138.262 li
221.287 137.396 li
221.72 138.201 li
222.153 137.087 li
222.524 137.458 li
222.957 136.839 li
223.391 138.881 li
223.823 137.891 li
224.257 138.386 li
224.689 138.077 li
225.122 138.201 li
225.556 136.839 li
225.988 138.324 li
226.422 138.262 li
226.854 138.386 li
227.288 138.386 li
227.721 138.633 li
228.153 138.943 li
228.587 138.695 li
229.02 138.386 li
229.453 137.087 li
229.824 138.139 li
230.257 139.562 li
230.689 138.881 li
231.123 139.128 li
231.556 138.139 li
231.989 138.262 li
232.422 139.128 li
232.855 138.201 li
233.288 139.438 li
233.721 139.005 li
234.154 138.757 li
234.587 139.562 li
235.021 139.252 li
235.453 139.562 li
235.887 139.376 li
236.319 140.056 li
236.752 137.829 li
237.123 138.943 li
237.557 139.5 li
237.989 138.448 li
238.423 139.252 li
238.855 138.819 li
239.289 139.314 li
239.722 137.644 li
240.154 137.953 li
240.588 138.139 li
241.021 138.201 li
241.454 138.757 li
241.887 137.953 li
242.319 137.706 li
242.753 138.819 li
243.186 137.272 li
243.619 138.633 li
244.052 139.19 li
244.423 137.21 li
244.856 138.448 li
245.289 137.953 li
245.722 138.572 li
246.155 136.345 li
246.588 138.201 li
247.021 137.953 li
247.454 136.839 li
247.887 138.695 li
248.32 137.644 li
248.753 136.221 li
249.187 138.51 li
249.619 139.5 li
250.053 138.695 li
250.485 138.572 li
250.918 138.262 li
251.289 139.871 li
251.723 138.757 li
252.155 138.819 li
252.589 139.128 li
253.021 139.747 li
253.455 139.5 li
253.888 139.623 li
254.32 139.871 li
254.754 139.562 li
255.187 139.623 li
255.62 139.252 li
256.053 139.747 li
256.486 139.933 li
256.919 139.685 li
257.352 139.933 li
257.785 138.881 li
258.218 139.809 li
258.589 140.056 li
259.022 139.376 li
259.455 139.809 li
259.888 139.685 li
260.321 139.562 li
260.754 139.871 li
261.188 139.995 li
261.62 139.933 li
262.054 139.933 li
262.486 139.933 li
262.919 139.19 li
263.353 138.077 li
263.785 139.19 li
264.219 139.933 li
264.651 139.685 li
265.084 139.933 li
265.518 140.056 li
265.889 139.685 li
266.321 140.056 li
266.755 139.933 li
267.188 134.86 li
267.621 99.1665 li
268.054 136.035 li
268.486 139.19 li
268.92 139.933 li
269.353 139.995 li
269.786 139.809 li
270.219 139.19 li
270.652 139.623 li
271.085 139.5 li
271.518 139.933 li
271.951 139.995 li
272.384 139.438 li
272.817 138.077 li
273.188 130.592 li
273.621 86.5469 li
274.055 3.2207 li
274.487 46.894 li
274.92 110.858 li
275.354 133.19 li
275.786 135.417 li
276.22 138.015 li
276.652 138.819 li
277.085 139.747 li
277.519 139.871 li
277.951 139.747 li
278.385 139.933 li
278.817 139.933 li
279.251 139.995 li
279.684 139.314 li
280.116 139.19 li
280.487 139.933 li
280.921 139.933 li
281.354 139.871 li
281.787 139.871 li
282.22 136.283 li
282.653 136.839 li
283.086 126.076 li
283.519 119.457 li
283.952 96.6919 li
284.385 67.3701 li
284.818 38.6665 li
285.251 20.4795 li
285.684 38.543 li
286.117 55.7402 li
286.55 74.2983 li
286.983 98.1768 li
287.354 104.363 li
287.787 112.033 li
288.221 123.168 li
288.653 126.694 li
289.086 131.643 li
289.52 131.643 li
289.952 133.994 li
290.386 134.674 li
290.818 136.406 li
291.252 136.963 li
291.685 136.839 li
292.117 139.438 li
292.551 138.572 li
292.983 139.066 li
293.417 138.695 li
293.85 139.809 li
294.282 139.747 li
294.654 139.933 li
295.087 139.747 li
295.52 139.995 li
295.953 139.314 li
296.386 139.995 li
296.819 139.933 li
297.252 140.056 li
297.685 139.933 li
298.118 140.056 li
298.551 139.562 li
298.984 139.623 li
299.417 139.995 li
299.851 139.995 li
300.283 139.128 li
300.716 139.933 li
301.149 139.623 li
301.582 138.757 li
301.953 137.334 li
302.387 139.438 li
302.819 138.324 li
303.252 136.468 li
303.686 134.18 li
304.118 133.747 li
304.552 133.19 li
304.984 134.674 li
305.418 133.561 li
305.851 127.932 li
306.283 115.188 li
306.717 110.363 li
307.149 105.105 li
307.583 92.1763 li
308.016 74.4839 li
308.449 71.4526 li
308.882 71.8857 li
309.253 43.2446 li
309.686 40.5225 li
310.119 34.9551 li
310.552 31.1196 li
310.985 12.4995 li
311.418 24.9336 li
311.852 24.9336 li
312.284 27.5938 li
312.717 22.521 li
313.15 21.9023 li
313.583 25.9233 li
314.017 28.9546 li
314.449 37.6152 li
314.882 23.8818 li
315.315 26.666 li
315.748 28.707 li
316.182 38.8525 li
316.553 44.6055 li
316.985 58.4004 li
317.419 35.2026 li
317.852 52.6475 li
318.284 58.7715 li
318.718 67.6177 li
319.15 64.0298 li
319.584 65.6377 li
320.017 69.5972 li
320.449 63.7202 li
320.883 73.061 li
321.315 70.5249 li
321.749 80.6699 li
322.182 80.2988 li
322.615 87.2275 li
323.048 82.835 li
323.419 85.3716 li
323.852 87.1035 li
324.285 87.9697 li
324.718 91.9907 li
325.151 95.3311 li
325.584 94.2178 li
326.018 98.1147 li
326.45 91.7432 li
326.883 87.6602 li
327.316 94.5269 li
327.749 102.383 li
328.183 98.7334 li
328.615 99.2285 li
329.049 101.332 li
329.481 101.27 li
329.914 100.96 li
330.348 105.415 li
330.719 100.342 li
331.151 107.146 li
331.585 105.105 li
332.018 108.631 li
332.45 109.93 li
332.884 108.322 li
333.316 106.157 li
333.75 109.25 li
334.183 110.982 li
334.616 114.446 li
335.049 110.425 li
335.481 111.601 li
335.915 112.095 li
336.348 114.879 li
336.781 107.022 li
337.214 116.797 li
337.646 113.085 li
338.019 112.405 li
338.451 113.395 li
338.884 116.858 li
339.317 120.694 li
339.75 115.931 li
340.184 116.054 li
340.616 119.89 li
341.049 120.014 li
341.482 117.787 li
341.915 114.26 li
342.349 113.209 li
342.781 116.549 li
343.215 117.106 li
343.647 119.147 li
344.08 117.91 li
344.514 115.064 li
344.946 121.56 li
345.317 117.415 li
345.751 119.642 li
346.184 124.22 li
346.617 120.014 li
347.05 123.354 li
347.482 119.209 li
347.916 123.23 li
348.349 121.003 li
348.782 123.787 li
349.215 118.096 li
349.647 122.55 li
350.081 124.529 li
350.514 125.89 li
350.947 122.735 li
351.38 123.044 li
351.813 121.931 li
352.185 127.87 li
352.617 124.034 li
353.05 123.168 li
353.483 119.952 li
353.916 121.127 li
354.35 120.261 li
354.782 125.457 li
355.216 123.54 li
355.648 124.591 li
356.081 126.076 li
356.515 122.735 li
356.947 119.147 li
357.381 122.859 li
357.813 124.962 li
358.246 126.385 li
358.68 125.333 li
359.112 125.705 li
359.483 127.746 li
359.917 124.467 li
360.35 125.148 li
360.783 124.653 li
361.216 123.106 li
361.648 125.519 li
362.082 124.962 li
362.515 126.385 li
362.948 120.756 li
363.381 121.869 li
363.814 124.962 li
364.247 129.54 li
364.68 127.251 li
365.113 126.076 li
365.546 124.962 li
365.979 129.169 li
366.412 127.808 li
366.783 126.385 li
367.217 129.23 li
367.649 125.828 li
368.082 124.406 li
368.516 128.55 li
368.948 124.406 li
369.382 129.54 li
369.814 127.437 li
370.247 127.004 li
370.681 128.921 li
371.113 127.808 li
371.547 127.375 li
371.979 126.447 li
372.412 127.004 li
372.846 130.963 li
373.278 126.694 li
373.712 130.097 li
374.083 126.385 li
374.516 130.777 li
374.949 128.983 li
375.382 127.622 li
375.814 130.22 li
376.248 127.622 li
376.681 129.292 li
377.114 128.859 li
377.547 128.241 li
377.98 130.282 li
378.413 128.859 li
378.846 127.313 li
379.279 125.396 li
379.712 131.582 li
380.146 126.447 li
380.578 130.839 li
381.012 130.53 li
381.383 128.612 li
381.815 129.726 li
382.248 127.746 li
382.682 131.582 li
383.114 129.849 li
383.548 125.396 li
383.98 129.973 li
384.414 128.488 li
384.847 128.303 li
385.279 127.746 li
385.713 127.994 li
386.146 131.086 li
386.579 129.726 li
387.012 131.272 li
387.444 128.488 li
387.878 130.468 li
388.249 129.045 li
388.682 128.488 li
389.115 130.839 li
389.548 127.065 li
389.981 130.963 li
390.414 125.519 li
390.847 131.396 li
391.28 127.87 li
391.713 129.354 li
392.146 130.963 li
392.579 130.53 li
393.012 130.097 li
393.445 129.169 li
393.878 134.118 li
394.312 129.478 li
394.744 131.21 li
395.178 131.705 li
395.549 129.107 li
395.981 130.406 li
396.414 131.024 li
396.848 131.458 li
397.28 130.592 li
397.714 129.849 li
398.146 132.695 li
398.58 130.715 li
399.013 130.653 li
399.445 128.736 li
399.879 131.334 li
400.312 128.921 li
400.745 130.468 li
401.178 127.932 li
401.611 133.809 li
402.044 131.148 li
402.477 131.582 li
402.848 130.035 li
403.281 128.736 li
403.714 131.396 li
404.147 132.386 li
404.58 131.52 li
405.014 129.416 li
405.446 130.653 li
405.879 129.045 li
406.313 133.066 li
406.745 133.623 li
407.179 130.715 li
407.611 133.19 li
408.044 131.024 li
408.478 131.21 li
408.91 130.282 li
409.344 129.911 li
409.776 131.396 li
410.147 129.23 li
410.581 133.375 li
1 0 0 rgb
@
24.1992 139.871 mo
28.6914 139.87 33.1855 139.92 37.6758 139.763 cv
42.0005 139.611 46.3638 139.623 50.6875 139.623 cv
54.9937 139.623 59.291 139.379 63.5977 139.314 cv
67.8696 139.25 72.1558 138.967 76.4058 138.805 cv
80.6973 138.641 85.0254 138.258 89.2866 137.706 cv
93.437 137.168 97.6953 136.541 101.738 135.345 cv
105.763 134.154 109.784 132.644 113.178 130.143 cv
116.634 127.595 119.313 124.519 121.593 120.879 cv
123.903 117.193 125.48 113.149 126.927 109.074 cv
128.414 104.886 129.492 100.565 130.554 96.2554 cv
131.675 91.7031 132.537 87.0791 133.433 82.478 cv
134.25 78.2856 135.028 74.0781 136 69.9165 cv
136.463 67.9346 136.756 65.7354 137.76 63.937 cv
139.146 61.4541 139.967 66.4629 140.142 67.4624 cv
140.909 71.8677 141.305 76.3105 141.694 80.7637 cv
142.084 85.2256 142.46 89.6841 142.777 94.1519 cv
143.093 98.6016 143.397 103.052 143.709 107.501 cv
144.023 111.972 144.352 116.442 144.717 120.909 cv
145.064 125.146 145.483 129.402 146.101 133.609 cv
146.304 134.997 146.424 138.926 147.758 139.726 cv
149.071 140.515 150.422 136.327 150.847 135.441 cv
151.598 133.875 152.545 131.428 154.394 131.006 cv
156.291 130.574 157.93 132.858 158.922 134.168 cv
160.15 135.79 161.088 137.763 162.521 139.193 cv
164.545 141.212 165.068 137.376 165.311 135.922 cv
166.043 131.54 166.244 127.036 166.514 122.606 cv
166.775 118.305 166.983 114 167.182 109.695 cv
167.392 105.121 167.509 100.537 167.808 95.9678 cv
167.889 94.7285 167.869 93.377 168.214 92.1797 cv
168.717 92.8911 168.566 94.3047 168.619 95.1772 cv
168.692 96.3979 168.748 97.6191 168.801 98.8408 cv
168.898 101.092 168.971 103.344 169.046 105.596 cv
169.192 109.968 169.249 114.342 169.386 118.714 cv
169.526 123.204 169.662 127.695 169.88 132.182 cv
169.946 133.539 170.017 134.896 170.118 136.25 cv
170.185 137.129 170.059 139.267 170.747 139.865 cv
171.717 138.371 171.83 128.1 174.421 128.593 cv
175.945 128.882 176.764 132.458 177.1 133.662 cv
177.63 135.553 177.751 138.186 178.736 139.87 cv
178.771 139.877 178.806 139.878 178.841 139.87 cv
179.604 138.079 179.363 135.592 179.427 133.675 cv
179.509 131.175 179.567 128.675 179.624 126.174 cv
179.724 121.739 179.785 117.303 179.854 112.867 cv
179.924 108.453 179.983 104.04 180.094 99.627 cv
180.113 98.8711 179.938 97.8267 180.274 97.1245 cv
180.359 101.659 180.505 106.193 180.583 110.728 cv
180.657 115.085 180.692 119.443 180.756 123.8 cv
180.824 128.484 180.832 133.18 181.065 137.86 cv
181.096 138.46 180.992 139.333 181.322 139.805 cv
181.843 137.714 181.872 135.441 182.225 133.309 cv
182.439 132.015 183.056 127.809 184.976 130.066 cv
187.059 132.517 186.565 136.908 187.202 139.871 cv
187.668 135.426 187.47 130.826 187.515 126.36 cv
187.562 121.616 187.613 116.873 187.668 112.13 cv
187.678 111.273 187.688 110.416 187.697 109.559 cv
187.769 113.83 187.83 118.099 187.865 122.37 cv
187.905 127.229 187.945 132.088 188.03 136.948 cv
188.046 137.821 187.916 138.837 188.191 139.685 cv
188.364 137.455 188.426 135.192 188.77 132.98 cv
188.9 132.144 188.996 130.74 189.991 130.47 cv
190.765 130.259 191.923 130.942 192.584 131.272 cv
195.056 132.505 194.515 135.768 194.563 138.139 cv
194.604 137.768 194.646 137.396 194.688 137.025 cv
194.729 137.582 194.77 138.139 194.811 138.695 cv
194.9 137.536 194.506 132.871 195.737 132.446 cv
196.445 132.201 197.935 133.019 198.631 133.223 cv
199.673 133.527 200.739 133.781 201.792 134.053 cv
205.914 135.116 210.183 135.89 214.396 136.456 cv
218.808 137.048 223.187 137.563 227.612 138.032 cv
231.982 138.495 236.375 138.791 240.76 139.116 cv
244.896 139.424 249.071 139.688 253.217 139.809 cv
254.241 139.838 255.262 139.871 256.287 139.871 cv
257.12 139.871 258.627 140.171 259.393 139.871 cv
260.257 139.531 259.954 136.88 259.956 135.931 cv
259.972 129.898 259.986 123.865 260.002 117.831 cv
260.005 116.517 260.009 115.203 260.012 113.889 cv
260.222 118.39 260.173 122.898 260.198 127.403 cv
260.216 130.311 260.232 133.218 260.249 136.126 cv
260.253 136.724 260.236 137.325 260.26 137.922 cv
260.304 139.048 260.094 139.822 261.311 139.871 cv
262.35 139.912 263.369 139.769 264.403 139.809 cv
265.737 139.86 266.119 139.96 266.263 138.461 cv
266.497 136.002 266.436 133.496 266.483 131.03 cv
266.577 126.255 266.569 121.476 266.605 116.7 cv
266.627 113.841 266.639 110.983 266.648 108.125 cv
266.67 101.859 266.69 95.5928 266.712 89.3267 cv
266.727 85.1279 266.741 80.9297 266.755 76.731 cv
266.765 73.7207 266.772 70.7104 266.781 67.7002 cv
266.801 61.2251 266.819 54.7505 266.839 48.2759 cv
266.852 43.8892 266.82 39.5 266.878 35.1138 cv
266.88 34.9785 266.879 34.8428 266.879 34.7075 cv
266.933 38.0024 266.999 41.2964 267.009 44.5913 cv
267.025 50.0923 267.042 55.5938 267.059 61.0947 cv
267.076 67.1182 267.095 73.1421 267.113 79.166 cv
267.12 81.4277 267.127 83.6899 267.137 85.9517 cv
267.162 91.9966 267.188 98.041 267.213 104.086 cv
267.228 107.51 267.233 110.935 267.263 114.36 cv
267.304 119.125 267.279 123.894 267.414 128.657 cv
267.485 131.16 267.54 133.664 267.657 136.165 cv
267.701 137.101 267.64 138.205 267.94 139.098 cv
268.361 140.35 269.401 139.705 270.402 139.683 cv
271.503 139.658 272.207 140.301 272.552 138.911 cv
272.801 137.904 272.821 136.804 272.883 135.773 cv
273.015 133.564 273.072 131.348 273.127 129.135 cv
273.246 124.282 273.297 119.428 273.362 114.574 cv
273.423 110.071 273.454 105.568 273.494 101.066 cv
273.535 96.3716 273.563 91.6772 273.598 86.9829 cv
273.625 83.1714 273.648 79.3604 273.673 75.5493 cv
273.698 71.3936 273.734 67.2383 273.748 63.0825 cv
273.766 57.4307 273.783 51.7793 273.801 46.1274 cv
273.813 41.9111 273.861 37.6948 273.896 33.479 cv
273.925 30.1348 273.985 26.793 274.055 23.4492 cv
274.201 28.3174 274.236 33.1851 274.288 38.0552 cv
274.335 42.5981 274.362 47.1416 274.397 51.6851 cv
274.43 55.8164 274.461 59.9482 274.492 64.0796 cv
274.523 68.249 274.556 72.418 274.591 76.5869 cv
274.629 81.0771 274.665 85.5669 274.711 90.0571 cv
274.761 94.9395 274.813 99.8223 274.875 104.705 cv
274.929 108.927 274.987 113.149 275.079 117.372 cv
275.181 122.034 275.324 126.69 275.527 131.35 cv
275.619 133.453 275.664 135.573 276.096 137.644 cv
276.296 138.603 276.542 139.676 277.581 139.871 cv
278.499 140.042 279.478 139.64 280.42 139.749 cv
281.647 139.89 282.03 139.691 282.344 138.387 cv
282.604 137.299 282.659 136.116 282.763 135.001 cv
282.955 132.917 283.07 130.828 283.171 128.738 cv
283.387 124.242 283.55 119.739 283.643 115.239 cv
283.736 110.708 283.8 106.176 283.894 101.644 cv
283.986 97.124 284.07 92.604 284.146 88.0835 cv
284.217 83.8169 284.286 79.5503 284.357 75.2842 cv
284.432 70.834 284.501 66.3838 284.587 61.9336 cv
284.679 57.1553 284.775 52.3774 284.909 47.5996 cv
284.967 45.5684 284.74 43.0146 285.375 41.0796 cv
286.133 45.2686 285.872 49.833 285.995 54.0811 cv
286.128 58.6743 286.244 63.2681 286.364 67.8618 cv
286.483 72.4434 286.603 77.0249 286.73 81.606 cv
286.849 85.8354 286.976 90.0649 287.117 94.2935 cv
287.27 98.8203 287.503 103.346 287.712 107.87 cv
287.92 112.371 288.163 116.873 288.528 121.365 cv
288.881 125.693 289.27 130.066 290.408 134.271 cv
290.904 136.104 291.641 138.195 293.378 139.171 cv
294.959 140.059 297.12 139.985 298.923 139.871 cv
303.209 139.598 303.59 133.614 304.071 130.235 cv
304.709 125.764 305.131 121.238 305.475 116.737 cv
305.804 112.423 306.071 108.104 306.324 103.784 cv
306.563 99.7339 306.843 95.686 307.054 91.6348 cv
307.344 86.042 307.614 80.4487 307.895 74.8555 cv
308.088 70.999 308.296 67.1426 308.511 63.2871 cv
308.752 58.9551 308.997 54.623 309.273 50.2935 cv
309.562 45.7686 309.8 41.2437 310.205 36.7271 cv
310.333 35.3027 310.935 24.0938 312.533 24.1899 cv
313.707 24.2607 314.208 28.9282 314.382 29.835 cv
314.809 32.0767 315.2 34.3184 315.511 36.5791 cv
316.132 41.1064 316.868 45.6216 317.529 50.144 cv
318.145 54.356 318.749 58.5752 319.457 62.7729 cv
320.176 67.0361 320.983 71.293 321.811 75.5356 cv
322.681 79.9976 323.868 84.3892 325.057 88.7734 cv
326.178 92.9097 327.635 97.082 329.438 100.975 cv
331.247 104.882 333.442 108.616 336.13 111.988 cv
338.748 115.272 342.087 117.998 345.641 120.185 cv
349.272 122.421 353.25 124.171 357.318 125.457 cv
361.376 126.739 365.529 127.767 369.723 128.533 cv
374.008 129.317 378.292 129.993 382.619 130.53 cv
386.961 131.068 391.327 131.395 395.67 131.853 cv
400.545 132.368 405.446 132.569 410.333 132.942 cv
410.395 132.942 li
410.457 132.942 li
410.519 132.942 li
410.581 132.942 li
0 0 0 rgb
@
grestore % PSGState
2 lc
0 lj
410.581 142.902 mo
24.1992 142.902 li
@
24.1992 142.902 mo
24.1992 .375 li
@
24.1992 .375 mo
410.581 .375 li
@
410.581 .375 mo
410.581 142.902 li
@
0 lc
24.1992 142.902 mo
24.1992 139.747 li
@
41.3965 142.902 mo
41.3965 140.984 li
@
58.5317 142.902 mo
58.5317 140.984 li
@
75.729 142.902 mo
75.729 140.984 li
@
92.8643 142.902 mo
92.8643 140.984 li
@
110.062 142.902 mo
110.062 139.747 li
@
127.259 142.902 mo
127.259 140.984 li
@
144.395 142.902 mo
144.395 140.984 li
@
161.592 142.902 mo
161.592 140.984 li
@
178.789 142.902 mo
178.789 140.984 li
@
195.924 142.902 mo
195.924 139.747 li
@
213.121 142.902 mo
213.121 140.984 li
@
230.257 142.902 mo
230.257 140.984 li
@
247.454 142.902 mo
247.454 140.984 li
@
264.651 142.902 mo
264.651 140.984 li
@
281.787 142.902 mo
281.787 139.747 li
@
298.984 142.902 mo
298.984 140.984 li
@
316.182 142.902 mo
316.182 140.984 li
@
333.316 142.902 mo
333.316 140.984 li
@
350.514 142.902 mo
350.514 140.984 li
@
367.649 142.902 mo
367.649 139.747 li
@
384.847 142.902 mo
384.847 140.984 li
@
402.044 142.902 mo
402.044 140.984 li
@
24.1992 140.056 mo
27.354 140.056 li
@
24.1992 135.912 mo
26.1167 135.912 li
@
24.1992 131.767 mo
26.1167 131.767 li
@
24.1992 127.622 mo
26.1167 127.622 li
@
24.1992 123.478 mo
26.1167 123.478 li
@
24.1992 119.333 mo
27.354 119.333 li
@
24.1992 115.126 mo
26.1167 115.126 li
@
24.1992 110.982 mo
26.1167 110.982 li
@
24.1992 106.837 mo
26.1167 106.837 li
@
24.1992 102.692 mo
26.1167 102.692 li
@
24.1992 98.5479 mo
27.354 98.5479 li
@
24.1992 94.4033 mo
26.1167 94.4033 li
@
24.1992 90.2583 mo
26.1167 90.2583 li
@
24.1992 86.1138 mo
26.1167 86.1138 li
@
24.1992 81.9692 mo
26.1167 81.9692 li
@
24.1992 77.8247 mo
27.354 77.8247 li
@
24.1992 73.6797 mo
26.1167 73.6797 li
@
24.1992 69.4731 mo
26.1167 69.4731 li
@
24.1992 65.3286 mo
26.1167 65.3286 li
@
24.1992 61.1841 mo
26.1167 61.1841 li
@
24.1992 57.0396 mo
27.354 57.0396 li
@
24.1992 52.8945 mo
26.1167 52.8945 li
@
24.1992 48.75 mo
26.1167 48.75 li
@
24.1992 44.6055 mo
26.1167 44.6055 li
@
24.1992 40.4609 mo
26.1167 40.4609 li
@
24.1992 36.3159 mo
27.354 36.3159 li
@
24.1992 32.1714 mo
26.1167 32.1714 li
@
24.1992 28.0269 mo
26.1167 28.0269 li
@
24.1992 23.8203 mo
26.1167 23.8203 li
@
24.1992 19.6753 mo
26.1167 19.6753 li
@
24.1992 15.5308 mo
27.354 15.5308 li
@
24.1992 11.3862 mo
26.1167 11.3862 li
@
24.1992 7.2417 mo
26.1167 7.2417 li
@
24.1992 3.09668 mo
26.1167 3.09668 li
@
24.1992 .375 mo
24.1992 3.52979 li
@
41.3965 .375 mo
41.3965 2.29248 li
@
58.5317 .375 mo
58.5317 2.29248 li
@
75.729 .375 mo
75.729 2.29248 li
@
92.8643 .375 mo
92.8643 2.29248 li
@
110.062 .375 mo
110.062 3.52979 li
@
127.259 .375 mo
127.259 2.29248 li
@
144.395 .375 mo
144.395 2.29248 li
@
161.592 .375 mo
161.592 2.29248 li
@
178.789 .375 mo
178.789 2.29248 li
@
195.924 .375 mo
195.924 3.52979 li
@
213.121 .375 mo
213.121 2.29248 li
@
230.257 .375 mo
230.257 2.29248 li
@
247.454 .375 mo
247.454 2.29248 li
@
264.651 .375 mo
264.651 2.29248 li
@
281.787 .375 mo
281.787 3.52979 li
@
298.984 .375 mo
298.984 2.29248 li
@
316.182 .375 mo
316.182 2.29248 li
@
333.316 .375 mo
333.316 2.29248 li
@
350.514 .375 mo
350.514 2.29248 li
@
367.649 .375 mo
367.649 3.52979 li
@
384.847 .375 mo
384.847 2.29248 li
@
402.044 .375 mo
402.044 2.29248 li
@
410.581 140.056 mo
407.426 140.056 li
@
410.581 135.912 mo
408.725 135.912 li
@
410.581 131.767 mo
408.725 131.767 li
@
410.581 127.622 mo
408.725 127.622 li
@
410.581 123.478 mo
408.725 123.478 li
@
410.581 119.333 mo
407.426 119.333 li
@
410.581 115.126 mo
408.725 115.126 li
@
410.581 110.982 mo
408.725 110.982 li
@
410.581 106.837 mo
408.725 106.837 li
@
410.581 102.692 mo
408.725 102.692 li
@
410.581 98.5479 mo
407.426 98.5479 li
@
410.581 94.4033 mo
408.725 94.4033 li
@
410.581 90.2583 mo
408.725 90.2583 li
@
410.581 86.1138 mo
408.725 86.1138 li
@
410.581 81.9692 mo
408.725 81.9692 li
@
410.581 77.8247 mo
407.426 77.8247 li
@
410.581 73.6797 mo
408.725 73.6797 li
@
410.581 69.4731 mo
408.725 69.4731 li
@
410.581 65.3286 mo
408.725 65.3286 li
@
410.581 61.1841 mo
408.725 61.1841 li
@
410.581 57.0396 mo
407.426 57.0396 li
@
410.581 52.8945 mo
408.725 52.8945 li
@
410.581 48.75 mo
408.725 48.75 li
@
410.581 44.6055 mo
408.725 44.6055 li
@
410.581 40.4609 mo
408.725 40.4609 li
@
410.581 36.3159 mo
407.426 36.3159 li
@
410.581 32.1714 mo
408.725 32.1714 li
@
410.581 28.0269 mo
408.725 28.0269 li
@
410.581 23.8203 mo
408.725 23.8203 li
@
410.581 19.6753 mo
408.725 19.6753 li
@
410.581 15.5308 mo
407.426 15.5308 li
@
410.581 11.3862 mo
408.725 11.3862 li
@
410.581 7.2417 mo
408.725 7.2417 li
@
410.581 3.09668 mo
408.725 3.09668 li
@
gsave % PSGState
24.1992 .375 mo
24.1992 142.902 li
411.199 142.902 li
411.199 .375 li
eclp
grestore % PSGState
gsave % PSGState
24.1992 291.974 mo
24.1992 432.974 li
411.199 432.974 li
411.199 291.974 li
eclp
grestore % PSGState
gsave % PSGState
24.1992 291.974 mo
24.1992 432.974 li
411.199 432.974 li
411.199 291.974 li
eclp
grestore % PSGState
gsave % PSGState
24.1992 291.974 mo
24.1992 432.974 li
411.199 432.974 li
411.199 291.974 li
eclp
.5 lw
2 lc
1 lj
24.1992 429.412 mo
24.6367 429.224 li
25.0742 430.037 li
25.5117 428.849 li
25.8867 429.912 li
26.3242 429.599 li
26.7617 429.037 li
27.1992 429.849 li
27.6367 429.912 li
28.0742 429.849 li
28.5117 430.099 li
28.9492 430.037 li
29.3242 430.099 li
29.7617 429.474 li
30.1992 430.037 li
30.6367 429.474 li
31.0742 429.349 li
31.5117 430.099 li
31.9492 429.912 li
32.3867 429.974 li
32.7617 429.537 li
33.1992 429.849 li
33.6367 428.537 li
34.0742 428.599 li
34.5117 430.099 li
34.9492 429.912 li
35.3867 429.974 li
35.7617 429.662 li
36.1992 430.037 li
36.6367 428.474 li
37.0742 429.849 li
37.5117 429.412 li
37.9492 429.974 li
38.3867 429.349 li
38.8242 429.099 li
39.1992 429.849 li
39.6367 430.162 li
40.0742 430.099 li
40.5117 430.037 li
40.9492 430.037 li
41.3867 429.662 li
41.8242 429.224 li
42.2617 429.412 li
42.6367 429.724 li
43.0742 429.224 li
43.5117 429.974 li
43.9492 429.974 li
44.3867 429.412 li
44.8242 429.662 li
45.2617 429.599 li
45.6367 430.037 li
46.0742 430.099 li
46.5117 429.474 li
46.9492 429.349 li
47.3867 430.099 li
47.8242 429.974 li
48.2617 429.349 li
48.6992 429.974 li
49.0742 429.162 li
49.5117 430.099 li
49.9492 430.099 li
50.3867 429.787 li
50.8242 429.599 li
51.2617 429.849 li
51.6992 429.912 li
52.1367 428.599 li
52.5117 429.849 li
52.9492 430.099 li
53.3867 429.724 li
53.8242 429.662 li
54.2617 429.599 li
54.6992 429.599 li
55.1367 429.599 li
55.5117 429.287 li
55.9492 429.599 li
56.3867 429.474 li
56.8242 429.662 li
57.2617 429.912 li
57.6992 429.787 li
58.1367 429.662 li
58.5742 430.037 li
58.9492 429.849 li
59.3867 429.787 li
59.8242 429.662 li
60.2617 429.412 li
60.6992 429.349 li
61.1367 429.974 li
61.5742 429.724 li
62.0117 430.099 li
62.3867 429.974 li
62.8242 430.099 li
63.2617 430.037 li
63.6992 429.599 li
64.1367 429.287 li
64.5742 429.599 li
65.0117 429.474 li
65.3867 430.037 li
65.8242 428.662 li
66.2617 430.099 li
66.6992 429.724 li
67.1367 429.849 li
67.5742 430.099 li
68.0117 429.912 li
68.4492 429.787 li
68.8242 430.037 li
69.2617 430.099 li
69.6992 429.287 li
70.1367 429.974 li
70.5742 429.912 li
71.0117 430.037 li
71.4492 430.037 li
71.8242 429.537 li
72.2617 429.412 li
72.6992 429.537 li
73.1367 430.037 li
73.5742 430.037 li
74.0117 429.912 li
74.4492 429.912 li
74.8867 428.849 li
75.2617 428.912 li
75.6992 429.724 li
76.1367 428.287 li
76.5742 430.099 li
77.0117 429.849 li
77.4492 428.162 li
77.8867 429.224 li
78.3242 429.849 li
78.6992 428.787 li
79.1367 429.787 li
79.5742 428.912 li
80.0117 429.412 li
80.4492 429.849 li
80.8867 428.474 li
81.3242 428.037 li
81.6992 428.787 li
82.1367 429.724 li
82.5742 429.912 li
83.0117 430.099 li
83.4492 429.224 li
83.8867 429.974 li
84.3242 429.662 li
84.7617 429.662 li
85.1367 428.787 li
85.5742 429.412 li
86.0117 429.849 li
86.4492 428.537 li
86.8867 429.849 li
87.3242 429.162 li
87.7617 429.037 li
88.1992 428.849 li
88.5742 428.537 li
89.0117 428.037 li
89.4492 429.099 li
89.8867 429.099 li
90.3242 429.849 li
90.7617 428.037 li
91.1992 429.724 li
91.5742 429.599 li
92.0117 429.099 li
92.4492 428.849 li
92.8867 428.412 li
93.3242 429.349 li
93.7617 427.849 li
94.1992 429.474 li
94.6367 428.037 li
95.0117 428.787 li
95.4492 426.787 li
95.8867 429.412 li
96.3242 429.724 li
96.7617 428.724 li
97.1992 428.912 li
97.6367 428.224 li
98.0742 428.537 li
98.4492 427.974 li
98.8867 428.474 li
99.3242 426.599 li
99.7617 426.224 li
100.199 428.724 li
100.637 428.349 li
101.074 428.724 li
101.449 427.599 li
101.887 428.349 li
102.324 426.662 li
102.762 426.787 li
103.199 426.974 li
103.637 426.037 li
104.074 428.474 li
104.512 428.474 li
104.887 428.099 li
105.324 427.912 li
105.762 428.037 li
106.199 424.599 li
106.637 426.787 li
107.074 423.787 li
107.512 426.974 li
107.949 428.599 li
108.324 427.287 li
108.762 426.599 li
109.199 427.849 li
109.637 425.849 li
110.074 427.787 li
110.512 426.537 li
110.949 426.287 li
111.324 426.287 li
111.762 428.162 li
112.199 425.599 li
112.637 427.474 li
113.074 427.099 li
113.512 425.974 li
113.949 426.474 li
114.387 424.037 li
114.762 423.287 li
115.199 426.599 li
115.637 423.849 li
116.074 422.662 li
116.512 423.037 li
116.949 423.537 li
117.387 424.099 li
117.824 426.412 li
118.199 423.099 li
118.637 425.162 li
119.074 416.162 li
119.512 424.349 li
119.949 420.599 li
120.387 425.537 li
120.824 424.349 li
121.199 418.224 li
121.637 425.599 li
122.074 422.599 li
122.512 418.224 li
122.949 420.662 li
123.387 419.787 li
123.824 423.224 li
124.262 417.912 li
124.637 419.224 li
125.074 416.787 li
125.512 416.599 li
125.949 415.662 li
126.387 415.162 li
126.824 415.412 li
127.262 417.974 li
127.699 409.224 li
128.074 412.662 li
128.512 410.537 li
128.949 407.974 li
129.387 410.974 li
129.824 411.849 li
130.262 414.099 li
130.699 410.162 li
131.074 406.412 li
131.512 402.787 li
131.949 400.412 li
132.387 409.224 li
132.824 398.287 li
133.262 393.537 li
133.699 395.912 li
134.137 393.287 li
134.512 389.162 li
134.949 389.724 li
135.387 383.099 li
135.824 383.099 li
136.262 370.724 li
136.699 376.474 li
137.137 366.974 li
137.574 365.037 li
137.949 359.787 li
138.387 345.662 li
138.824 332.724 li
139.262 332.162 li
139.699 337.474 li
140.137 325.787 li
140.574 313.912 li
140.949 303.474 li
141.387 313.037 li
141.824 315.162 li
142.262 310.974 li
142.699 315.224 li
143.137 344.224 li
143.574 352.349 li
144.012 376.912 li
144.387 397.662 li
144.824 417.537 li
145.262 424.412 li
145.699 428.287 li
146.137 421.787 li
146.574 409.662 li
147.012 396.037 li
147.387 378.662 li
147.824 369.849 li
148.262 356.224 li
148.699 367.349 li
149.137 368.162 li
149.574 362.349 li
150.012 348.349 li
150.449 367.474 li
150.824 370.037 li
151.262 369.849 li
151.699 374.912 li
152.137 387.537 li
152.574 374.724 li
153.012 381.162 li
153.449 379.537 li
153.887 390.849 li
154.262 398.912 li
154.699 386.974 li
155.137 395.912 li
155.574 390.912 li
156.012 396.287 li
156.449 399.037 li
156.887 396.412 li
157.262 408.287 li
157.699 407.912 li
158.137 408.224 li
158.574 411.787 li
159.012 408.287 li
159.449 411.287 li
159.887 410.662 li
160.324 408.474 li
160.699 412.787 li
161.137 413.787 li
161.574 416.849 li
162.012 421.037 li
162.449 419.037 li
162.887 420.787 li
163.324 418.099 li
163.762 417.287 li
164.137 418.474 li
164.574 421.537 li
165.012 422.412 li
165.449 419.349 li
165.887 425.787 li
166.324 424.224 li
166.762 421.537 li
167.137 424.224 li
167.574 428.599 li
168.012 428.412 li
168.449 429.287 li
168.887 429.599 li
169.324 421.849 li
169.762 419.224 li
170.199 428.474 li
170.574 419.974 li
171.012 419.724 li
171.449 421.162 li
171.887 419.287 li
172.324 419.412 li
172.762 418.037 li
173.199 419.912 li
173.637 424.224 li
174.012 416.537 li
174.449 420.599 li
174.887 419.912 li
175.324 420.662 li
175.762 420.349 li
176.199 425.099 li
176.637 422.412 li
177.012 424.849 li
177.449 423.099 li
177.887 425.912 li
178.324 421.599 li
178.762 426.787 li
179.199 421.099 li
179.637 423.912 li
180.074 424.287 li
180.449 426.724 li
180.887 422.349 li
181.324 424.662 li
181.762 425.599 li
182.199 427.224 li
182.637 424.474 li
183.074 426.162 li
183.512 425.537 li
183.887 428.662 li
184.324 423.599 li
184.762 426.099 li
185.199 428.162 li
185.637 425.787 li
186.074 425.787 li
186.512 425.037 li
186.887 426.287 li
187.324 424.912 li
187.762 424.662 li
188.199 427.099 li
188.637 424.662 li
189.074 426.912 li
189.512 427.787 li
189.949 426.912 li
190.324 427.849 li
190.762 428.037 li
191.199 426.474 li
191.637 428.912 li
192.074 426.037 li
192.512 425.787 li
192.949 428.662 li
193.387 427.662 li
193.762 427.912 li
194.199 427.787 li
194.637 429.412 li
195.074 426.287 li
195.512 425.412 li
195.949 427.724 li
196.387 425.412 li
196.762 427.037 li
197.199 428.412 li
197.637 426.099 li
198.074 429.099 li
198.512 426.912 li
198.949 428.412 li
199.387 427.662 li
199.824 425.787 li
200.199 427.599 li
200.637 428.787 li
201.074 428.974 li
201.512 427.474 li
201.949 428.849 li
202.387 428.349 li
202.824 429.599 li
203.262 427.162 li
203.637 427.474 li
204.074 429.099 li
204.512 427.974 li
204.949 426.349 li
205.387 429.224 li
205.824 429.412 li
206.262 429.037 li
206.637 423.287 li
207.074 428.224 li
207.512 427.912 li
207.949 426.162 li
208.387 429.599 li
208.824 428.412 li
209.262 425.912 li
209.699 428.537 li
210.074 427.974 li
210.512 428.599 li
210.949 427.912 li
211.387 428.287 li
211.824 428.474 li
212.262 429.849 li
212.699 428.099 li
213.137 429.037 li
213.512 426.349 li
213.949 427.912 li
214.387 427.162 li
214.824 428.912 li
215.262 429.099 li
215.699 429.662 li
216.137 427.974 li
216.512 428.849 li
216.949 429.037 li
217.387 429.787 li
217.824 427.287 li
218.262 429.537 li
218.699 428.037 li
219.137 430.099 li
219.574 426.224 li
219.949 427.724 li
220.387 429.787 li
220.824 430.037 li
221.262 428.912 li
221.699 429.287 li
222.137 429.662 li
222.574 428.974 li
223.012 428.724 li
223.387 427.662 li
223.824 429.224 li
224.262 428.787 li
224.699 429.412 li
225.137 429.474 li
225.574 429.474 li
226.012 427.412 li
226.387 429.037 li
226.824 429.537 li
227.262 428.537 li
227.699 429.162 li
228.137 428.787 li
228.574 429.412 li
229.012 429.099 li
229.449 429.537 li
229.824 430.037 li
230.262 427.912 li
230.699 429.162 li
231.137 428.099 li
231.574 429.662 li
232.012 430.037 li
232.449 428.037 li
232.824 429.287 li
233.262 429.537 li
233.699 430.099 li
234.137 429.849 li
234.574 429.037 li
235.012 429.599 li
235.449 429.287 li
235.887 426.599 li
236.262 429.287 li
236.699 429.099 li
237.137 427.599 li
237.574 430.099 li
238.012 429.974 li
238.449 429.912 li
238.887 429.412 li
239.324 429.724 li
239.699 429.787 li
240.137 429.724 li
240.574 429.537 li
241.012 429.662 li
241.449 430.099 li
241.887 429.412 li
242.324 428.599 li
242.699 428.662 li
243.137 429.287 li
243.574 429.349 li
244.012 429.849 li
244.449 427.974 li
244.887 429.662 li
245.324 430.037 li
245.762 429.724 li
246.137 429.787 li
246.574 429.849 li
247.012 429.662 li
247.449 429.224 li
247.887 430.037 li
248.324 429.912 li
248.762 429.349 li
249.199 429.599 li
249.574 429.599 li
250.012 429.537 li
250.449 430.099 li
250.887 430.037 li
251.324 429.974 li
251.762 429.912 li
252.199 429.099 li
252.574 430.099 li
253.012 429.912 li
253.449 429.662 li
253.887 429.974 li
254.324 429.912 li
254.762 430.162 li
255.199 429.974 li
255.637 429.974 li
256.012 429.912 li
256.449 429.787 li
256.887 430.099 li
257.324 429.287 li
257.762 429.599 li
258.199 429.849 li
258.637 430.037 li
259.074 429.662 li
259.449 429.474 li
259.887 430.099 li
260.324 429.912 li
260.762 430.099 li
261.199 429.974 li
261.637 429.537 li
262.074 430.099 li
262.449 429.599 li
262.887 430.099 li
263.324 430.037 li
263.762 429.662 li
264.199 430.099 li
264.637 430.099 li
265.074 429.849 li
265.512 429.037 li
265.887 429.974 li
266.324 430.099 li
266.762 427.912 li
267.199 428.974 li
267.637 429.724 li
268.074 429.349 li
268.512 430.037 li
268.949 429.849 li
269.324 430.162 li
269.762 429.849 li
270.199 429.787 li
270.637 429.849 li
271.074 429.787 li
271.512 429.662 li
271.949 429.662 li
272.324 428.849 li
272.762 429.724 li
273.199 429.974 li
273.637 429.662 li
274.074 429.724 li
274.512 429.474 li
274.949 429.537 li
275.387 429.412 li
275.762 429.599 li
276.199 429.787 li
276.637 428.912 li
277.074 429.537 li
277.512 427.974 li
277.949 428.724 li
278.387 429.974 li
278.824 428.412 li
279.199 428.037 li
279.637 427.537 li
280.074 428.599 li
280.512 429.162 li
280.949 429.412 li
281.387 428.599 li
281.824 426.974 li
282.199 427.099 li
282.637 427.724 li
283.074 427.287 li
283.512 428.849 li
283.949 416.599 li
284.387 408.787 li
284.824 424.162 li
285.262 429.599 li
285.637 429.287 li
286.074 430.099 li
286.512 430.099 li
286.949 428.599 li
287.387 429.787 li
287.824 428.162 li
288.262 428.474 li
288.699 428.037 li
289.074 426.224 li
289.512 427.537 li
289.949 428.412 li
290.387 424.162 li
290.824 426.224 li
291.262 423.662 li
291.699 426.599 li
292.074 426.662 li
292.512 425.974 li
292.949 423.974 li
293.387 423.537 li
293.824 425.662 li
294.262 423.724 li
294.699 421.912 li
295.137 420.537 li
295.512 423.662 li
295.949 421.974 li
296.387 417.662 li
296.824 418.037 li
297.262 418.287 li
297.699 413.787 li
298.137 415.349 li
298.574 412.662 li
298.949 413.724 li
299.387 409.662 li
299.824 408.974 li
300.262 408.662 li
300.699 409.912 li
301.137 411.974 li
301.574 401.224 li
301.949 400.349 li
302.387 397.787 li
302.824 400.162 li
303.262 394.474 li
303.699 407.724 li
304.137 399.537 li
304.574 407.287 li
305.012 412.912 li
305.387 428.912 li
305.824 429.349 li
306.262 427.974 li
306.699 423.349 li
307.137 404.724 li
307.574 387.662 li
308.012 357.974 li
308.387 320.724 li
308.824 307.162 li
309.262 310.287 li
309.699 302.974 li
310.137 317.662 li
310.574 310.474 li
311.012 294.974 li
311.449 311.724 li
311.824 320.287 li
312.262 340.662 li
312.699 346.599 li
313.137 346.287 li
313.574 352.412 li
314.012 354.099 li
314.449 355.349 li
314.887 367.787 li
315.262 374.912 li
315.699 372.287 li
316.137 373.224 li
316.574 390.162 li
317.012 377.787 li
317.449 383.599 li
317.887 388.099 li
318.262 396.537 li
318.699 397.412 li
319.137 394.474 li
319.574 403.724 li
320.012 394.412 li
320.449 401.599 li
320.887 400.912 li
321.324 399.537 li
321.699 393.537 li
322.137 401.724 li
322.574 399.849 li
323.012 408.287 li
323.449 401.662 li
323.887 407.412 li
324.324 408.662 li
324.762 405.412 li
325.137 404.224 li
325.574 409.537 li
326.012 416.912 li
326.449 411.037 li
326.887 410.912 li
327.324 408.662 li
327.762 411.099 li
328.137 412.474 li
328.574 416.599 li
329.012 412.849 li
329.449 418.849 li
329.887 417.599 li
330.324 419.474 li
330.762 421.037 li
331.199 418.599 li
331.574 414.224 li
332.012 418.037 li
332.449 418.724 li
332.887 421.099 li
333.324 420.849 li
333.762 417.787 li
334.199 413.037 li
334.637 417.787 li
335.012 414.287 li
335.449 413.537 li
335.887 418.787 li
336.324 419.724 li
336.762 419.599 li
337.199 421.662 li
337.637 419.912 li
338.012 420.037 li
338.449 423.974 li
338.887 419.412 li
339.324 424.974 li
339.762 418.287 li
340.199 422.162 li
340.637 423.474 li
341.074 418.224 li
341.449 423.412 li
341.887 419.912 li
342.324 425.287 li
342.762 420.537 li
343.199 423.912 li
343.637 421.912 li
344.074 424.787 li
344.512 423.287 li
344.887 419.724 li
345.324 422.787 li
345.762 423.037 li
346.199 421.474 li
346.637 424.224 li
347.074 422.662 li
347.512 422.662 li
347.887 419.474 li
348.324 421.537 li
348.762 427.662 li
349.199 424.474 li
349.637 424.912 li
350.074 422.474 li
350.512 421.662 li
350.949 425.349 li
351.324 424.474 li
351.762 422.974 li
352.199 423.412 li
352.637 424.724 li
353.074 423.412 li
353.512 424.787 li
353.949 424.724 li
354.387 425.474 li
354.762 424.349 li
355.199 426.662 li
355.637 423.224 li
356.074 424.787 li
356.512 419.349 li
356.949 423.849 li
357.387 425.974 li
357.762 421.287 li
358.199 426.099 li
358.637 424.662 li
359.074 424.099 li
359.512 425.287 li
359.949 423.099 li
360.387 421.162 li
360.824 425.912 li
361.199 424.599 li
361.637 425.287 li
362.074 425.412 li
362.512 427.037 li
362.949 426.037 li
363.387 421.849 li
363.824 425.724 li
364.262 425.162 li
364.637 423.912 li
365.074 427.287 li
365.512 425.224 li
365.949 425.474 li
366.387 420.974 li
366.824 422.037 li
367.262 425.662 li
367.637 427.724 li
368.074 425.099 li
368.512 428.224 li
368.949 426.974 li
369.387 426.099 li
369.824 423.849 li
370.262 424.412 li
370.699 425.599 li
371.074 426.349 li
371.512 426.599 li
371.949 423.099 li
372.387 423.162 li
372.824 426.224 li
373.262 426.287 li
373.699 424.912 li
374.137 425.787 li
374.512 425.474 li
374.949 425.724 li
375.387 424.287 li
375.824 425.474 li
376.262 424.599 li
376.699 424.537 li
377.137 426.787 li
377.512 427.662 li
377.949 424.287 li
378.387 424.287 li
378.824 425.912 li
379.262 426.537 li
379.699 426.849 li
380.137 426.787 li
380.574 426.412 li
380.949 429.037 li
381.387 428.162 li
381.824 426.162 li
382.262 428.162 li
382.699 427.787 li
383.137 423.724 li
383.574 426.474 li
384.012 427.099 li
384.387 427.349 li
384.824 426.474 li
385.262 426.537 li
385.699 427.474 li
386.137 424.224 li
386.574 423.412 li
387.012 425.162 li
387.387 424.849 li
387.824 428.037 li
388.262 425.162 li
388.699 423.537 li
389.137 427.662 li
389.574 425.849 li
390.012 427.787 li
390.449 420.787 li
390.824 426.787 li
391.262 426.974 li
391.699 423.287 li
392.137 427.412 li
392.574 425.724 li
393.012 427.412 li
393.449 426.099 li
393.824 425.724 li
394.262 425.537 li
394.699 424.537 li
395.137 425.162 li
395.574 425.037 li
396.012 428.412 li
396.449 426.912 li
396.887 426.349 li
397.262 426.537 li
397.699 426.412 li
398.137 428.162 li
398.574 426.349 li
399.012 425.974 li
399.449 426.412 li
399.887 425.224 li
400.324 427.537 li
400.699 426.974 li
401.137 426.787 li
401.574 425.974 li
402.012 428.849 li
402.449 423.474 li
402.887 426.412 li
403.324 426.599 li
403.699 425.724 li
404.137 429.287 li
404.574 426.787 li
405.012 423.537 li
405.449 424.599 li
405.887 426.599 li
406.324 425.537 li
406.762 425.849 li
407.137 428.474 li
407.574 426.537 li
408.012 427.599 li
408.449 427.224 li
408.887 425.662 li
409.324 427.787 li
409.762 425.724 li
410.199 428.099 li
410.574 426.349 li
1 0 0 rgb
@
24.1992 429.849 mo
28.5356 429.849 32.8721 429.849 37.2085 429.849 cv
41.6113 429.849 46.0093 429.787 50.4116 429.787 cv
54.8018 429.787 59.1841 429.713 63.5742 429.662 cv
67.9385 429.61 72.3135 429.5 76.668 429.474 cv
80.9907 429.449 85.3467 429.243 89.6421 429.037 cv
94.0229 428.826 98.3608 428.61 102.716 428.087 cv
106.863 427.59 111.041 426.928 115.01 425.599 cv
118.785 424.335 122.39 422.194 124.964 419.126 cv
127.763 415.793 129.466 411.85 130.857 407.75 cv
132.293 403.517 133.209 399.042 133.943 394.634 cv
134.648 390.403 135.281 386.167 135.768 381.905 cv
136.274 377.472 136.748 373.03 137.16 368.586 cv
137.576 364.093 137.892 359.587 138.213 355.086 cv
138.539 350.528 138.877 345.969 139.195 341.411 cv
139.511 336.863 139.784 332.312 140.085 327.764 cv
140.219 325.737 140.364 323.711 140.527 321.687 cv
140.694 319.61 140.656 317.28 141.277 315.278 cv
141.361 315.008 141.379 314.781 141.521 314.538 cv
141.557 314.53 141.592 314.53 141.626 314.537 cv
142.417 316.408 142.208 319.038 142.316 321.044 cv
142.442 323.382 142.536 325.721 142.623 328.061 cv
142.783 332.351 142.902 336.643 143.012 340.935 cv
143.129 345.5 143.231 350.065 143.33 354.63 cv
143.42 358.823 143.505 363.014 143.587 367.207 cv
143.685 372.161 143.781 377.116 143.876 382.07 cv
143.958 386.312 144.044 390.554 144.13 394.796 cv
144.22 399.157 144.307 403.517 144.412 407.877 cv
144.521 412.406 144.621 416.935 144.792 421.462 cv
144.889 424.045 144.491 427.481 145.45 429.91 cv
146.282 428.068 145.944 425.109 146.041 423.106 cv
146.148 420.875 146.237 418.643 146.322 416.412 cv
146.497 411.795 146.651 407.178 146.813 402.561 cv
146.969 398.084 147.131 393.609 147.306 389.133 cv
147.475 384.815 147.666 380.496 147.93 376.181 cv
148.038 374.414 148.156 372.644 148.322 370.881 cv
148.449 369.528 148.337 366.83 149.324 365.792 cv
150.588 366.478 150.77 370.437 150.975 371.757 cv
151.354 374.191 151.798 376.615 152.17 379.049 cv
152.805 383.201 153.589 387.331 154.268 391.476 cv
154.964 395.724 156.014 399.981 157.273 404.096 cv
158.551 408.271 160.084 412.467 162.387 416.193 cv
164.618 419.803 166.919 423.41 167.957 427.565 cv
168.14 428.293 168.282 429.227 168.709 429.847 cv
168.743 429.856 168.778 429.856 168.813 429.849 cv
169.521 427.903 169.148 425.201 169.211 423.139 cv
169.282 420.787 169.328 418.432 169.379 416.079 cv
169.433 413.606 169.413 411.125 169.637 408.662 cv
169.736 413.433 169.811 418.204 169.876 422.975 cv
169.887 423.807 169.906 424.639 169.926 425.472 cv
169.952 426.625 169.619 428.473 170.136 429.536 cv
170.27 427.251 170.347 424.963 170.438 422.676 cv
170.48 421.618 170.55 420.55 170.69 419.5 cv
170.838 418.386 171.022 417.37 171.987 418.501 cv
173.341 420.087 174.563 421.522 176.383 422.604 cv
178.216 423.693 180.167 424.124 180.525 426.48 cv
180.634 427.2 180.649 427.936 180.699 428.662 cv
181.043 425.399 180.902 422.066 180.949 418.787 cv
180.991 422.011 181.032 425.237 181.074 428.474 cv
181.117 427.609 181.12 426.732 181.214 425.872 cv
181.355 424.568 181.742 424.621 182.866 424.942 cv
183.73 425.189 187.279 425.572 187.45 426.476 cv
187.457 421.445 187.525 416.412 187.563 411.379 cv
187.567 410.911 187.57 410.443 187.574 409.974 cv
187.612 414.986 187.65 419.998 187.688 425.008 cv
187.691 425.498 187.697 425.988 187.698 426.476 cv
187.867 425.831 193.031 426.923 193.875 427.036 cv
195.974 427.315 198.09 427.528 200.204 427.708 cv
204.649 428.085 209.101 428.368 213.563 428.599 cv
217.82 428.82 222.148 428.961 226.434 429.159 cv
230.912 429.366 235.395 429.431 239.868 429.566 cv
244.225 429.699 248.587 429.823 252.94 429.849 cv
257.094 429.875 261.237 429.849 265.386 429.849 cv
265.93 429.849 266.474 429.853 267.017 429.846 cv
267.025 428.287 267.095 426.722 267.137 425.162 cv
267.179 426.722 267.248 428.287 267.257 429.846 cv
268.257 429.674 269.365 429.72 270.385 429.663 cv
271.098 429.622 272.796 429.206 273.265 429.844 cv
273.337 426.961 273.334 424.079 273.342 421.194 cv
273.356 415.085 273.371 408.977 273.387 402.869 cv
273.401 396.75 273.417 390.632 273.432 384.514 cv
273.438 382.147 273.443 379.779 273.449 377.412 cv
273.457 380.523 273.466 383.634 273.474 386.746 cv
273.49 393.167 273.508 399.587 273.524 406.008 cv
273.539 411.37 273.553 416.731 273.567 422.092 cv
273.569 422.996 273.563 423.899 273.574 424.801 cv
273.583 425.48 273.607 426.16 273.625 426.838 cv
273.646 427.651 273.371 429.211 273.826 429.907 cv
274.487 429.293 275.732 429.329 276.584 429.162 cv
277.525 428.978 278.477 428.795 279.388 428.473 cv
280.284 428.157 281.02 427.68 281.863 427.266 cv
283.005 426.705 283.071 427.746 283.265 428.742 cv
283.342 429.137 283.384 429.527 283.512 429.912 cv
284.102 425.23 283.747 420.224 283.803 415.515 cv
283.856 410.897 283.889 406.28 283.929 401.662 cv
283.962 397.917 284.021 394.17 284.074 390.412 cv
284.3 394.591 284.28 398.781 284.337 402.966 cv
284.403 407.935 284.462 412.904 284.57 417.873 cv
284.615 419.951 284.674 422.029 284.767 424.106 cv
284.815 425.219 284.589 430.025 286.13 429.847 cv
286.902 429.758 287.938 428.667 288.548 428.228 cv
289.37 427.635 290.198 427.066 290.949 426.38 cv
292.545 424.921 293.782 423.217 294.898 421.385 cv
297.116 417.743 298.158 413.41 299.247 409.327 cv
299.829 407.144 300.313 404.947 300.819 402.746 cv
301.009 401.925 302.048 396.824 302.974 397.498 cv
303.555 397.918 303.582 399.901 303.673 400.56 cv
303.821 401.631 303.966 402.711 304.085 403.787 cv
304.329 405.993 304.435 408.222 304.576 410.436 cv
304.857 414.867 305.071 419.3 305.353 423.731 cv
305.477 425.683 305.355 427.975 305.952 429.847 cv
306.498 429.288 306.396 427.568 306.443 426.761 cv
306.515 425.548 306.567 424.334 306.617 423.121 cv
306.704 420.972 306.766 418.823 306.825 416.673 cv
306.948 412.248 307.048 407.821 307.137 403.393 cv
307.229 398.852 307.308 394.309 307.388 389.767 cv
307.449 386.25 307.512 382.731 307.57 379.213 cv
307.673 373.02 307.775 366.828 307.878 360.634 cv
307.939 356.877 308.001 353.121 308.07 349.364 cv
308.155 344.782 308.244 340.199 308.339 335.617 cv
308.429 331.234 308.525 326.852 308.637 322.471 cv
308.748 318.083 308.865 313.694 309.038 309.307 cv
309.116 307.326 309.134 305.339 309.25 303.36 cv
309.328 302.036 309.021 298.741 309.947 297.791 cv
310.943 299.313 310.656 302.399 310.763 304.17 cv
310.892 306.331 311.084 308.488 311.226 310.648 cv
311.523 315.185 311.797 319.723 312.08 324.261 cv
312.356 328.68 312.568 333.102 312.86 337.521 cv
313.157 342.007 313.438 346.498 313.763 350.983 cv
314.082 355.404 314.489 359.822 314.925 364.233 cv
315.364 368.683 315.849 373.12 316.394 377.558 cv
316.937 381.98 317.632 386.397 318.508 390.766 cv
319.348 394.953 320.416 399.205 322 403.164 cv
323.571 407.091 325.475 410.844 328.409 413.934 cv
331.39 417.073 335.114 419.214 339.141 420.705 cv
343.108 422.172 347.318 423.161 351.511 423.787 cv
355.788 424.424 360.05 424.945 364.363 425.309 cv
368.709 425.675 373.051 425.906 377.405 426.192 cv
381.768 426.478 386.137 426.655 390.499 426.789 cv
395.012 426.926 399.521 427.056 404.033 427.214 cv
406.204 427.291 408.402 427.348 410.574 427.349 cv
0 0 0 rgb
@
grestore % PSGState
2 lc
410.574 432.974 mo
24.1992 432.974 li
@
24.1992 432.974 mo
24.1992 292.162 li
@
24.1992 292.162 mo
410.574 292.162 li
@
410.574 292.162 mo
410.574 432.974 li
@
0 lc
24.1992 432.974 mo
24.1992 429.787 li
@
41.3867 432.974 mo
41.3867 431.037 li
@
58.5742 432.974 mo
58.5742 431.037 li
@
75.6992 432.974 mo
75.6992 431.037 li
@
92.8867 432.974 mo
92.8867 431.037 li
@
110.074 432.974 mo
110.074 429.787 li
@
127.262 432.974 mo
127.262 431.037 li
@
144.387 432.974 mo
144.387 431.037 li
@
161.574 432.974 mo
161.574 431.037 li
@
178.762 432.974 mo
178.762 431.037 li
@
195.949 432.974 mo
195.949 429.787 li
@
213.137 432.974 mo
213.137 431.037 li
@
230.262 432.974 mo
230.262 431.037 li
@
247.449 432.974 mo
247.449 431.037 li
@
264.637 432.974 mo
264.637 431.037 li
@
281.824 432.974 mo
281.824 429.787 li
@
298.949 432.974 mo
298.949 431.037 li
@
316.137 432.974 mo
316.137 431.037 li
@
333.324 432.974 mo
333.324 431.037 li
@
350.512 432.974 mo
350.512 431.037 li
@
367.637 432.974 mo
367.637 429.787 li
@
384.824 432.974 mo
384.824 431.037 li
@
402.012 432.974 mo
402.012 431.037 li
@
24.1992 430.162 mo
27.3867 430.162 li
@
24.1992 422.537 mo
26.1367 422.537 li
@
24.1992 414.912 mo
26.1367 414.912 li
@
24.1992 407.349 mo
26.1367 407.349 li
@
24.1992 399.724 mo
26.1367 399.724 li
@
24.1992 392.099 mo
27.3867 392.099 li
@
24.1992 384.537 mo
26.1367 384.537 li
@
24.1992 376.912 mo
26.1367 376.912 li
@
24.1992 369.287 mo
26.1367 369.287 li
@
24.1992 361.724 mo
26.1367 361.724 li
@
24.1992 354.099 mo
27.3867 354.099 li
@
24.1992 346.474 mo
26.1367 346.474 li
@
24.1992 338.912 mo
26.1367 338.912 li
@
24.1992 331.287 mo
26.1367 331.287 li
@
24.1992 323.662 mo
26.1367 323.662 li
@
24.1992 316.099 mo
27.3867 316.099 li
@
24.1992 308.474 mo
26.1367 308.474 li
@
24.1992 300.849 mo
26.1367 300.849 li
@
24.1992 293.287 mo
26.1367 293.287 li
@
24.1992 292.162 mo
24.1992 295.349 li
@
41.3867 292.162 mo
41.3867 294.099 li
@
58.5742 292.162 mo
58.5742 294.099 li
@
75.6992 292.162 mo
75.6992 294.099 li
@
92.8867 292.162 mo
92.8867 294.099 li
@
110.074 292.162 mo
110.074 295.349 li
@
127.262 292.162 mo
127.262 294.099 li
@
144.387 292.162 mo
144.387 294.099 li
@
161.574 292.162 mo
161.574 294.099 li
@
178.762 292.162 mo
178.762 294.099 li
@
195.949 292.162 mo
195.949 295.349 li
@
213.137 292.162 mo
213.137 294.099 li
@
230.262 292.162 mo
230.262 294.099 li
@
247.449 292.162 mo
247.449 294.099 li
@
264.637 292.162 mo
264.637 294.099 li
@
281.824 292.162 mo
281.824 295.349 li
@
298.949 292.162 mo
298.949 294.099 li
@
316.137 292.162 mo
316.137 294.099 li
@
333.324 292.162 mo
333.324 294.099 li
@
350.512 292.162 mo
350.512 294.099 li
@
367.637 292.162 mo
367.637 295.349 li
@
384.824 292.162 mo
384.824 294.099 li
@
402.012 292.162 mo
402.012 294.099 li
@
410.574 430.162 mo
407.387 430.162 li
@
410.574 422.537 mo
408.699 422.537 li
@
410.574 414.912 mo
408.699 414.912 li
@
410.574 407.349 mo
408.699 407.349 li
@
410.574 399.724 mo
408.699 399.724 li
@
410.574 392.099 mo
407.387 392.099 li
@
410.574 384.537 mo
408.699 384.537 li
@
410.574 376.912 mo
408.699 376.912 li
@
410.574 369.287 mo
408.699 369.287 li
@
410.574 361.724 mo
408.699 361.724 li
@
410.574 354.099 mo
407.387 354.099 li
@
410.574 346.474 mo
408.699 346.474 li
@
410.574 338.912 mo
408.699 338.912 li
@
410.574 331.287 mo
408.699 331.287 li
@
410.574 323.662 mo
408.699 323.662 li
@
410.574 316.099 mo
407.387 316.099 li
@
410.574 308.474 mo
408.699 308.474 li
@
410.574 300.849 mo
408.699 300.849 li
@
410.574 293.287 mo
408.699 293.287 li
@
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /MyriadPro-Regular def
/FontInfo 7 dict dup begin
/Notice (Copyright 2000, 2004 Adobe Systems Incorporated. All Rights Reserved. U.S. Patent D454,582.Myriad is a registered trademark of Adobe Systems Incorporated.) def
/Weight (Regular) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 48 /zero put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
def
/FontBBox {-157 -250 1126 952} def
end
systemdict begin
dup /Private
15 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 0 674 686 484 495 650 661 710 721 241 248] def
/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def
/FamilyBlues [-11 0 674 686 484 495 650 661 710 721 241 248] def
/FamilyOtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def
/BlueScale 0.0604583 def
/StdHW [67] def
/StdVW [88] def
/StemSnapH [67] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/period <1C60D8A8C9B89DB76243241956147685E9D04DE27F343A7EF0A25AE
4387D3A3D08796B751439580940B3> |-
/zero <1C60D8A8C9B7BA8F6239473D6D0952B7B5E4CF4EC97A525E022C9B4FC
88EFB3F3BAD779956899C836BBD2FC8F5F391C07FB0B2C3B92A06F4A639C8E43
BB10FDB531B59E83D98A9AB718650C50F38FC91524BAA33EC4FF9905D1A9C> |-
/five <1C60D8A8C9B7BA8F622456C498CD57E93AA5454FC364F93ECEC83D391
3500E43A82F14121F71966C4788C2353DA5A8BD5D8CFB5314B38B5B35B8DBF6E
6B89948F26F660C16062F6C0ACEFA240305DC4EBB618986C70F22D9BDD5EF2FA
4DDB132186E4364560E4CE6F0F405A0BF> |-
/six <1C60D8A8C9B7BA8F6239473257AB127E7620F87AA168F1AECB0A4CE93C
C295CEFD9192C2967A0DB83DCBD6BBAD18D6960D2101F671B2250912AB87B7A3
12023FCC73A003C62725D7FC83EAC1691C575B6AFB00517E51D41BA56D827F4B
6519D801FB562E8DCF2E48521AD57F7C657FA7114264065AFF4ECE505E9E5389
1A0834E3BEC3F8A67BA2E6FDAC2B> |-
/seven <1C60D8A8C9B7BA8F425ECEA3CCEB01D7DB356DB8BA3E0A3CCCF78FF7
5F8426D973EF7AFAF46E5376078B0FAF79A0> |-
/eight <1C60D8A8C9B7BA8F623D810BCFAA50082B445FDEA9D15914896CD639
03178E46F4BF3526EF43F34E1C43C5D4BB259333F75AC77A2693879487E31A38
ED5E9191D3298AC0D970ED0241AD045F48A1E74AA2C4BE6A3C25B51C1786D2EF
03AE3AE584898B7F8F45ACBB487C3211863FEFD3620CE23C9E829D36E0D56EAB
E748926E17DB146990D6096B0ACBA84EC3179FD7D7DE1B7A8A7122D5F1201E33
3EBC5E306860669F4548CE801F630F0B98FE145245E3B61A937D385E9FFEC75A
53A58A9A8AA3119FE04926CCC605B3BEA563998B78AB28F03D9E0202CFE1CF72
350765F386FE675098260C4913D2BB6EF02533C78A20421F3CD9AE5EB64E891D
3358D805> |-
/nine <1C60D8A8C9B7BA8F63126F4A1F6F4C8A6D297D6FEEB3E1EA33A18C32A
839F51A85CD7DE6BC7BE0FC5E14C273DEF590B88E507C7A736EF2A90ACB7B8F9
A190B2C51A24432873D103FAFC9B3793333CCD91BFB26AA2EDD101FDCA101247
D729F8EA9F184BC3D2FD9C99ABDCAACABC5E792EC3D0438CFE5E32E78D626F92
C945E9BEC772CDF50F38A2D46A5A571E853> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/GLMFLL+MyriadPro-Regular /MyriadPro-Regular findfont def
/GLMFLL+MyriadPro-Regular*1 
[
46{/.notdef}repeat /period /.notdef /zero 4{/.notdef}repeat /five /six /seven 
/eight /nine 198{/.notdef}repeat
] GLMFLL+MyriadPro-Regular nfnt
GLMFLL+MyriadPro-Regular*1  [14 0 0 -14 0 0 ]mfnt sfnt
13.9805 446.862 mov
(6.80) sh
99.8472 446.862 mov
(6.85) sh
182.714 446.862 mov
(6.90) sh
271.581 446.862 mov
(6.95) sh
357.447 446.862 mov
0.000488281 0 46 (7.00) wsh
gsave % PSGState
24.1992 291.974 mo
24.1992 432.974 li
411.199 432.974 li
411.199 291.974 li
eclp
grestore % PSGState
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
GLMFLL+MyriadPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B84E0A47D7FED6098F93D599A35099EC3AF2C571CE
3F6788F74B615B747D0C4950E0757D67CC4B6F86A79106B4F6AF8262CBC77CA1
55FEEB> |-
/parenright <1C60D8A8C9B84E0A47D7FED609B36B98A489D0C883687FC8C4B
D7FF8A57C9949E56F26DF53030280BC0E024A6F3F65DFBA65966BEA7D55AEB53
9EB378E> |-
/a <1C60D8A8C9B75946039FC5B56ED6A5087B2F0B1630F4B839ECBCEEA44E70
3DC4106323B0FE7E2AB642908C4D63FEEE93FCF9AFDA709EC76B2A6B438866EA
54711295464BD953D3EBDCF028F138C8DA98583AEFEA07E0E3D9318DCAA5235C
81F8CAE77869F7E7DB4FE2A895A8751E9713E402E5F56B8D9F8A85A4E816A3F5
736139BBC6E35318419585355BABA3365F9437068F54844360043E93A0587094
DC5B241D2351AD29DD00EC> |-
/b <1C60D8A8C9B7E2CE503F0CE2BC5702634999087F49AD7EC68AF6E0760DC3
07EA142776CFB148873830CAEB36AE950493D9F2EDD2FDA5A7A4D6C282750C8E
40E669AF5CD1CA9E6E42E82091954CDD12078AEF15744C61E28006D0183E186D
2F0A7A37935A5E3F3F87ED5DA87F58431826C86E3F76DCDA2973426486D4612C
A2B5207C22CF15FC5AC58B8A498D4D400E19494D5A529E7B3708AA62887C27C0
34690D9798225445C694> |-
/c <1C60D8A8C9B77BBBDD6F2DE36836EA750B0DCDA2C7596B2C0CA5D427D1A2
992AF5BF4D94EE82845832F4DD4400321814ECD5D3CE66072F7E5E7C5430EC46
9D5F7161571A32A96A021C1AB03ECA050447FC0A> |-
/r <1C60D8A8C9B825FA276057E42F8B6B56BE61CF56C49E848F1F8C0DBB4CC3
55A060580D0A93A5AC675863E967C6888348BB6A0307CAE2C7E5A0C04CCE8153
CABABF82A896EFF75F39B554C74CA1E2126AA0E73BE8B772EBBEE30A71972C63
0D7D24526AEEFC04035142C31FA6B3B108962236> |-
/t <1C60D8A8C9B821B35E7D138AF8799F79BEF170B4854FD4064F6438DB12B9
6A336B1B646B9C985443CCD47885AEB163F96326A737220357369BBCF971367A
B24D31D50A9A11CBCBD128D32F4EE4E3175171904BA0C5> |-
/x <1C60D8A8C9B74CDDCE74E25740A68E8EC93756D85AEDEDDC715C2E343856
089CBF3B8126FA9B43C70F5E5E657C6611A04AC6BD64B94F2C3C0B74AAB216E5
042ED4B3FF8375FDB59F9F31D0EAD1EF91AF3610AEC45036C8A054F273FA4FDC
2EFDD7524FFC5A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
GLMFLL+MyriadPro-Regular /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 114 /r put
dup 116 /t put
dup 120 /x put
pop
%ADOEndSubsetFont
/GLMFLL+MyriadPro-Regular*1 
[
40{/.notdef}repeat /parenleft /parenright 4{/.notdef}repeat /period /.notdef /zero 4{/.notdef}repeat 
/five /six /seven /eight /nine 39{/.notdef}repeat /a /b 
/c 14{/.notdef}repeat /r /.notdef /t 3{/.notdef}repeat /x 135{/.notdef}repeat
] GLMFLL+MyriadPro-Regular nfnt
GLMFLL+MyriadPro-Regular*1  [12 0 0 -12 0 0 ]mfnt sfnt
35.7485 19.5396 mov
0.000488281 0 97 -0.000244141 0 (\(a\)) awsh
35.7485 166.54 mov
-0.0355835 0 98 -0.000244141 0 (\(b\)) awsh
35.7485 311.54 mov
0.000244141 0 99 -0.000244141 0 (\(c\)) awsh
GLMFLL+MyriadPro-Regular*1  [0 -12 -12 0 0 0 ]mfnt sfnt
10.0439 199.366 mov
0 0.000244141 (tr) ash
GLMFLL+MyriadPro-Regular*1  [12 0 0 -12 0 0 ]mfnt sfnt
219.255 461.393 mov
(x) sh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
] del_res
/GLMFLL+MyriadPro-Regular*1 ufnt
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 12.0.1
%%For: (RSLab) (Yale)
%%Title: (nodissip.eps)
%%CreationDate: 10/11/2009 5:55 PM
%AI9_DataStream
%Gb"-6BicOkZ8U@-pKIP,Ai>jDo>!JVR:<%dTE'UMhu[_)RsiSr+8WHj6qE^pV)-TbU&+2+=5UVbmAdBg6RWW\$9]P,9Pi4nC?93t
%AY]7^Krf$ifm-RPZ_h5CF\C!W2)2@?4fbs,V=LLY@7_]I(qL*oot6uc3dd^`Fi1$d\*D:H+-g%,Ufi2MZs&slpNj0ROPTi4<6H>J
%?Jq/Jp87E[?N3fEj1Y*_-@W:,YI1(jd6GljW=0NcT2f43hFgSJbkY>8nQr>^'?[KHR1J'&pW@Zmq,(m>S\.9W<I<BnWkOh7I=44X
%RL<7m0o<%t:a[o#co^G>rghO4C<u?UjiRo%ZVoZWJDXT'Mu>p@33T^D^`DVBNVmU*A+QbOY('7_$X&2_5BdJUX1$a,;S-,9rLE"M
%?W93-n"k2]=KCb2hTW"2(&Z<,#/d)Xo<st:$k"H*d.=-:BNa(Do7dbH@&WRWiB$n+?j8*1="F;RaR3)$jbh*Gok+*6qEHZ1bLZ9b
%A"-U1raPG*cbA6dc-'9*=j+>;1@?.4bE[90:gV?=HO5JQ7]?TAne)b8k"DN[6<&I7_N?K^*Q@mbB&Koc:Slb8.Wcbm)jT,GrJLGe
%>'WVXXfSN^H!>??+*kbSJ&.L(%EK#:j<0.8WtND;*7fg$H#;1n4!u^ja3EmB[C2`CC=Y08R-f["B!iUPV6+<ONW2T1aZIB>>jm0T
%gVAJc]2J7?!@"st'\&s-q4i"I]N?\&ej"+O:k0lN5U'qcZg[Q'rbM!6q@0J"C1R=Tc2=EML!QrK]@)9Lh^_j]._IT2IoiqUjqN\[
%brWq',*[=%[46l;0ON?KUR%Mh%9?`AdAfP)KlZG>V:+H)J_pj]eL!i2YP61h$]RcbrEB59Q"oEtq/`N<Y8(AObu!6bQ!`pqEA=L4
%-EA'l:`oWV3;_G'S"ue85M/b-?U/HE.^a;roie;Ad!scR*%M1p)s,44W<p//cjDYQ5-@roja-eEoLUp@RVq)]>cfhk`3!jLeUYW,
%<@t!8r7,UaC<upq5HM_#Zi4")4eY&9/Z7Nl00Ii*s6r(=j^4:6C9:ZlcY]car3&;NhJ;e-iUrh_CSb'Fd_^\KbCu#*1Nj/Y$BnG&
%]RR?IbHFs?rL\E%$^ats2[f$)Au4MeX7Z>?XqX(65[<s`dE9chs&9qNPNr$l$#6KlJhNca+/RQ[f/rZHEU_#pY>Q%J_8!^MhLDdg
%33e`K?*1>+nc2[lZPM/Hfj&1f?2$k(NWU]2(CQ_F$\]dQ?7=7B:eO[\]]ajSa%Ga(-ME*JH[_AlqmGpQ)MDjcfa#RaK4EkmA(IPf
%s1=>qpNEt7r_ML_oo:eIkmcj>I=*JkI-H-'_g]7CXZ&OL.\Q!@+DS#FM)AQ/``!Ma0!V9HIO-:L8#]C2p=N5NT3#.^Q/H/NWoAM0
%AYlE.<)mV+lBeIM4)1k53\+P2qG\7pW:M54GNJ,I<?s81I'HJ^=A*"!J%ki!raA%#M&H><jNLsI7A^[ArJ-:HfS"tF2\76P-:lMu
%CX7.1n-dp)%SI^O>Ajn?jU.Pc19Gro,==&6Ie2:8Y*\HMQ&C,1's=U:(D"lp':=\9/['(%qTX:FH2iI<GFJ3.`a8%64nDa8^<W=7
%g99EsJ1>8-B/ttM1Wqr_l='@(O-hS#)q/)m]P)ni5kg;2ITN,qn3&-%Ilm\1[OZ'l3^J\NX<#np2k+0VfBbr>rpFuq(Z7OR4U.+m
%^A6A;iYRVi!.Ok?<k_]<EsG@9nQL@$W^#Ke^S.$5dkhFJ'=f17UAU54=Q^M#NcpN3^T'/1)m^gb!U&_i%GV\/cX0<S,\+r5Tk'Vk
%DcM7;CG*g_;2_is/+<.#-(t,L;"!$*V.LqeF8ku[WkVV>*s#.?MZ<E-<IoAG'Y6[3K`D%gs/&trn"gq96i+Xf%;D]'&nnn=[N\mO
%Xbh@&e;X"j?$0aDhmi#3g_[?tH,gq#iLj6O:Q>@=?,4;+lHmYi\'dbm3sS!B=(1PqnUFWGa7)UU0c`b?cqcP7(O]j6riMZ;CS54A
%93B^Df0B&6IJDQ8T`$6RA<4%*5F$%F"2CD3P1O8YN,`Seo2i@#@Y9.:GOH=2-#b&WG3rd?gb5o2S>GNIH7rQ*j1A(QL+*b&h0mjL
%9&M\(j+*,]4Jh:]Ggf6:^A]3b<d6QLndPQQ#l<Mhesk;36D`+8F:OTOku12SL&K*D037aqH$#u99T<h=GM:dpDjB$!";;:LO+<sV
%s/\C/HV2P438s_tn/H1oftVQ;AR6>Zm_"NCA2a2>&(in,/+`O+%>8[=V/YE;]"m4"pFi_'Rk<tm_p\#@Ii@1ii3G:7dG=SrZqFsI
%_(^2/p>(YA_20d-]jialormW%^S<%RDt@Hn./!KFgBuRBH_nRl/JJB/TNQ\prBlJZ?KC!s#.;f-Th<9]o=m!24cCuBEVuoGn9=X+
%jsFlG#FN-S@SBq0le;BUZiiaQRNVG]jX?`M:AO?"Vu4jd8aTkChWrL+Q#[5/JHo0M[rTY27-(@"2.<b=UQKX=jAV><rT_.?T]0AY
%]PR5GT)S[l,<a(6ChWeDci:.*D7s#Cs3EHs1nsU<=7`sh-Z&hB_1d47:\UFba+K)P9'Q:][MJk!Z(9^kjW/jM)b9SYkY]#on=ZQR
%cj\+=l`RDi/'$c],&2Z.WKu;B.E89cH.X2<46MWb+_l6toeq&/LQu4`G&Wj98@+#0HMu_Z`6NB#]<!rY\GoKdpMfNNn:i*>9OpFp
%hc&(l8[HjF2#j^h0.R!=B8bkd]C]'NYI6T2D4.8=Epg."\_0lerDYF-bLpN]-=kZn9=*W%c.!0HM(brAS%c5a[GIfhp:F?Up7Z9@
%5p*\hqp['G=K^I2eQRqF47Rc6<m0/somaW+MSrh^pXs;^NgLKYZ9k.3Ep:%OCb4jYD5a#bf3VV:"XrYkbm:M74Y5,i^.L&Dlq+nL
%J"S<LVg#E#a'\3<<-_N]KD"O0:`(r,TL:p40Vshj.]q=*T>^<)F-LRN;/0(!^p/s(pQA?ELKGM.<iDrGp5Omi7Pu9j][`s)aEZs_
%g'X2D.(.no%U%Xj)l7R8=>T8ig%DOlh&j/1ZYkgRjm(HQ^k882qML^Z%T@p%do'so^I?c`%&RWdq'DZjWsrGZ`dIcT74:R[=%!>,
%n\mckVFb'as1@jW#2+DS]pEK[h:cRfMnf78V:iY/D$RC6?[tf_7\U@G,%]/&)t>&%63;m+f:1ko3F^jOKl?X-DngYc-j7,bnGJFC
%L/r6-<gqL:MEZOfj2j_DV./+i\_5-3peAP+-9`Hh4?g,U$&qkTY_f"eb+Z3g(Ai"ps'2bD'X\f3'5@r5$8WAIRnuu/S"Z[[.ksJ^
%*CV3nhI%Ss12\KD.j7kgcrT,2Y6^l'FK+e9`>)<d-^V\*9a!9Jj+o-dX1Wt/qE'Pe^M<.`q7Y2R<=]k*'fh#8O1.6GXBP:(^[gc<
%,CO!REs5j*.1PiH.Eb_h-nJHUaTF(f>5YAL9]S>PC^OfZh9%Xk:fV;Gl<_$6B#aPQ>ks(W7!-t#TQ)W#eRriGU/i^kp:L=RY.!4<
%4ab*^p93b.dZd[%H,W6nqRKbSUJcLn2=c6p/a*X?NEuon[.R[MYP9tu/a1_u7VP%7eYosW?"OM'_%\_4lcoJ"Hm(SS@(f]3P]=/^
%hj\oKi]J@s\P$@,qgj;o&k&,Z4OmSL4]U5YV6Jto=gm0u`r1Kb4C47SZ<V*D?YU_g7*JK&dEKAB,&C6l=#ZEA:Wd_+G2:R$]]DO6
%.k"Ri%!A.Y%QtE/mC]JGJ'\lJ:qMr$<0:qW]6$Hf6rEXg$^TK)G.RA%C;9B%gh7rN<\29A%LT)3)[_)1cgTk22T8`G7?s_i1J$jG
%qnVqh"gCE^;kUGR/*&GlSn8=&,>!M'm4)OoWr>aK7AZ`sj=^&eq<[ju;g,JW>G6*2/pI<npuH<RqmY-f8Eck+$T3f]:^AEph0b=I
%<N=U78J[CJEaQ6;AFDaV)/u+!l&KbclAb@9[h>gGFZe7hG_9lWk\skFN\Ui97,Bc=3`)J*CIo0?Kq>=.YBu:8N5&Eh]COgt]4uaW
%[?<?Ko>$#n:Z;"<Eh9#<.)PM';R;s*D1W\<fFMT'3dg>I3a7F.l!h?\eb:3E&@li&?[/`]P(q'c2;Xu*8R`]]!a\e"4Ab6!WAu[0
%l'F33Y00-V'1n=UmKU-*B+p.1%6K<5@!*atD7X=CeqAoDLn&f?,AfgbrGWh;hU]B'=kl,0"^"Z?Ulhio:J1"l/lE?`F0el_qO._b
%L.,<beHU8H[H,Rjq-Dnu^l5s+,"K1NImV5S3(>ucr'@UIaZ5F?'WtP?A0Wu`_FbpAR)QTMZfisLM#j&>*hYNW!]4UX6s)lU>Y#ih
%Q<iB@4UN[oI1T@oTJ97P.77<W[T3n_9\F0?6<gtkn-b./8'[`t-74X9Gm#7r-tHkm_Z,S+FGL#h#WmK(+mgmhZ,T[h-MNW@9@60S
%<l?VDpe4e'O2Kp92'`\Q"dCti&=Qa\=S)YK2MB;mc7m<d<oO"5a\M>X84$mnI_NA%kEoHge<<l'm#&@HAum%<XsiDRo/6C-MRttL
%48;,!E-0.s@=A&URXa+qgY[.M/:=o':t]YC=%]lkpT*1I)imLelg&WbmFgLnc-bjomeVtHm,bCX]"*6oC0[qWg.O$mI/cReI6?2Q
%?%$SUk/c]WZ*AD^TZsWG4V\ZBHJD@sjefTaCZfSGrV6BOEdOd!r+<\ZAe/+jVUkS\RBN/FNQc+klQ``#VLCif,L_^gS<:@_qr5\%
%ail8hjdVdt_Ptr2>"?8dC\_[mY46@YmD*S@34hi@o?b^)rJ,AmCu5+e[XN&M>\l's00cKnlZS7HUQ;%mDU-Ru6%arYfBK&/s)/ep
%lggJ:Rb&)+n]i>6#^^GI(L%^&b1rRd0[A?:K"eX_mIlfg?[nPuR8[l&&$b!R:SkH%Pri?Z.m"u>_9he-QEt'\T8P\H47CN)I"&CJ
%Z?EKqfDKo9G8f<&NdYgum+phL>J2-YFr8aZ1d_^VeUsD!C:L%hV3,#hV+rkB><PjPN)=G#-E>VIeD/G6[7UK@*j5=-.o"h6UK]UQ
%mq.onQft]7DVlCCQ]:aW:oi4W2QU_5*3@+5fbtg525cdN>.qIJ[XW]eO)B)QA8+rtJ%/m-dkP*=B32^$SQbF$b/GU5$53/6Piq^d
%oBpDU&6k\8>/b+KeE1Z@gNRcY=uGRc!d1GXn5`>^VF%DRk/Th6Y18<icds(p7W-joFff3-gZ*$ZX7rZUB5t'ANpF6p]25QX$l>k7
%Xg-L#=`g^BS'rm[iua%RXj/Q50<E+!C;.upr`D6oW\\+o`m'LKm4.!;>92OKZ,b0S[,\)cQ0k2.[mR9D)O^eDiiRC2):rUpfpR3"
%MJdQ,=eD_Tm$gNU\&[W3EI"jEDru*a-EhkSQ8t.eGAl56X$;o76[N.Y<bFHsh6#2/ZdQJjXkF5!'q,_hH[,F_'[s'>B"sV?n)IU-
%;N>@<]$[YJIH%6eg@+15Z_1a#eapa/4grmnb.4[n[!Fg;S3K].#-HluKSC"\/)P5o9]mU(]pbt7`3t!kHM[CNfBNhQo[Q6;.=/LZ
%qS_Lhg<t"`X,[)*fN,0sG"14PX!h[[_oKpoeUt!f<f^:=&,2tdIn$mCoD!/U[T.#'pPi>4NZ%8UU\nrAcUYJ@m<@UNfQHi-<Zh%t
%CI,!\2fcg\M=]D_Qr\,XQ"'Dr5I+;Pg\g9Vg<]R=[(>`EC))a#f7X%;)h-556]5URa'i\:>1KKNEkCmE&!b2'Klq3S0%;@MqYQIm
%!49=rpJQZGD6#k2bZeqfcA'>"E`]iCB!#t+W-bh8SSPYd=%9FEI&L%Y"uOid]JnWjG)'DZ*OT"MX6RNK82&7GN,Qr2ki3&?#BHm*
%c"?4>L92pNC%?54l]o%/`qpuho5=P6i0J"uiA;Y9n7]N+GepItV=\/L>n1rMEq6rY&6470]fB(WY2XnY"W)=@/,!&k_HW4q+m:HW
%o.W2:l2CIj@Y]E?*;./6H0`]]s&sai]afMY'PRASDrE>BF%;][H]8!t[<+VJodaO@27BY^rcjJ%r,B*QWl>#7FSoo/p=J?PkGR-d
%C#K-=mc<faAW-N`C[0@XI==1\jdrOD9-%:Ds8'*P?425LAD5Sblru:>oC!>gKou.;n$X!tUOMm'p,I&1O2l_K]7&,[NW&P;9%u=b
%rUo2fHfa*s>%[m2iH3J+rH2I'<j#q^IBG`(+!r[YEb'4ZDC4fCal<0E;^M.hI;O++9jl]OLc.H1&G*HCWt^n5meO$o\])q!ZPTOA
%<W;;rIOXpT`T,7fHGD?e@*G1`HaHMD4E\9X<RKjF49!qVoqW;1+&&Pc2X7D__Y0445hk<A.rUn%oD@qbmQK`>Ip_+UGpI<hb\`nf
%iZI(>/`%aqLGr<rg[MRXF&\W45+1Tf*VMdN(0ha+VeF8t[o'cI'bXP:iQ.um_.NH<$WQNW,W,:3a_u.":gJO=#$j)iCjnP0k9\q7
%[S$E>fh_2Y-7Qm8cu!m*`m'Rs<l([2<hih-[Sa7DMAe+TMIu?<Y19i1Wc:3T[-E%n31'TNo&Sk60O3<NpoWgZX3N?c%K*L!]M#A%
%haFjZc$2ogeqE#)XjZ&KVH)8(_VX37VU_0.e8!p>aho.TDAhuHinbfd<SSP+L0CEj'GIF-Hp!T_[h#BG>9uca[T2rT/gP!1%9Hf<
%$hQAA):P'>arb??h1'k&U<5bX;Gh5ro=fHtgpKcGPtN4N)]LKr]Cf;M8///`a4ppWigpJHS<`KF-J(%)]I'f[6?R*Q0)/qQOXjf.
%4[#emjQfEJHE#lTQh*Z[K]lIlS_G_m@\k8,X\3C9gKuC)n3?&qlF[:@bIn[Cm_IbH)luT7PP0T.TE@+[YEc3rs,St`S!Kgo:j<A;
%fb"Je\A.>%q!nRe3Jh1"Y8J$fc629"F6+s3iFGjKTu_Xnhjg(,5>WoGa7]h/@GQ6NpCb(1n21@^Ho.`qXXZZm/JLGqY%p8:2@`&Y
%k=h'VO+6ZeZgDtT#cC-iN0+%3#pQ\k5E4j$_)00ViKujHRFi,2BY^gb9JMO_kHH!XV)4W3IO3L@c><F8mRcP4fgPCHEIM<kiki*E
%pPI(7.,7=Zk=7)h.;[T<pU,u&mXFUc_V;37MMUXP,qX4GPil-:8IG^<'V(<Fh-O%@U#0R@LQbC>7C2Hsk]9ki:2"pu($F3kS:,-(
%RXI-d,I'j'G'Qso01+HOG;l9!%o-KF\iA^C-AgP?#F#'6,-iS#ZRNm_>2UYja[Mjim#067<INdK@5G.J],(5d*(^=Vk&G\[3dA=Q
%1KAK*[5:(T)p=U6flZ86&oY9ela+d+q"OnbiL`)\hGOTX9jW6(_<UUn`5&%op)j`>k\Ou*qC=Clrf4d`cnT\2;Ot]iDJ+YJNXj_B
%245s9FIc>-"/]$Y,Nt@((h#r]MR=IsqL&u;#,>o$7/I&?+9G?@34W<n.dbDGLNf%</[HUs8:K8fH)I-UQ<"C,3NX\c7>;qU2]5:E
%pc,bM6o,RLiS^N9A!2%t/\Ao>Wlc1HQ5+TH^Q.T1/PbM.HZ_QM:WI+t%.u#S\"\75hC!gL,3CRu3J;*ga-42r*p0[BfUJ,SR)#nr
%PE072^b'I#g<OIsa]D<(*:DssaTc@M@GWhqagA\+@5@5D3D?<lg9&D(2FMP3[-:ut9Oo'_EdK*1-2$UbmtQ"Dbdi_jBggZkD<(J8
%,d$AQ]0+iKUI/4V)qU_Bh'B+443^ND,8def*ZQNq_q78(,(jc&-[T<!-[/TpbhcTCV:nR1H]5SmeH:gY7;(';!b6Pn+<rh)J_;5o
%S`-.C?=t(_FAW%3c/WW]?jZ8Zb:^fIDgU-JZf=at^Vju^p9XFV&)uO&J_EKE0D<aZ9_\]p`5qG'kLi7<P*gs/f?G,rlk<Hk;;E-0
%Ot-7[VJT<,WD0&np6&EAA6^7KnPd-cDnf'gp1CM?!tc1&3&gm3*hEagpUncP7;Js+(4Wc9P'$o0Rp]kCZZV%'n>c6)0DT"0o;f@>
%T"m")V0B8;*W2':]0>Ys'neq-ptL7BV;q=SA^a!l&;56a9eaPI3-Z#`=kr_gJ_]b71A.7!A"T:g'Z$%%JQs&I<:\tO)0pUlK3MV@
%4W5RW6;1>P^LU!n8!""0iDYXTP!>BL6OI&N*eHe3Uj_Ui3Ut?Z5pBi5MWeFr>U&S5AHl9d"?K?d\0I*0'!eFKp(]bZ!b"V5Igim@
%dHfp;HnNkQq\DpSK'mk2m!Y<lIJ)$[l7NjD4.'h&&&P3K^NHl%3o-!SMIpqN)G9&LUZig8D&`\eYkK=:!f[g<S&'PQ_<U-8)9%t<
%5HQGS*`BrN_esAMVo]>S\[dh29'>?r@2Br4$_S%N(Qd*:7/),t-?LVB%rD[NLmDD?V_rs54>"h[6>aD(Bqp%f5so.!"0Oso4ESN(
%6:3,W/BqGg2D>82oI?"_Rsh@\<f=^&\NAGf7>^1I5qW"f4hdX=>M-P2jG1_'nj-c([E/IB.?L(1SEu)MZ8hJsZMmB6^tU-%CK+;]
%Mqc_+$u=>_]q6"Y0GHgJ1T@l532Y*Wc!-cQ9VsnY>O*lc0jk@U`\:5)T7+:r^';,Aeo!UsQ.!F&gA999OnJup)dL!\eH>1sL_bN/
%9<6m3[/a/_"RQE$TEktkBX$n5i=qV.8iTS7gW92g5_Z-O'FK'%]Hma3`"U5U&08fRGsFmP&Of.=OZ\l'>Wbg.GBMHJHYf1Uif>>7
%A<b+,0t2-p(M^Q#8`B7gCL"$92hqF4\A!jVEO/U!ZjRgb/d.P6W?*6O?i\5SW'uG?0^ID!76PJ!j$KcIU*Ni>(Oo_nMBF-2$Zb85
%B>__$B_)9nEA77qg]"N]^d7fkiUuq2JmT/QQIRmlpFfS/)+O^Nh7L2QI7AM^4e"=!]R_;8Sd5aB+0hPNj-\8r;+2qIs/9-!%6ITI
%Lj]\+>*h3jn+Q:Ff`A$@RVWs2Wj=)M\<'@?ng_ok=s0+7&']cA&\/c8rm4F:H>#T^W(LCWnV/123knGO"O$#s"K&#!lq&/C5bJp6
%q,Ak.i>?_O=F*u'&dodreK(nB$X#Zi=KkiZga$('c2;sEV:s-`Fuh>f*G;@YNU(U%"P=AE:6#]Ihr5.Y6L1_R]KETV#joUb,]$PK
%/N0)f3#k04VN3AO*"F9^!_fqIo/e/#No"S97)gP4:=s'BrCnKa<tYn?:XMZEe?+sEOVBF2_KIHl;(ZhK_<6C**V4l,a#pSq@cl;8
%HVEEL#3gNW\U:-b)(;%/3L;CO2o#hHSZfA"0pg4m2ZouL-0Oi1G`qF/l$T)9M9b5SK.2GMo-NSjAc1&s!Rpiga6MjYAYN*>HV`ft
%cK37=eA[!fq2uEV1-Bo+i,l]o>eWmnlo/$-?ZIc+B/$1.FM?g@^*r/F!^J+Y,FqMFGM=!jOSA:e8DQNfl2&?9h8rdhR<5usg[X3&
%%m-0L'OWH(!D[0*QN6RCQL"YEbGl[-'oRW8c)S`#ai[*2fTr.Mi^mQF;Hi1+jf0+tKrYj[2cuOhj6D,Ii=%n!s!ARnWjFiJd$<7]
%9QD?>@Nbp8;^Pss$$7Ju.W+`_1'T4ng_NiH93>Gl9,^kng%A'j0CbReiIm]Ri$,VC;)#L4K:<rUiR`i/nf<8(@PYkID;&9/$2,5Z
%`jE?aNdWZ;\[]VjXYcO"Y5*kn?P3gRLu5/LeCH3E%.-beD)/n"D01"<:YKG?EDNR-9AA8to=OFLK:VXuSdML^T4Z+k]p;-K_?l<e
%L@-c#!;oGK(mb;@,1D]aNGhQ:'N'G-02ne/F?B-K8TMk3cdF/8AU$sY=*H3<:>o8UjF%R7BMZbG2e,`.=foXa'>:sH8N=EG3PLM"
%+RdpVE^o*PYWMEiLK$c(lBur.1Jp/d::"/":3qb1G5)+@eWu`"_iXUUeCL8Ma"T)*Br@khd=`$iC!!hAFD"c*I:qU:AmWJSm<6\/
%iPGEZhKMJg3+:K1*bV1$m[C`=V%0H^/c!g.e,n@!G-BmIO,<1M\'P"\jRMNYDX.1.[%`'X+r!I*gtf)mDYLXDgBYj"&i3QdAF4N3
%V$A<#^%"!LdE;WUmF"HK@eZI]*g_&Bf5%gdL`II.F`n*Zl?5CM]_`%+eR]84U",8lOP=OEZ5$(Fkhga#`I^u7l@fb,,PJM7Bj'i.
%@JOVaK<5$UTD!W8[ocIS`h*Z7o(s,OP>\aP[AT*S6D-tFdn:F=8Ec6aS?;H4SfOeL>uu0iX<hu3k]=k!Ptac'?;IYcUGr!FoS/4<
%a*otc@&iG8IVeYR(Dn-:al@e=D`X$TqY3C+E[]>)rLnb*TT3:2#R,'-iq)+5No%RQit@T;,5TK<9+ek2B"I(2)M:Ltp/s3M,R?go
%-n[S0,gbcuK)4b$>EKrjK;d;PN_NrN0Xe]A3BPfi6jUr4EA2>7aA3]^-aRtce^I!<?uQLa["B#TRrGr?>$t`I)OhYR2gqRuV7Q@O
%j/"BJ%;G<IcS3*E:N6WT"T#dqP0BBj.kU,K+>IojAJp]`)286bFIpSuD#ha,mVdd>]E+,TOdUKg1P58'^"tO91<K9g%4a4FRMg>b
%VT?tSS)Z52AtHd3P`t\C)-><K$uOYG<RcA-?Hg7.YVYm<lKh'e)g5h".!"(OldmF=cdQSK`b`/QH#gDVS9islAmWsfEo_*IF6Ws(
%r'u)M87X&"D_3j=&o-_B^%A]to$&,<;jR]7fi8EehXj*^fZd187=V<-<7+t>h<?mMhX&0OoK057,a<FZ,8-ZA^(uN3O-o)H+$f.`
%a5ER]#8$4#c^>9!p!dW@a[cHr?lP0mX'r*MRmsK5#cq\(oa%tu!ej[<0$hDg#$I!N_i5hLlC5]&lBj%>Hl4["rDoptnZL])?Uh>(
%lWR/5-;62I4@7_CgiqQHU9"L1`:TS/pQR@)Qj&h`o1lpb`e\&3-ors>ioIi6crf$iMR:sA8[>2?Vg`+`!lKeW,^]8GUa0*EB^d9M
%bZc#YOt9WjPU'D5.,@>D>pEb//39/;'l446<+nG?LI0@P&]U7Wb'H`Rb+i?:Dtu`u,j!!8TSAo"8'MGmq)1Dc04h4`Am4XpH#\2W
%+XcBjp]A?.b0(&lKZ?06""31BFta@4(pgF*4iVBKhfg"'%a7BA.=O6M]rRck(:/_&7G]iO)2(ZqGfJH`]:UaEBq[&Aq`U@?>WR<6
%'TH!bGOmL:p*:S*MFB'/1>K"DfF*)TfEtDs"tLR`d[Q/0OO"#UC&RgLkP_FQYVfJ\.W2lYC\QR".jr<D6@0&HNjirjXnAe<`TGnN
%Y'#<97%5.kkKV82_?%B`E8L*Ne&8lRBc`n01VsbGZWe?Y%C2dSfM5+jF&!NH6m7cCmM;FUO2R^!d&Qn&1U/c7O%o=(DQ]2Om`L79
%<gE'1NVI&!M<!ku.3[C50qm-gGunZ:S.W1`g[\S!,Mjl^IQd<FD%*88NTQDPmaQW#X0YHW*sp&<f%AWQolV(;G'BF?G5'B1frojE
%&N*gZfQ^MD/]Y8&8P3e]^%R[be8U]4\(dI@<h8(:R_JP.fBR(j]Y_8AB*@8e%q"<4U5DF)>>/&B\3%p]PN"$K:7nb2gmB-d&MC)m
%K"&MO6O#HtjYjU_pg2XaSZR#S0qD!IP[c\04=S(Mi>>5cRpM_8p*ksaJo5_K_5>F9PT8^s7+X]MlUAdeKXp@EH+h^9]A'HjW9ohN
%MRb9$*]r$#bBbmO41c*:pIt+_?Kr-N"\h-*"=1\SfDTiGeD9E``_('>6K*\6O6WS0;an3%/JIsLAgFa,OB;72!:d9+qbk@KL6:+)
%Q.76,mt[(Y(H&]2J,CQq;#<lOlX2M1@39Z%?f-^-]d<Bk!;qVCfGA,a.<n)4`4g,UR1(OL09))86=O;$<aT=G]>):uW/ut1Yqiu1
%^9ji4!>G@)U@]XEBLmu.;-A;jeN&T,^*l,`*3Ti(YqN+Q,QbkXlq;;jL7-[1jgN/6M#0s6Mol.nm*-(TqkC+UrNNeI@UE)7Z!M)C
%M1%*P)g5]Jd$WD7A*h(>Td9>#S\fImmfuVSMot;u<TfGVqkCCm`8s"T`4i1O^.`R]B0V6$;&.#"S%]R5,^J?OIA4Cm;IX!tUD'[3
%qG6Gkf\rI<B"D?=e+YYGK"]?L?IgM8WV=?FW'7KHeOl/eHb8_Y,L11VmfdmN?_5BQN6gaPpP<gj%pY.im&SHMb?f9NU*Do#G]fCW
%piVMJ%-\MAW/RsJj&P<om*rhPU'sm26p>!rB@dB8q=/3gD@MbI.b^B*'[QHLm8M(VLih1rZDuY8]jYK9e?(>hdjY/Dn!@)*I<smQ
%hD4?UDPITJ.8;3dIf-BfW)[bss)EVXo);ulW5i"Oe+N[SJKOp8q!WQQc07lT\`eX#:4E4]i5bjY<+i[fa8R.[PF#q;qgW=$+f&Zm
%55plod-7c7W?2)_oQdoOj'W^JFQoimC3"DOD2uX;\`5HoqM%3l%[,ej_/?AJ!o3A=+JDk[9SCacon@>n9mgb`PC-9\25dY8XBa/!
%*[Dps;QaD$G3hUTHE`(Z5\eB5Sl2"4*KP&kh](<u*1I;51uVH=4^#LD>j'5L;"DflLBk5=g:H=n;F@RZ[PT,tDN_G"MJriXR%5,g
%*T;d<'r=Op%;O!QVI5r*ncl6r$X\\FJ7ICc8sO"\$932m8@C03Teb=3UCs-N^?;mI?>kY-%E8!MSWspo4G[5rB!L.(8BK-']=:G2
%m?u7j5:-Q2K5:c3p,LQFV=ca:`0g&=cMaZ&6</f'C8@I244\S<iYpLQ>2XGZa1^.nFM<Bil2NLP<`-FBMWCONH5^_KCCIE_ChDTA
%^0,[>h\eLF#HF+AMT\1^.,kbqVe77*j&M^#'V3);d*mJmY/eo$J'fBso]n6n7Eh/VDg`/qmU*t,`#QX?9R-:be+3ZnIAJcS,#Fh+
%s7JH+Gqm=.[I+e&nEsY(<1RbC`k-`W`Zt3A^O`_>K+tE'Z[M:+PFWd;A<A@r(M`9^q8l%[V2?r"%A)sfNg`=k%Uua(;<jtQ9`,o:
%<7)8A.+D-#,Dc6!W6>1_hlV%'-pBjS73\!:JYH3K#L0t!'<)afF0lcObq.qe9Ld1tGTBtH@@bt$QR]pJ(tX2)\'d&0QMBm9BjCeC
%ah.E[VPOY!Ue.@caJE.5Bq?T>>-=^;32YGW?DkG000YLJ__7QRRnK$L:EACL1&TCFhJN&Q7k\5M_da+oe'dC7DW]D5q#]m1`CN5$
%#(?tZo[@]4QZmciQ#mr[KM7YTH^".Xb]HMtpb>H,0a<h;#LC$LJ9E37@s?82Kg,2%(o@piEtU^G`5t!GUDriQ6Hm-t?,"s;;`?WB
%qqnm&.f8C5X0^t*bOrnY$i[SU6@"=4bkC_cG$1;<);Sc1La']&baJK*ap7jQH7$'MA`gD?Y&7"QYh#1*`?`]TRVlR*p*Sof]]o3=
%^uj8/Jf<CDZE;=jL#Qh;drb<:oZt$[q!O<N&0#qo<HaJm5>=*1j"e'nWP,5-9AJ!<dg8$T-`/5/EC93p:"b`H$]B<Zl#JhoHM\cX
%pg<e6^'mZTp4lk0:IJ0j&!ft">.)?sN,Mp]ELD(_)*'i4P_ch*DT0)rF#s">VH%7f8G2UA6ZU(W8Vr6.=7NC.MjN2h]T2$UF7_C_
%"I`[RbD"TC@QAj88Pr6.S68s\cNrNfc7[W$`P?H0W,IX!46dp]6l=CtN^k("jl@;oPg:r^?d3<\3,'lsf.$3'>ol.5DSu^S@Y6-"
%.7i]R>HrVIn,gt=c$o8b6scKZ[\>Z.?8K9k$AINU0rt`W`8].+EMoo[JQqZnG<VH5<dJ"+7Qf-uH<cda*]i<BIT;g*D$aDq?sorI
%!<%Q!PRtfe&Z3Eq#oiSkDT.4Fe+SV?7;VW""7+C5#RjgSkf%nun\@UbFVX@GAn9Fl9G*cf,d!!k([q&qS3(nPgtij&PnA-p+,8Ei
%.\"p*;*B]2,EI]LMZ[=k)nP[Ems&$@Vt9A%XSR?b#SCdp8&Xd^XH?9(S+p8`3,bqRY,:g)],iUP$A+@e+;'C:V<ri+Gi6_VHY>M*
%dWSRu3D_UsSY9Q]?i5ND$lEpqLl9%K^Z+\\:Dr3amo&fe^%'d,89f3EZ%:DrS.t*Q?cScnp6O&@kKd^m(Lp@X<7cIT<@e@>c0aaF
%LA3r0^c<12hVD1uq@oPF+@U1sjX%X#pR,7>iBZeK55`n,*(Jii#-'9N)/,ruj56JpU:+qM$,q*>'?ZMng-ShPOC>$.-L.;5j:fl]
%RF_%&U#)/[B\^SVerdoklSaLg&\5U>2^L2k[,UWg76"'b.>`%^FrVdAc]l?R2'&*GfP_b@a+jjD^!?7!M6WTWi?0n4can6n8PD3=
%SH,%K;A,bl6>&Jk#\;=u8n'aDO1i9@\!4h<q1pJDdW$^mM>;sCX?/Uh:n6c7o2oFs5S*n"_R*a`!?WiQpp=QjDt(dS"_I9Q+"L#K
%O;utaL%0N9TfuKo`cD!N`sOU7:P\n"`sT_u^gN3<b'iQrNKRR_l;>$LjbQk(K\$]d`0^QI4R=YnXR?B)6VIm$Fr1[um,Pq"!MI->
%4F!7kg0nUO>HR[QLWMp+FM63Sjb&=oDm^M/K87Q_)#X;Dn-9JfJWW-p:NkrKJ+,/FS!Uo^K04DB2&Q;G@423-s+?*K==I-+_g(Z)
%G&ZN&%iFU@*^!+;=/O1$-`J1M9HFfi;hji#@Ie2hJKYm"_8BeO>:,RX3EQWQGT8?LFr1MWJ.E\*^`Ff][DP[fl#FC+PN2VK*ZmL<
%`+>KP=@W;J%j!&>`MA^)'Fu8YnkS-D%iu(c7+f;Ri-erC*[]JOOg3?lK86^[l3Iq3o\cF+ptB07%ecM8UYpc[ai[!C"U9;B0_r,o
%W4D0Y_8CMR2gB>kR>tK@qL%cd@dOQ,*G,LKO%Xi>/8PXuHgi`bX@t;NK0=JC1Hb69_hb)VrZ40qY,*AieaJ-G&[fi<pR_=aPWAml
%0pSQp_8@<m/nAX6AJbq!-GO`FrNsB_4BtI*m4d"!H<d)0O%`O$;Ek[5`ceHD6GS-n4<2RF:]93[Wcnf*n8;q!CPS>7hC7gc*bj$4
%NHjrs[jMOC?T[T_FS5If@Ie2hR>=8T^)fBV5c=;Gi*iq_K9A-W#7nM.7DF!oSeM\,i*gQ7\:$SdfMRP@r/),<^)fC1XsFk,dHcF?
%$+2>FIY<ZePc`ilK87RJqO'1L`2@nM0KBOW'tj#$_8G?c%O95%57\gTEKe(Z.*kWfM-&<N]DG9@\(tF&*i=m=b"NaLi`5L%@G8D-
%f*;hA!DuP\i*iq3aS.WG5BrR^0a]:^K0=Grk,&RbkVu]/pVFc.';(5Ro%X1sLWSc?N1BIns+?(I9TrdE9K8$smD6^$k\,^Kr5P+^
%oFE"?9e.7R_*cmV'LK6[2tJ99>T@+J\X@SOkI'>n8>9NP3*+]Xj8D>:P`f!#Scg4?Q0$#=FBHc#3Sme3i^:F$n4"iH="Ku?hk])n
%@B8)2>-B/YB(e`,Dnh8^L$L\PGL\FKCLm?VAM:7JC*SGqgP2C\?h_$2hLE,7QSZ2JO6NX'cOFI[jkKXakLYGGE`XaVn@-HG$.E&4
%SNJt44>T4ZDJj;ID`g*OgXl7RHum4ggbBjij)Od9\QV0]ZG+([<5+cm=1QJWnaGem`n'V+MmJ&FL%hG0H=\s8qg>V4-^ng.leBMT
%DlZgsH>^clpiX3X2uWD1G&,Ur.LS)DP\RdMH#\9jP+TEp)pqtUY>D,Kku2B?p;Xq'ZMj*7?eM\2c^N*K2qMk+htL;apXW9dI(DK2
%o+E]gQOEEBoD5.Bl6YBe/i6dVFaSbd*K/>l'%Dg8Z2!AK_-MOSD4jYs+3;C`2SU<`M4+%E_u2!4&NaC9mE&s=+!1fK($A%)mVAs^
%<B1r/qJibq?>C=b-T0rGC[A_s;T@MCI4nlKjD1o,Hp^0S;2m=V8(P.&/gchQ8f;:iFkN7&GV2LjP$i5VRmR*\&>^*G#:_@e5dD94
%-8rWIIV`)gl$^t(T0$];f!imZVI6M@g.V<YKiWJ=gDtW&.=PXQmt#PfQ(@ZMlaugqCZGdO]))'ac-a'q:7Zg>0sU<3IVnUoUe0TM
%s/7$JedoKEJ!_fo?16e1@)+/YGr@TkF):`g@brqUGGQ#-3Q*j=[$b5QR/&3"Deb;AcG14-#62&C-l3bCcX$_Q\NEC^"LE:+KR[n%
%rO>,/gb*CZ[3GqAh,S'rjsIgNF1ZdGlJ0nTK@eY+C%2G;?1NK4'n835IJ//X%t5X?d_/rVIk-<s2)\h>+&q3SSW-E=C\Te4dOoT:
%?K#gDiX[\3)<]$:/PiQ7Wk7;,$6"b@Fa&:=`ue:-9D(5dGP)CEGq)kooJ2?K4e6(OT#^4%Y/rpXU6'5jch#=0PI/d?-;T&gc`;E6
%\Pli'oB@ROMi"l8A'"7Eb^(U/26K[")n7i:&9ssEYHBHd1Q-L$I^\d<J!jG(H2`MkTris\On1gnrA0.%H$;=nDb;sql.ta'W%+S-
%j'1<A<Lt6aqc.O$m?@(_cHdTXbPM%dGd[=AI%oQ/e3Ju#T3q>.S(1D&<=1\Zk]1o7G$tZOhcdF9Onh1:4Ogf72pj+(06kqF*@cR8
%M9j_#=1K\pIOF/Pa1pm*D_e7%/<t&L-7&iR0@([R^r"FXHER$kis:^&2Q#B$GRK&0]2;Pu(S(mUr4qe9PJ`f2L[L.mp',P8k:??(
%D3dc8`q=aQ.D1Z&aW2?aRFK:5O1(eDnu^pCgS[]fStOOH@>'+Ke!)qq(@TiDT*qtJpqKmL6-o?_EX,rVi@OBYa\tJZ9&>3lW&sa!
%KUV?F@\P6^MD$9>66HDsC^s=:TB_qEHh<Zp$sO-]RhPd94^]3>,%%@[c49E>(3it7D!`n+'rA-TW$pfW_.nWe5d0,-Qmm`SRsLYC
%#t)I3&)l!Ia0I.32dd[p+/>B2M"*220;)%.lI4_FWj:M7le:Cnl=H[#F2*E$!I#%GAhhi:c>8`SQu\K;@>1I`US]+AmL7t[!K3!\
%g/`KH6f$G.h4@oC?<l$hk!/R)rO9*qa$<r$^+J64o0jf-Lf_SS-u^r>4m\Kt,56nMK-NsO`g:FZ-VYgD+=;Uc-M=4K6M9Je)_k1T
%>LtJadot4tpLXoGccm-lN<iN@l2PT7fE.W03]I:e":oi(>M@<BpLSbnB'HNr?!1Cp#9[J[,jD(?K`3Y57i)gKo_8*g[e4-+e[G19
%IFpcb9A9%8I45@,.1On_L+RqhWU.+J#2$$C"a/F'3['>jdY]#62ucj9?VoPDEI(quT<XDi,GD;jGB\FJD\jbHkkg)!gtoWRdo`i$
%DjBHSC,f4o,C0ri$R5Is\WEOc+_JV2L08B[pXC[Km.2+9lg_Etrn:J7C,Not9M*Fg<3:Ur]IHlV8jt:I;6)Z8"&*Q%X5a-$%)S,I
%aST5`f-QnD]6mp9/*2WA<jT@74=Ma!o\l94#N(.sLUMKuA-Bdq)Dm)-Tc\Q&4ALRqpj,!sKFNY,`HGFK5I>iI'bY@oq$%krZSl^N
%/u>UWE:[\s@+\5U_lRd3ld5BDK0%<>#JWuF7$sIUr@k'BIr*cIA^#];HVr.M:(rVWgX>6n-bkYdC-PouVJd$hdU'?\`^W\sjS3r8
%bcH5b.=kWmh1d$Bo45!kQc++\.-@)*([&82kPicn51l+E0"t\A_lf$Z%la'e3B;"qfPN_-]GkEgPYfR.p<&ma`m#$qHmI]t)%H1I
%le[`SFC@]R9-\R&"cMe;n[hLhj#mq/lSB@Di+?krqG[%"67b?RH:J_>hT[Z)I[oAENR0gW9E\a1lE`oYk3@CGZKK^eT+#``3[S>p
%!23lH[$0oj18`]0/?J$gbGfU`O'f`pnI\b$bs^,KQQl&T&\*,@R122#c:qh6U?W<Q\*H;XJrG*/&Cs-]H34QYI*K,eVuk8OT:o7-
%11"e_/mL#`\`*B?m&m$B^.(#^A,gSEgJH:r??WP&AsaQNP7(nsg"e]=o%U1dD,%?p_H<E_2Z.:"q<9EA9a"<.\?d*jF_ZN2S1M?%
%,Eo6q0f$>N5)L9)M=YM:cYuG8CqI)p1L'JQ-IAZUSY%]#r.$3(r.bgd6j95XXlOX-D&bO@.';?Lj'!>lH`hR7BAk]9h;HUa>3_b9
%4mj`Palj1NKkQP0)7W2h2d4oTD1%G_"ju:uG*W<<3k;W)Kl56I5rE?IRc17:aIDX->E<o#$eKSoFm0j*mOW7G>oh>454jK>Hh2sS
%`9Yn1-Z6);hm6il=@M%CO6:5/!aOp@dNnSoLIL<45qSabRIc$HTcr7%</7A4NDI"9QCG=4:[P:fc70i*^+HE7^Fk$)6<Bdle`ZkO
%VEV^JWc2nQqX"W=GbB-+!hKc;?8VJ\Kc)ruE1d[N_.-Gf^gA^-qF#U@&)+$9_@NOLi4H#4aL&)*ATVuci'USHQR%gllIE@r%SpcE
%]VZE6:+p&G*kBG0An`3s,39(\#QIl=hUN[VIcI;M2](gNTl=Ft+]AGsg,$[o@&(`sI4>$Jq1BOUO'3JT1c*)3&\BqldKX#!lG5TD
%?c9#Tk&SBk%o?_\BmD6^CUof&(/4,U;Uk8n>oPbli@U,C[?:9#@Yi2PG&:dfRpj4Xj$o/ta-3t)0sduGmhJVZQcJtpiUtg>Wk*72
%W^j0#CaQeXOd:d:?7j%N^4!YZ@X5np%1dMAq!sfpNA&5Q%2#!`q!s5H)[t#UDL&=j=(d_`8*nqPJ\JjdPJRLP](WB*Z(q6>h'tQ>
%O4^kf\S_US*jKL5"n.5S4<iCs`q9uQG72USj&Y!,Dc")T2mb\$e?W#OhHXr5&'s!ReFMf/;g<(&6W`KBBNfDq6L1=p)e=64Y)TB&
%dqsAt]pfKbeiB8^&\BqhLn`Lr>]Hpmjal1HGr_+$!/Ho-E,M9!FDEkZ,BdpWI=]5#8*nt!G1+91*Y5-\2L]>goCm%C0=B#qEX==Y
%&Jpt<Vt,DEIse.^098pl9e[S8.P.02=B]9/=;tdhL:03Rf1+90j7e<i1-)s,p]$Y@a3'l5e,RDi[un#FnsBLi5i"m>lc/t>naMmc
%;j5R</>6ES*d?o)k4+W2I&;"S%NV>:484P)_37tGH?k01lf.K^[HZ6!CZ&?\G5p/Q*]#JBPI3aCpud_s*XH<Gc=23pSTg794<&2k
%eHUp)4.R'T`0,cPH3^0h]&`O@Nd$Pde&qFmmt;qud#@q*[(=Hl2+=2)^2f;cJQmMO:Cj'"?b^OGl0D"1Nk],\./??Ks!G5$/nH`_
%)]/t*bJ,2;FE\KHI00?9fk'81SXh,r/=i?[Goo8h3WITorO9sMOM_F"*st"<&bQnaM?$kAeZW8[_t>4OLuQkn(Z_I&H-Dgf=IXCN
%k,M5O^GVk9?<bu>gdt1Dq9EkBJ/'fFUT[uB9?_tXdr='PS'D\W?Pg4Z-mF%H&Vfq_Ts&rQh#dcN#tpq:ETf4,2\Xa`.%>oZD>O'S
%6/S'2d`,dt]Q=/>;74eL'\0)c^6q'r\>laYkXT`d80BL\S3+@9I[Ii45\M.)M'p2=TBAFXKY'$V%)"Vs_Pr6:C-orNWs^:"ZTFdk
%?CCXIRsaiLHj7j&7Xe*LJc7e/'G_42b(?D<!3G@SlgG%en'=hkR%Y#.`T-"B5T^?LqjT0dLpKt8$H."Zr+#E>mt@XXe\.qN8f[4\
%&sMLU:e*'l<a=A7VZb^^]1mhrH922TA8=3YD$j<:T%O9rI%P3ke4,[.5V3OjRfWoMq(]!gX\BhQ#k-pOMF5"[\o9^PY361;9[_>_
%$6FU3J[U.,)t]MX^gjt5_j(88<5sq#7Ns&98%5n5n?T&Wl7O\XHS)Uj0Z&^Z2%N\q9M8RL.BaNUp1Kfim:$?s+$'q0%pKb9f%O'o
%eahbpQ-5fO'Ki"Dd*#Sti6g2W#-NfAAe=kbrrKre>U4oCG25=n9"!,:6A:t'%AR=%\:0q9Pf##,eqP8q#aS!A\sYQ\a39]\=d.)b
%9bse;d7hnbi?4$t=l5jV3WaH@qA[iaBCebN7d!c'][k\2k%5D-X,bT/Z"lmfg5DePO%%qqR8E9jak_Z1(Bm\a/Q`n*2q5CU%q=V-
%K\(H^#A]1S4IsY%*M$Kc9<7@Lm]d^;9*c[4@=ZfI#'T9qoS/s[&;\LS!qATic.h[]nkXZ*i\YUrK(J?e$Vs.M8"[^`#)ne[(r=U.
%Bf!CLPhL$Y#GUM-k3W\dHp<4*,:,%eR]jP'o**5u\IgkGa\.ba+$+V2d65XU_u!/NmV;$SD$m1T0%[M5YM7)3X.]255TBE'=$cR,
%0HF<u^&o+b$JH.S/:d"3XG9tFZj)sZY"p\,ZE+=[I'L0l!]m^k;SBO?2KKotd0m_@e`T),T7u[dVE/pH]<9GYjaH,33&Shoj.X3f
%!`!5;'A35gXj0(gRo&qY#"nn&YC(,uW(lGFpAVN0_<)il()R+/T(rH`WLgR&dlhOUcq)VlO`(U=RilPU5[h@-_WH+;'KW`+S$JB-
%R+7&h_k+:?fF70Vrp[?=A8afh!]#`uC^[W*9*m=d(JFc(\gF#qBJ(Z%!mMhLdbNgC)?q$0W%AN8Il2-.PJna@67[EKGcL8obPWB^
%oTu;`4(7*Rd*UWUk@(-uH9_]cA$_)pb2)m5QHse&n\Yr_Nk#nnlgt42IDXm:YjWja_hGiq@G_Zq4Cn56'_X\'An^]..-u;8h#K6)
%q"nk1p>(Mt%M/P&#ZeVDpj5tgRD4IdIuhI\dtW:\n95";R3JABZ7sBfW]BOkUDfKtj2qe"QDs!;)8>)qDU<Hq7hr($*W#'q@Yr,4
%8e61_9#K?&d(p\4(dPV?H\]:"(gU<brkb*O$)2!da_TLU>WW2IKi5,^UMoHRpCn-1aT.S)eWWU6`Q7"H?=#)DEXSDd.gn1qS6ER4
%=Rp-@[.\Qg'>LiDpXRPb<-E1!n"[:->_e1A5X._hp.O3tO^\1D=e>/fp"rk*37rr`hd?n1a#()^Y1\(V><)M+Y;D<0eX(#&4.#aN
%XB8nZ:K9&`jna/,;Rrb(\%Pdkrq`SCg=_0r@JtRpDpL/I.aRd.,s1:8^)d$!P*8Sjde[C#r)fD;gofDhFf!k*JlsPQG2BEO5A`M(
%SZ]0Be^U4LX6Ps;W=>5-ZFP>VP;Ho?%]'r^rRNWGkA>G0Cq6qG9=\13#<et'(S;pnYJ59OAtSZ.,BFCWgQ=L5qg9ZugVV>\jb?&&
%jY4uq=]n$_(@'FL=]m:)UL1@Gk2m1cAHc\&2=lU/Z3%ANRe]<R=b0_MB)Yb1<a_5,oCJlcZ2tshj*q#q=j$[8#IC];Z\5+L@p)q8
%\37aXNrMdR<fiIJc2>,RX<8gIp:l),.k=04b(O],).loMOHRSj^n8`k$<"/bnhkko<`UV:*tj.oSVeuO]6J8jW</u+5V>\GT,5rc
%St1LoP_F:`jk"M#RBeNQP;d[:5J4@ZqFi;oRUoREZ^ZGHG"']idA?1:CM[Nj@sfdM4_(60<1n,9n#/MhMjQDjs$05B,9m@R_94#/
%.Rc3cZp!-nVan@5(95E_=ab[3l&hJq3^/^mJ-a[q&Vr^<a$]MsSbEWEc\REV!T6$OSNT-*Ql[E*3V\^(H'6!7J:8;]roQ&cUdr?g
%hsWV!ht+0?H3DafkbUd#CU6-Wh0dI1NM#$XnMbV.>K!*d[tC91h544]-A3Xs\@dZPPP-,E'>Z8iI3lbS$9&'1m0$?GEHS4TZ\*C0
%+ZDn++Og1hK5R_]a%_f*a>tpi$B]Hr-Q9i7!8fAsBsKFeB*6k72H?$/.dK:"O`FkgGffjL6b=/X_7h9rT/R[F<=*]@cB%Fn]WIa\
%NM%k6eYc4RCrNd5Vr'Ut?@MmB%\CIMei%Eq]id(Ke@33<No0lt/ILRBB7^9\5O#@aJiaJAUqb4;k"jj.5lNf%o1*^r+Qkd1hK8>O
%r:LP$rQk9)Ci975/IE1]o!,$?,jCACOYZ9H=s9($8&@e7G--o=8bsZ?,gt%;,cSO4'#lX[<:j"gQ,PEhO=,R#?>4mHW/18R;0f.l
%%SQh$@*tuWpAYKt5Q5B/=]KOKRVBW'9V`^nAcBhLl)Zq:4iE+7*t%>Yp/^js?*2^Nc%!#,7(YWD]\M8a/nA,L#:R9Qbs@td#:L'H
%9iH`1!IO[)q+Ji4iucnQao(gcIlYD2Pe>sg\uESS2#+9:Z>SbUa3nc[prbOCbIS.*r0-qLbO39_J&D<cPL]8nmcnQ\.!thiad+_Z
%!bteB1N,@TT#HVV1rmmj+O/&EWpLp'[9Yk@aCpm='?tY7NR@+*i[XT&AnXBQe1?s#<GeAj.S>NZjE99:jSGCZD<jSG9qAcZ6=8fF
%\9Z9%9X0hZ.!`eZ9X+bsRAq2Q\Ya(t*S(o^YIeNSc-[N1=\[<7n39pU:Wls'0F_]QC%-.h?Ejs6)6Tub1fK+C93p-?Y/-Omf4X/e
%LG;q5]Q+5K70t;sB[Bi0Eo].&]]En2g_VKEC9A_@c,uL_@ra7]/+;c+/(<jtDDO0Up"=U\%C=`=]'3/613ARf3G.JR(V7K9*.7#Q
%3uFH>iOU-B#*lM(-5W*X.mR0PM$6.c'ZOb"bGknT@;PZ'".EfUTlM(D6'k^b1t,uO%_gKaY%*1.l-K[Tk+FARhD#n;K5Za^k*hua
%7c)_(:cYIYZ/k-LRV?_!$T-IYV3t;b]V.)=4,RWs1rj-Cp*E)6o:!SLlq[l5ClP^QQUoZKX-R5:?$>e9CMRrl*9^"^c#2B7(n6.l
%F7YE#BMuG\kV.dufs3GqAud(5CMI05F^8_uBVr]"m'i[&Gsu4Zp;[1j_pTg\Ji(MjLh<V5Vh%II)4UTp!mP>Gard'ajAgi;fk3Ip
%5]C9@fAQ+t,:a%m)(&j70O0tt=-6R9B'"0[Q<+.7CeM6KR[j]^B?T1a`jH\Rr@-><kR1mA^a^^M(lZ_U31RYAK\>_SFk%e,ANN*#
%2GI?PF9VMmC^)3GYnUl;`n9Xa<*/Z6i%C>%Ct%ofV@ql1cl>-C209<(U<3fJBXZkjh:)&0l7b,S1eUd.Q(T'm26n+Pm3sQY)(oE?
%n?%fX<@Y=Xk>Nd$ONuN0d=<5q@rj=4(qRlBlq=;f`m\ng.0>ssR#WFE5]\g&B#R_0qnRHFSB_&c^j*GF]Fo<?T"8[XomuoI8V$on
%dpQGS])jgp:;A;IEBKDb)DXelYb#7VBWZ!WmEpHHZLp%2oNc"8%Q)?qmKk*o^j<SX/I<0=5S[t\C]M_f>[%gj"0ADO>ScW-Q#!uT
%)@Tn_>RpT31MCN&c?3qM)$YKK33FME5Vk8rjuh!q99i5E!S3J,[=r53nS!r#Qnkk\H6TCT7D#__OXpTm=lchBRL<CuWLR_hN^klk
%dc;hYlY.9;6o,SA$<meMO93\S/6hDF$.dSRBfZ[IE]ff0oo79!'<J*Lb17DCVTma0ZjYI6Y]RDb*?6'DO]VT?7s-*'&i^:0%V'QV
%c@EV_2@&>/,W&`6Z9U2t`kPn$0U57d/b$)a9+qFRLU7La*irF4K:+HUbJ8C'o4aM#ctjPD:e`c#Stp9!;Wfn+2MjmQJ^[j?\IA/r
%(,#p4PLL%Kestl)-IFZ3FJ;nlPDZ5/ZN2lo#^N+I.e_DTU]kG/_%qX;Y^kkFs+0<7][%?1:CXjnC.ED0RUb'S>TXeYf.a#j!mQH?
%L,]SLN$g/Q8`Kls;KSSJYkaHh5Zo$#TkTms7kmt1Pnk:b*)iQA0F`ee$*2!Q4SBRDcp/FJ8NBo"G8#8G<?e?/Y":BVle]*Y3H\&[
%jq_W<3#tSbJEA=pL>Y"0=r@c#VZChuJ<T#n*m"UV#)ao7T10b.-gaU#/)YSt1t+aM/e#u/_[-YYX&G-fS7Yl\.s2_CNf-#CE21Lc
%CkL]ri>_#c0V#F6feA8?7:3Y*Q_819`ajQ2fO-X<A?s!5TG](1)-S_B$E-T*CElJ?1pB*28SkkAbp1mWEYo]p*F9/MdWOn1c-h0\
%%S3p;0Qod\'O)l,WetS:1fLY"8aLs3*j7peTfIMqn2kk$82J%Kjs8\L%YL4VFP[.:<*\?8csSJS)XO[;*/2Lg(huo!`aGu.j@%RM
%2$!M!O5T<=?3f&GWj8Xt>2@a\WFnJ;'G))dZkTSO7KY7.+FA[aYh2)WfGTV$E4G:i^FLWb)#anI&DNrt/oipR?pJa06/k#j$?$^H
%,oAfC'`<(-UH&[=0M$q.n0YqWlHf_00DOFb8$d#>KuakU/;bVF"BLJ6%#/NqY/!ZK'a#G[/D_&%2=P%Z"gZ"8#):kX"t1grJa>_\
%5gE*Y,?S')1^'12fFqeh!gbDN+IP8G=<bSMZ*8PnjZ:Z*\V/(X@]I6j$#$bWdG3qHQV82H-2\j.=7o#n1s6"+6TN3KP3KjG`!$@_
%Dno<+UVWtXZS$.?/W\uP'LS3PX`,1PT`S5(;[PI,/e1dQn^E5GBOE6*=NrH9FNpR`-86:*cu!(toW&'&LB#+uI2_V/^g`1tq)"0d
%N:f/XC9S<erXSrcrDG===Ofqu>g<s9B@%)q4Qnf[VqDE]=N,6:V/W#6k;>-_U(,X)O(R+MF&F_VUN(ts7,XVnNHfd*"o[]dO0KGC
%k"6GGNeU5^[;7NS!JV/3"%EA.*NU[Fn;-!W3q0P0I\O`9TNpCs7+<3RmZ;,9$6uRJ`JH9(`PTrp6/?ZGU1$=c=OIk%,W_RuTlo;)
%bpEU;E8],O8_EEnPJN(k8.-#8Y=\m#_h>5(Y2_q:LC3oR(H-(Nc,FUpS;mUoU4K`%5r;R1no`2m)U'OEY^m'1;tI^mIfXhT*k0"f
%&/'PLiKCD`*+UD_@Vj$RBVl)0#<>3&AU-Z[9f;8L5V>_o'ke]*lsMoj!7rHY9;nTbAgtB^/p]3:"Lj'FL(eDE\W4*?4\$ct$Mkq@
%\]"t5-X(0rO9f-)FlN=o8"l['!@H):P+;_7#]qq.%7kTVD5;n#S*;&$e^-WMhdI)Oj[>Q>6&d4;mPZ^'qbIUQ%c]9[(5bDPK`OR%
%O^]cP),N7QZ<bNL'pF+m)E+i@*&>M!,tos1%@df%bNL'G3]$hg!'E#QeK`cdnf7j/2js*]<R<BGnf<@&VQ"o1pmi*3#RBfFLma9,
%L$smYc+m$t(a^%\`bDTMPK%gWTW8pIFf!_*dVPCA$G<$rY$qf@1IO/(Bbou9#PFe0"p1hj_:T[iA5hY(%5aS?+DE<tBj<s,8P5WK
%KgZ$L$@`3o$CXib8DnTjW#@+n68T,1_LNV*)Qlj<pB&Kgau)/N2%8KuUntk1WufMR/ad)`e+@@WWG&*eFGid$/5l88L*+%12`00B
%>2U1+W%ba2BYZMB\Eqp#HGO=RM1aYD0Ta.PMhVQW`"3iq<%]107WEu4W$QTKDBKB8f>);j;)'tE2uol^'K]tHe"\q'iQ;7R^RLm]
%d)J&&ld77Go76gkNoU(Zd9,<\@$2OkAADOS4cL-l56*EZ%GkNTGMP_@$_>a$L'q7@fmpiDNp%=t"YMmDJMoZ["i>rc=h;QVX()PS
%rXQ98W*EI*NKu#@C[u$G,Ssa0oR@RXa^IL"\D;.L9S1`0eA)QsDO!.hYUu:lU-Q&$o\BU&)Vf.J31)*E0%Ye<L2^;BbCptM7ro^$
%&:H6<\&^uO>\587Xt#-JFkoN*;;B#5ag)=hEsW<`oL+rg\4ADu(7+SNNC]geNNT[`nfFR4Ls-5H,,Bctg16R&Q*1Wa@JU^u/,,p&
%#$c_2YTOpDpWrp%$VmV$Q[ibD:'E"7GF9+s1iP/hEA+:10UIZoM\,rb@ENbtjj;DRfHrWJMU'g0cp5r_C]W$=DZO@X2Yi"[%B`4=
%m=M8l:fD-`1I+l<k(t7@3\#Ob;kpBe[:![%BOH!7gEM2:B84lO"agsHMW8_K1XN[3W#UM83R&glK8t`-4bl%Wa=*)s(r:o3PVb.S
%i0q+04Z*0%.#UFpIHrXs[N44X$$I"`\`iB)c,B8]*2Q")U&fHQ6Pb!@J[Zrms,lHr[M5F_9oS!K-MH-B\Bq#,25O]iDINb#U@"3)
%o`Xn=8A!Y=Sbs`<4^9V"VSTW<i7fKuYnbtS\VaGs)mdWCp\d2f"+Y&B"@Z^%ba+*DhS_-PRf"b)9bUR*6ZH#QUD`9dU&B#BY6$Nc
%%>-(&kW63j:Or7\fQJ0I[Vd"H-88jUA+Ms:mZiEM<,>GjRQ$9C1/2thqCF`d7SsZ(Yt/q9>I'_6`c$!/1)PM5B%-_qS2pSB`jXg8
%AQ.5.!,7an:e\[4\Ri%]D!ItG`Qm_ldD=)3D-7nh[b0$R;n"H,CYHYb"q#3g"duSgjotr#(*o#lj7%jYdD05&D#;QP,"OF>_i[Fh
%\liJ<fSdXtFhqR%=,_SNc*e(,8Q[[#WoAnU*Mh*!1tht+F=[jUP1-41gmhRc[rkDj[P2T78b$*B<gZl$-,N-J@1b;0g5(Jf6sZ''
%ej`<s>!`>lg_dI;&c=R1RAr_R(JE^FfuBtmbMlltf+X+s)Pj!BDjpeb7q8eV3cH>_7W!!FY(:3LbefJn'+GskgCU,C82CudQ?C\%
%#)`k8OW>GEM&=2=iabT3<CpV'(P</b"+s2!`7DF3@GC]V>&41k[MlEA(*BHBVF0l,`GYdj/6uj8kZH=h6C\a(YiKV78YDjtE]aqJ
%A;[WpQO>41@PmI=e/rD%a`utV)(nS10n/a_a7'^:PrN>?UFiqd-e)"Ul@pI:/<NC`BlSGaIBb#2@<tbH)7oaF_+#mHcD5-@k^PQ/
%[+.i)(ooa.7<;Is.2]EL.=12c/;RuD*%XgL2@es+l"m?oZ]2O<[p;=>>K8.S_?APa8$p14DhMN4N_pSo^]ZrBUtGm$&Z!WNfJY9K
%1L\0J#2aP3p1Ule*pFfl:_Z9#hEZ.(9@brX<bhhg&\LST[8l`."f)5_#YX<YMc!\ne5BGF77U.CoLs5PJ2DoNN8P*GblJoSU>'!j
%_8WX\X,;[h8@+T.@_jH.#Jg,K.Ro;3-HY,dMN14N<OHD8^uXPD5cP@T[^m\>b$jfLiOBA3FpJ)C],8'.V6ag1=dgiqfg)VMBpq:h
%OCf>G\Tk"X898SRa(+$[0;N<D-D,3A+.4c,bR`,QdPN-W6ar(%/pX6ikX7D67%10WQ8k!2,)$=%&hk2;2Si`%kqNn-RbQ7V+4A5u
%(Dm;c.C?!4U,kZ1J]n[K(eA^*?.t,PL_M'.MqDZAD5JhP$j/k5\r=ft)S%YURh)P8h3ft=+C,Z%,LSPhb7d%k^HbS^Y46k5@K>#F
%7,C2%ON)6I5$&:DA?h?bTK_/Yfb+bpBni`^8/J(!gd\:SN2FF'aIc`Q"8@[*Qc$n!jbQP3BpP_kLNNe*'/B>9N=A7bQD@TDk$"3(
%8Yh50>XuY^+jC,DH!\"380R6=%4N(E2;Z^s=MR$@X;COqP,U36%N<:dY"AK,_MB)W>Rn1U6kj&r"L\t3"^s`FF6e`C_LrU-[dY0<
%W<fr],S<J4OK-slE\<)P"Af<l_$A`j15.D*Nd^GcJhS@.IIRIHBU5^@$q6ZtL2=e"6_'7W:0</J5p'Xe"-Rc\Oqn7rKK.I6kagg$
%m<iWt/0AUCFP'']SJnAnVC_h2OQO-/.Po$MTQZn8+@sR_(bgG*C1&nZng.rOPV#D>pl%_)&4aJ0IFcf`G9mM%dTjg"PuE+0SOdhG
%O<j-/V.G&Ea+b][NdUB;JUpc<R"HZJ6)T;f6/1CR:+Bl:3Bed'eF8$4r[Q:>%\Oij4J5t6#`o7nC4$2d@qaH!j_lk1X33"&+[Qr3
%A-?0BX,.'"_Hn5]$*Jq390>Oo3:J6X$Wp,e`E@Sr#;hVH?i9mH7Yh.Rr!>lPO<l,,ON%d*`GufcQ0eZ_KPX)o_AJ$i"7?#?"uOek
%!*0:F=K&Y2>st,iL-unm@@Wm>&0[(?$d'>NcHbSQ6A5+Xp"(rcKFmmPU:*"+3K"mncp<l5S7!T\"FRKQ@kXY*nV*pg&0n!*A/T'h
%)-Z&)pu\_/i?"+nESsL*ArOtQAsd0[ZD8X58@KkOQ[ots6G<S_/CJ@Cl1<[s_c2&S?19;q:!tqOlXYV'jM2R=V4/<le`F2n&0[(?
%oBd\fKEu3<\82E__Pn-F%3\'L.r,QH#cX6qB*<cprkE,RnX,'e0]=+L,E4f-N)nXn4#7"HR2nu%L^6roT4h`I5_X)iI!]QM:'cK`
%G[094gpA5$#fEPY_BO7cLB007)/mQL7+2^-KTY1:q??RpZk4H"fM4iL@";;P(umBM*Psp@@,.t#NjKH^3D8=%4$ge:N6[m?SdB,.
%Y";/GUq)d9X%`^'iL.@"B*8N<-sNJJK2a)f/XT:3Pnf-ei:40)BaCB"Ljfs0Le)SIqSdY#/<_(gLfslk$[(.=7@]J$RaM7*S<+q5
%,n8&[8@p!RK/Ae0?PLEIBs&n;SI>o*c2fWUFqn_50J@7H6%?6$2^&ld1s<k"(qQRq9P,DD#SAb"?P"X(&MUq`,#Ch8Ac3,r*>'tL
%9+`R?$:k"pA&kn7ncbKD.Y_3#N^u5dU4OX(+YZeK6X$u*'&pLB(CGg%flBiC6,F`L?'%M]!HDRG=>cu%I$I8Zb#*>R+QI-?-HNo4
%U@8G@^]`H"fl71M;#%T'JMX<6nBf;K@q:3/jq&G`[_"rFi%.Q^Mr'SkGr46(X11=QnMqkXF<T%C;0rD?`Y_3C<JNT$S4JbQ4=XG.
%iLb\lJ4Is'dl,j@"Ob)Z"s&<329"Y\0h,qiiI;]of0($@4&nBL0Y%.>L`q^FA!W$]q_SE&0WJp`B9>`\#VbCE=9]-:)\`C025B0a
%LVj9'eJ)[`+<j@.90T%Z5b_8;#4n%!,SK/JZjWlX`\tauTghtcEgnROKFT.T7YR*nQj-<]Ld"KTfeoLT]YQdp7S[)@S7lE%.U"aV
%#U=<.`9BQ.WHog'mC!A%Ra.R^kVCWnT%mNk/"mapWI0=gZ'")i1^;\7#Cr(,[NIC-*)Mh@UD\1'KC`XsSCZa)0l2c,7#spgHm3MJ
%g<ja!dh36;\#r>G=r`QS6j)C&#RSm@>7<oT!&C!;+E+"=LqqK<+EUc\Lpj-h6'M--6o5I.LF$@tnVA5!$&+.tWiI['B-<_#!&Cd^
%nrAHeBG*Q7GJ:6B'3t[\+<Ei3?5!@'#eGVjQhNKg@oPjPRW0<bbj]<$V$3\$S[[#@OjH+mSR?D!<T1Gb:.-(]_SZ&;6G<t^GW\fV
%JZp=4'su%EG_S$['bV:XXZ-kdKGEHs3W/*/1Se.`Jnkpl_qG:1A=,LE2;^89O`hp>oE("C,ki,F"("CD`8a`^`sA=>,Wb.WW>Hf<
%_0$DW7BGf);b!9j@5'r/Fu9k37-GJHI[QYl&IEB6FfL>dQR(UFkQRO%U'XL>2^gZG7hRgJ#kB`%5&OJQW0]1Na5$uriIM.:nLU"C
%ZPc"=Z"k\MEMO15O8/-ccXm_OW@+o77@iLSlpu`W*73aj\BT\@e*n>!K:AlPGVfde'C`-hnmR&f-jWjAhofGO%;>r0EB1P!dp--T
%&e1VI3gJ`5)C,nQ%%!.>nm\Qs/37I!*KTL5Caaf<`KPEX5t$Nb_&tGP<ZoZ)k\6na6%g;J?C)2=i!;K:XZoQJ#7,=12Wm+P.mb&8
%B(RQ/=dL+enp$o7:1+JPA+Ze`H8G]e@;MF*:Rd.Z;VAU]ig?l=KCqMq%Du0CEXngP0[?h?5s_Q,BG`kQB"eqA/=[CW1-,p.#fr,<
%Ot;,&O[^RN:Mki50bH<3=I9'qJi!S70Z!!6OrT.lL]^#sOD5\C7h@RhdMY.2Ca*TSQogPu@X05N6OG4<84,W`ia>Kp5W,+c0&a#V
%C#o:"a06mWL(r:hJpF_?0!5Ht69q;u4+9X"iH&P<+^PG@)VHji,E^<)<n60'Wq#SLK>Bk0Vi`#5:<?4iDiu*32T'5e_-eskTQ#pa
%2_-,\O@B44kc\X;9oXMDhu`,tHU/Q!0PS,NTd6(NM]FH:[H.*JNtn#WlUW54StiWe@\P#,>WTVhP(fhM@IA8t_=#BT1Va4C#^(pC
%?/1A]NBh^)@Bt`/+]L*):KQO4gL80SJ;/V[f+sLc80]cQ!7cU(a8pMa]E6&;hZLU"%'HfH/;3d7!Ou\*]OkmU(rg,k=Uufe,$Kd6
%0GZ`Zi\ZD!Ze2^DBM=F3#&ora3+9D9nTFqT`'f!PY).sW,h\u$!oSTc=<S0)n^'HjZOd*]+QZ=N$6]D(HrE396jaM+-@fVMNUV)m
%T%l0L'Hh?;!/`"\Hn%5_2/N8oNc7'c"IULZ+p<jZ.BU7Q_;KK'DuaT!,%(Q3$.<'H^kf=O?m.qR#fpt\3J;npA,sG4VCIF`JWX3l
%'TnF6@mF*p!c\d+MpjA)l>W0M,f8;-S9Gh,%a-;K'd-P50JEO/'C7C3m52@t(s$h+-t8V"Ng#N>BjmH%(`7hI-3eKr$!_,3glE%&
%"-@+>#"I*o-@DRE1`&GN3/mo^U@9=.89(HD(o3RUJJ"P&89:>`0I'gn[7./<OrV?SJ;(@5UrtURn#dp^5d:Rs,NpNY$Rnc6IB`sE
%l![tI#/E0NJH9h1Gcf[`hTcod":HC0/jR(:L_V*FN&Z9Fj#W2;.khPc6nfIC`LAm4,deQOT-0-1;^);T.tg/)e03\+"Ias.(ia4)
%Zq!@ugtV>o7^.usdUdfo6F[T#m0"2,)FN7n%/E79SK1Ob.Lsim-;1i;N@<-ZD'r)\AMCK^O<0$2)hB[D_Srli*?kt_>baP?&I9U6
%.Kg1Mn-2B_+Gk[:6q1<!CaT]$iV0?)@O[FO,7k&6:F`OX/10@aUfJLr[0rX)-3Aomdg4Y>GJJGa/KfG&L8WKEgCZ,mVpci^&25@Q
%P"]*AVpbZ;"_eb$Q<k9D7(<dL:5d!pR_`DdQGU$imc+Uh-YQ/k$ZS>i@G[)XA&Lj$:E']Q7Wq2?$:>^K`=X;d-A;st]YiACiF%9(
%0Tut[$j$'5dWm+]8YWS$:9t62'1C_O3^@7Slq\gs>:M2gMr69WEu<>#)O\LgVF<(-cl#JSD?q)rZY9R'g"bs\,VYfa$QqTr'#Rg\
%P4)S:=DFkS.-cD\MPr@ql=LCV2eON^KS/eN[7o#(>`:g3+oNVF\^#op@H`jY#8WhZ57DKBDe)[Lmm7hKm3/\ZjZOUS)e'eK%P"HI
%RR[LuY#.bepSLHVCgi`f7a,EQ)-fTQO\SCE/fjLu@R+pd>/tS%bW:1_8sCW0i<C,.W7[2$i<@Jf5,[.En9thX["9Z7j-CZZM)]T&
%!g@FMBW+%5$L`nhfJaGZkOFBEVFS`SFV]!5#K3d(dHsbknBMl/e`ic&l-^E-VT8kVIBO]d@F3Me-\JR]_)7#p?'T%Xik7(Hb1^iP
%Scjlda.P(=pY@#ZVd=[@RYV2'h!fQ)VB=m&&OgF!*CTHtA]D7]O+NONUbor2]'QA&l4O.c*6"#OKNH6f^(fasY)on>RDX-%N2qYg
%)N36=h8EN.%+C=6Nou,kQ./O@7n-Lr%?V:26_>;K0h7B07#2[TB[R22U4sUBO\&U;F-Bln,_'\TP?_6Sn3S!M1`7e)`.nI%OWs!G
%b'\D8-G%-)T&i[fTilh12nUd4:)SpR9.[rE">_kN=M#Rp%UCT[K^-Js4.88O!fWMHgiJJ<Y"7l1+=!I9oX[eb&]5l3kQ]A$7F2<H
%)^(Ks=WWLV]"oSpEpFR1ZXaN'7'bJ9k8<[;XAD,UA5[(n&3YX5/WH*$(:n$G<Po8SM?4l^c#^bS2)?6tU3gL>L8F4P30?r?j=,+O
%dZGe2KH^`%)+9TH8uV1e7M8l,KHma(Q(Hm5&WfCek;p)TdMNQe@T])S2Bk_/a,rH?:_MPX9*7[8M.)/8UU)A:>U?*u<S?$PSMQXJ
%-8#Z/Ph7.-O*AmJ$EMS/3$?Uhe8W`2A+LUe0gJD=T#f$G>AR4`o+s>1\g84t:$9,#R2[,I,'*iF,T=/@QGYq2)4X&t(C2Ut\c).n
%,.9m>D7OclQPbH%c^I.e9I!LLK6U"%1([i&E;Slm![:<SbE4(TYG"fu-:Xluh%>9@It]^!JkYZIJTQO`,)Ad30I'Ne0ap1biaV,t
%#3&<1mO3R&k*^6*4(PXq/JV7[FUJE@:peSoE0"J6-*<WP'fD50,HZ%(RUDCaOP5^s'>mZ.WC3tI:#jY!0HOLkUFJ`HO9F#h6ZjSL
%dgE2X_e#DoQDA<&OD+3S^a(4YQkNIYZKtmNIYS'#:(W%+8V2eu;Jo%o+mqbK65#3l'>np&I[IW^E=>ui+nS0&9ptOKc>oZ@cOC)Z
%,qe^D,J'O;<?0S8%L1>eI\OHJZ(((o;/QXaI]a\8Jk\-[<i<*AojM#Ta&['uQ*q^u-72&/CtcReC:o*e@I?&c/X@637"`&-16EdC
%BXf$'PJW5lFB&^R)"o\=)3S)0Za:`I?<;qN;9=FTm.c*eC;;'$Ot>D3OHZBEFBVF]<CN)VA81De-Si9iAI4[B,3d$i:;WW/-Er5K
%/W@sb>brSf*5sg=/$@!4Bs8#,6TUr#1lpk)%>omq0T:`YS+\5nDl^<:[+YFHCr^#^?b%1F;lFNP/VDrBJ>a1EHO'AW8-BEV)mYSn
%fFZnT`qK.O=Uj23^okN62j%40WD2Lg1G:<9&7)c%c'SjQl3!.tN(#):`CHY^=cVQO#WtUnMF-ISnBT:@jr.bn&^8=/%)FCBELjr@
%3R)0J'8%==&ePj:H/9m[X+V-<k'7X"f"\Z5kE(JH5U,f?L&U9e_N-P0k-o$V#.%.U8KQPO,!cL],>hF(hZRGp'h?Od5EnP[bnTl7
%mV3u@`U^.8:>=ni\0+g@+mXsr:tI?lH/%C>\_L%N'THt8a`SWmQ6;[%#4(pL35A1'kgiCdNpRS]Z5^BIL"nSWh[;mJ-.3`a^gKnN
%m8!/B5*Lm*L!WdW,6)s?9KFt#`?6YUoOp/S]^];=IQn0o,adb3Ym*4N1J-N06V1uMj0?kZ%YhM.ZC[ASXG92OP"Q5rn;<#_iMJJ)
%)@nI=U!%P^*UfR0][hfEaR*@f2gQ<_'#^+D7d_#G%1UCSZ[HZ1eMNolrt+pB]@ngfFkHWsp,f@F!#,u]F`j88/'17g)7C]P2T34X
%OD%dO8P0Bp-#]Cs@ih\c7E8K<5S=#7XKT6^G'2=tN[`X9?ui2@D,Y/=SCjXkNOtG>KJtj?DQ'U?[m<Jl"^BI>JsOWI<.j"OJ<4Vt
%aX+F$a?1S$/MQaaWZ[t?*[Ilk2:r+pS/kSuN8ePeS_@qgi<kSOrLte7%)F.EGA<:5o)Z'?7@Mr[Xln27k9R35V@gW!_A%m>O(-<p
%[p1">B.TBWPqX!(jhOEI#Ao@kXTY+U1%00$8PbO*!,@kDfR+7:_+*(m=/1PnB$f]+B#(B*[]"I=Pqt0Gpq7Tq$YX3R^RqVC4]KF#
%Cf@3NZ`[Ls;g?![`B]d<m:eAm!B8])=E-*d7M?MF$!d^RGp1-55;l+?&DoU^flIt.6JJ)C1Fs$[\Ho>G($En[O;=g`7[<>]fJRWn
%<hj'=ArU'u-f?mX)/RmN\M8-^[t0Gu2`T^;<q)DW'"Pj0]aYqpk9_&5QI5,"8OpV":LBcHUqPmKE\ANV,S9D*gI<C:LP'ZRd+A)4
%(>.6[CLp`on9H0fnHL'YFb2oa1ScWFT4(ZP'&`?_T,Sq<A9TE9+VPF%KOm8)+N].S5rK6"2BZAt,C$</>>*bmQcr)ta]h`+V%^<R
%0I&^e2@622LK6cKik`US19H-ChCe$HOHZq/JI71/O*mR''+\^l,,R<BplmM/0VF'Q0Z1:8#aui!VQgQFg"#jCh6T'@P'@aHS3:im
%Rh-(SkB.5.8I!g4024biou$i8*&tk_8doDF6Pbd3`Dr'Jj2aXUpLT:D>uJ*"O]9ToWME7C5m"Gqj,B89a\]BlPAF6N!s4Y!@4L@S
%^t#)Ye1MV["K)f)O:o"Vh*GjGLE;i(N'M&Jh@(*[VKnF,qrElrF=AfE/6gPFZ],*L0qR_Z!;OY!Ztr$X_rs_D^]?VsRYRjQ"rq5h
%A9AC?\Ak3i!SaJe#Q;gt!D4?-cF*]V;XBP/=L2I]&h0kfiD6FHb4LR)\p>Zf1A+;M!OS".^+O0TaP/Bu#o6+[=bS,]DV-0X;(KWl
%_OO&M^m6d=(oeG8W<*'1blWpW7st/l;jaA"P4JNKE$4(+QJud\?^`j!8->QXq^j!G6gC@j)j^sq?"/hIjp#d^5r*n(7QQ1H)VR*J
%PjPN'Vb=C610Z/8$aRKHgR`7A86QL0;SO[o/(7XdIsju0&TqU<`(7"Xc#X?3eMXD[c`8OT$eU^tF\ki._1JkkDHWCinH$^u<&W5V
%b:1r=D6=-5j"S1.p]R8abkj9e3JXeE5/8fIG'K<<P2e=':E$r"=sSlV-ci4]RBlsafTN%POptW`3a>t?[Q?"_oVHC>;+G65#ud6Q
%DMB`c4!N31+f?Q"aomG@4%C0uQ7nhu`H-JYl_p-5VU+cn$tMP/p7m-ea!Kdc8(2>ZfusY)%ZeD8*Ir/*Wr(/n!A5uAne2D\<'mg/
%MTo&BO<It/^C]apTLs.&Z#Lr#RM*bM4rdkX[I7MbJ8.Lb4Tiq3"XkQeg-:sH._^/=;n"p"VEEk,O4C)Y>]PuJHP)Ju&Wp[A&DU1E
%FmOB)XJ3BGG'7G2ea/&)#)kUe`&UjK#ahfAL*ja/UI'"m!>r@-i"t=N61>X-%;%.Q`cO,-b"f!iF:7b:qI^-o(M*^_fP"ir<!*N/
%].sYb`/5bUY-M"aJX;9:H/:<gP3/<"n%qqfN@o`TdUeN6lPU3dQ\Yq(AQ9_d`dBYK%84*k;_jr*XW:tR4DXNM$9)%u&'#PAPu3kD
%1)WNN#W+Uo.QB=f\@G!u[h',R6nJGJ9]R_tgW=Y-7effhmWn;BbpkWMZgXUIlI)GK']faTQg7".n8ccX%\O'-#-*X!o)Ns)]CP:s
%f)\.%;8,nk"KLgK!6>;?j1Ad^(%mJIV/AWjlr.<9[`:Ye_?>Y8-lMZmQj1VKOt"H@F.%tVeP?2,=14,1D.+?mWGgZM3$@2C&fJ[Q
%LB=Q8B4k\HJt'qO1c01n+B-OF>n8ep<tc2%gF.7u'iC894C,>-Ou0&5Lu5;?#`rbga%Jc?f$NS758c_O;4^XMRePinVC$d7,)39o
%A<]Ij?e5uN-64RnWJhb$O.:WR"dTQOhX`X%AX'Vd<*ik1@$jk$+HprR$ONKK.%N7Ebds5a6+X;Zkn4l-K$5Wj1^!Q<k)ugLj&I:9
%VqM4^[1B.3Nb>g]^b'kVpr#GE,;SOj_$b(9g7=I5Ge0n]dKq5Ykn:Bc4II>Q.9GuYVTX@iFh5)`jmHYT0kbl47,boba:u<TCM*t(
%-20.W-pX%pHGArkeaZQ2i9;0Vd]]eVZH2UM?BHag9PnEAgDK3`$(?t8k>Njpc6o&-Ub'&f643HN^b2(";Hq^-.Act\2-SMBZb6HZ
%QUiPg41nk*aGh`#"-@>Ife$K4ni,\kc`I>dkK)DRPU$cX<ul<+M[9Dh6_DHtra>5(g#;IgW7.cj-]+Ju#^a^jTab?;E&!05d^-jI
%2)QH;3q;Vb,nGV.>G>8t2[jns$->Mb!*)R8Ra7Zm(YWm#BgR\Z*f,0G91(icO(CZ#G@-M8G_4iZed$5,(HsJa;?V]ihSUhh*8gq?
%b(+k6&GXV2c8#UF9BEhgi%bDR@^'86;(73X!R==?@M[Q!O,lm^?aE?fD\`VGHrN`6kIM==aTGKkKlmQN+.&/D@/sHMOi)13o2-su
%-dj4ba'1jnUJf5Zp$Bqp%"O9;VW7s.r7%0fEBmbqn^=l@,dJ3gTLpVaMdZ4g/k[Rs3O2H59Do()7(3SK$-7RqW8Fl-!)s8M0FuAk
%Zl"gI<c/RIH5#dq<R%[fq82_L!_Sf\-D(S5JaoYhpWQJT3Q5"9-j`1a_)2.+?N<?+90!L_"@"B1nFQ]sU0;/;%MM^.jYR9tjT'8B
%_&.N5A)"6$?d`')j5[Z12@7>T!Dk),^=*<tn]UHKi"`3R_+%1mU$3ibRfM-&MC>SN>e[YuIIPL@H$V1FT)1BJJ]r_PKI0Lqe]S$^
%p:bMfLk*p#`.[=HqO6kb!X]=+e3Ka0k*^F%I*)(,5a>0;dLZo@iu;PKYr,iPT@1sQpjD#<WboGH["PVC>=S\jFXG<5,=g`RnCb"c
%4In5-aU44&fLQ]52-\CM%6/#Rc*Hp-"`>uW;>e"YN-n**;m5j.#Q.mT,8V>i&jnJ@bjtr]+I,fM+S`WbT.dEs,9rG%l1*l-,hu^k
%p1KnoNK(nV7PV2A\aOf8:l3`rH:fWj4U4`=rZ&dC[_VPOd0pW_5j[$2^TP(?69P[\d9_cH,oR7FXn[Y*b>`C)[t*(GBXWmb@RIT>
%Bm'SW!MpS5\(>jND$!Z;j\+IIE-\O-[MaF_.;UfK?W+3oA*;+;n,aR7/GrgYdm![mZIKdLD`#Ydc%JJO&CISqG<dLKB1d,Jpf>t1
%jdjd3AShWB)'Q-)BWU.d'#cq+EH2ABN5>]"\4i_U*se6d<(:S[K&:@6abSd\@WBleV82J01<LhE*.:AAD9$hs!*;>4dMr(DoeW1*
%<h[35*sLG+A(T<YOY(P@%o?i%k"]N^>s:N=;-8^m/Ym-jT2]cWNHMae5oM"(,41YXpE2L*"+<S>*9i1PF*)bs9)CDt(6gNkqgRJs
%H:10hoqBPD?8%*?"4q,F8Q-I9&GR4`od7?`b)?mq]8YnWoKlrZUVCat4\&R'"Ql8WiI!s9,*WTRjX'.pPE1M_l]2(`m6qUq8*n77
%F,>_@-,_j_[%ugnMMNIA7#6R7((3K9R"d5='BZG?ePI!>Q(Q!f]T7'H1;&.NcQmCi#a+fX3:qt=ojuGll%\oTKKrnMWd4KU)%G]2
%3kbq\^$9jE<d;;OiJs&L7$KkCGeHN(:7h^&?K7=7%Z6rl$?t9=WJk:r-gf:XW'H!@9=J=K3%pIl3]Q*i)WS67_WUSA4TW`&X7uAh
%8[NR&5k''4Zi0t\\p`G58sS#%Cr,:GL7@9;!o.[VfIKHUJuRO;MNW`c=-7c(^c?LparQL*J1@;_Xc\H2<:7+$_ri=$8kXDdj3o1W
%j<:7F;F6HY&MYGR>WQ``M.^&5V7Jk$M!urD;:UCk,U:184L?_J0ii!4;os>@J7FC74#`!(<9.F3!\48dk9%sap#r:ZG13ulXGD*<
%R(h)p5t)mFD1l@m"c'PpdUCr&hVCHZ1*@Xu-h5&Sf;4V7r%0d\DfC7@NWI;*A74nK5rst\h95&>fO>_<\mRYcPR^'CGB^,QgYNa@
%UX-%75"\4r0__Yk)bB4t=3!!9UEMIL%"tc%9LN9)B>Y?09U\<HJA(i*BRT.lb[0Yle!("FN\8K;@dT#(S"2(_/>h+tg+"<]<F*QK
%MN$3$8j?MS\Ys8@S.X0]5t:5.<K'nTO?O#N.P(j&N&"iU[-eVqZ@J&2A0b1EEhTG!H#:"8iT8e;ZJ!(p64gCLQr7uu9pL;E&Y&(Y
%/$T\#-4)bh.nDj:2Z5.Lbt\ioBk1$<T&A\(21cU!XZIC4M+lSCEU$GUQ]!%+M9-35/o'*-RlV4Q+sJdY);PsX0i0-NWh'@$LEnKd
%h_KRa'G5`h-FP3pWH2Mafn_&MbX_mR(G[&)Bog]5H:T<7,PK]7H+:@6m&7XP-BhgLFsMZ\44oWf`f+f1>Tk7&%&pD,$GfqK+d'I_
%llH=!7%JLaNi_:bb^1!W&J7Y7Mq6Lt_aP/[D#MMB!=ouhD('`)oT:=CjP93.WI-bk-ZYXp)2Tc:VFDrL+e2Tc=1@]B^qiGW@:-^U
%-l*:Fb,?K#D_sd'>F;,q=na]B&lD+-C&CT\!"Tmu<*2P]>9cD=@'bQ,fBR$I'>Xj9EY->e,`:ZI'KgnbEq(lXnooL"E,nfH-qDro
%+V#k9Q#0W1g?f8Y7.P+i*p<^Ba$jQ$jY_XL8;4uo>MVOZ')aH*dSkj/'R?.u%M59?8K0!,aMq2goXduWT;FqieVQQm:3;a%aRhcM
%?-Wm)A_t#;!G!')mbXsB'9U:t?(I=F97X50B$Te,!c%s.7]>^R\iA[2ie/q^'7uF+,!o#S]q(an:m4#;Z)"itc@c?eOc$(CpOIjs
%3JI`D[LX&YJP3uG>bElMPH=,[BUB.jQ6(V\M[HD7C#,_6[#ZY6fN(lFhR?**dV)3Z"Doe>iKCrh0JR0sCPuR8jq`d$(g#YWU*?!<
%Va4B0&ct^#d?Si5P>IVV+=Oh"CI=EAisVMNBM38<`CPBK;g:T4U_8On%tO#BJX]k.6BW4;Ou;DtG;A2U6t+)d\qotYV`:!b-ndl2
%\I^`.`LJ\VK"X]doP@/ikB/;Wq+X3.)Pfj\h95WH!$>3>SqtM5"H*TnUjku=!&#,u5J19u?3DT1Wp1EJGY>FICB\p$)l\dnUbNOa
%-6m3AqO'[JTsgMa#>Qn6;19Q4.:?H=2R9/k1."?;J\"f=S6,%i;.IK?V-aCR>Tt?$BU4;39fu`#QIJ(ll^Cb@7Nm&N/7W9iU@Xn\
%!`gP2;1>)_X>Kj#d5/$W;$?=DFhqLY2%_S1*[$at2=@L*2@?I?cB5d&n`]I`M3&p`+.rt?H9MMrNL3#K`15TWNG]D-H:jqFjY`rR
%HEEWtWd'X@<$C?B27YnL0@k*(;=SK!KB7pR=ud)ti#)D,0b0&BQaFCUJ4pTp"4a)l+\k04;WNdflUZ_O3Ct\c0&C[1$6`P\$UB.P
%3Md%07kUTHb\HWhNOp;.U&_aO+$YMf6Qstu1b8';NDbhU@?;OeOPgKadm6ms*cIh2dMOk)[/qVC(r2u*4$XGTjP2^K+)tq)NoM,o
%8M2=D;W-f6l@$mTR?5eCRRe5Y_t.Sg8>o;(=J3J+lCkk-n8j/+(H9's;Q7IX,m$]F;:\ZR[4B/=",_J(h@qB"8>1Msi!T9^_ANW?
%85XQULhs5YUGd2r7$\uK6"=8RQ]'kF59?.f'cugu3r#"gk=>2aE[9e;+.j)A>U#oLjhf>4&Z,%FJF";#S?m0VM2\0N#U#Q*c5SX+
%;-kkB)<m1M'NP_9m:4b$Vb9,q:6PcAAQMGu[LsmJ,-f[;cI2m:#,*JM'WaiZ)J)Ml"6^pa#9Q2C;9JY8>>h6MSW`7<MMRGE*Sa1E
%eS\a/n8d?R;<Mb"E,uK57^lnaJ?0b6W"gE47rnE-U+3r:/kp96qETQ\TsQVngq78[fA"djWn@gaQ6c/Xb-cTsa"=@bf#eHK,a"\_
%pho'QU4cG,/O7`HSoa?MTtK1=kINMSD6"T]Ce6+Pa>jIW7AWDb`dWqoO]>bORjt63<Pd@rS(u*U2*mY+6Afe_J8C^%^7oI2$J-4^
%'9]O9\eFcs=!jGCq`a<G!4)->b.R*e>?^EYO\p$=$3I39X%_?TL,4,'T8kMB3DQ1<kQZNoV(8a?gdt'-`k^Qk'Lk7pFG-o>$o@4-
%`(?<pefZR=`@p7l.jh%4[[H4"m?ic1f7>VIk(-=P+<K-[^8+E-M&93.+uj!Oo6J8mn!JtC]R;-tGQ"%%NHobmqF`ue]RaKC9uLu(
%?4nDKP.d>%enlJo-bJ1/SBCVE.c["tba;!S!Ic8XQ"G)!p3o.dk&U8lG'ZH*fjsk:X2OY@oT&:'F[uWM@eO8s9qml>K`1J%=ni)l
%5jW!KJ.9V2im/,OK$D7><p=@?4BQ;PT/n"a(Z[gKBg0"9+$sDFXS'<LYhA(dNgPhm1F<d]2a<#&@PWDCjccsaI3SBk*RjMWD4_"3
%7au%`SdD):Q\XCXM&tiCAH96i(Z_p,Zs2Z!Si[?:%o!mue<l&qIlIdO"WPs#*fbVAUSThW=T@N[OQbnU.F;.4+otDb:BmZ?Fo*b&
%bTt4(9`1dR]:#`G&V'd#EsZjSR#V+cf$+!oT__QIcOo@-a8;jtS,&0'kl(1IVIlYn7r"gNre,;FRu-$rMUIku;>k*nKnJW4!^OeC
%msTb8Z;*Et7:RjehZk-?rEOS`PP+d:C>NP#*]%u(&B]sbfXMZ;WI_T^'\P4)l&a60?[1&hg@9XGQ+l8ni-QsC1W`UZ$sNIS7A)C+
%6QgsY@g>JpbJt+JC<WS$n8l:M(;boj/^;AQrlt:.RJ`t=7SG7`WnF>R6P^oq@:ImeHs%lcP3L19[Is((g.IP@AD9dim#u;,9`-no
%BJtJ7.peLUB9F(E5>K^Mfk0Ts_2A3#Yksso@u/I-`$h2"$pjXah/mDcB+/S5XIS-2^2DGAeT)_1.!U,hn`26IDa!/4H>>Kg`!7>^
%S2$Rr_gK3IP]GGnHl8ZECTQ-lID*ri(37*1@Ib/$]EB*R]I(D4\83K`egTRaaTU\n.A5:U&XK0c`U6R49IQZbm!?SDhmbt1BfP+Y
%E+'rEj[r-%9=ApXh%631$#R23P34l8')i)4YU.a8#M;5)WfcW^+.*J%KZ1Rn+7GSYcY&$%j0*9*nP.c!kOnWg9fH+SZNa!XA2<!0
%0hY3[-90g^=n]>N_oL8o`pJl4_Z'6HpfB6,:.aH8DPrG<-FZs#]V1`E'u/`6742M)Q"eEUNn@B;l>qE\A>bnHbob1>Prrik<,)Kj
%=@nS5[YcSlF,+RZ:FH+&rq:M+k@1K;Q&pnK3fb0M=Ei!,f?SDXV5Ls%I[e.lK(5Cd%+tDtK3Bh\&t$sWR.-F]/)@&-gfPHa;`@`l
%]T;0dm@>R`@`d8`h,pX@3MJ=?@g+Ko<UOr>2caZ+f8A5uj;,pp%tFCeHeUNUV8unFaD[R$dX)&OCh`UPcK+gNL?LaG9Q%JeiiGL&
%M&mTAq1\Hr[mMb\K?R`F^MGV4QeXKoV5N@']@CrBYK^bFl!&5<:lc:Ah*O8Q=7-jhrbApq/\S(HR,uc&N6QI\!C$YXq)DuP92!a=
%%CaB(WU:cnK*WK#h*9EeMWCLoq-8K=jT:.W&=n_2.^BE'<5Jf9h)WtoV,d7$0gB&,W,oM0OYW>L4<YHV-#4ol67RX]es[Z+m$HH)
%"d2i@0<j<tkI19E/'ZmT7CSnBeNH@qmE]VbbQ5h%^h7MO))0#g$=KlMKrE7JC&V7:o+G?n.F^pgdP,_Vh=37Y=tb(>]d+7(Eo`i*
%`-EJEl9A;/V8\n+jsWPi-m29<`230+2-a<\G?)8OKe/-c/JrXm`/,`W't%/0r?]T\)/6+ZhpsmrEt1K]oi\f4dLm"Q>:XDR'fT2d
%H@@YOg.jR^K;J;6/o8ug.ugoQ=*;c&?D?RXl[GRBJ''>%r$#>V-ZRn5]RA0lbrV84c.d1&o5hs69u[&t-*74B$f+C/\(N+)q5_0Q
%1dUYdhq*gNZI?#%3jG&JFl-#$l-AE3]&V7YpJCjZD_k,QFb'H`r/KQFS^`qc@+InDqigo5>$;L*,AK$jaF$D#&"Vu<U7PC\2%q9C
%ZC6W%AipB9[f?3HWFi"af++iCM0dlEh,Dg=!mOV/cPo7$7^tc#eP)7B%T%;p.p^N'Q#;I.8V*<OGO[5mfCh%<G8?HG(#^dVj#'fB
%=d0i,]"-8<<8:`XnHRcRag^cQ2@\GM:#6Ajp#In8G>WU4a9Q8,;iK2IfK%X/=:',$9L*3kQrMj@eD4fAmO@G+B8300I;$l!QCb!e
%G"^`W6-O62@4@9D8/>)_)o28j^W#;`U)r$5%6r8%@PGFU\=d%YBjE[,>V>p.N>B.?)_Gc<KTi@&T\W3#Vf9/%dXDclU12U=f;C>.
%:hOh%om02u\QuD*0V;VDi?B1),tqrmgYY&S(@pZHCtjKq6nk&'(4*OkeErMtbK9Kg(5or4E"JkP.6L#KmlY&7dig[2i[-JRo8qjg
%klg3>92]!26'O:nn.DMW.""EcA38kI59@p_nT!RrHd8fSgh[:lP?^?Gp@?9Y]ES,N;,kG1'H52o&KctteW<T)]#Euml*R\,j(UXH
%P#S$jBf#n`<u0C-&J=VqC5eOC^PFUS8hn`r0_;2!d*90>\DktpVbE\W(qF,g9o%LuU<pQi+5fpSY7T'G^eXu*O2*%:L@<325W-*4
%d^\@&o"3CR5:&"UN[$WrPj3)R5TQ8@9Mk^sL%?]u]mgB#`$B_>*p.X3+.IlN,'1a\6>eUWq>SBGg4OfbK]=J&TC<er'c;t+Znos_
%EgmJ<$?Z/mQH*@\-GE@\`j`AB5k9JMGguld[G0.i?S28-.g<P%g8hphW[./?jYIot+1fWLS4CKrram5>3D.J&NL34p9Q:l\6]SbQ
%O&O]MJ%J#sNqf'&)6_@/B$IKRSNrO!^Q3es?q(2\fO9k3?JM/W_gN4<bl/sO?2+:8ZQjD74!k,gSr]fjH$eC&?Lmg&5P3bu/bC-7
%[g.[5.6]S4,j"E(Vtda)p73DcI`3"K8XN"1il<jhnW:`d$mJaH,j"L8>tHIr6dD:t:.W[%G;old/+t-F4g2)c1\Tlgf%cg\5)/20
%V)0>Np=O]"+6Q2)O/nm]<q>q5f90t<:J)"i?0u]%[k#G8"$/frV!@L#j1e:HE1>e`ZmhND-iCgJ8fMf0>9TGc>VPm#O(^LEH=$D*
%jQLkZHHFS+NXZ#:a+dbHT=GW;P`M2D.k)D)+tY5^mdI<SB_Z]5S*AE.,T>0!0QFf"RC(=57)J?[1Rq$GSl^l.]KGYa."M2)8XGr3
%(>).<\Wmj2GN9^:m#OuHPOb5&c;APMp['la[_FtoBLBp(T%WNGs7TN;h]He"^;$)VI4)#H"`"C?-ZHd8oA)T2mbL'j'UlY$ZD?p7
%!4_OfHjD#%^jUjG7nW;-/16M_p<A!9B3n0A;Zo4UrNYP@4/R'\F=-j8CZcq/N<D?c4(-=FDd`%5eFJT0l5`fk%XlEpes$[0PH"#h
%]&oT\Gd?fhj\_YBOo(E(7n^++)j`+EJBf-.iS/W,\#ms%j\f"ggkMq,j,.q?[WEPE+/t;HgW>pZ]0=[t8[NOaQF)tO>@4$T-0mTI
%5ITL9;KX""H,QqOXm>Op.:5#d^1J*oT3GQ9T?AL-8bmBiX]bPkpdi2:/LBc[)Je@h*ON6MnboijSRg<L4\fU[O41)q&'IS4Fj<qg
%+kCojU&L$/ds;@Sqg/jg;L$l!pm(bnlcGOae^.7_DVX@a:!fOOHM\!7jZ7*=7D`hJmQ'g^.QgA4)S-eC*q0k!*=^o:pq*"O2*JrL
%entl);VEAm8(MSD.;Ll8=/l=9FPbRN(iu-+F^cg^.E@=*DetgW*[NaM>';<Z"F`<YKLX!%XF?d'*#/Bf[q9B&4i=B>(Nt%f7N0lB
%;ANFqP\S3c2DOYAZ\^4+1`[P![S2N2C:Gj:V+^XpS0,c,8L5_E@I]`iY))>]CIhlR?RNaMR1olLLQ7$4jR;>qRL#-:pEoQX5'J?M
%\6j;i;N&5<RN9k?qDhJ^gncei:_V/;c&cB29ZJ\8DL[#7diZdS8i<.QmS^(Q,URGi"gS!G*Y;+/h_Zj\V/LgO(";XD+N^r(@(;Nh
%Dn#1_N8$&:rmk1TMn,5ZF/N"leV:X+0[?B3p1qsLT%:7DP'UXU1iju9&BIc0V+"u*M/jFBh`iECe%j"4O;]`c7@4afja4!@WMIGh
%gdoET.@POE8kZouUF!&7V07dc"%J=2Iu/?4QAbX#;QR@<pSa<uEAL_>*RATrb+0=&16\Qqqj>KG=.c!c/@V,;mQ@K]<GLqaWo;lL
%mQ=)lg:^!.51aX`922-:6C^8W(AJJ&*3Qf-*<Y*j/]DgJ]1qN9c(.A,`3%:'WMXgKk9rcJ8VLZ<nTDOiDJAp7HUN<mU_teeVieFF
%2NQKJpDp[>0JgRjn^o@$dCq%'MHFsAq9=lBG3KbpC[O5MNO0,[mQ#;.TtB1fRu/=7im<]B3t-"^4M9o[GH3$]Jc%H"Y@cfW*q#3V
%mOq1&9>=@m]E[L!nUNa/WCW(0C\(o%e^Eo.$dU3D,CQ>HTON,#;;0I04,j#.5G')<a38qqgVr*j9.WE8hNV+.[_(.ia,\]fD<,G"
%GHXjN3qr+^[2<"45lQG5`.Vr>!PaUa>na(QDB=,fiA@S!f(Cg3h8=*Zd_/kd*LCY`A#?,q]/<Ls:mJ6JK-6[CRanVUkYk++[d:p,
%oo+RO&GceI\MVl-W1K54n!m6QhUm32kjqB5#K^6giBiF.\;)0J[q&Cn=SUDMFI/AV%s3FN/\jHRHgPa$><\o2d0/V#b2<5i!p(c\
%]1'Y%#53jHq]!%.7$E)U,L#E$EBfUbhmcr,cSZr%js$ARXI@o1)<1]h8\I=)kMQlTA,Z7-$hobe<I=Zk2Vu?$<./!soZ$R()_uUU
%[r"5!DmguK``GDbO=VQgL]8d[,Xo`OrR;U6?iLsXMnid+F[DOL"9+`CA#<b-#T2#3T*ZQ%]LX9lEJAR9?p5OEiXG)H"[+&.d]?N'
%3TIO6%qE8--cn,SH8q*t2[j&VS,5NaF+i2^>3!'$,9IedjKU^Dk'K(OPd%"($aLrKA$n.SK\msHeio%!En?[@>jBSo054p1*eB08
%ILeqH]Sg_S`A.]`;EALGN;<70B8FO"'smF)Z?[-rUtI"PP/#fA,NW.uDrq_)V"?P;.hW'am_+9T^lct=FH=@.dUNeX;YW_.:N:B(
%?f=WB#Nuq0J13AtGAiV"k?*c_q2[Z]A)=3QrZl';$<L.%g%\;r.E0mDcB!WDda``8%6Z#,`M<5Mge?5>R1o_Xhs</X9hLl0\0?Cb
%Me&X9\0E'jFch\GEptjJ_TAHDa.=r38P)Vo25]Ds(bMWF"5@H:RRB%+4F"k)]5[P.H4n0kk.:t5;O4(J`Zq%56oFE9:=.=36=*H\
%"^CB_c^!ONV#7@),:P9hpEgb*M?h)[Pb'2`E@%jB;R5'&P]#W)ECWoQH1"2FDqQ.&q:;N';3;V4ZTgj9!-Co]m2Os;h3!rYk5;)7
%]XoEQR%K/Odg%Qi+RWJ#r!8&[niEuLl&&/'7slrgCccJhrmMn2=3%En?BPb%=!T6kf=A&/8cENVPp[p&h>RW7a(kFhO$EQ?++MpM
%5PpYJ?iK_Z5Q'"+T7?e/L[49`HsL+ZorEN>]-#5J07TR,CWO<]r0Pd]./9kOJ&ZX2EQiq1JH,Jd+.diZq]C=_%r!Nnpcn@Ff@S@=
%?Vj]?3oGT/Hp7RX*ka]9Isq:dc[YlOIRI$S;8Ci`kHE%RDWMJRFc'aRU$?YRT=KK;.<KMqk#7+RAV_$QT8UHAjssi#7_ecR1*,-$
%oto(:A%(uT90,pFo[^'h?YFTF9HK`7SC)$bfmMB,o,UBb;t_0ac]OPA9K"!^DS7a0>c-8=bidERq";#glpP3jVW6=MOI.o7+JTJ$
%dN;BlotLjeYP2-:98%-+:4]PEMAJYhMWIt'4[=mMmrL,(om/_>RW""Dj4U*,msSZlU.*:G4l*o73MZ1-J')@($F'd)n^B(;f>g[Z
%h5#srj)MQt^L;J*Z7a5_"&@N#!n:sj,%dH&P&$MBfrkW]T/g9=csX;RU.8rm(GWsKDtK-9NI00c>JqM&Gs9b2@ZK>(i?CA'.?43Z
%Y"RN]@t&+eY$t-CBMS/gKQ!ZBR+]SJZ.2:e^+tSoQfls$cc@\Ip(b]8=4]F0$uKn=k>^*1n0M\FF!BakD:%G!IGC/(>:SbY\c$?$
%:gRUCH;1N^I?@mC7*L)j[QY6Wqf=I+k!$3hBe$WKNRAQBdcMl@YP*1dO2gn],%_WSdVI3;nTZl:<BhPb\TAWBa5_bhn2e;epd@@\
%GMIBJJ,Fjlck4Uq\*-@2@eNk5Y=K6[LT%S(_!rD*'"?_,hSPo2VPq\Cg&&>XfG#34IPr&W.=!F4bUue6raLY-:66n-HL*qI^#[4g
%m]TmuR5Lh2)\1W5Y@Dm;1PhDS2X]o/'&XSj&@8Yo/(V.b3I]_9$iRT;^;@O7Wf$Pd*cXjcF$.GRP/=k(i=p#'HprihU*E-6/oZ^'
%,3GpB'q^Zc+3t.ShfaGT`pnC\DmPp-IZnU*/lMDBY^cPEUb6']"ggoa-&RN&F0tIA;dr:\qlG(7T(%S!@Q8:W(06N'H87NN*d]at
%.dLK-hZd@2HQJ);&o?iY4g_EH0+9IIO`JYL*pK0Sp(G5:-[sAl")\_C*'RmeKOHtbJL'lY>kHSopa2VOl_gi2r:^fRP]dKCOY;%k
%l,$)05>s!N=(Y`mFgOIp?I8tRIQ9*jXHF+1(Ff8*T_$K.B#gpof?nK4o3fJ9I=<1*LS,Acrl3n,R3KATmrNf`;9sT^\'_l!&TmE4
%S%!1C6Fqt5`dtm+`#RgKY[nntJ_ruY(XFhg9]MK]/Zdt9_&:,G#&VD<c5<qJO>8f`Do]k4HlLDp.T?hXft@)<N/nZT#=\76/O?YT
%+lt/$P_a0b31\Ht"5!Zd1qVidc-:qPW;#g?i!?=Jr(u>W5r8/G>2T^$nfdd`KqoX2Ih!W#,mMLu8/^/WfnQUmpN\n7p9s",i<=LC
%Mu4E&l^e",EJHH/I#LYYhIf3=L*(U#nd!T8/'!DL#7)6tUJ4?bqFgTJ7)o5b_YnK+Ebl6XIR(p-M19G)5<@Brqca]^/gpJNRd23%
%-s5jQNZmod?92^e'qTQSd%@0P1`o-j_lfl?Off4NGRJGu@NE,^ntV>>pCZr,Un>>0A=h%E-9Ekk$t=PA5%ZGboG'N<q])-hJjLEE
%C[d\FJ,/H>98)XR!IPu&&sJ"ShZrpd(HR9gnnaWp=.@os"6;W<mM*;,`;qgCO;Kq,*[r5sH*"dV`n7eB($UlMlo?oM20Ydkp25WX
%CT_1#+bL!4"Rmc+V2pZ;r1Z0?n14[1*>6p5'?%](qagLuSp0GO\7)I&>HTSf\35QPfWGEMI"<q@4+RE?1V*`BADrdXEDN/"3+fUV
%d,cJgj]6+4GWa?(Bu.b6>onMZkKMjIQCco'U?R_h<u$I&`CL3'5-P:GfHB]*lD:t,dOThS2YL'+GK1>NQa>p.T(B6O;aBcpdR.cS
%'j*UEJt;$!MN=/f?d++P&YQA-4C9SPR!"N\T?spq*ZZ#?i$kb[F)Z=1i9H2nbMsE8H1bme^dX8R5_mBMXa_t-FYd0)g5)BJo?@\K
%T$[aM)t3?CR;7,l?T*aEKC>[<?(&;q2\5$el-jQ=C``[2mDhPP4\G,qd/=YYagMB`2GE^N&DQ(o0YoE]&2e\bNE]\7fPNb3`TO-b
%64Bt@T!*G25edaIr=SPmEb^^->jDtUnmgs*m#cG.YTV1Va8j:;%n24p-J78a#.C,,)AkMZ&45!@rUgHqg#o5BCi`ja,-;Rc@e+a=
%g,MIc0W`U@E[mCg<\(]-QNB+pNG`N)-er9,h/kS:P!I*%E$X0@=F$LUmJ_Dq]'"tac>S5o`jhUIX8eA+g=\T//lj3m+FCa'Ut_$i
%o46IgcU"P6h;BBZU&,!_g&_Mhd"eZPY'4U]qc0K99d/\ToW\BUT%-/HgEdHAIg#bL]!Bp:Lj9\2aKFVA\eJUY]e@>9eU*TO62-r)
%DN-p?Z`FOZ/8k>BoEE;U)RhW<#5H:/4VBr$#kP<1k-YW`r=Sn4%_XY-^l>,#JC-V$#D'7;N:FE=[J9hoQ*Bm5%3Z!pBJ9rVMRUV1
%aS$,JB0S4CJ-B5D.t3NF&33bk%NGcTXk+ktH7ikF"ZcmW5q0lrnkk$gd^FbCetY+n51c#N#])Y;PuEd*X_feCiAUr9;;,UqCd$,5
%3Zk9Eq_jP<0FP546l8HiX:RDufp,GU@%.ikU)5f/L-CZPDo22b0_a)[qTgpA,h-E\E8H[;o!u?u4CIS+*E"8kG-;*6s#[\7lSnq)
%SdTsOQJ+`a2403GZ*\-_L9],CE^t8?K<(p<_fGut:@T!b9+&$hchpsI14Ti#YUhG.iB6#5"jbn;hSC!F?Crst.C@HfBW5!&9R;:6
%>uH"X"+!r7JrR$MmhF.DglE6E`R]IlYt)?L`]Y9DFssEX9L$'X4_JmlXCDduE-HKG2B!HCK<%?U%2qX00AtE!%uQM=+"<FK(CaOi
%mRPDj3a=/rRiUsi?,(Y$6LacS4n*OQ;06rRO2CS2"aadnVI@foD>5]p;A6qM4P/9-plJ5i^_Rhk*=ma4^Lp?rd52QiZeouNY>q&6
%o@37HD"=513aBWV%>6n<2Z#Y[K\9!%;GNEcPFtFgCJ0.K@dr;>;I7h!BX-qM\p*(cXV/b\EDJkn^?=le_^T![?1n-(YAV^A_S.j^
%NEDH`D+d#)MQq.?JhM>q>;S(]ne+AAWsR$6FD.oPYe(C'kB/-Tj\cbYf=n)H&?ri?b8M4EDjHY'AjCF(_l4$pSm..c1Z/9CZis.#
%,rg8(E&SZP^j6`nUm[1Wpg#Q?@8%*0,(pct&:69!\gNR#;=rUVQSc1edAjblYX^1h5W#%^Sugl;\K7%-gm9(Dh8^QOL:tP?@n4UN
%8V50aTkR?/s+)b8?uBq6[-+\@W4lV=^M!2s/'f_4ec)\kCkDt:;BpQq__qqC6JaK%;;]]h5pCIa4U`/THMk-C:S"VJ'k0OVaC7H\
%<=GAKUQMc0XfaMF)p!#@mOHeuh*C?]kq,aM+XiN\r3t!\G<?c@[sajs_pJuP3Bu5`hFEMWl7KU@6VaY1A`iQX7'5Ju3-u\MiEZ!t
%lY>Ocrdh13&-#=7WCZ?BF2)kFj4*IOX1L,WGL2_gCaRl\l^1tSQ:.lQ?&lV?mM)*QTJ\B+:A_>*\CmO`moj%1PM5od#XHpnZRgUu
%*R?_5o=*&Nfq5Hh7F-*a%D!G&YH=6#12_(cj;$CVs"UU]-,qdGM>iEY-U<FN<&[+NEG2:2\_5d3*mq\9I3\@VOP-qDPf&:\[`^eY
%9k9F\8g-ES^LNJYn"\%i%rX2<fB&!dJ[)O/oE"@<"HoA>KpHe#<>6I@_Ge!-OKEZm_sRXp&%b9Ma,Q$@(qF?T%*^(.rsBn62bX+c
%`/r7k`kPV"5hMt-GQMCfbC486(pNQn46t2+%q'Ieo92G5>e,%Ol2Y<r)WuW&*E3n/.SW@Dir\LWp[`7<CHE$p/f8kY.cqI#0Bl:>
%cJU<M*UrS]b'uEPm)2K+8$`.\a$WcNl#.*^b>"VPd.VFo2YIu4^M]MII(#%3ZZS21`oI9P#^&9s-@E8n>h;n9A\qe1M`q=:iRtN?
%#?\b+\^n$H2":pA?O+M3'gA_gOo]mC8igh`;EJJG3sG*Q<[D3M%8#_%^h%jklr0CG!pf&8"\4d6!ErMe`JJF'X(3k4Yih4>a!ZG'
%g.lQ10HS3CmFDGuUDQLJo(`CR?"E,V%%ej?)#'SON/+Sd^Tr!?_4A5li8S/qkN&iM7QWZGSnIq`J96*#f[<qdJ(is4O4e[P_Qs/l
%0(&W*fbFlMSf@'4&#$dMgZ^e)n,s>md\JB4%T)SnHn,-(Z1lTAL`(c'Vd6TirB9-[`dX+Vq;C8kVOh&N^a@N;dOO"<QshYL56b>8
%]n:K`4k3Fq#?\U@G'r-W[d#hrRRaJl)pkZD6Id\KKE;c-[S5![h=0+gVPAs>"`ugBpR-gn!,LA&OtsQ#DjH8k1XEpmdrq&t8d%&U
%f>dq7QDVF,XpRD@Pa-')'i=:&V9Djdcc_)dE*No[gU^-G/b*_S?lcKI8q-m7%bmoC`J7,1F>$<S#4^!XSL,*[Yh%lVYo!PH230:0
%d-fE8:'9jADLcb_\kIE7^]o"ON)f+bQTf\&FI].?,qudE9eR-,4)AJuKFDZPq'B&Ppi_NA^FZ!a(M,c:$A:JWY*6:M?k'tD('_!k
%f>A4%issW:A'S"6KVp&I,WtbDaoFnR-E6h!gppU:6YmI)efulng9RO[^7D9NNR*9k^\4qnah`$k(77_uBgP2HfQ"T/HFfu`1U&d\
%Olle)I[fADW4A$LjDPjRWg`etj5AT-.t8IsS\OG%WWV/("lK4ICiJ<m@p`pqGJ<gV+q%Yclc9,0AuTsNKf:ph3`\ASId(0KJM5C;
%keik@LC?:6Q?(apmb?%c@]5J">W\*`Q^2=4L=1@H+A#+`>@65X'"T@=_?H"g?d*mh9,'rajdPXX)fD",Oo`9;9==@KKd7hdHuYja
%(q1SY!5QUg:Os]_#VMVEdZ>b3,eb2gHff;049.^Cg&,:6h%T0bG/Fs[Ho6ND=VL13_T:C`jc/psO#/+im#6;tAOW>aXT>4'%ESVA
%%he6SReIHhGW&dNHZ?kH77d#VI*UYnL;t\M%h6>*G`=5FBU?!S?Rm#4cC4Lec\<,Wc$T!DJ0X_\b5p*=E@QG5m'\V3Na_<&c&RXM
%2G^[NYCQSdc87U\mqA.q4N*<c[Wqs%U[sl9DrI.ekEe[3*Qc?X.;Q1_ZGjYeF3f9;GZ$TsFj:.^hVr2<D%F&,ReGb46\^]"^%_s_
%U[sn7!DGi-GoW?\kP9W:Tm7ZH0]:]j1ct`a_!/LloI;WcP^+N,!c.bBPYp$1b-E5oO(R(a\E6q;/cd4'kst$r1(o8%ohr$KG9&Uf
%<kpE<1:!X*1cm0s(A%[Ji'lMLfE1!=Q9i=8?f*h&b]c(Q*_F,ABeLWAph!`[A,SGi)D[!23-)\N\^O3tMCc;^`99"b&0s?'AJ[Q7
%+%Ic8l3-5i9mcC^*IQ/ET&1G!KJ^ltcU/r`1!;2KCe,,SX3%OS#srd,3sH=Nb'bNkP'@6.H9P[JV1IHb_W^(;J`[&QjfB)l!mM4m
%dY1q1Q\,tNJqE],C0m'O#>X*l#(h0.+\`71e,'I^TdAq?\;aWrjPOZ#+ADJLjM$`)@d:q(ZP0l&9?U-GA"k!,4N&sLl5f$?,u"m"
%PXBV0?fGVQl%dM/`&m^UBBQoh=nXD3lDL.T.94rUTjG.?IZ&6sEc*/$SQq=.k;rh3UlbJ:Cd_^f\IPf(piWTS350/N<*2p"(Kj(7
%pYu?DQI'cCOsJgkSm?SWaL@qd03;qLZ$CB\9n6BECANjVX(9sN(cE8a,hkW[/\*'UN=D3k<)[e#O`(L#06o0@'@Qdp?_p:,]&pR'
%U[&`e?a<4b-H$?@rtZ&p`#A3m(X1/$C?P7do/*dDKiC-)J2r@lj24<COR>!?.$,]2c\db&`GdkDJ2'82^K<&<>P9l11AOBsa3GGU
%Sn?/4p61@$&P7KZBhet9^kFQ:_n[5)i&k7/Bb,,[m6%s(r:;ahM8;4L]Gtn.Ncc:1o=Me#;u[iZG-JOXDXlGED$PNS!\T'WDJR\f
%E3j7Y1eE9f,1,gn2[N&4CXueL>e@ESKTC;('bkF`nSJ9$\$I1icrC#jl-<cMTuNp'`u8u,$M[^[(($'D?rU<g-E^b8h0H`&K%S,l
%KnXC/fa/`3.2'5_R2bb!kQ5\,#0MXJ#D_NL`n$u)ckq!7/j=oRLM9P<"D$=SHLqT&nh-IFGTX*--YH/4JeRl038*X0-5-nr%gh\6
%l8Z6\GVt3ojp:u0B*<e_a(c\#,".K$hDpK[$^i`Z8L_6M5VC,OW(M90fYlqDD!>UV0;;i`%jVIHl+S0c7/bmGoEX[S,o+b]L"@<5
%NC#BAAB,f;jL2rC9[:kC!E4T-@TOi5h&Q2`\JdFt_8%Z13l-Oj4H+YO.<XkUA.i3WB-)':OcP:n0mE0?0Yl!3(mr&7G&T6%"pkT9
%eL'E)0lmN0Qi.n8b;`N1&j>kD6Yq/AMn7?t6&IO\j;da\%%aMg2Q@nJBJ/i4.mi?qOR#tJ%V-;_Xl)`Nmhr?`*=2g^Ma&>oG8N&a
%r^T&rJ;o9<)J&'QIEBQ_PW[5pc"<.00KB>tV.!FVUAlEg^g*&`j^E1'asmD$TUHV*Lt'$H(7na-?=YumE53ESj0%=q@D4#TcG5]s
%9Xhtub;F\n:G8Ls<-aD_kJ>^`6%6-25RTo=<u_"kcPMCs$*H8<++PMD!AE<^3c%E;*`CV$XDqWAd%fB5H;cTkNgW!6.Q4,O92%[W
%omDua[uJ$_#irn8=d3QPYAu@ETko,cYjro<EMj`,E_68Pf%b;b2SQ*lK3Pg*S7^4M@VQ`DV0hM^m!jYMk/ZO3L<X?2:)$pui7VPe
%+hYUZ>QN&HoF`+h5b:Fe>9BPQJmO`2:GHNJ8:-jVFn"lC\WC$*d-u!HBURM)>c5Ao%jue9[pdM,K6(6!e=bC'M?I7hV;*Rl*."1c
%j''3Fgd4%1*:91!71(*3_]Y*oaqGY;n5>@g\<]bJ=\&-faXO\2(n^a%l'0+&OQp(EL5B.H?k(43&O$H,O:.6o%!b4:[lb8`%<Vm.
%\RuSeWL5E*\dX4Y%@KQ[Uu'e;Id-][hGk&h'^Z,p"Xq>u6*aFma/FF3a#T+pVb')4K#oYOC:I'E+^kYK)@s..+=]N6<gPGh>Q&b^
%Qr"g`5*WqFADPW=40)s-S'6M99Ard*5b1&:[=C"3%a91+^i!/?(T>@)0T6t'n[]tqM=Z-dI#6'/RsA`"QEq=Q7*7@`Pfd,16Cfll
%!&gL$[$L@PlRdC+4L-8CK<./YJn][m!+XScMC*s`Vdb!U>-4UQ>`q,Z(d,?Uk!WWUmQ_.N=Z,-cOc2AOY@-.:o'uWu1u5Bu/VF7o
%Pdpp7*FAPdIe[p%QF/OUd-07YJJf)1;G7_kL=fMEA/uZlcod<c_EbQI'UZr^!NutHmNQ'[d,YBER02Bo\MXK/dX?WTAAG!/H-kb/
%iJu'[4p=i<QiRj\=hpDDQdWuAX](Vh'7&TQW)FiLg8=kX,2]Qc*-5M?.53\1>'4)6I(SG[!7m86P;5paD5=u.[t\]BUqieEE+"SQ
%0PLt=>H!luq(uYt8u[iAb_CgS*),?i%,TI0CITHog`;PbP&Q1rQ[T*/(1InMjE6&@k@P?#SfKr(S!bIqlT%]\GMI,<1C5C")85j=
%W26:.Yj,&G8VI1Ug-H?Fh?EfJRk!Z-bUl\N)0^Ar+^=/67pQP-N[1!VHNJ#ef4%4`:mj=H&("bub]?*GEHQgnkMF8-H]Z&hR']@,
%>Nh6Hm)p.qOd6.1!dK13,T*aSfj1L'h"d+"[La)>,39!H3B+9Po(+A97rfAq3N"PAVMN,mZ-I2Db"mQ85EuD&A0GL#?k9Lq')Z:]
%KZT:0*cT>VJSh1N)qdPHWb$QP+^^&iG"DhsQ?9`C;L\sPM,<@e%d?;cW\+,["lU$@mII:]km>f*;KWDPM+j:-E<0QE5pB#%7R;?P
%9UP`T+_+(A)k'e.8@%WgTS@(5jTe0HIAo5pZBMb.1>PJqI^%oJ,f1OF?(,RG\P_;-@Bs1q*FT!o4IoAtJ0@%G`K#m#KVu/H-<W9+
%8eS(C,Wm)M._pf*QKAAP;%BAMq=,ir(*sK'>ho^/,hXg;Q:Mk@IE%H,J5*Oio(nm&_#r:a<ik6.J/]lH5!/^u0A41Pa$c:C%dT'#
%[$:=8)3C)G,ZYX12OOd`m^LIIWiTZZM$R?m;Y.kT(h--9m>`Pu&tI7Z+EM28Z+2#f#f14cj@rX$O:$s)FNW%tX:(6',Zh+X/FRTb
%MGk?<VknNB>;g"VcEKX&#igVBSbo*5@p:?N4-L;gIduG/pg_,Y`':EffKh?Bh(Z4X0-^l]R6u^X3T[m+=$OQLi/i4`T+C9CW'7Fg
%`Wr]+3K=3r5J<eBJEF99)cM6*OIu_`9ZE;M-M,#T?n!e*_b$dZA&du#Z(YaW)1+9'f2R@n-*WE8U)+?aZrg(X`]`2*lrQEVf7ats
%Lt@`,QroF__47kGRs!%9[RPUP_6B*-:PKT(gLhW:9IJ%i9q`b=iu;[U2mgbQ%1A>`^o#%J%W"dEq[52XPDiY+,\,0s5KDSj%Xeq[
%JEjPWYU]?fMH5h+"J2P.L3h\me7Bs-[@`\Y-pq4&^&f5lQH5:6"1n0I>BEXqpg7.:gW)8pN!C-J,/I,rBhE%#W%`OZ'.[jJ@*EXT
%+Yor9(p*3_5"n"u/HNd`h*EF=$bKX=(rtmUYeBaGS-Gff]E4<;;E')7oWQM5qa!%6"(PO*$_.%mi9=W?Aq!7OObeRW.Zc=M3?.+;
%<Unhi9P-Ses(%%$4J5Jn#8B;EFqX6doY&kug&SbIXrl:ZmgmVK1E8beVAr06@'eM!*-jeWY'?9#Ht+5L:Y;H*I>lot]eEs&8?<dO
%F^gL6R]uo9s$8NYg9UCk[Us@Z`n[43Gq0^a:@+BE3uK[/IXdK(39`kdp-,5I+I]gO,]#ME!j%6$I:/@^R'DC7K$6[a$Y.@uK2dDE
%]esF*J:-?k17',U:d=X]PPjPVZi"En":%Le-A"L;JRmVD:)HjI-hY?0bi6R.6'HOX?ss>CL/W;H+`jiMZ`f"1,#_#@d1-]2-n.oM
%:?n(d$`XNa32BO,RpCTK%nnB#1:B>afojU4P9Mb]^ct,GoS]VV<Ct]dfH*r7)$C@-ek4+ODI@QBUM*2Nc+uX'KGb%"1Ee-O^4AEh
%o8<rB$`RL#0M>sE$DWmmSK0O"/68PJY#Y'q92!nF!dif&[;.*`^q8M&W+Z/h[f"X6+OEYM5+l,Oc7Es%F?h4sMe!L1R"/rA44hD:
%&>9OZJnkIs)D[#18J(M*-RN0\`+B&A!/t"$Sg%`6]u3*=;_d<f#]ge!9;.R:!/qf7aj39pM,@?_.ENh)Wj2aF`,e'0PA^M:2uE)c
%#*B%5&XJJf,/Z]+JXQW8XZ7+]&lJ.uP"B4Y'&e3=npE8W>FqXW\6='<#J3BKMnfpE+bMS]gju_T+b^kQ[V;-_/r<5[H8oO8\$58r
%SRX22P,S+;aWJ<U.c,[JF9B+JMC+>lA"6(5%8]VY7Nj!E(97UU"B17XY_)K[V9rGl'36j55,CUHA'Q2h(lQ+3kF?d_`EdE"kaKM]
%/j0J:D#cM;W[\32?l*WB9o1#K200)o:#kaJA?kCWX$H+?E"$/e9PEYaK?,f=[LVj9US`iT-*V%N0"Lfs(t4jNoeeFL[J(/J(NIg5
%-035P&d=nK6u'_er[Fea(+"tQ=LYW_K2Vjt(1\6+EF=<.o0sjse?[d9L$s.>1<m&)JpjA>(Lc1"[8E:t?:J?J'eOf%BY#qfIgHK$
%_&KZrO>LVX(@6i)fnL)KUb^m:.TDP?5O!h,<][OJ?U,DhZ,RdJ;RU5T,[--I[Ht,gk7IKK3ZMYp1l@F;JjW@K.LICu#4:+O+g5<a
%+iG.J#1`l)-r_'T2-tIF+jT_3>46#uL_CLPIn3hX9Kl40;'e7gE$8Kn,9&uNMUb!dVl$+`A\_5Ok;%!0]Ee)kC<"`-`T@@aX\]h0
%)?X!lE3=+2I7-6;6?3MLfQK8G7N[0P[^WT:?qCFJG/B,0[%tP[L0C(73B9WVUYlT`"/)L.!+]OtP&;lsHGG,!qA@#F\LXKJJ3m,s
%(r%'OdhR$]N1]QOUEW6,$A(bHJHX/C37.t:I0=CmUEX7Cp&R@Xp%.A=$3Fal\q77()-M99_C0Fu*qamAooqD"(!:3N(!IoH-UeBB
%e]8LOF9p&\=)TE>I&,s=Y`*)qBj\"67BTr:'\X15aitsJ4UQ4Sa**R?moW!F2RX(u>\".)2OAKV0`/8NHG/&AiUFcuQ<#kf:uJ%d
%2pn)AX]4h<,5[5Y)?cTO7JCa)$`LUtK,]Io841:McbQ\!1S[*;*KiNbXbIC01H8^WP2lH]V$k[&2Bm/M.7fF&$/Ws%:q4BIM'C3g
%A3T(O-s+$&]/7A>A3gYVbq2;kMbG](GLSL<,#QtalTGLF4::e?p/+D\)8O0\X0H*P\7hP925A3[_RtsmdZq4'oC/GT[S47g?(Fp/
%j>,CD-&e)Ss4NiFP2*a(ZfjHrFi&iXFbeKUNYl78&!!%=WPVuhQhY-^.%l*IY8o6&?q(NoZ!$?h'EW+$FZ?"Dm3-%;RBOWYOe#[n
%3G_Sn,H@0s4H.;&p/&Vtk`qP)(p7kG9YdM@OF)+/.\XZ:OR&g,gTpZQAkg<TNfaCBE0DRG)]7UPWPfk.;HPBcoAK[(/_Y7XaJ?.H
%ehR7h#7t$Za>^,dZ0RWT**])%cdW_$SY8XjM,%U?@89qcDuk;B-0B=fkrl9MChi`mVC$Hf@uN&e=92n8fl!KL3.k"n"@C'ui4d0/
%U/2"&lL%P;Y*^IhKk;1_5LH/3(qJN;0cI8&$<73_m)e2VT,b;?8[M(!&P?`@#!Fp'SoPdV'2goSV0UE!+^-QZXsJ677NXn/hj&`s
%fW6mXX8sON<m'(t[_OKd_T5ECpU=@@Z!NeP(hN&:#Tjm6@U</llg2-"Qh8p?cKL(i"M9SQ@l;O$]^U'gHHKeibk5?tdO\hJoSVO,
%m&L@)P;+Vb<s1]ZU"-L:%=[q)p[PtWL++d6.?"Mib;2#@/QtXsqZpd\OLQUF-KpDX/jEu\@[_GFB7dsV,e8pi(3HcAD5eB-\*)dP
%Fsan/+)-fr"mHYGrO%dt5@A!W-gsb544ubQ-]8Wh-1VY4b!<F0Ba5b_+t7\m@$6>&W?Q&'Ha(%nbMh>NddF^fRjF6"g1Z=D"?uh@
%%ke?q\_Bt!6+Wr!:V$[.mTj<E4#qDJISeIUeVO=.<-f&ZE;1Q=G7rQn-W)V&rAo9Tnmr?0H6S%5ReSq?jrg:6W"top#TAgblFN&?
%+0__eEINM6Wj(A&fUh,W"mM8D[&?1<!pc5snsEYN=tN=^bLutPd#`4.W@LfUW'sEUQG=8T;JgLP4&]UhXM#ab6N9Yel9Wt\&8.=C
%g`bN@T$Kr<#Z@`VbYsDl.LDi8%U%Irm]jNjQNYro6OW=>X8?g<.%WAC<*%Rr3XGdYn\itZZ7Ca?d)8n)?NJRq#(uj)bY`u5?A'Z[
%PT^*S2LK&VcM(8mH+Qts5!Whkb[fjR(otH6F2'TS/eNIgaidYFH=fe1#"IE*+4+\tVjsY[re?@rlE0#r"301/R6QL%pKjXNa:'>2
%5_M]o(j=a$-j0WaI3j7I2m#oubLHp?cKfW7p@)Y7`dW-VeCD?:I1i'jQ'&N'cGulH4NZ$Bip:6X;9>n@c>o4MI(0fh,T8^\,H>.,
%Uj\[J&f;!];CZ?6Uq+p/>$5O1#I@MI;YtDYJhi>RaFhg?#np3/mfl8Hl(fu,Bd#?)neWaLr+fO&-31k;5:G$CLg6<49pR$CR#_Sj
%FJigtFk[;!%\"=Y;;"%7&$15$4gHoX0_4cVF6Sk[HH`pXGVV3$.YT%(P^j1DW*UKB;&ZtKIa$eR?WY@`g7X`>b$\Uf[9VE9JCp*3
%-/YoTbs`O2T_W8s=;&dcDZjF0,Ck@H4o[c>2oRFe.GhjBc'Wn/^mH=0\<)8=O^MVLmGh<'P^MQ.BG[Z5@'=&dA4h.O`\ND2$eUV7
%PF:<ibZY0kp9o]n-B`cAUg^3[L6A!W$"1Y\SQ"*9O9c4?ou3`IN[^Ck%/pnWr@+C[Yj7^4%1U7l>Ec&.d%,`QRRp"8N#N8WK+4tC
%PEn"8Th(ZXW+;;@!>kb*(L*LcpndSL`SBcMJH@aAp,b%QgmS044]qT*0PIbU\N',_96DJh+lQr4]8ZP!5nZ0='_95%L([S0AQ=8B
%m?Df:UCm\;\6=Mjq?:MS"CBC>A3K5+__5e=W'"])I,_h+i4]OOTbFRh0ju?u!M`\d12SPr>$O5R*g4=#RG)qKTdPh]]),t'>)/Mk
%DgN.U-0;ZBqdH?ACr0TR@S*@aQ0LD$PBb=_N29P[L@!+X3)lW"N\cR3N&>PjjV&Zkb:`Ve0g?BL?LrQ)/e,O$(aCZ$+rEo(/:ko`
%_5TS)P`8$Gn0-8RG''<o1]^HSr-0;NZeCU)V'@^f*H_FK1]T;VZK-R6K/h_u;+4O5e.gr`RA-:gW"Wcl7]2K0b\U[o.^I)*^??bD
%]iJZ/lH(O9@\#.!AhnifSD2t38_L\jkgDLM0;Yd5BJ>c26OU=bn/8IV8E0J4MTI/N]D*kb;Ud"&MS2kXbg=d$[V/ko9q9_#g:Adm
%YH9sM'%J&o;rH43>p$.$?q-iXBfaYp*eiUQ2Ztf]AK;bOBH",K5pJEC-JN-jPp?c.4<2`'pD_gaSe+_,C;:4/<UbTbp7Dm(q9lle
%':A?F`]/C%i-ZqC*]`FJ,lp.Md7?Q!N(F5!.3SkmLr7YX/R\0$=<VtR?6:"3Q-W9+"0b6=^QpA+K'X0TWPfi"(epsAFeb9c/>s@S
%0?(c!g*AC#-!(4<l%s7:p^ar4mI-N/SY83:ZNgU1VF]u4Q=6+l"kfr-hDdmf$iH2R=Tc+SX<4++E"R$&I>[A7/3-CiqZDerXdN3I
%;5bCe-49+5BcSuI;LKXP%[h)i60orfqBZTK(Il=,Kph%5A?JipqI=DA$9SqS-AjLM<$%R5;p:m:>AD[koB[ZPG]\+KdajYH")Pcc
%#kA]qe?T`E0B&'h[7Z^tI]d^iGI**'SnuDL7<?_\UK&#[Pda%1el?'ZPKMS&D<k0&-cIRKKo+Ld9W:tCT%t3;`A6`u@No685UaAW
%AISSc@o0%ih,5u"\eTeI<&b2J1M8Gmqu^FDr.3\H?'mWGD`L(gUCLr(P/AT56^=l41U2+@OY7"6=['N,SOfN[J;.kAM=;#!UeLR*
%i?4M(AY"4Nli;)0P+XV7p4hL]HpM`@]HH>/EBb]G`+9pqH_f_%l9'-oJ]k>I'<%&l4j`$.)lg6ZTlHs)2J.hO04rF9]QBSkjItAp
%j@R"MZaXMC84M'8f[`B?^p)he2`19VTeNf>"qtKUEHDE+Wm/=7gLHMEWu&dSmL.dlOq_#^lFWJ;.$4r:UA?B=3F5MJT&g&a\aG##
%-%=+keeO:W*Og^i?5Q%N09!mM)+.MHc51)'N/;]a?!R.'^mGW*_O-X2@(3T@b++/cEkbotduRg;?.XO8%,W%lOZ$em__,<4$/Ht=
%IH#(eco<'3NP.Er#:9V!-W\F`JT\)?$'Il5Sk_e(k'P>)h8T[Hgp/:Sgp.f%_HufMa?8t/N%6Ynnhk%g8L*m1@l<caA%(V0,ONY^
%Za-BcnN22.qu,9f8"$WoXq-IQe-g%qi/t;5\1Gb:o"nMrr5+Cc2mB#mFXL3RY#cmPl@mV'o>7<Sn\k.$T,a<m'4Vg&$Z#)-^nfT(
%M,=M&@:Y>=VZcf2Unrk<MLh[()e-j+X/&+r0^:_Qb_Uj,`cS-q`e_SAPA&a.)&m7drk,Ys-=]`;HXTAURPDDR&$1,^/7VB:H==Ej
%kIRiam*NC`e0/GY$Z"l#^mMe/_PS'a,tnY:1D\K9)(S>1R5&;=]eDMu1Ig9C$_,ic2Il&Q(C?&Vo+#S.B^1:+13LZV8P%rs[9&"A
%`h6l<\=V'H-4P_ra\*W#7_j_N,b3HL,5,i+HGM2?-E3m]0]kVHnq]c,%4RH[IQg.Ga&r_83Ep"A>>%"PN'rsL9AHZf/+(Qo!ld4L
%$`eWH#;SW*GPf0H5EZQP`"a4nEFm3+M[(Jt^^DsPa,K]gV'#e#;n`76ZP@[/XiSV!NnE<[Go#5Rjr:=#cJFMfIWS9/1q!]'o#VPL
%G-uu0NHW<L)dFIeC%lj^VTi\R.W9XQHKcLgo@[L'r8r=keQa#W\lUo0s1l^onA9k@428]\RIJ8VBp*me/A*;\%`b;\:(a'PG)(HN
%O"<%BC&\G]ZI1V8ll-CQneM48GIPM(",p1kE)GbKP%ft5fU*or66sMk*/#5E"h:3:(QaMTj`<fs38,T"kE]Bc#o_]?8o4gSi#%XW
%eaMA908!/_kU6Unl#t1@%]j$c:o?BRYrEaJfb54e/2H[/@Pi7CEs*GcEEY<bG?&40NK8HZ%bC/6V\5;eCrji:H=Q!3e[6hLZkp08
%>rgepWEI8F=;jNLo*`S"N%nW(=K>(e9THNqPWUhHi&MNEIk`p$/bR>':t_9nlgts^,"m2SbUXRTcKUjZ,/bQ<F2hG(+0Um6(%K>p
%cZU%Z5>GooiQ_JB+)-%3;WjdO8!ITe,OnT:/;Q/-.ISC92WEr=q2/9alQ=d-:-2L3$&i;m"#JBi'.Z^\1>X,S_+&V43AE7":5iV]
%(WJ/Z$X7efFC1`c5;?2i*7%Zn#!L/+U'CR4j5Hfd=jC$Y*?O[JWbI^TDj<bXeS^$e7ltIMJ[&3a?@<)Hc@/[f1CSQ"I1m0H]Ob?0
%HT,)Oq4g=pEjcL;lR@=^#YbdPnfDKtqq[88@E;@3q*)B+i5lE79P@hh,omu`R81@EKAEm.?%+Xlp_)O00F#%KYna!Rrp]0j4eN.K
%!YeTBb]Xpr5:*g@).Z[-=c'(tBU\Vp:hYHM[N8J2k#SXs!6BpaeV7#3,*5A_iN@;W$F1$ccB[DHq\55%Kh$"+@A&jX1p%WoO@IjD
%Ld!-BZ,$:hGQc.7Omn15WbCK65bTfbj(dkYL4CTZY?Z;Q;!LjeGrg;`Z@+/mT0+mSL:rQmnTkoK.3C92R`L1Vg#Tqn?DA@tNh=aa
%6_.it5'EB8.IVs1m4dW7SQoYuZQ*D#@#XoWE,BR)7na=.j%h,tdn&E)O'_A;I(puJdAd<f6^jk4e-1rJMeSOratN-EEK\4t\X86)
%08U5%r<jN:Q+b02Ij^Q.XQl/54m'E];,*L@-eZ/#ORAE'>dM1MYR#'F8K%a#7:LFc%nbpUIR#-dWNOr_JhPDLjEhUCT%>t!^*)E<
%Y>`h6bd3?@ls?=EN$(>pm!SZHQicfpN(?0CdNLJX<@l4$c9\t40sMkmo2Z1F]s,6EWMk@L6*"ZcVH%YF?^NYjb3u)s:=o$mR^Q9k
%k6^.OqV-8X9emED[F*M39`%&KPcGiq+G,hj%2'd9[+mNHr1kSGIMP$:J)[Y%BWt$JGB=*md_I`&+ol,=i5+uFSk'LjE^^o!S0)#=
%R!P+ib^g(m8L0Rq6\$"%&P?O\!?+)bX92U1(X+@eJ9AHcK4_q]%NKi8(/*_JXcm@j0rTBBUE`+j<fjRjW>CMR!LRtm4>E9JY>,<<
%rQLX_5;Qp1cbQV,_@+8<o>60]ji!P0pVN<@GKdTg0&I$M6R9ht\h8[6MWXIU3R:ns)sJBf>BBVg]:?@mnss&+,aU0d%<V=a;K^Rg
%^:1=TVsnD1a3X(M::"gKH.gMYNAnP?(E,PDkJ;_2[HQ`/C^&e^H.4u6a[Gdi'>`u2h+-J&.\ke=5qe(Cp'<rPq``c6c1]V6`Re#*
%$/_7bQ^k\#g!/s@D1(rFesIX?SEQ,WpVN_Ak_WFEMi9CR/oSDTjQ_/>626Zt:CB(p<R*L24ClJM;2(`Ob>CM:9eu9t)/d[.1&qF:
%P)nEX'Q9k2'FlSso1g_IJ7uEf!n50&F<!lGm),N2GXa[I(`jd#Zeu^s(s`KO>ikO**IRKI&ru)o9Z'4']kMBgY4#Y;oj?a'!,O%Q
%/Qm+%=GRJX]6tC!hV6Lr+_s>?6qg*tJ=qkRZG[\\/kD*9"ilV`Ml;9CWs$KDP4Jj2lmU\hV&1W3!K&k*Wm+5]JTUrgSQ:+qqJ6FT
%BmZZ6OQuP/Xj%R?mX_t>G%o,7W0u#*iJCa8FHc\:(;nLF7g5;6Jd*/FYu=Iuri,Qt$AuuUFSA>^8m&Bq+>[BI,bMjN*-LbT!u=O=
%VL_]pb@9Z0AK]P#ZF$]"5q;YC,@[))W<EWVGoC,NEob:R3^1>L*(XQm]bn[G9E;2hebc6YGQ;XqEKqe%JEr5XCibO./(SZiX]CN]
%#-_l@FCS>+&s.m?JgC9ta:_#IR0gorHT9*2\b"uYRW4tE?^d))S5Z_b0$!%BQiI-Ngb]R6gP(o@Q]EC20Yl7tK@1Be,llONOK!R,
%=ll;!F8$#+IVY%oV)oFKjf6kI.R2O:(^6=i>EI.0"o=4d"8E(G^tP,4Ut%i#>/d?][J,7nf.9Nn8.0Z8kaJ0PP_$-@otpd_n"E!6
%n$\CV<%\lP(#@FRU/1X!0uBV,,;`eR\<e\[/H$]r6F+tC#*Ab6+At'If,N(I<rf6qY^=3e4E^B"`t5L[g<1'Yda\]:&+`4(Pl<J7
%RW!r*0nnh%g=?Ke,5H?pmUud#-OiDd9%!j(3\Na.:]O%_[uf&<G&U)IRk4dB"KV#;JCL9\XorYO'GPYh=f+aY.Kq.!Xm\hkl"cVT
%2qCV*4`0J$DY.-l7'I4gmfU=`&i0OJ((SQU>M/+NE8V?1GQh/GYZ):a&602-T@WXM6Ob`>d"bDQ`PNVJ74VH$g)?!<[C44f9#h8Q
%99:T,5o'k2[*g%HIAgAhC4?5H2Zp1!9l>m#f%DFk>2gY?Wga]jNUS-Q^,oO;)oGCfZr[DI>elaa"-%?"QD!fdg"8l?[-!M+%?RVN
%',L\F-3V]*dA)%`%74e@&&F=K7XeNige!egUf!.$5\uYen);rIVb4E+3;<.&IH2_b%D)KPAPpI3Tf49O+r]PodA%D>IMYZL/]@pQ
%#';9Yb5;^+,.Q4>37YTae0-3md:Ht5YnAqWJ9\#G].4fb%'%PZ9k5M>1E!Q1^4dEIkRXD/NcItu"-F)1ha`Tm,2'd05`9-[aZ0"\
%<fI#40R;2Qa5)opRi&oefZ';pX=tYs79q*]S'/&@rr$+J5c31E=o'*rW\IR1d?/\VS>3t19)k\d007=!.9k"Z>L4d2#WA]gTnD0T
%1_p@JCUX@!Wj$(fobkU&JOnHtei/gfCg`mtmP1BBWd!km#A>]'72NXN0$.qQ%:>!?rJ@ku)pb>B0ic:-%YVs7kb,A^s)*JK*E^jQ
%#E?X01nnE2,%=gZOL`=9G%_Yb$pU>7nJcg`dSM8LigE[fE\u*F9)4gBN$'8P`>bd#]/(>iBQSf)./)!RiqlW4+2eQI(QgdD+;G7@
%6uLt7oHTl(.BS5>>dRVd_Pt?'bkm+aRs8@i9:CZX]H`\S8a@C8@tKp`B!k,H'ABP'*IdX7d:OpW,^gA%9Y*AU&Q:N"aj!RG$<--8
%Y+t4tSQjF5hA@#0DES((`@<2J[dH**V"%l23Iu-23l#=4r[.7V7j")>2"MN:,O>SJ9*9+%J["PoI3bP\bSEQ-G@F,q9VQAnOi5'P
%`l,\0`^n_iA"ql.L?+X;da9@/bNP#D,YPZeUB1YPk\"lN>CpPM88eH9<@::0&@PSrlC#q&KQ4G+Z$%.e=TJjfWYEs-`s!/nY`[Oo
%8HEbLVAAZmQk\]F`Ylr-A>?oV`Me%HV#g#r4>\L&&6OQ;nA:tcc&'imHsg6m-`Quu2i`^D%lS_^.9E7M+3/fml;1sbBO2On&5cfP
%Fphl`2l%H2'LDnVYCH.dIJqd$o(C=9mH`[.=MB7[o@.^[r;#DHqG$CpE(;QC]BFI+s7cWpooD?8ooD?8q]C=_%mU&t^OGl(?bcMS
%h#-@8UFdVVB:e4Q-ejXYo2hdgV*#F*38opDr/pgSiZ%YOYNIc;qA8&J^NhtL)Z5Hlk'I,cfRNhf:*_h0TAaI#YSVoS0f6,Tjt?X"
%6%L[Qh)*WdF(jUM]T8bHSO68FL<+$LlI\+]2)M7[84+CZ*t&4LjFBfh*BUFhr-)jg@-:?3mNRQ4%s@4YC'F3SW+5!eP^AO>4q2Z$
%GcXN(_`i_gfPsoUYt20L$k;PC$9aH<F_Rdak>7u2ie5KB*BT%&n+/@mog;N9'iC#Ke?SVFed=>HFmKt1-;>BsfK%HM,3GSZSO9M^
%>TW1_nQ=X1.h?dh]W*h'b!R12L?9#7]j1AQ,?%Za\#d@10iSO8Ij<c_,Vg9,`-J<3[ca?`hYe:k/1JWd?r"g2NTN22:"75(:i4%;
%+"Oa1bsPo&Z]$A@f"mE`Wb@oT'mpMrf+8QpO22$L$sq?sp`-BnHSDu-d'bPkT7\5<fsU(WY[['pop51$A#t5'K;U-IkMYTA?B;qB
%#^d%U1r8A5.7n9piu.V5N%DI.R^-BE6^97q*#lPsa5EX2O2kW156_YOQ-[8R^'>mSML<%rnI5=4N$.%o(5fe\;Jj'QU+l(HYgW06
%K=b@Ka5F'N/]V6$56f"bY-5l%n?'6OVAk5Kq8s1r%+_0CF)Z>Qgc9UPj.CCsK)Zhp.Y1tlnsA_^9cffipfdNLSoY;Mn/Q7JbqV2n
%F0Omda5?sD_5>m*K*+4XcubaeE.Guo?+\42'6k!FrT4q:i&TFHS7?Mgk?ubYNkk`;&*R3B0fZu/b-'pg_$N4/S#168%e(HS]$<#i
%^iQ_o43-7ZNsBcTk852sH"GHLNkk`;K3dY#XG6f%_5?lFK*+4@S)/2p%e+^.f6iUp!M3@Nh<,Upi&TFAU!STVS"*#0:==r-BP9ft
%;7PQ?3&RG7C-s6:Tr1?o6UN)UTnc+u6^("#6Vi[iL5&1YO*,2*4u@%CIbC&WPQln4PQi3J;%-2<;%,WGU,4hdU,;YlLgk>OM#@'T
%)GqF>)Gsc7d"l.EdYMB!W=buCTb4-;LIMu1P=?7=:Q6b3%ZMkXn'm/&E+hXZiBnh^6UN(j@h4PI"t,BY#+lf2)B9Ym)LQ3d0fWl8
%nT^s$PQn`h'GiqiU)9=UU)85l6tpUR6tu.a&]N\(&]N[,,>*SU,DsN'255'9,`TmKr6gDLi6[;.i'S_]K0pkUK+Et*+6!.n?fZ/&
%:Oi<"i^T]Pm;ILP@Jl6bs4dSHB7KpX5Q%Rss-l7NrU544X5Erl?iLA8T3]e5L]@78Y<Vp'++F7a^\tdJTDc`9r;#7Jbs20hkJ-o3
%Y;#ZG^A`>8XC$JNQbWL:f?aHo02)-;X8hmo^\RQ[rmed[5QBj6J+jKRnTR$iHopDmIe@p"rla3umB?O3*Hcf/g!>0HX8do_qs,nb
%o+/V5r?&cQickFpgV<^%^]*9^rkU4@&qO[=r6_3fn[h$`iHN'4s1dX0rUk[>K9!gGoLHt#r9s[R^Y$>OJcA?jqks$McSBaYHLcg8
%<aH^8F;JG5cej9Po0;s>s7(U,]u7DW"^^(EYOP'<0m%EKe?=4FFh`"_`lr>qK[#9,Ugk+-SR,M1f>7_ccf]h@it?MgfH`"XjiH.o
%"8d/PE+Ds3![,$6:QPgTgo+qG$Qtr=pltc[o`)U/+0W:$CC]VVH6?nh%GLq/bqIr[+>[^&cN.pjQ"?RhD>a`P*,[4id/gO3/-`O<
%oTH[/l3$D,J-R3D?C`;uUE`!bZl?1>2'XrB*-+csV-n@QBFEu*TgM_+@9j^;o#h$SU^N.:76AXt.,lXqT1A2u#-o`CSGQ\1CsGqR
%4uZD,pA9-46m'`^056aL#$FHF$>tWX@O*eMp:_kE?=uF!<#AMOkEO+8.1uCS,3>MXECq)D%:JN`_-8ZeNbP6fEU3"V]Cjo=V?qCY
%PkU.SU7JK[2p&or<l+r&6@-=e1r;P)h0GbJ71/5(]<m&IIm,.Hi)h'))+q*!;3]i5*/Lul4^W4W601-rX;)7n(\dEMqu'fnd0an8
%:D"`TYeT#uY!1a(K?KVIF\Obb\^/=,eOV`5IV\AnnQhfAM=60WFn@"0X]$.GBn&Kbj`A((+rfQghn;V6q7Jd;EQ>W-ZHG%`puCOC
%Z>7d3,%Ipnh?DVB+9R5ACHW;KZsbWV)en=pJ5_;k!VZ?Z6qah/0QM8PC3M=&(HPpNP/\<YR^kB;r5U_5mM4>hmR$41q?Er86?7G)
%$j3r1?KZN=Q/_=Y`X7=nEM)tp@`Vg?S0UXBOL90m3#HI8J'FkuMq3/F&1*S4YQMtB_u*Yf94kp3HR+oA9<Q?2#RWc(aF!&:;WNmM
%!-\f#1!ZC%Z#NS81:q?B#OP54(-OiK)X*$^?_7=D;JnXqeZ(q`CZ[)ehaQALnE1VpG*5bcH$:UU[roDBn;5BB?6b@^CE9-:;h:h/
%Vlp5F#+/nk.gGYFf9U!tXcY+n3S%u$6S]'JNjq"r^H'*[k'cM38:?o;%/k%IS+aO&5=`iMGYJIN&mOh"M75Fsjn8P1k8BGSK9=K(
%3Xm?Up[OflN99YUH\*%fp5M4A,r0-\TBGo7=FfHj4<G4/&j/AL2,W?o?Je$&P-fk(QN)r!hFu*V2ArkZ/@BKYF\<W/>'6#XmoTl:
%ZkrVImsuUSgohHNb5^&E.1]=4YBFeg7LsqRT#LC!MW3f<YiuhWf#&B%n)[_.q5)?#6*6-BoCLWsUblC:lI)[1"Ga2tn`Zs`I<9G,
%pAMT"AF%`dRT$jo2g]:^'b^6,.W9PAm/r<qBi2W@OPPk8E%NYbArlG%^I5_geDZcU.Zro*cgM5&`.]T&U\#>D=HYT$.O/:l-ifi<
%19).!gnZO9mdku6P-1fiPI6P\c8fD]kq!(]2.aU=cP0d2L-H^k]Y_"u>qG(ZTLoKS483UM&d&;[m5hIE"#6=_cSdThS78,Oq[@Vr
%*qqs[>`gtjSnnP-<#bDkg?/bbX's9m9h5OK@POE)R'D<PR(CG+S2I_kT0,;m2ZlM+n69Gk]mE>&9+c_'6(?)n4EOK=82@Xm:Y].f
%n_$UKnalsVR(fgSr1`tk($`,p\6(-'>DSuDGS/34HVFXY+e!V=cIrD:8B>!N:N4:dk#8*]"P>L8OUnbB)@["[<LhN'<eEX^Z$IR8
%+2;A7<#U/gq5,jhI9W?7+oTW)brN2b1lCoXSt6$IXF2?SCT'4,CC]tZkOa#D<O[Mn%Batl$Lphc?@J"]e3]D5:$MgO'#4),>=]ru
%"bW7.=skF>e3ru!/^929Od5m?6TP%.hQ4HTL/$(.OdW<LY*TpN@A'l'!)t*f)']Z4;T7;*2Q@l9++A*qH#.0NG^:Q7B3ie5)*0Kp
%X1ncaJ\PCsG6g)EE8F*a8tb-#ldh)di+qc4!srBim_^4L`E86+NO.jM!e+Mq-RUgOG2k2dl<R6V#dkW:lIKg6I6[sGD$@0jo7bac
%JgLX_R^M#5<n'QogiF/LA)oLI5sRZ&M5(`W2Q?f!7`eX!Zjr[Ub:+TMYbg9Fcn@YSf^r!+CH*#o:m9]2?#6gl5<"0PFmD&qQ2:X7
%/5skD<"N=p3\-[C/-C1rRkuPE%UI6]W%J=p#!L>1RYGS0eXWKC)jORTod3sWWEh,l-B>NifEdUJ4S2H9=V)q0MY("MN;`=Gb%Y->
%>EP]F*At3=/^Tb^M9;3CD9=\Q[c+L"k`aPce>97A3i^\KCn_>SW=H8$&77\ncoN7Vj;c+!\$eJ2Qgoo2'<9EfB0cUo,j+asi36p?
%((eC@g?B/S_J,>F7NcRN2sh55lYH)$P!MIu`^k$V?)7)6:&YE01Pa-]TdX`JO6u9S_8jL)fsarN'<G)gNa89k5Qr594kIX2E\ANF
%Oe0e1I+q1)qEL$$a^JNc>Rd\:RV5ju&,<dS-%CIZKq\Rh5>6#%klX,e<h`YT>AUT"rRM`PQZAbh93Bct>O/WjnsB#^T6u>tMr%&H
%gGLWE]eB`MTOFRS68!H,fO'^]X2YiA-l!iI1j4(f]:a(0:>X,-h7(5>_Y:&.Rc*O!C,8oa]W<&nJTPiM\7D_NF<Op9+4E9)_:dB6
%,X$I(_:aP-2JdC,`2HEu!ARp40S4]I\j1Rc1VnG5aMi]t>b]/uofZgd)+FOWOWtpJpV*^l3EVto%"kR[%.=;SBoqs)D-5`\U8e[.
%WmnGE<RTM=VR7Y#V[KViBm&=ah0_gl$hg7VfGOn=M[hm,:=EMME-8Q4)I@45#RA)HaWhJd-`uq5em*o>,I+:g]2$ZqgBGoL>./5N
%I&ZXD)E>N&9(Ob0dB0n%HQVMm>Q%mgd$&use$Ys1kUhIn3(U`@c`L&Q.ZN$Vib#I`5+`J!*HV:+7B3cmD:0mNa)I[)n:5@lH"`LW
%?%lUl(S+RlVeTLa;6$U1`>I1E'fE3iY#oedJpqab;[!.lZ2krKO8/>bVf];\a`+>>*RBYd4\VeY06DHMWi?dW%1l:jD\6^``1&&A
%g*[9"/hoj_Es"D@+9?\i%"tO:g3-KE4pAQ3gTWWDdg>Y(e$`m.%[&/lQdi2GY-(?/<W4j8ntt%G__s6Z]%T$f2%3R<XC=DtC+W;`
%ap?S1[;:W%X);(.k4&JnFu@rLB-5_uIG3h05WdP#?Tr?#D4UE:+:*LDq#J%jgYl:%2cH'*IF@V-d3:Rr4@rt%ZNGW_)C70FHp$/0
%TY]/ID7c"T6XSPJ&V17)QnT*Ta3l5=L2KLX7Kg#c/[k4\Ae2HlD=%=WDO_M=bp&E<"H*Ql<W(T5A^5Rnc<@Zg1^Wut!S+9O\S5Y6
%4&jL'cZOaNYH.(Y=(_b0/so'bPu(Bch:aAc6'2]qer.73ppj)MSuF68818u`E-+t/^8%l'dnXpBaj.;,DAt("V#@'`+\Vk!:>PX%
%;ajZJ+L8Ze+]#CR04G1(,pppGhK<dZc+BQo*f3!nDhah-#(pC;QINS6'"6"o[=Wl!Wb6".IJlQ)DEb:3+15sZk3rk-PS)!Zb2jHZ
%mF"tBY.nA?][T%-T4qB<0Uff.=mObCB,0IE];bP%+sQK'oW;VOm'1,FD&n*)]F22a2S,]t)pceYrGMuP'+qn#W]5Ubn7lDOQ>.YB
%F>l:iFsIspXN?q^gg'51*,"V`2U1(C;I:cGL_CrEcDF+PjpF&6#RR>Ueo9n`YpQ(?fjU=X+sVK6gDUKOSZ7PVb''3\Wf4`GW@dVt
%jnb&N]Nk&o"6dS$JL[Ga4J5[iM\`Yb!2.I_hl$k7@Wk74B<57]mg:YM#5*m:V/AWj8nI^kU;DoPkKR1g%?XLCkh-r5qDM)L;i]i"
%1)UtS#s_ifO1$_Ogsif1P-"Qbkj"s!MUQKWSN\EH?f'GW75V*J3uhP4]QQGWSm>&Yo^#)qh2*>uEeC9J[TAUrd^uY3pG%CrJ1RW_
%?J9e8]:mP\IPQF'UHG;$U_:]M9eG*a6k!Fha=)n4]NaC8UdIR*Pn?&[2fB[)L*_QkDs_X;[]8oPp-;i)WIePR0n:O^aY"ih.\h+>
%J1g,%H3EKLT$q5'p6XJ6Chc3&;jni\X6"_oTP^_&5\#%?.^FA2[lM5UH?]/&.Qh!8T%lE++dl$Rm\Jp,3(Yd6XK`[+?(uLt-aT!3
%W:sfNAT?rq?/,EOQBOJNChtCA$3r3!<TiT\7]*Z;.%I%4<CZ6O_UDN*9A*P*A;#&4D6Ac]r9G*.!_E.g7^]9<hQR,W8F^bs$db!V
%:Gbd:=`V]='^gC">r;#G[_UWD;G-gBBTT0<B6sm?/s0%XG'LW2OW.G&"s=j;B=Du:NA"1%o-EMq<F6thP>[Q+]No[$N@ZCZnG/tE
%Onnt'e>lp@p\2]2PAOkp8H^%T'jTr.O2V)8K1IFS45=+?j'f)(,:?Ec'WpE)E\/8L)"'!iP4sRb_h=8PM;%DY?T4T(Ukn+q-h\c1
%%J>B:Q3f"tI0h@t$%aU5+39^Qpq0!c&JT,L[e@oG5(I/ab1B$o1Rc]o`W1:`]N5)<AtW67(=a$IV3!FIH"fOfik"?5VGbRg7++?"
%LHs3@9r4)(Xug'X4@#00=B>qX$RR1+_Z5j_,DY:tS6k79M=_(qn^_kXP>WI$B5dKS1suM@b0V0rhJ1<O3&Z:C$,oQlifhGi%"Kh$
%#VMj`gN?X[M9QW]YIF?;E/AHMmZIbi)c=@[UB.;+nmEM"`mJ6ThH@B`5j;"IO.9h6\U;M0ZdsEDC@[2]+1fJBqOVsG7N09=Vp]=2
%io\\aX*k!KW@d3oJ-PSDlP1!6fL3-k_Ajns1s9SG$HiJ.P_1^a;Db.i&VW'-enX;>DNdo`&cboukrUJ1@<:&lotW(Sc[u[oPgC]5
%"?Of,Lsdcij_K5!#N+=(V\]Hn\R,GAB#.V:'Dp*](3$bWNUoC<PhmW34KmAgHs8=0ZI%!*mLm2gcb)mQl"iQc<!hY8%:Slh^/5`L
%,,5#,k=E>T1F3C$MC;87$"n+`NWAe=9UK<s\6?pgi0G_Ga6!Z:fA:.P/DIU-c.94,!tLbmZ`JP$J_S@Y'Yc7D,G,Psl=rK$!PauC
%a9>Y14tV,QfT>I*oL!tus0'(Rld[;nWd@8,J(QE?5g!eBXnrH$Fp!mP90q2mUXjV/3-'54VFeY>:Q7*4p!mqi0TI6,/C]$:\a!BV
%CL-(N_X:G$Hi_t,4M&>2f9^DIR(Y!BcaZj"oZMLoP[1knhB+bRVXOI8#<S:/$)`#tDTkMU_"#RA)(]epSCM,a4E26o]$sh.LcRs9
%.oFgP.YP\*AYQX@\njSg1torV&NpAZ]@m]f)3d;fb[0<UBTk$>KL,Er7@K.leiM#]j5j$ee]SdD5@104o_lh2e7HC#YcrIk%K#Y`
%#eQEohC.NcLC*hcJOQn7]i<Xt+B,S\]H(RfHU75"\&:m2Z?]6>K.pKW>WS)ThP#h5[uTr+<%p5O0p0n#+Que"4A&*XlsA]nI#*e=
%kAf9%PhEgkGa'X[1[E'*IMe.6i2ZOUFEDh;A_l)E%C=Ym0:N#TYHdE:,7uM(p&e88V7EqOb!$o?ngH=`1a4@qG5Fu;_q/!L'/@+_
%O@O,/B!!>iFPUGG;:i^nCBJI!n$M=5Rt%*I#(888Iphu]=9S6cFoOk%%^64ll`fe-;sHnS[\R*`.H<f$B_^Wumg6@sUbM1i1R_mZ
%Tb-80]LU(E(9n[=ob6#ILl5GJ>2G?(--.:#Ltuh6+2XbXV"5HYXo7l!$B$*mKH1s8h.!)!9:LW&^4_n)fKZ&:<`b?r#]^EP:PKCa
%pH=<OSHi8nn94'6kV`3"_@b__0.I,$Z<*%?pVUZXH1K^mJC1EXQdlGDQO2G53K6IA>JTMM!dE?6@iCC`jc]JApE*S]UH$oH2ATl8
%/Ig5c+m]&mHPA=FplFrc[_h2"P'Xu;qR)7eaNc@r)$i.(f;O1LoPWQ97uK%XKItih9Q@C@6@dfj')Uar)2CNnA^Pa.7:n\KU%TZS
%G8U#R.Z;0P`_u1JEi2hQ2D=#d>/F2HTB8.AF`d1%"U"i?rkMAd[$WWG9&Nuo^b1oFVfpA*^+E(JEHX*&1r^/hY@9':N(>8`R_u_k
%%$F^j=BIjI,Q`5hLY!SSQ[B-Q2iW1&:14YRe&<dkT2OkhY#l@R@I4,?kkEU'XoK?_!.Tsb`!]'UEYtlA3FW.E1%H&a-o+R'A[etl
%9t3RJ>uBb$dT*Ia%Xtu;M;?8o\fsdkXC'$))n_rtXS$dlE!L:K=eeqQ\H<B&[/m=ZChu[5kYffm'f@Y4&'l5t363#534lA\f!es`
%/.^\G$r^5(piA.``(NN@G\$%O"Ke'\#YA%:l%HnueCN1F03!X;/_h=%!g#Mo/7,E)*d00+%D,1uLgoEWikVY7+KSgQ5V,<=`L;]A
%RpfQkX`IUT2PY)m=KDjMPre\r0H>-q8/<@4jLV_2JhtT:(Nug_;UM][j1q'];SNK\Z3W`@Hg6'3Oc.r7XHFF!+FCO?Js:P7"Ga9r
%UlI%2E`(7+Lmt^eR_g8%m92_/(qD%c%M_,5/nlbq8(q:(NJf?>:#FTX4h02t0T1(AaW\%3)VkcW:II<1dN5;d*Bo]T\71@sFbGSZ
%`Mqfj5.$g]W[JsAOYQ@Dm3p2;=>E?f>I@_e>D=?P<E12EUj+)X\#hdn5[dNfStqT1Vs!G`![]Hblb@LdAS#9^H5LDADjFV)X:7J!
%9W&RO+m+5Xl/U'0W&`'2R..&RdRb!i>>*8lD7*k^i$+5$Xqn)24I&DG*e(.g4f'8Z5SbtP:j@XoC=C<l0.let.C3,Blm;>(&OFdU
%em;q\AXHk'$mNJ1K&i.-4FlT<rNd&=\@[1u(qI_``pSB+^dVZNg/m`LQ<?\PcG.()Cg7[_;d:P_2%,TX"BosNPtA?p#iB(O)GS(2
%]7uf[>dH*jokjA+_TGjrIQ8_NOC2!6U!9[hk_>K5h3.hB,n!ao`k?qrb]6*sB=:IKYA5;2P\=YJ!ITi!Q'qpN_O+QWkg8=YY]>jr
%aR,t<3+:t/KFZ!r.O6Q3:0$!Dioh2ib6p6?/HB3@7DbdnZa/eZG.7l7k84j(\XcPVK\F.@E#18C,tWcrBXMR\6GfCI7As4L:Lt)0
%DeqGP!OCc:6J0kgr.W?^%Rh3dldS2Rb<`W<YOc-8UhP`pQ%j]pA^_RU7@OGC^hK$p((R%A^tHB'ZuRQo#8EIf-u6/qZrNsjas$*]
%h'k$u;:\Jc]Y+a6:dfO.S<P;bOP"/sg>+I'::"-3YUJ!\PbD\Li]B5fngH.W=Lm?L@)e_%KSPgcG]Xs!9D<ng,*bDZg=ku",=l4X
%D3a+c!FDLt]Ffdc$(f;8$=e/,]Z0&gYA<g`@H8VnWZ$Tu(<MkMY2HbBd)C5d-&e7"2',%%enkb^L=16o*uMPA8,7S?\i'*U[[#um
%`ZnIW(8sl<_u5Et4DG:L5BKuB`[)UVM.Sb-G-CY$L*]j^IX*8$,+Oh@E%_)QY]=T?.C,&#?C111^CLfj8DG&2lCE_W8VnC)Ws]F#
%XKdRipAhHl.<-S+BoA`"TX*cVaksbE3ZFZOILGHHW(a34:XO.nN$:L9MNu(3`h`6mkSXjZNR-+#&ZjnB9WDPj<`#3KIn33b1\>,c
%#O)uLW]r"\Dg`jgK)mr$^U"cD`7@F^g_E'YM;j5lY;-Pd-:Q,ql[TA,%XBi6\TmS-/!sk(/Y0SE2/(3#RSY0_R<32i%"M6u/&dDJ
%j?\87%M=FhWp0X`OLZ)dE1#b*aX#M*Zo\a_QDqTH%@/b1,S7uT=on=kST@FS&d:2tb7koI+bW\c`n=7s7Q!kF`[*]E@-OELI@F(i
%-D;mpOcHJ]^V!8O%b9e\',6g@4V"%-OD:uoiM1+TJ(V;b6"r5UKG%\Z6*$[J-cJfR(cpEAhHt4*Ik9N:-.7]@o>ZaIFV6lAd=#--
%.!K/->5Jn6\]C@)(fmfAM.-C#."cGpGJ6J+Bcpp2DqbM?/n%U<Eae,TMc+j75k[a_h6SeW$'-9Q#U&HUhg_RRO7I=BTo2%Uq\33D
%jR(^$#tpUe6AfN<J643LV^S5U4<%bj3'C<%morJ:)D*ERiY`@MJRnhP7:tH[-nIt&?RQo?:-L\:%\U$S);R@_>njo!rPH]W1nr7s
%[8D(<S[*:?),&@qNB/&Jn^13>d.h+%WW:_K,j,C6<">ag)<th%kC($<D2aY&5TRH(XqJHcf#=d4(V0N&Es!0VNkWM]hm,NHT!udF
%<l:iZI@GRb%cudV4'0f@[&mp_<682g7EdL%/g;V>2)ZHM,-/FsDCUk@Y(Eoo2u+VTf0nkOAQ#>!!bCnRq^:+;UbKKejHq^E<t*=[
%He_[LN*X'No)Jcr'2XS!mHYI5^l:k8lL#uA^tM5F1.;ZPr:_eDIk.cl[fe1D*et"^!huWo#6Prl;F$<0C('HCLA1ZL<fjkhUW&?F
%$XuGrbb=`P>+)j`#R4bSc(;SlZH'AI`&pGT4QfJmobb_%,[.fG>\^D+0-g=(@;eK1?&Dn86fYsgXH8+r)^27fU;<h5W4?=G%9UA5
%I[MT91)e]Y3[*/C;^344Z,G6pcRk^kL+0cN6EOh&Z6LoPn0r-,H6#iea9U0WM4i]ub'98kb&RtPKdU[:0SddHK`kVR[A3>U6uHp_
%7))A)@9ZG?gTu*9G=dr5<I^I%d2e)N_-L!EhBe"SN^)SA5a$jr:LZL"JrJFfM.%%U34-fi2%W>eV:-WA;g6SG`)TDc(e/YQPV\L?
%#<564/KbNI)]*-Adb^eV"+0m7Orjl1_*5e\c!a7$Y$q8jq.oI>A&lAY#;lkQBiVIaL=Ge1^f1,N0Wf?4`/J7.-EraSCmZnTTP"TF
%6Qt3*>S2Snc.".6"GHft7(s"DmV/XkY^Rg0K*.gn5\<Faf0Z7@F;RBB+o[%LB,qU-CjW\H3R%&H;?!iJm+nI0&`j^/C13u)b7`Bi
%J>Jmu]!Nr^'CEZ(K19>rA8Hpf,M0$`/UA)Z^,QT7dAeHHdg`a0<<<[[C'B9^_IDb'*&sc8$UarfTcigjOH=0]6Z=EI:2e[U$XB&9
%L]?]l:(5h=>0sL#CZ&>_$UY!IQ(i_=Unr*:[=^a9176]o<-gi//sr[cD%l(e'#lm@MbXfIM6+9\#tbl0phcGaF>UN/\\Bk\U2?$o
%HZloN,@J__,KeSN2"$ukPsQAZK!aI?FtYHJ0HQZnf5V4Y"L>JU`j2Wb#>3Z9?@#Go`5g4n`igd/"p]dL<DZ/]$>6#2Z</gOQuUOT
%&]\?";AG0/7$K.t+`9^h.-5kc3JF71s0%rE&5;%hJXL3!eD-i,'ut0NlF;kn!?6!C"1`A"D^;4]&M)pEimdi&#>?fah\)q[>\=]M
%7W1$/KMuOD-pFV'_qK;Ta7t,WaMb`)&N_6W"\TPZUD[6DDSrJ4N9T'?OQoHXc99fR#Kjja)-#hI,me`I*@U^d?+Zg3&OF*EZW\\K
%d4<p-aGU-`9ms<H'*-a^WGmCV5T1)<aS".P#"d_s`=0k--:0?k9N9AeQuXJ_6(GXc["6[Gd+9Tp,h(t*(*1;f+:)-R!\uS,-)uD#
%Ams]JZd;Or*%7WG2@I=?7^0jkjDko+)r0l&?E-^Q2"meV51;RS\/7bUj1qdBonA]5E.3][Zqujp`duh+$Ln5im+UkuY]C/:eZ??D
%6DP>(`isH\Q4mo8$oj.4>>ho.M9l_Nc-mV0\)LZtapoh9_CT56Q:>!m$$SWk7B+B<X92T](^;CSFs99!%g%6RJHCt$j#3b+UCNM^
%P7B<rO@j[L16`8;,i*sSX_G%[@X;J1)OV@>1U&5f>/:8C-uR3X1hbF9XC6HQ<8&4J'@j<SH936*<*B>aI2/O@N=FQtBa:lR^kG%,
%gVa^0J^g\H;;SH:YZ]9,67G_T;UfI(i;c7RGnp_ZdXaam*hC__&VstI@s,[B-HTlE.O+0Cmc_F>[%%S2Sj6CPK3&EJ8&jHq9ln]8
%d3SNmnpdomR<LQeR^]ecd.)L@2G,iY"';;B>StPDR'"nNQlB8_8^6Ni@`NJ_31+5S=Mad%?0J9L45q#PB+1f1<N/-$h,-Kcng1_!
%F7](P0M%m:_Rod#(=tan`"8VAc6U9,_^H\'.b;%"ekS0Op$V&-$Ui8I3X6-`=9'"H:KS(upXm!<L$MJdjK6H-EpfT1!R\J><Pg&(
%TH)*r)(_aL/+liKnReT9=_+5OFB_&1Kk2RE6P7JE$[NFoo6$pf6-dO>%Bm^-r(P$kTm*&leUrpAO#j,=#5)^*EB16o,?jATkd$#/
%2bh[f?3l%cM$MZ!6QA%,?"(Pl=<<9GB1Nu?hZ-&;fkD/qk;(E12<KuSbtY8J75RIXU2"CsNt0ZcF[^C5,/OY75*9.3mbhZQ"-kg!
%eQk2a2'lalkK]ISdAI<^GNZSK^`E-F:RoSKFR,iB3/LbI"Q:QDl!RL-bm0)?V)LuU?ffuLQ'RA-DTD&^?B9]@2+:b#\4b[9ThETg
%>ln&h&gb9F,!IF9)/2gp.cT'l,iFK3_q8_RTKk>c">?P<0b,)NoA>uC`?#$25UK>:/Q`=QT/d0_A$]Sj6--bg,4M(1Rpm4diN4g"
%V>f)Ujq9D8o(D5dn&UcGPq`hq@7?q6=_%_6euR>#o+KI#lP=?YJV\m#,u#=99t;r\;%A*jc,o!\auignm/>MflVrN$)*fjr;F1"]
%2Qld(Rt=N]OeL<PfQrh(&s9RHeA9-VouZ3(-,@,p$Pj(G^$O#,3_?1W[$,&k)Pr^rc8,9>p.V,@!b/),Qo_)SdGjqs;[l,O)%$JQ
%Cf`(Y%'F7Jg*J`E\0Wk8a)s`VdPM*XUjI\dQNu,FX*1N[2TitR+p"8/cVW0F<]&9Y&`$`6%9R?UOkVE&E*G$HpZ3QBC1G9eWsa7P
%&s:_5?*U+s,4>;h>*)I=2^5/SW%H)#6mQqq98sl28D=shOJ4dt+EV*F)KlCjkWqR5,rnEqE]l2KGV2lK?r+Wh]$*EeL7Na7:EKg[
%)H*Zq(F?kmqp@fD,sq&*c)IPo3%6!NP@Q[b@--O>C]rPM+sMH/W/N-u"F8iW"sPK6iXHK=`%6?][!h?djcXI'ob/;k7E4l/K->o2
%4qXg"kb12@s.DbcSQt\?X<:W(J`WdPK=W^'@r2cV$jObGp4a]i,54J#ilF@kREoFeb;M]ipCApd&L%XV3>'*)A/#nTJbk9]UVY/P
%OIJcD+`T1Z,']+JAL*M%lHNs&`5Ya/AqC"u&g=4>OImJ(3'147mk-!AK^+'0e!\:._ENCk#A#,ZQJ($A^Uk1%A_:"FALo87\B/1"
%,=5I%a#+d-6)p9fjFT1Ma@R+nM_%MS>7".k.]F$@Y(n3'oF%Z,C*;SD&9hK@?'I/"Z@l&OCLaAH3LXU+&gC#'O@8#"`)sGq[`G:C
%%=/=\3NW?Q,=(pPf2D??;TK:J,"StN<eLYJ_O6#:LV9-J>]O%)Va2uBZ#OBm&A.Q=3Y5t]'SY$,`0^bKED?0p.8ikULh<bj.;)D/
%:.?\`1Mre,F(07W[J>C#]0ZPa3'37:/funtdr?9D0uO,hKS;ncVHcNkBdL(9`Djd,>r13Gf)$f2>7`-6FXY*^0R^Q2!0Bp*BXC$\
%+;%4fYa!#56%h]Z82LUJe:BaZk1&-'!7*iR%+^R`'Hme&A&L4W38S`C#`k8$\eM0=WVFu2MVVf=M9FJ$'m<!tG;k,^L`fFnf$usm
%%`AU)3KhS-"sO6TVEY>1!#h.8%M4(',.'#]k!7@nNaq#J(uEopJI'.i;7Quf8<L)B>M5l'!cWb+0Z>%\L'NC@0<6Qg%j3VF]rK%V
%oG:@`LK1^m&Fi]JG'iGnU#NqpBL=]l$Qrs7JX@)jJ#j>_=ll_*>jt+_jBKT@*@El/)pWlecp0#L0@Z*!Pll]]kie-m9!NqF`H"9U
%'.PGXO6U9>AO$Bf*n'ZR;,XV7mShUP,JrZ;@Bp&)VCk`/N;(_>;Qc,K`D<1j<.%*\D1*%N;F[n8kl[i:3A>$>O\?/C+?fo%+J-Ah
%Ha(h6A'D;:a['DA!NX#YqSGLPPrY^s7)sS$Bi]%em(0?t&_P1S+`W;aiMdpH_LVm7OQ<29\V$d_'7:9_/ir(V&7/Pi>K,Mg+N$5n
%%!:J2,47P7l^$!$()50BWc\/H>)uWTD5*?s;5Y!!SI3-f$D9YbK"/kNT<;M_%^SQuM,GpG/82*e-2.C_k6#'0E>+:\K5D9fW(-Y:
%UK"jipuB/mju+'%:hPgpCZr+QoQ:p.er5>P]kcc;%MWWK<i%DNAZFr)fG"pA$VQHB8*jO3)OBX'>4)ZV`r1s]Y4sBA/?sTD6GQpV
%WF?f%<dRKk"<pL/2gaKZka#2.QtM*AlSu.)*-?0RP0m;?k7VPj0HUX)D@jElgHMjN-)[:RnJI'ql,qr/eqlZJK4MoKO7NZd,H$:K
%*t+65T43%sAAi5<5l.:+CIe]EG8j)>)neK2HSN6cc"p,m-FOA.^=LepDc/Pi(">-O0%Rn;?E3o*Oj_VGCTGb]+BsBT=CKAhk%iAK
%Kl^hi5Y5L<`o$Ig7<rcS%0g\#pr+g/!);``hciNe<eo*V\2C/qCmRFc]\DdQ8E5luM@bQ/b(h[p85pZh"5XRV=oQ.ghjD9g2,iX&
%R=>\LPD4l_Ke&=E[AXoFis%<A`7Vnhi>abOjt?7gXrA/p9s-Qb;Z/J1oqni9N?'f+*N@Stn7,Cf(R.h_71DYLI-W8u@5uEKNf8jU
%pfjck6e::GNVE^2O\oCF<PaDk=bKBMKgV<$;kFQe#ako_[$KGXC\#*5nOS]M<^_`41m_B<dH;4A-P/kG`N,WU#Kg0SBc9t]RJasA
%/_%'lZ<Um6B2!G^s0['m#9(h8?SitL5WQq0o#';.oUoLF;pB;1L/TBK"mJ2FS*^Ma7MV$e9GQiW4cWX8:_HqHVeP>nK>/F>)R_)u
%A>ThgCc6%tiZ8:0QRYWn_Gnjo+W?^[)bL9G_6)P4SOY:+>r$`KU4[;RZnN&YW#1DElNKa*alGH-HfSHfGq+4g728iG]\XeZZ&'NB
%GfUX9[FEgWDS&#P&5A)TSVE-CK*hi9;K>Of%91=5aBi)f>JRt4K!rb@@E&O34AjKBM)S=KOu65247#n14FAa!8g;)@S.isUU7d6j
%U![=,Bl3Jp3AV9Q\^]KYj;8p='+B.R[Yn+u6T&26ma4ds(@%TYD39KLcsMp%%=/.2Y67m>VN=K6A<7WP&Z^js\EK'CE>89=:<=A>
%$AJ+OJ]hfLonapu&VqmRj8!fP08Y)>e.J3(7gIh7.N0KrT)D2onLiGhJ[fbN?<A9\?l6At4Aq(UJ!YuTc(L[YQSV!d:Q7qV(_'tq
%=lk43,mgkC=DM8J68"\FK"+WX+g#Qhpr9O1Of^J4mTm^D<B2N_h]fdQ+'U4?0u!gADmZ73YiqCo*!D.UDgeo;8W'i@=i5"n?$?_=
%PsbJ:`28uJ$3!BqQ+Voe"uXa("V_7q5_Lu-rO98nd6$lZh:,1\gAP>d<Tn4R)rQ@GG4BT2M=6r%cTf:]qWNW?Lbg:Rk?`t:pfAQ^
%m:XH6+8kQ+jG[R6jA"ZX,#08>H/@pIqC?.:!:RkW9.&+KFsls[)4<Cu40`u8aMcIai;S%/&j6m5G^FHFJPO,i]G#Y*gIrUFS_/jI
%B&WgZ`*UM='1[2_gC$Kq[S.\!mE&4n.M4&t:@*+J13%hg@]qeTM$(C(H\I/ISBEO\(Q=%<9H<!had,AB,7a34*%?Ms3.Z9_:QNZ:
%!T&Yr'dOGSG^mO8HdBV2hOeUM^7!QW)sM4[_u0"h1r\8C<q,3GWO9XXP"qKVY8Q8N=R&uEBt^D*NR[MNDR:i!j%dfR;r`R6_,oX9
%W.OX7EeZ_j]*JSL#93F\f'LaFEMSQMLjPE^Zl?9$%q8*/j(0,5^(Lr9bKg"*1[IE^`E@A2Y^s!rBV)Gh(LdIg`*2Bc:9<B+3-pi;
%i`iVW+GS5QR4l=I@1QPo[J%cp%"'?jnEkU+7#F,u+a4t\X5:VsZ'8(pdgGep\K=h'J^V.jp7S80iBCTR?\o@#Mg2NHZ%3Ep/KJdX
%Nd:bN@UpOmCha2^M%S<>CUq-N@1V'<')(_/#/1]pXTt/])mOr)iZV?^40aC@`3?H(I_HC5p`OH`W6XjEfRm3<549"g?9[p4oqAM0
%]J!e#+2h(jE:1ZnZZ<cUSkS)3]Ug\EA`<hFc[s=Qhi0V240_D%2d48iUaFmQBEPm\RrEQr%e0ID-J[F5"2$eMKtC$K^cSe-G;nL]
%n&-R.h1u0G':Wrb,7a5:JhGj7L]b:QfnI%3SA74k$$S>f!:RiQgtdbg]G$cRG9[Uep4=pPh1u0G5M>A"AE!T-`%Kj$<2fld`$X9q
%L]b:'RrEQr%e01D0&59="2$j$V7R\K@s?AJ`a.Rk_NT2+$'?m'L<,/B->aWA'DW9GMgU@>MgRgZ7)#>-MgU@@7(u':'D[5>M1"i:
%GF:)rLWgQ1^<:n\3+T`kI$=AX36?P6I$aXAEQENapa5S9EK^.W"n+cb+qC;"SpV@NJiF'b6$sLF&oe2*M>/Fi-/oL4'(J][$fWH(
%`=(P!^-ir=?Te-:o`]>+I6i4Dq@[L5I>RYEod+(6q@[Y2qSGjgUcs:=(U5V*LY1c#IM)I/3/N&LHl)YmEJT%"pa5\\iXku"nP/?X
%i["6:$f:!Z6l^5S4S^W("`]_&K(ptm-/t$`'(J]a$fWH+"n>md9>i"J`=(N+^I0&n?[D9;n4OP0&H%.T0)-aP&H!12:%8%X9?d:^
%QrsCfqu9m%V_kXWncsY&^5)!/s6ud*J,A&/rVHK)?[q\?(Z55XgOBD#kD9,Ws8BpkO+.)a\%hq==)WTfPFqdJrV^*;qR^[[qZ=-S
%nb-<T=l4]#e$$N5qstp0oTH-Op,??kJ,.:&rN!^/r7c.=qhoBWjSY,#Dnl(tQTtHFQXB_6V)mI^oQOYknJdSW\"A-BgMah)md2CZ
%r6*^,r9(OrI.LQheG(%p5PaHRn%SV_hgXA,^AK)1.90k0K`:qWJ+r89rM'u)-2q92hS7kGa$jtEq!;qIDkI"BlA93u-Mtk+@64&X
%55RSC^\S["iP-OGX!&Ms<>m6D>DJ[9c$4`PrQdEumm$460rqQ*T9`DE\B]4`HpUC)R0,-$cN<'EE([tu#T[=Z29;l!'gR(^!?.bN
%PVFp7[ph+MCn""FglA@)f@&]`H(]815qIYOk6oWa@aJg&5p2n35*$Ob@Ob,THm\E.IEnV-4R<LWDW?mi/PX05[(UFSTF7ZGRiq#T
%O7eo(DEOgP5+9Xh?n*t0;U5>-@*2*J.?;)jSfMl4r'tr,5_7U!pc#g'l?hbK,3/LE&Tlm:&$p'bk8BJfOX4Vu07_'3O(AA]hg"/L
%O4%i&(FQ;IWc3;>KG*!dl?(67O:Ubn5/jc3;kRm[CuRs>bpH5+`,lEV0q!:$q..d.anXn^:WED-M:f$Qe*s>RT*>7L;RKifM;`'d
%&,SMU4h*.J(=k\8$fnWJ"cVu[pCi:<4iRn!C.uRt5JdtJ"WPs#*f`@[dF&pfXFK_:OPo^#;39^G'+&@+G;:QeY1nG8`_;!0BAu.e
%5+9Sc*:`d\0pc;2NnO2H=L;CQ!1&><\*]!IS&b9&k6LTe6HSQ]6([L:M[o%Aq/S[8Sn'YI?`9,UP<MkBi06[h^6]c=@1;Pr>X7+q
%QVW:_GICEIHSB3s^@37P^M]m::Kd^W)(/$1A]APFDT,jq@*TNVG0FJXj>6<:hR%+hmJF78mGer>lVnGa02kG)B]nt#[1]h1$1*]d
%(pWdq'=cS[c^DT3H9q'q@nok/1a<8&#O<2r-VkM;Qr4,gZ;Fa0a>+V[aQE)(TkUAtB-sd`a7j=!9h(4]1RW5X[N.0opXgYB#h"e/
%<;rGNrd):rc@4J@dX1UBk2OVQ,r*CNT?A*O3gU_Cme*@>e9&tQeim1r]fgNtqIJ1KI\eenl=D7co_*:s+R\nGiUd^$4Jk)J3l-UI
%qOq;.[+Y406oaI604as)^%^/%o0jF\l88?&6,jM/aaXACn1p3GCUD-haTU\^.A3"R_n=mI_b(2>`fs=BVr$q72h%F=1`Z$g3&;/N
%H6aZ&XY=l5h%6310l=F\P34l8')i'^#ZITTDI@es<?p`W:7)`\KZ1Fj_)j")o@Y;Lpa;P$ltID$O68EiY,i%AnoSH>qes\7-=[^Z
%Y,a,NgZRNP25X4jZ<>i;4p0[ge+JsDcKTYtLj*l6V8jC@8Q5.,NY$:FVGinkSE>W;`OS1q#>96OWm^gq>Z&VLG"ne[d$9mg.^#h^
%O>qIR`m8aoTSthK+e=Onk&gl8*79&UR)^[2%pqEAeWl_Te^)tYemOH/1s!dA3o$ADbOu?<k;/(mbE\@\>Zn52N#:j&8r`;Er3S%i
%Jg6S?%<c<ZIccI3Ur3UFY,dfZ)m69l`3'i]0uu5<&K?5q@9\[#jo/gD/bleLD*`o3K<DX>qcd]RHkmtgNujM>Y-Tt^>:.bX!'rHP
%Xd.n-Zc!tb=RsNKZZ+3,;d+LYrjQYp,t=BPdaMNDZVZ]%f?HWFm41+'FoSi'oG6TP"K9ek4>t^n(]4QckMqqD/hKf<%br,kV7Lg5
%P(&Aeea5`KT*S-REs-*D$NqY@F=t##OC>(d#no^Lj%tZ!<o$*\]'Ig2S]c#JPf^l0+^\"l;aZWL..aDq]q4IA[JL2>Q2s3X/SV_c
%^1F.OS#N@]9j$4L</SH"BeVJ:Aof"JdM/(t%gl\oC^$k6K5&'%X'(:>oG20e3YRo!MFr9?;mhr)="bOZ7H3l%9+^9;A/-2db"IXM
%?-Q1K2g%BU#fAT;W%'F%VdEH;V$/MJeQP4=*9'@!O&"5-QMi,HbrO3OmC]QH&nW,8nER?!D5G2q4'c&^$gMhVj\5,]l:TgqLJ2-U
%4ad]"FO-4#mFYEAZ^R/Xq:iKOB\K(6Mn$O%'r:_+lqdWYWIL@[1?4eAJ(EfGL*<%DgP*q[#2Ch1&eBob-7EmOR.,Y!6u94Z-g+7"
%9foU`]%(XbFerG'lVNG?iT?iHSVsHoosfSP8c4J^dn]1#Hnar`VXqoH6nKtr[h6$9I`Q=nbqGXQ-DI)4:,Nb45I-`8Jc]NjCj,gS
%b,M881m\]Q)i8l%7GUkkCB@4/6,K!4WZrM"Me]7a?T1emcm(^#[$>N\.G?;/Ggf0/(HZDZR^O/nc<(fi/h6B/Wp)(_A-.6>'-La6
%Y--:L!j8]eTCB0F&an!mMaOX1q+SY1'G_dV+>iI7k]AS':Gu-P6<mo05>tUA.rHj%Y-_9>'_OFA_bcRU=u2G?kNSDkdW^!Ldp%-3
%$34)g$=cG?4iC/E[)9A.1g\'pF>t45Dn/$X24(\QRqjX3rU!484l;NjZo#Wje;Vdm,k>/!9LS-X#TM0*e*Y1SR00BD3UD%i9TlqL
%YFhLP3UajR1d4R"cDK7O3ft3UkV[J:J6YMsT(a"@\IWh2-,fB.PK)Th/.=r2D@-bKoj8apRH]e`Eq(A1jR_<eN9LK/8kTe$_Ea=q
%l`^ttlR6R;R:SJTUOu'7>F]RNU!NNJLT<##FKumVID&;lMRO]M(lE&FMF)n42>i*s]Gg^)d4IO`9W*U$*H0u0QR).WN(,$Ws((ZD
%&KW[a<+Ek2r'QD\;[Q-@^s(+;TrWB'\706m>:.Nj;!qFRdigZ6-o@!h#P]7`,8bMJnB%?f*gjn'YT9,@W$]tjU.b2)s-4Mgk7#S4
%j2atBV)mA3UCPX+7et%2j&(,KIkkTR,^a(hjrX6*9u0Vf3F`uD[i+mes'ddT_7h\AE"oTRfT";d%)Yq'R:^]SN<^so\pZccr@dCH
%?c`E1a'(AD3FN5p>!TfFH_U,^i\.g)ZeM@jlAJ"E!S+>99S_DXmQ:p<dBLAMR"nn+dP=oLjq3j"mpa%n]e2K.\QsUL$EcAJCGoe;
%SkdLu9h.9rc5$@#qZt3#"M1qW+SWOY4h$1A-k;XCJ^:sro(:T9I/'N&Y"u5A^k[se73^(0NP8VQKg,:,1H5e7Z-h?gP`M$!r856B
%GOg:]'9i#6@IEZA_)(e0n7"POLt+(KH2kB'.Cj!i528Hk31fO\J1nVIU^su5b^QE0kOXTh2^bHHd+k:Y-3V]IZOP3OE2Ta42etKY
%niA&C^Y#[i5#ubeP!;(%]*l1j,HW"/RG?aZ_>2S0!&iU360I,TkZ4o7+D6WBI<`X1"^@5X4J&/$FrjH:&AVB):cm!9lpNq]LJP7I
%aW'Y!4d.h[^YP<jiR=J2VGkBpBM])V`:M\=BVD!U$+I\<mS&jdIJ$IB`9V2<'YsZLdV"R^$gchtDJ/Nk47WDNp;>Dg/6ojp%%!j9
%]=<m-m;M_G)Thg?cYOp'^\s@]o(Y8BHn^UZ&m+FN242f*3+!GBBoeN`g+u9n\VVbVW]V<[^cl-uEe+#f;aq,a1Frcm"noc[ehaJ)
%Q/hrVBKse4Z=>r7TmNFSlheCcFT<DB'<pWJ2mCo5eFNdfe.P]J%R'SbCC1=>ajeqX]&o<TGdFV)AZFoOEkBceeWMT@k`SCKcohRH
%-#m5[M-lXrj\h9UgrS&F\RJ!)>Ioj^8*FH`&Zs6kg[P]iD!a*=XL30,q>tL_=P&]23.b?AeTJh+&S*=ofD40!]P[q%bpq/57pKiU
%AJ2GIr4&?LX:653!6j"l^ojlG2P/m#Xj+ocC%ERpXJ\5lE'/$9[NCqQYY`AmmPW&qjU!$_9^Be4mb^1o8mu:L@9<$3XX@]"=$ocg
%]C@[',XI&taR(4V(XktAaV.t_F3BC^<af.:e^.$aEJGnlrgEZ/g#$)+WTc8];7eF(9'M<$O/Umc;q,\M0;/`'*ng]geMT/J`)Lmm
%NYNKTkV=_@9!5\2Cf!/+pb5OK[[jtjrO59'",2eZD5P>@)6V4DZbrLo&m]j;/@7)ZeVs<?@bs7['2Rt/3_&>EbS`KW\1Viu8,<O^
%?cL>^B2$D&i\M1LnEIo)88`ES-c;1:j9G^amKiW8\u-kpjiso!4l4ME8]gGQgmHUNm%:/qZm:+Gj;<+/9R#")4&8dc&9KrR1Ujmm
%mCl>F0fLN2FAKD<WOe3/V$c%8jb)A4Skd"6>"hS9I[V&$96u_2=UHiV9D5j\G>@0Z9XVXcQe#V`VSSM($E!)B-'N<Y23)$"-M=a;
%c'Hj(_P!;GW<YeV.PE@tCJZf`]]&ao"E>@4*!WD%P#d5RO]q`Y2'SUUni&AQC%2n^X@Qts,?8GL.t+DRioe*T[Di.Ykp@tu[iHc%
%Dfb6lH)?@d_K(reDpqc[>&;A]Q8AQ$W@XnBj@j&4Y.hO<W.nBQ\acVQJYTdG.'70l*jsY'gXMOX=LV"AC$,0k,a2s$3sN330?&&"
%\4tp.c&G5Ta:'lDV4,oqQD<O:7E%ZeN3DPaH:uHMgr&_&PbtstSga!=D=4ZEDEDV/AS/IBijDk_U4#o,'u&m*q8&"`GNn6BCMl1"
%a!i1tDE2_TTtB+dLPd3epn8^BFr;!LgqDrJGHE1J!MF`tQ]H9=\9"[^]dR/<rCA"")ONV)"*3"j,!Gk*bt"5RdS'ECO!i,8IaEgJ
%Z+Ih#*GO==7X_,l1O.rIW@rZ])dIZF7G&."?BXcc]@Ek#M:KL[jC1N$X&3mupTPRD+?Y9BreBSR'=*guT-_.Q$.B/=G<PRP)V+K/
%p$%>$@5_lb[p,pSkO.TW9MNE1RlPD[$=?XBURrc?1j9"L8dX5fI2J_l"H3Q6B<]IfYo^&o@#p]&IdWS!#(8ZAF!nLS,>:XJ(\b-Y
%q2sIU)=CR=:cW#P:?W$Z>(@onHgPbO>#&!0CBF*Gjkmfu8%J/t[.)]Q@1U\kIt?T3RP_U2S(":qG,/`"]3Z6@28b43/=dlaRUZ,P
%KY?;^(Y>4pkMS"tA,Z7-$hKK@<I=\[2r;H$<1PWCHK0;$'q(6K[N1.;B5:CTHj,0(aTBn;fT5Ta,gWuMTA%0Pl^OTVE%GTt-_rIV
%]k0-63p)!D1%"K>nE=:L)JP3f\?c8.g%Z4nE5s'a*gnh/HA.hE50JC'j#nqb(*V/EQkZH,fTKLqn*PpB@q969if6,F,^XT.N.n,#
%0IBA(oro\:boTn2?S0Mci?d.5g-b*.k592$2tt(_K;H*`-@GYQ$q]t@_N5JT+RDY`U2;^Kj+D!K`LmsPnO'Um(M9Jr,VtU5gor$b
%TAC[6-S.i'2t\Bs#5m*M)--c.T(D47M2@nG*epJpNV8tAir6X.PgjWECNok,hg#'FMa0DFHHaG8]0jT>;r-h4;@KO[.4G]F+#,*r
%pc@A]"9bHppA)3;H3uQg=7\5X)68rU.2]QZ3+p*sPU*eZK`B=6a[j-c8)3_%/0-$Gn1s4Oae3^qhCi\:8PC!ZVW40`/Z.Q]mHKMr
%_u2?>e;Oo5iNOX$`/*s"^'\@Jk+d:C,Ff2#,Cm+]'`iSCJ`^dV^Rm$s%7tiK\03:SG./g_j/+oVj-H9Lbi;6%Z__1s4&`YWcc$>b
%l/T;p.=Ynf,itXn\VZ3NOI5tm=u`0bK!+#+g$XTjoJPe:\`)?R8[nN+4$7A1kmh\t@ctWLhPY^4dZU"K+r)-g\bNf(FNF7(*QqOK
%ee'"GaOUqhMS;1(&Kf-PD5HmCKXodnTQ46g5Q?/td,0`2YYko;\t%rRMP+2]gX=`HBR4lErU]sm/D+t1g5Ot.L<2Ul<gQ(<%nA;\
%6LI`-]9$;riuCF8W"*nnW;S"T!s@5?:+*iC4j7>)#:oXSfKul@2`J4l]AuapCKl8Uf^-pCd#;E(P:inSb^P\'A\Ca.m,5'!m9)3k
%s/p/^o)#@[\!MQ(.NRW5#K^k+>R9]][%L[fRDBXm$d86K-3h.V1)u5On\Sm>)RM)bV,4ggVL]\WB.h^73r5AphP\_.Er@LD]GfOi
%_<c`UH;(V2PI%#TUPqt_8@4NP_98k-b(Jgom)"!AN`ch'B\1AS)m*HND=ff(8=qo<8K?sP$=jT"\6,4X<kPt&rJ=ftV/6H9RF#Rd
%L-7B86I$4UC;;)S(-=4Dq9XE#$Mo"ilU`!.emr>r7Q_\SA?LuI7Df<j5j#d-g81DIL7Qpo7T8l;rkN2rI;4ruk*g)ejrF7-#r^LW
%&EuiSI"h5@SUgdFjW<7J;_$c91n6(4`hR$G-5#'hpg,Y$ZDO_sDe9%bgI%`MS94N+<[N.6>dH\B7KSil9s<STJ^r0!#!GK%C89F4
%Oj3[R?P?o!8V$3:O<&Hbke2jlECp=Q@-fr.V'[SkPbH8c6%>c/EgVkR7m..3AGaKGNTaK'o"(BB<&*4WM1cOYdSPW43em:H3mecZ
%gd/Dek%^UM%$OH;Bqnd"*jo(X$t9HLB]97(_8<jD<jARrdF:JR]I%eg^u*ScB;)`WWP,82lk@'8E.Uma>+LZ.d$KXO>1nOD?E<X#
%K;53X28XW8kj]=tfM:\M"-B&b@FJQRp?6s]<I^afSX)<Q=;4m1'?qD;+FEL)U:S[)fNCf=;q9G\/<P`@FkC:WMl5U<<OK=UYIu*?
%B7G9cY@lJ)'mW2Ykr:ME_[-SjD]dCA[\-AKNO0)DIF#aTfX/bje]5(5(-I&ck0cbtX<RBV>K%bLNVsP;^uNdQJo9"2O$KTAi>O+m
%^PQF1"W7L49`7\3*A]?D/Y*&FG4?\+7[dC;)]5h[\<rU36?(S?#$su\i\lG>$5J*M@:F^.+Eb0=[*XDB5!&2]FVYtu'*UgUY`fi=
%nO4e9U];^H2s7JbO![?JhZ&6I[A,DBXL+@iG$YFTG+AScO&UP[5X5-AFLsB'Rb6UZn-[mi<gq(mlo:fo*<r5e.[iGIg?:OTV-)kD
%AP'=aXTf\$b[*sk<P#E0C"YU>G"TZOU>:[qI.h%TdePXG'_\B<=BK>9'2pDWkpFA:&rW6Mq3\sAh#PM_SCg(HLAn9aZB,0ET0W\<
%FWrakg[0\n"*Xh7TMP5kZQP:G222947Bhn*]0>KF(gLfHSEkJ]9sh@I398!-.R(n4:6`h3A!^>E#'e@:Q(kE"!=',!;oqFE2VLNQ
%+D+(0lrqNTej9H_?J9&DETi4t"[BC..,:Q&g6Zn06`*o;,.aG4,JM&!<A[A.5%+gt+QI,gLe05)Ofib*FtWCs?ECdY."O5:09E;Z
%&6[P&nB-D`@:STTocWZIZp,gd0$^*ADc)r><`UkkK0B8n@j]msV`8"%21\5u7cp>jBsJs/"s-F9f\261F>UT2Jl9Bn;]YRQc--dp
%2ZdcoN5#*H]6]C7UtVJJ>7mPLX`c_"K;Xqjp1+B_3CUGf:JIB(fgS7I)e#KnYt08PV"#V3PMm'U'#e1"JMg.1@nP?TK4I+AR$383
%#/XtgZuUAUV3$.T@_[#K'4B?OE!2lp+as]2FR5I='ZP$oG[4/M7hCiE._jPrp3Som-WpQ#?P@moTe?XgBh_CX#M(p+a(>um:0bWf
%'*lkZ+hd.q%__nf/rJ#`0aGg&17[ZJN@i4'o_!8C.'2[]Z]o0;\>1k,aU?3"5NY;\E?1%]Br$FS_^D!L5!@ZB'?OfZm.\k/;Ud/o
%6+0pl0q<*8JSa1"?+O&%)cC>0b2S-)[EBkYM9ENkVHndqoZuP_<QI/'\u!2+gMg(b8,7&`Lp=.PfSQKLFA)).:CPq(o'O;>]=<Zi
%X#"XqlYr2O:CtQ-SYE$F@;,_8Thc6m]+/<[g+%]*Lo4_ZA%:MJ6jU<QR[0Er;pUJtN<f]`^4mu`::=0;Y?E'?%AI4dYVglflal&[
%c@&YdV1Gk)J&2dmZar!mAp.6WE:`3[=;sYO$5F5ha/#[X#OfWNfh^gWBkq`i>k/8_=Gd[A%QgpQ&]#S/AZ6.c.4(gjap*h,T(T*U
%S4Mg^:L>*,'-%1]d8CM_dT0*:5Y">_fs;n*O_^d9&=op0WI19]__au"8k"^EiQuBqbPU4dqA[>391`kS@WofYEbJ=d6:e3!5,;nW
%T(Q(3VY!dj$mf$(c;O(o.]qj:9eu>^\kXAiRYAU%-\2%_M9I-t*u\1<AEN$K5=+MBR;,T!b7A&LL\pQ-!-nZ%m^,^=j3`X6*TG+A
%WnD/88=YuZEDGZ%eKmS,VWc`5)qg+^%CIM?U;ASCr&je56b]`H6]T!gj[m(_5Ds:K]8hNlLFpFJ7\iCFB#r5]hX;A`Kf5RXHd]7\
%4^q+=@1D18oR!cE-uA+5$[M7^h&F;m&_%9`PcjEZQ##S?AP[.\caXk#It"O&H+76j;.fu_Nk(+&Oll@C<s(!(48n0W?JsP+dQ[Up
%F3%-n'!\8$qKY=PB*dmbQLrOoGuWbb,#XoOiTuaX:$T3Zr@R]Jn(b;%f7[6WADEp2h:K#$]Gk$Y0Abq6I,_,)&++VV[NOnc.26'L
%D+W>O@V(D3<"DaI^*+9:.,%i'==T3%F"qr$7)c$KZ*=<m/EM2DYe`C_LCZNoe<7c4iNf#Y6l()\_ZmE"N62Ef4n`t(Kmeq6Gm$S>
%)L8%"+foi,>bt@[X>6eVN(/Fokhd[kQ5;<c+f&NQTWOr)nOiu3?*Qd+dt,*kTuO2*9cAQJOi'N\.I:(;)EsKAgTdCXn7k._.sRn<
%gEg0#qL:F9Yed#W):i=W>o+C0VXt#3#A`h?*V+Pn,O^1U3j;th#'I48YXgJNfIrn]X`@J0)pU^I,IRcOqaL/pXdd!s37n&5hWS7k
%#+R<4-tU0'(Ub?KAn]*K'$`L&;RpBmD8PBML*g,oFo+AsPY`3G4#RT;PWhi&^"E@s/NnJ\cR$)$*a/)r^>pZQatq+cG3S)4Y-Xuo
%=SHZpYAgQ0_LC-Ps'-b#ZQFADEh0AD[e7Pp]r3EefJX[mXPW1UeIW)S?<nU5mh33i)kTG/NXeJ@<`(K,Zs[h-ItpRmm*YDWEO0.b
%P9KQ1MBq4l)g)_BY7UJ$h&OK$Sl7^[?[(dlUZU9mF0buB[8fV9LL>jZ3fBN7pkjO19ghZA7>?\M2T1URBm:'(OO;G1\uG1MhRRK;
%O(oXhA*S[#<P!.E>qb7)3_g93,Tp\DR'3#(2Zmk$F\d6OZ/B5\[EaX!YX(bO&-In0]7FgE`@fE1&EZRs6Roe!2i3VBqk0aGD-aoq
%A;`h5S2*k54rf=U/4=YuZJ9[W^Is*Y*_DpYZ%Zr80aVt2'WP3Eb)2;6@i]T1nmZ-Jn>X;R7[&Qc()F`cB/dWNo;=srQ>YZ-2cSIF
%6q!9SjE8Q$mhW9'\aT;e\-LUn%)#d<Pal,P5@@j6(+S#QHQn:-&E>[nO).;2:CldbV%(/8!8o>R>6j^O@<J6<Cm$AP1dBB$^q]!t
%/hf(6lV4OEV`e4NCPAsd\)B0C*TeU5(EFp)#hEkZFs+1gZ/SG`gusKArB(4<%[g;:?(:T:"n4-3T&(7bF\Au*"2BRu\7IhXBj&$O
%Y/_q/W#+*g%oH4BfSikk"nI]195m\c81n,8Q36%KGO^;@*<8s1VH>p%'[?>JKOOUcJ2CfLL'?9]JT3-^D\+%[[qb(<Jb&jh.Y%gg
%'\<n$<",b?":=j8m"/SZa["&q,Xjm#QNI`QK726Xa1\EkS70fpY0ka$VKP9,TX]US5tLJFkV;$V]X2I#O[XJ22l[Yon92IV)2MSj
%m_2d46bp<e?VA"U4[T3K*5h"3JuuJ]lF]L.D`W\9N4(7`U1ZU&&`UA?\IS#61tGYW9:N7HnIr^FM7&1RD+^%sfs,btlLIuF*fJK.
%cOWbZc'dk=%e=]g_!$)YJrL$f;P1,TXD2erikkHn(JW`6BYNFHa)[bJ/:h'Xg7YrZoTVc52RiuHG>ON.d$AX_U1HJVK70+(HEA-O
%F=qAs#0(f209"!<^"*$TdHAs=GXs`KZV;C[6^m)0I,,m/!`1BZ<c=M)<"]a)]_<jVOh,??ah)Ohi*a)J]'CkRl5m(aXKHY^Y;aCg
%cGJ?*&E+!!;'^'%,586lja(\=G)8Stp+=,dO'U8bV:P_,oBPE4HEAh;;A&=T`3Rn2pk_PI/Ku<j2<j:A`^NF,"7=m;nJCjoj$aP-
%[+EeERO4njcK[W@W"OS3Z4s'SSYZR?%\Xs0'QXVbRWjUKn5,Ou:A<5^Or(=)"T[``34kPCaJsH(VQ1Is`*ELip_NC2:d7R$C4>c(
%]4_$9UNLqZ:[HZX2prRkcV/if!W:LH4Y;KJk9%KHV-gft52`V.R+0HR?.qN5Dou\h3LfsE#Yg8,n`BfH%XjM#[ibRn[pOU[pL!sk
%)fuAFT3lsl?&]Qnq01_Dql^M-jU_>A3^s"mc:n7uO7DuVd9@l&.:Eh$DiI1m5$,VhZsIr?d0=cloeP<Z2R#9FQ^14Ml[3<nrWbX'
%q'Z"A?32Cc;IHucO8>;2S$4uVf,@>iJ_b%Rn62OqlqZk,Jr)DV#61>l;#`AE+Nah`<sn<fqGA@]BG5Qeoh#gQ2R#9FLHHs<_!\QN
%pR,]Al;@'VI"Lpeq#liHR9h>Hqs/S]>bV\o7N3426(>)?X_0pFg;*-`*YFuWF1m,hi"NI^bpS;ahXjEkh-]&L(_^ao2qm"$8R%j1
%kI)p\$f&B.(Vc0]Z#*[a`^a)nQ$g?/NOVJpqMi#04'd3?1P[QW^A`<K/>5/iq:U.@-%TA/9DdY$9)JC;XJk]L3)s.r&SmKkNA^i&
%n'?ErfD3g01!2;eP_FNtU/Sq:o@$Hqi6I#;oT$mc=jFZMJi#Fc1X\g&]<tDc"I)S`a+m<k[Fb.em=Q4,ZMO,WKjG'Ci\SY4an3Tj
%q0\GARf,CTC1&[dQp?t9!_XWTV6N_X==,k%//((1#u(oQKT9V1'>cMu@npTU9r;q^4jJbM6l9#Q1l3Om3gL(HSB6GEAO;Sl18/2Q
%A`?"QE\'B!AV3Af==,l@+;6f%#u)njKT9V1'+$Ff@npUECo25(5L-Fa9^#S&o_UMH<K:WW]3I.cA!t\]ekG:p;qY`IW>s*BZ^WEX
%3gL(RWg%*s=.^RA?&?':Fn1?QNfR/cI!#V_rTXaL2Xba)5"O\u$F8F:Pt:<-MH@r%<tM70.is#O\q2nI>sWkQ\q2oEY+WI6?0SoG
%pGtNb/\AUlV*=aKEHV*+DHE/<VQ7lhmoNSP`mkg"\#[\De(*QUpT)J/rT`tJa]Fgm`RX&\]Nnf/W)m&^`RP\cSBk9I?X;RHa81j0
%G5D6@K6>eoZi@"AXNUC"\$>pVWA4?=2<OFcra!hiItVI[5Jf5.LX5mijTcUg1&(H%Q_/_e5AY*3pNt_grT*g[+9/_J_d@olbFa4Q
%Y?ubUl-fh6&.A:MhgY+]hgG7e&,toss89k9qXX$3YJ8(6^\mKl:N+#Ep<.s"T)Rj+5QBb&ru24Jq1'Rdn?;lhhu)EYr\'gD\#0~>
%AI9_PrivateDataEnd
