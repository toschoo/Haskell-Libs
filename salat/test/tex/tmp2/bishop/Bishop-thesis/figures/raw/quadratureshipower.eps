%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: quadratureshipower.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: RSLab
%%CreationDate: 8/4/2009
%%BoundingBox: 0 0 231 275
%%HiResBoundingBox: 0 0 230.6875 274.1875
%%CropBox: 0 0 230.6875 274.1875
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2008-09-14T11:32:50-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-08-04T10:15:25-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-08-04T10:15:25-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>216</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADYAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqll/Z21zrNh6&#xA;8HrhIbjjWhRamLdlJo3gNjiqA1zUfJejX+k2mqRRwXGrXP1bTKW0jo85FAjPHG0aVD7eoQD26Yqm&#xA;z6LpDgBrKCgIbaNRupBHQeIxVqbRNJlheI2kKiRSpZY0BAIpUGnXFV/6J0r/AJYoP+RSf0xVami6&#xA;QgIWygoSW3jU7sST1HicVcui6Qpciygq55N+7U70A7jbYYq4aLpAkMn1KDkwCn92tKLUjalP2sVc&#xA;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&#xA;2KuxV2KuxV2Kv//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:6C3790022F82DD119997F45A17949884</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:4B570B410181DE118034A2E821BE09D1</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -274.188 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 274.188 li
230.688 274.188 li
230.688 0 li
cp
clp
[1 0 0 1 0 0 ] concat
.1875 lw
0 lc
0 lj
3.23931 ml
[] 0 dsh
true sadj
30.6875 40.625 mo
230.125 40.625 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
@
30.6875 125.75 mo
230.125 125.75 li
@
30.6875 211.813 mo
230.125 211.813 li
@
.75 lw
2 lc
1 lj
35.5625 43.6875 mo
35.6875 43.6875 li
36.2236 43.6875 36.8516 43.8374 37.3926 43.9155 cv
37.8794 43.9858 38.3657 44.0503 38.8506 44.125 cv
39.8022 44.2715 40.793 44.3843 41.7324 44.5845 cv
43.6113 44.9858 45.5137 45.2793 47.4141 45.7485 cv
49.2012 46.1895 51.1543 46.6245 52.8706 47.313 cv
54.6216 48.0156 56.3281 48.6211 58.0176 49.5405 cv
59.6699 50.4395 61.2188 51.3926 62.668 52.606 cv
64.1328 53.8325 65.4536 55.1406 66.6333 56.6401 cv
67.8911 58.2402 68.8262 59.9985 69.8672 61.7344 cv
70.9629 63.562 71.7744 65.564 72.9053 67.3423 cv
73.2983 67.9614 74.1216 69.4272 74.9482 68.5513 cv
75.6523 67.8052 75.8989 66.605 76.125 65.625 cv
76.6118 63.5132 76.9058 61.3711 77.2222 59.2285 cv
77.5479 57.0229 77.8267 54.8022 78.0562 52.5845 cv
78.2798 50.417 78.5669 48.2529 78.8511 46.0928 cv
79.1377 43.9155 79.3921 41.7402 79.7358 39.5713 cv
80.0728 37.4438 80.4336 35.3418 80.9375 33.25 cv
81.3027 31.7344 82.2109 28.25 84.332 29.144 cv
86.0986 29.8887 87.0913 32.1216 87.8828 33.7622 cv
88.8384 35.7432 89.2134 37.853 89.7446 39.9785 cv
90.2676 42.0708 90.396 44.2813 90.6807 46.4185 cv
90.9766 48.6357 91.0454 50.8813 91.2573 53.1069 cv
91.4717 55.3599 91.5591 57.627 91.7803 59.8799 cv
91.8271 60.3574 91.8257 60.8398 91.8755 61.3169 cv
91.9155 61.7007 91.9194 62.585 92.1875 62.8745 cv
92.4976 61.7979 92.5005 60.6123 92.54 59.5005 cv
92.5762 58.4893 92.667 57.4805 92.6963 56.4692 cv
92.7656 54.1147 92.8521 51.7607 92.9365 49.4067 cv
93.0176 47.1533 93.1006 44.896 93.231 42.645 cv
93.3584 40.4448 93.4873 38.2461 93.6108 36.0464 cv
93.7246 34.02 93.7686 31.5371 94.625 29.6875 cv
95.2256 28.3896 96.23 29.5078 96.7178 30.2798 cv
97.2793 31.1699 97.6133 32.2793 97.8052 33.3237 cv
98.2129 35.5454 98.3271 37.7959 98.4849 40.0483 cv
98.6353 42.189 98.6592 44.3306 98.7358 46.4741 cv
98.8135 48.6455 98.8286 50.8154 98.8799 52.9868 cv
98.938 55.4692 99.0088 57.9497 99.0498 60.4321 cv
99.0601 61.0298 99.1133 61.5928 99.1875 62.1875 cv
99.2891 59.7925 99.333 57.4063 99.3594 55.0088 cv
99.3853 52.7212 99.4424 50.4336 99.4902 48.146 cv
99.5313 46.2046 99.5127 44.2607 99.5796 42.3198 cv
99.6626 39.9082 99.6929 37.4932 99.8555 35.0859 cv
99.9258 34.0405 100.015 33.0435 100.195 32.0112 cv
100.275 31.5493 100.354 30.7773 100.914 30.6875 cv
101.379 30.6128 101.81 31.1191 102.032 31.4702 cv
102.573 32.3228 102.633 33.5503 102.729 34.5581 cv
102.829 35.6089 102.845 36.6577 102.88 37.7129 cv
102.964 40.2051 103.021 42.6914 103.053 45.1851 cv
103.064 46.064 103.129 46.9355 103.188 47.8125 cv
103.218 45.6196 103.247 43.4272 103.301 41.2349 cv
103.358 38.9258 103.33 36.5972 103.514 34.2954 cv
103.573 33.5552 103.513 31.5337 104.594 31.8125 cv
105.756 32.1123 105.695 33.5615 105.791 34.5552 cv
105.833 34.9941 105.851 35.4351 105.875 35.875 cv
106.024 34.9063 105.915 33.8306 106.25 32.9063 cv
106.458 32.332 106.839 32.5127 107.33 32.6655 cv
107.727 32.7886 108.196 32.9727 108.313 33.437 cv
109.021 32.8569 110.202 33.6353 110.961 33.814 cv
111.904 34.0356 112.84 34.2842 113.749 34.4985 cv
115.598 34.9336 117.525 35.4258 119.375 35.7505 cv
121.26 36.0811 123.166 36.5889 125.038 36.9375 cv
126.927 37.2891 128.786 37.7646 130.684 38.125 cv
132.575 38.4844 134.406 38.9888 136.267 39.4448 cv
138.099 39.894 139.989 40.2622 141.817 40.8745 cv
142.181 40.9961 142.904 41.4111 143.313 41.2505 cv
143.828 41.0479 143.518 40.0688 143.814 39.6899 cv
143.884 40.1904 143.88 40.8779 144.133 41.3247 cv
144.356 41.7207 144.96 42.1045 145.374 41.7515 cv
146.037 41.1851 145.845 39.1899 145.873 38.4224 cv
145.959 36.082 146.018 33.7461 146.053 31.4043 cv
146.056 31.186 146.06 30.9683 146.063 30.75 cv
146.298 32.9878 146.215 35.2466 146.319 37.4946 cv
146.371 38.6045 146.341 39.751 146.558 40.8428 cv
146.634 41.2271 146.707 41.9775 147.082 42.2065 cv
147.632 42.543 147.766 41.6807 147.845 41.292 cv
148.291 39.1099 148.178 36.7759 148.253 34.5557 cv
148.336 32.1294 148.375 29.7021 148.425 27.2749 cv
148.47 25.0474 148.465 22.8184 148.48 20.5903 cv
148.496 18.4688 148.529 16.3491 148.571 14.2275 cv
148.589 13.2974 148.607 12.3677 148.625 11.4375 cv
148.68 13.7217 148.719 16.0059 148.756 18.291 cv
148.791 20.4614 148.82 22.6313 148.841 24.8022 cv
148.863 27.2188 148.907 29.6304 148.975 32.0459 cv
149.034 34.1582 149.052 36.2637 149.252 38.3691 cv
149.356 39.4648 149.373 40.6045 149.719 41.6563 cv
149.864 42.0996 150.188 42.8477 150.608 42.2363 cv
150.882 41.8394 150.979 41.105 151.048 40.6338 cv
151.359 38.5054 151.41 36.2803 151.461 34.1304 cv
151.512 31.9434 151.613 29.7578 151.644 27.5708 cv
151.678 25.0767 151.728 22.5835 151.783 20.0898 cv
151.834 17.7974 151.878 15.5049 151.925 13.2124 cv
151.968 11.0742 151.955 8.93457 152 6.7959 cv
152.03 5.32568 152.041 3.83887 152.188 2.375 cv
152.303 4.56982 152.329 6.75732 152.375 8.95508 cv
152.423 11.2324 152.497 13.5088 152.529 15.7866 cv
152.56 17.9536 152.615 20.1182 152.693 22.2847 cv
152.778 24.6201 152.809 26.9614 152.941 29.2944 cv
153.07 31.54 153.161 33.7798 153.37 36.0195 cv
153.47 37.0859 153.593 38.1528 153.801 39.2031 cv
153.958 39.9937 154.119 41.6748 154.856 42.1475 cv
155.754 42.7227 156.014 40.2236 156.11 39.6982 cv
156.309 38.6211 156.446 37.522 156.518 36.4287 cv
156.669 34.1226 156.862 31.8174 156.991 29.5093 cv
157.114 27.291 157.164 25.0669 157.249 22.8472 cv
157.336 20.5981 157.413 18.3472 157.528 16.0991 cv
157.643 13.8696 157.729 11.6426 157.863 9.41357 cv
157.896 8.87939 157.896 8.34229 157.938 7.80908 cv
157.973 7.38037 157.942 6.33203 158.25 6.00049 cv
158.619 7.01758 158.611 8.27295 158.719 9.34814 cv
158.823 10.3848 158.895 11.4429 158.951 12.4839 cv
159.075 14.7417 159.206 17.019 159.442 19.2681 cv
159.672 21.4473 159.794 23.6436 160.084 25.814 cv
160.374 27.9917 160.666 30.1909 161.132 32.3369 cv
161.551 34.2656 162.129 36.7988 163.468 38.2798 cv
165.374 40.3887 166.479 36.4072 166.844 35 cv
167.39 32.8936 167.686 30.7539 168.087 28.6138 cv
168.496 26.4351 168.633 24.2109 168.996 22.0244 cv
169.352 19.8843 169.452 17.7036 169.822 15.5649 cv
170.202 13.375 170.451 11.1733 170.853 8.98828 cv
171.045 7.94824 171.269 6.89502 171.69 5.9248 cv
171.892 5.46338 172.034 4.89941 172.539 4.75146 cv
172.987 4.62012 173.371 5.07471 173.633 5.45264 cv
174.808 7.146 175.559 9.21729 176.443 11.0786 cv
177.334 12.9541 178.271 14.8701 179.486 16.5737 cv
180.611 18.1499 181.697 19.6616 183.137 21.0117 cv
184.496 22.2866 185.992 23.4175 187.626 24.3765 cv
189.256 25.3335 190.962 26.0503 192.692 26.7495 cv
194.489 27.4761 196.291 27.9785 198.108 28.4302 cv
199.954 28.8892 201.841 29.3276 203.746 29.625 cv
205.654 29.9233 207.573 30.3794 209.545 30.522 cv
211.489 30.6626 213.488 31.0488 215.438 31.25 cv
217.424 31.4551 219.434 31.6621 221.405 31.813 cv
223.421 31.9673 225.416 32.1274 227.438 32.25 cv
228.34 32.3047 229.229 32.4209 230.125 32.4375 cv
0 0 1 rgb
@
35.5625 42.6875 mo
38.187 42.6875 40.8115 42.6875 43.436 42.6875 cv
45.9702 42.6875 48.5044 42.6875 51.0386 42.6875 cv
53.5742 42.6875 56.1426 42.7388 58.6563 42.625 cv
61.1982 42.5098 63.7686 42.6177 66.2739 42.4995 cv
68.8721 42.3765 71.3848 42.3135 73.8735 41.875 cv
75.147 41.6504 76.3755 41.3032 77.6875 41.25 cv
78.9805 41.1978 80.2554 41.5405 81.5015 41.7495 cv
83.9307 42.1577 86.6143 42.4766 89.1011 42.1226 cv
89.771 42.0273 90.4521 41.915 90.9966 41.4414 cv
91.3721 41.1143 91.9722 39.7988 92.4614 39.8125 cv
92.9761 39.8262 93.4673 41.1538 93.812 41.498 cv
94.3296 42.0142 95.0054 42.2163 95.689 42.3125 cv
96.4058 42.4136 97.5127 42.5479 98.1265 42.1216 cv
99.084 41.4561 98.6519 40.1328 99.1885 39.252 cv
100.073 40.2583 99.1338 42.0957 100.898 42.5005 cv
101.313 42.5957 102.077 42.667 102.461 42.4561 cv
103.123 42.0928 102.89 41.292 103.188 40.688 cv
103.275 41.481 103.329 42.3462 104.164 42.5811 cv
104.642 42.7158 105.72 42.7925 105.878 42.1909 cv
106.457 43.0601 108.572 42.6875 109.561 42.6875 cv
110.832 42.6875 112.103 42.6875 113.374 42.6875 cv
115.916 42.6875 118.459 42.6875 121.001 42.6875 cv
123.535 42.6875 126.068 42.6875 128.602 42.6875 cv
131.138 42.6875 133.675 42.6875 136.211 42.6875 cv
137.481 42.6875 138.753 42.6875 140.024 42.6875 cv
140.654 42.6875 141.283 42.6875 141.913 42.6875 cv
142.234 42.6875 142.558 42.6968 142.876 42.6821 cv
143.142 42.6699 143.586 42.4331 143.781 42.4336 cv
144.179 42.4346 144.654 42.71 145.156 42.6265 cv
145.801 42.5195 146.03 42.1191 146.063 41.4385 cv
146.338 41.8701 146.216 42.2905 146.749 42.5005 cv
147.017 42.606 147.605 42.5322 147.852 42.3545 cv
148.593 41.8193 148.404 40.3667 148.625 39.563 cv
148.814 40.6958 148.739 42.7695 150.406 42.314 cv
152.021 41.8726 151.358 39.9272 152.126 38.8794 cv
152.9 40.2075 152.428 42.291 154.594 42.125 cv
155.273 42.0728 155.942 41.8125 156.477 41.3379 cv
156.856 40.999 157.352 39.7441 157.937 39.75 cv
158.46 39.7549 159.093 40.9395 159.5 41.25 cv
160.064 41.6807 160.719 41.8413 161.406 41.9375 cv
162.637 42.1094 164.003 41.9966 165.212 41.8311 cv
166.494 41.6553 167.74 41.3071 169.023 41.25 cv
170.358 41.1904 171.576 41.4224 172.812 41.689 cv
175.299 42.2266 177.815 42.3833 180.438 42.5 cv
182.959 42.6118 185.493 42.5024 188.039 42.625 cv
190.536 42.7451 193.117 42.6875 195.648 42.6875 cv
198.182 42.6875 200.715 42.6875 203.249 42.6875 cv
205.782 42.6875 208.346 42.5747 210.876 42.6875 cv
213.384 42.7993 215.946 42.75 218.476 42.75 cv
221.016 42.75 223.555 42.75 226.094 42.75 cv
227.438 42.75 228.781 42.75 230.125 42.75 cv
1 0 0 rgb
@
.1875 lw
0 lj
230.125 80.5 mo
30.6875 80.5 li
0 0 0 rgb
@
30.6875 80.5 mo
30.6875 .75 li
@
30.6875 .75 mo
230.125 .75 li
@
230.125 .75 mo
230.125 80.5 li
@
0 lc
30.6875 80.5 mo
30.6875 79.3125 li
@
40.4375 80.5 mo
40.4375 79.3125 li
@
50.125 80.5 mo
50.125 79.3125 li
@
59.875 80.5 mo
59.875 78.5 li
@
69.625 80.5 mo
69.625 79.3125 li
@
79.3125 80.5 mo
79.3125 79.3125 li
@
89.0625 80.5 mo
89.0625 79.3125 li
@
98.8125 80.5 mo
98.8125 79.3125 li
@
108.5 80.5 mo
108.5 78.5 li
@
118.25 80.5 mo
118.25 79.3125 li
@
128 80.5 mo
128 79.3125 li
@
137.688 80.5 mo
137.688 79.3125 li
@
147.438 80.5 mo
147.438 79.3125 li
@
157.188 80.5 mo
157.188 78.5 li
@
166.875 80.5 mo
166.875 79.3125 li
@
176.625 80.5 mo
176.625 79.3125 li
@
186.375 80.5 mo
186.375 79.3125 li
@
196.063 80.5 mo
196.063 79.3125 li
@
205.813 80.5 mo
205.813 78.5 li
@
215.563 80.5 mo
215.563 79.3125 li
@
225.25 80.5 mo
225.25 79.3125 li
@
30.6875 80.5 mo
33.9009 80.5 li
@
30.6875 79.791 mo
31.875 79.791 li
@
30.6875 75.439 mo
31.875 75.439 li
@
30.6875 71.0874 mo
31.875 71.0874 li
@
30.6875 66.7354 mo
31.875 66.7354 li
@
30.6875 62.3838 mo
33.9009 62.3838 li
@
30.6875 58.0322 mo
31.875 58.0322 li
@
30.6875 53.6802 mo
31.875 53.6802 li
@
30.6875 49.3286 mo
31.875 49.3286 li
@
30.6875 44.9766 mo
31.875 44.9766 li
@
30.6875 40.625 mo
32.6875 40.625 li
@
30.6875 36.2651 mo
31.875 36.2651 li
@
30.6875 31.9033 mo
31.875 31.9033 li
@
30.6875 27.5439 mo
31.875 27.5439 li
@
30.6875 23.1821 mo
31.875 23.1821 li
@
30.6875 18.8218 mo
33.9009 18.8218 li
@
30.6875 14.4624 mo
31.875 14.4624 li
@
30.6875 10.1011 mo
31.875 10.1011 li
@
30.6875 5.74219 mo
31.875 5.74219 li
@
30.6875 1.37939 mo
31.875 1.37939 li
@
30.6875 .75 mo
30.6875 1.9375 li
@
40.4375 .75 mo
40.4375 1.9375 li
@
50.125 .75 mo
50.125 1.9375 li
@
59.875 .75 mo
59.875 2.75 li
@
69.625 .75 mo
69.625 1.9375 li
@
79.3125 .75 mo
79.3125 1.9375 li
@
89.0625 .75 mo
89.0625 1.9375 li
@
98.8125 .75 mo
98.8125 1.9375 li
@
108.5 .75 mo
108.5 2.75 li
@
118.25 .75 mo
118.25 1.9375 li
@
128 .75 mo
128 1.9375 li
@
137.688 .75 mo
137.688 1.9375 li
@
147.438 .75 mo
147.438 1.9375 li
@
157.188 .75 mo
157.188 2.75 li
@
166.875 .75 mo
166.875 1.9375 li
@
176.625 .75 mo
176.625 1.9375 li
@
186.375 .75 mo
186.375 1.9375 li
@
196.063 .75 mo
196.063 1.9375 li
@
205.813 .75 mo
205.813 2.75 li
@
215.563 .75 mo
215.563 1.9375 li
@
225.25 .75 mo
225.25 1.9375 li
@
0 0 0 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
def
/FontBBox {-568 -307 2000 1007} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/a <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550D
EC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B
177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB33
3E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB
0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70
BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895
DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737
B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272E
F1EF1464C3F0D45D7CBB8749AF571E09> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NCDNMP+TimesNewRomanPSMT /TimesNewRomanPSMT findfont def
/NCDNMP+TimesNewRomanPSMT*1 
[
97{/.notdef}repeat /a 158{/.notdef}repeat
] NCDNMP+TimesNewRomanPSMT nfnt
NCDNMP+TimesNewRomanPSMT*1  [9 0 0 -9 0 0 ]mfnt sfnt
38.3955 10.9482 mov
(a) sh
.75 lw
2 lc
1 lj
35.5625 128.125 mo
38.0903 128.314 40.665 128.7 43.1636 129.062 cv
45.731 129.435 48.2925 129.944 50.7813 130.531 cv
53.3711 131.143 55.9268 131.894 58.3989 132.979 cv
61.0093 134.125 63.6523 135.777 65.688 137.812 cv
67.7925 139.917 69.4424 142.48 70.7651 145.212 cv
71.4536 146.633 72.125 148.04 72.7813 149.469 cv
73.1206 150.207 74.1616 153.422 75.2896 152.855 cv
75.8354 152.582 76.1045 151.167 76.2178 150.613 cv
76.3901 149.767 76.5278 148.917 76.6563 148.063 cv
76.9224 146.291 77.1709 144.517 77.3306 142.732 cv
77.6494 139.161 77.9487 135.58 78.3218 132.014 cv
78.6914 128.481 78.8984 124.923 79.3564 121.401 cv
79.5884 119.618 79.8125 117.832 80.125 116.063 cv
80.4063 114.47 80.667 112.653 81.5132 111.277 cv
83.2119 108.515 86.7773 114.133 87.6865 115.498 cv
89.5029 118.225 90.4497 121.336 90.9414 124.606 cv
91.4746 128.151 91.665 131.753 91.8809 135.329 cv
91.9595 136.623 92.0142 137.921 92.1128 139.213 cv
92.2026 140.396 92.0298 141.896 92.5 142.999 cv
93.0801 139.515 92.8286 135.807 92.958 132.283 cv
93.0967 128.515 93.2744 124.749 93.4092 120.98 cv
93.4717 119.233 93.5298 117.364 93.9414 115.664 cv
94.1514 114.797 94.4199 114.151 95.3438 114.656 cv
95.9653 114.996 96.5288 115.63 96.9995 116.125 cv
99.3311 118.573 98.9653 122.853 99.0347 126.041 cv
99.0991 129.007 99.21 131.972 99.3125 134.938 cv
99.6177 133.165 99.4658 131.234 99.5 129.439 cv
99.5327 127.708 99.5186 125.976 99.5728 124.245 cv
99.6313 122.367 99.625 120.442 99.8794 118.579 cv
100.009 117.634 100.175 117.026 101.164 117.396 cv
101.828 117.645 102.579 118.022 102.863 118.715 cv
103.234 119.62 103.169 120.846 103.25 121.813 cv
103.324 121.111 103.133 119.121 103.689 118.622 cv
104.082 118.269 105.723 118.808 105.878 119.373 cv
105.877 119.374 106 119.373 105.999 119.372 cv
106.393 118.838 109.145 119.843 109.774 119.998 cv
111.032 120.306 112.281 120.566 113.562 120.813 cv
116.085 121.299 118.628 121.694 121.188 122.125 cv
123.704 122.547 126.275 122.886 128.788 123.375 cv
131.342 123.872 133.865 124.259 136.406 124.751 cv
138.934 125.241 141.511 125.687 143.999 126.439 cv
145.067 126.763 145.916 127.586 146.063 125.875 cv
146.389 126.657 146.263 127.409 147.251 127.63 cv
148.196 127.842 148.137 126.877 148.197 126.127 cv
148.347 124.294 148.419 122.458 148.463 120.62 cv
148.476 120.101 148.487 119.582 148.5 119.063 cv
148.617 120.882 148.608 122.707 148.738 124.524 cv
148.818 125.649 148.729 128.828 150.437 128.875 cv
152.013 128.919 151.653 119.721 151.673 118.356 cv
151.727 114.749 151.813 111.142 151.882 107.535 cv
151.918 105.648 151.957 103.761 152 101.875 cv
152.164 105.65 152.174 109.427 152.273 113.204 cv
152.368 116.785 152.303 120.41 152.686 123.975 cv
152.864 125.642 152.977 127.38 153.699 128.91 cv
153.98 129.504 154.4 130.393 154.998 130.747 cv
155.847 131.25 156.144 130.177 156.314 129.483 cv
156.751 127.722 156.708 125.786 156.847 123.983 cv
156.979 122.259 157.012 120.537 157.096 118.812 cv
157.279 115.065 157.326 111.314 157.438 107.566 cv
157.527 104.536 157.371 101.299 157.938 98.313 cv
158.547 99.8955 158.283 102.135 158.398 103.821 cv
158.521 105.622 158.639 107.427 158.748 109.229 cv
158.966 112.788 159.228 116.331 159.734 119.86 cv
160.198 123.088 160.965 126.504 162.768 129.246 cv
163.441 130.27 164.838 132.157 166.023 130.663 cv
166.982 129.454 167.224 127.409 167.502 125.921 cv
168.166 122.367 168.481 118.729 168.809 115.129 cv
169.122 111.673 169.391 108.188 169.821 104.746 cv
170.265 101.198 170.357 97.5249 171.299 94.0649 cv
171.471 93.4326 171.813 92.2251 172.621 92.7461 cv
173.154 93.0894 173.531 94.1919 173.769 94.7461 cv
174.393 96.2036 174.999 97.6899 175.585 99.1509 cv
176.711 101.96 178.209 104.796 180.188 107.063 cv
182.184 109.348 184.391 111 187.086 112.48 cv
189.429 113.767 192.103 114.596 194.687 115.245 cv
197.205 115.877 199.757 116.294 202.313 116.75 cv
204.823 117.197 207.396 117.443 209.913 117.752 cv
212.431 118.062 215.009 118.324 217.531 118.439 cv
220.085 118.556 222.625 118.817 225.148 118.938 cv
226.813 119.017 228.477 119.207 230.125 119.188 cv
0 0 1 rgb
@
35.5625 127.375 mo
38.0962 127.375 40.6299 127.375 43.1636 127.375 cv
45.7026 127.375 48.2422 127.375 50.7813 127.375 cv
53.3022 127.375 55.8511 127.313 58.3989 127.313 cv
60.9385 127.313 63.4941 127.311 65.9985 127.193 cv
68.6035 127.07 71.1372 127.094 73.6265 126.564 cv
74.896 126.294 76.1279 125.762 77.4136 125.606 cv
78.7563 125.444 79.9824 126.013 81.2266 126.331 cv
83.6431 126.948 86.2344 127.081 88.8359 127 cv
90.4502 126.95 91.4946 126.603 92.125 125 cv
92.2021 124.804 92.3574 123.98 92.6001 123.916 cv
92.9526 123.823 93.021 124.583 93.1191 124.848 cv
93.3853 125.565 93.6514 126.332 94.311 126.747 cv
95.1445 127.271 96.4673 127.234 97.4688 127.188 cv
99.3711 127.1 98.7852 125.81 99.3735 124.378 cv
99.624 125.482 99.3857 126.965 100.711 127.25 cv
101.436 127.407 103.03 127.567 103.25 126.69 cv
103.686 127.787 105.927 127.266 106.876 127.313 cv
108.125 127.374 109.39 127.375 110.689 127.375 cv
113.223 127.375 115.756 127.375 118.289 127.375 cv
120.825 127.375 123.362 127.375 125.898 127.375 cv
128.432 127.375 130.965 127.375 133.499 127.375 cv
136.04 127.375 138.606 127.315 141.126 127.313 cv
142.397 127.311 143.668 127.313 144.938 127.313 cv
145.685 127.313 146.141 127.271 146.837 127.313 cv
147.113 127.329 147.532 127.352 147.781 127.251 cv
148.309 127.038 148.123 126.771 148.422 126.368 cv
148.474 126.298 148.479 126.146 148.5 126.064 cv
148.796 126.671 148.694 127.151 149.462 127.25 cv
149.876 127.305 150.498 127.224 150.852 127.061 cv
151.991 126.532 151.576 124.712 151.998 123.691 cv
152.448 125.261 151.99 127.171 154.163 127.063 cv
155.951 126.973 156.584 126.21 157.242 124.593 cv
157.744 123.358 157.949 124.097 158.345 124.94 cv
158.685 125.664 159.047 126.272 159.813 126.561 cv
160.939 126.984 162.41 126.858 163.601 126.75 cv
166.146 126.519 168.703 125.123 171.219 125.844 cv
173.766 126.574 176.116 127.003 178.837 127.125 cv
181.351 127.237 183.901 127.313 186.437 127.313 cv
188.97 127.313 191.534 127.201 194.063 127.318 cv
196.554 127.433 199.133 127.375 201.656 127.375 cv
204.195 127.375 206.734 127.375 209.274 127.375 cv
211.808 127.375 214.341 127.375 216.874 127.375 cv
219.416 127.375 221.959 127.375 224.501 127.375 cv
226.376 127.375 228.25 127.375 230.125 127.375 cv
1 0 0 rgb
@
.1875 lw
0 lj
230.125 165.625 mo
30.6875 165.625 li
0 0 0 rgb
@
30.6875 165.625 mo
30.6875 85.8125 li
@
30.6875 85.8125 mo
230.125 85.8125 li
@
230.125 85.8125 mo
230.125 165.625 li
@
0 lc
30.6875 165.625 mo
30.6875 164.375 li
@
40.4375 165.625 mo
40.4375 164.375 li
@
50.125 165.625 mo
50.125 164.375 li
@
59.875 165.625 mo
59.875 163.625 li
@
69.625 165.625 mo
69.625 164.375 li
@
79.3125 165.625 mo
79.3125 164.375 li
@
89.0625 165.625 mo
89.0625 164.375 li
@
98.8125 165.625 mo
98.8125 164.375 li
@
108.5 165.625 mo
108.5 163.625 li
@
118.25 165.625 mo
118.25 164.375 li
@
128 165.625 mo
128 164.375 li
@
137.688 165.625 mo
137.688 164.375 li
@
147.438 165.625 mo
147.438 164.375 li
@
157.188 165.625 mo
157.188 163.625 li
@
166.875 165.625 mo
166.875 164.375 li
@
176.625 165.625 mo
176.625 164.375 li
@
186.375 165.625 mo
186.375 164.375 li
@
196.063 165.625 mo
196.063 164.375 li
@
205.813 165.625 mo
205.813 163.625 li
@
215.563 165.625 mo
215.563 164.375 li
@
225.25 165.625 mo
225.25 164.375 li
@
30.6875 85.8125 mo
30.6875 87.0625 li
@
40.4375 85.8125 mo
40.4375 87.0625 li
@
50.125 85.8125 mo
50.125 87.0625 li
@
59.875 85.8125 mo
59.875 87.8125 li
@
69.625 85.8125 mo
69.625 87.0625 li
@
79.3125 85.8125 mo
79.3125 87.0625 li
@
89.0625 85.8125 mo
89.0625 87.0625 li
@
98.8125 85.8125 mo
98.8125 87.0625 li
@
108.5 85.8125 mo
108.5 87.8125 li
@
118.25 85.8125 mo
118.25 87.0625 li
@
128 85.8125 mo
128 87.0625 li
@
137.688 85.8125 mo
137.688 87.0625 li
@
147.438 85.8125 mo
147.438 87.0625 li
@
157.188 85.8125 mo
157.188 87.8125 li
@
166.875 85.8125 mo
166.875 87.0625 li
@
176.625 85.8125 mo
176.625 87.0625 li
@
186.375 85.8125 mo
186.375 87.0625 li
@
196.063 85.8125 mo
196.063 87.0625 li
@
205.813 85.8125 mo
205.813 87.8125 li
@
215.563 85.8125 mo
215.563 87.0625 li
@
225.25 85.8125 mo
225.25 87.0625 li
@
0 0 0 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
NCDNMP+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8
F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9A
F110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D39992
4398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D660
3C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83
F23AED1F56FC130F21> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NCDNMP+TimesNewRomanPSMT /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
/NCDNMP+TimesNewRomanPSMT*1 
[
97{/.notdef}repeat /a /b 157{/.notdef}repeat
] NCDNMP+TimesNewRomanPSMT nfnt
NCDNMP+TimesNewRomanPSMT*1  [9 0 0 -9 0 0 ]mfnt sfnt
38.1768 96.0249 mov
(b) sh
.75 lw
2 lc
1 lj
35.5625 213.125 mo
36.6777 213.479 38.2012 213.32 39.3765 213.375 cv
40.6362 213.434 41.9121 213.571 43.1636 213.688 cv
45.7202 213.925 48.2524 214.146 50.7813 214.5 cv
53.3438 214.858 55.9165 215.347 58.3989 215.938 cv
61.0913 216.58 63.6587 217.499 65.9985 218.997 cv
68.52 220.61 70.4678 222.992 71.8306 225.684 cv
73.2944 228.573 74.1221 231.791 75.0684 234.902 cv
75.2446 235.482 75.5337 237.179 76.248 237.246 cv
77.1392 236 77.0645 233.567 77.1587 232.085 cv
77.271 230.312 77.4399 228.539 77.5181 226.764 cv
77.6777 223.121 77.8945 219.48 78.0649 215.839 cv
78.2393 212.109 78.437 208.383 78.6714 204.656 cv
78.8916 201.146 78.9546 197.567 79.6299 194.107 cv
79.7549 193.466 79.9834 192.059 80.8335 192.663 cv
81.3721 193.046 81.666 194.078 81.9526 194.649 cv
82.6509 196.039 83.3643 197.425 84.1743 198.715 cv
85.8179 201.331 88.1631 202.99 90.271 205.101 cv
92.7231 207.556 92.4766 211.695 92.6689 214.982 cv
92.7236 215.913 92.708 216.832 92.875 217.75 cv
92.9873 214.042 92.9629 210.306 93.2246 206.605 cv
93.2559 206.166 93.1758 204.431 93.5918 204.217 cv
93.9458 204.035 95.0068 205.159 95.3735 205.372 cv
95.9639 205.714 96.6484 205.996 97.2813 206.219 cv
97.855 206.42 98.7339 206.592 99.1636 207.101 cv
99.3228 207.29 99.4111 207.511 99.5 207.748 cv
99.5659 207.474 99.6548 207.203 99.7529 206.939 cv
100.878 206.817 102.436 207.488 103.563 207.689 cv
104.835 207.916 106.108 208.164 107.376 208.313 cv
109.892 208.607 112.416 208.956 114.976 209.188 cv
117.505 209.416 120.038 209.704 122.594 209.939 cv
125.12 210.171 127.672 210.405 130.187 210.62 cv
132.746 210.838 135.292 211.128 137.813 211.375 cv
140.35 211.623 142.904 212.022 145.413 212.456 cv
146.629 212.666 147.895 212.85 149.062 213.25 cv
149.626 213.444 150.306 213.692 150.898 213.794 cv
151.876 213.962 151.678 212.928 151.813 212.125 cv
152.184 213.001 151.984 213.597 152.813 214.19 cv
153.414 214.621 154.107 214.869 154.712 215.292 cv
155.137 215.591 155.925 216.628 156.414 216.708 cv
157.106 216.821 157.032 215.277 157.067 214.741 cv
157.307 211.049 157.347 207.333 157.403 203.633 cv
157.423 202.37 157.462 201.133 157.563 199.875 cv
157.788 203.493 157.802 207.165 158.285 210.759 cv
158.505 212.396 158.899 213.966 159.832 215.351 cv
160.67 216.597 161.73 217.651 162.609 218.851 cv
163.511 220.08 164.302 221.334 165.047 222.663 cv
165.438 223.362 166.771 226.701 167.606 225.371 cv
168.444 224.037 168.329 221.702 168.49 220.173 cv
168.682 218.367 168.733 216.551 168.878 214.741 cv
169.167 211.136 169.35 207.504 169.463 203.889 cv
169.575 200.286 169.791 196.679 170.013 193.081 cv
170.119 191.357 170.226 189.632 170.366 187.911 cv
170.46 186.761 170.379 184.282 171.248 183.444 cv
171.893 183.742 172.074 184.978 172.244 185.605 cv
172.465 186.424 172.716 187.224 172.932 188.043 cv
173.351 189.634 173.834 191.222 174.407 192.753 cv
175.485 195.628 177.069 198.368 179.292 200.399 cv
181.367 202.297 184.176 203.475 186.781 204.219 cv
189.272 204.931 191.801 205.491 194.399 205.856 cv
196.911 206.21 199.481 206.568 201.999 206.745 cv
204.551 206.923 207.07 207.192 209.626 207.311 cv
212.161 207.429 214.701 207.577 217.227 207.688 cv
219.778 207.8 222.288 207.823 224.837 207.938 cv
226.591 208.017 228.355 208.125 230.125 208.125 cv
0 0 1 rgb
@
35.5625 212.75 mo
38.0962 212.75 40.6299 212.75 43.1636 212.75 cv
45.6855 212.75 48.2129 212.688 50.7515 212.688 cv
53.2847 212.688 55.8179 212.688 58.3511 212.688 cv
60.8896 212.688 63.4312 212.625 65.939 212.625 cv
68.3931 212.625 70.9575 212.635 73.2734 212.188 cv
74.3828 211.973 75.3662 211.61 76.2632 210.852 cv
76.6675 210.51 76.998 210.009 77.5005 209.749 cv
78.126 209.426 78.5352 209.793 78.9604 210.2 cv
80.7744 211.938 82.7715 212.352 85.1909 212.499 cv
86.4458 212.576 87.6948 212.563 88.9614 212.563 cv
90.0205 212.563 91.707 212.88 92.2993 211.839 cv
92.9087 210.769 92.6055 209.347 92.9375 208.188 cv
93.1494 209.348 92.9526 211.071 93.6401 212.079 cv
94.2197 212.928 96.1533 212.688 97.0938 212.688 cv
98.0059 212.688 98.8667 212.827 99.5576 212.313 cv
99.8975 213.076 102.419 212.688 103.149 212.688 cv
104.411 212.688 105.674 212.688 106.936 212.688 cv
109.464 212.688 112.033 212.75 114.524 212.75 cv
117.058 212.75 119.591 212.75 122.124 212.75 cv
124.666 212.75 127.209 212.75 129.751 212.75 cv
132.276 212.75 134.805 212.688 137.312 212.688 cv
139.854 212.688 142.396 212.688 144.938 212.688 cv
146.168 212.688 147.397 212.688 148.626 212.688 cv
149.229 212.688 149.833 212.688 150.437 212.688 cv
150.703 212.688 151.082 212.737 151.309 212.624 cv
151.635 212.461 151.612 212.203 151.813 211.938 cv
151.992 212.232 151.961 212.487 152.316 212.624 cv
152.519 212.702 152.998 212.688 153.219 212.688 cv
153.812 212.688 154.477 212.663 155.086 212.625 cv
155.605 212.593 156.323 212.529 156.673 212.079 cv
157.049 211.594 157.108 210.739 157.183 210.151 cv
157.281 209.373 157.324 208.592 157.438 207.813 cv
157.959 208.981 157.54 210.51 158.125 211.688 cv
158.68 212.804 160.392 212.5 161.437 212.5 cv
163.749 212.5 166.273 212.388 168.018 210.794 cv
168.402 210.442 168.801 209.912 169.271 209.731 cv
169.936 209.477 170.24 209.872 170.688 210.313 cv
171.468 211.08 172.372 211.754 173.441 212.062 cv
175.649 212.698 178.303 212.625 180.687 212.625 cv
183.207 212.625 185.736 212.688 188.274 212.688 cv
190.808 212.688 193.341 212.688 195.874 212.688 cv
198.424 212.688 200.932 212.75 203.461 212.75 cv
205.995 212.75 208.529 212.75 211.063 212.75 cv
213.597 212.75 216.13 212.75 218.663 212.75 cv
221.203 212.75 223.742 212.75 226.281 212.75 cv
227.563 212.75 228.844 212.75 230.125 212.75 cv
1 0 0 rgb
@
.1875 lw
0 lj
230.125 251.688 mo
30.6875 251.688 li
0 0 0 rgb
@
30.6875 251.688 mo
30.6875 171.938 li
@
30.6875 171.938 mo
230.125 171.938 li
@
230.125 171.938 mo
230.125 251.688 li
@
0 lc
30.6875 251.688 mo
30.6875 250.5 li
@
40.4375 251.688 mo
40.4375 250.5 li
@
50.125 251.688 mo
50.125 250.5 li
@
59.875 251.688 mo
59.875 249.688 li
@
69.625 251.688 mo
69.625 250.5 li
@
79.3125 251.688 mo
79.3125 250.5 li
@
89.0625 251.688 mo
89.0625 250.5 li
@
98.8125 251.688 mo
98.8125 250.5 li
@
108.5 251.688 mo
108.5 249.688 li
@
118.25 251.688 mo
118.25 250.5 li
@
128 251.688 mo
128 250.5 li
@
137.688 251.688 mo
137.688 250.5 li
@
147.438 251.688 mo
147.438 250.5 li
@
157.188 251.688 mo
157.188 249.688 li
@
166.875 251.688 mo
166.875 250.5 li
@
176.625 251.688 mo
176.625 250.5 li
@
186.375 251.688 mo
186.375 250.5 li
@
196.063 251.688 mo
196.063 250.5 li
@
205.813 251.688 mo
205.813 249.688 li
@
215.563 251.688 mo
215.563 250.5 li
@
225.25 251.688 mo
225.25 250.5 li
@
30.6875 171.938 mo
30.6875 173.125 li
@
40.4375 171.938 mo
40.4375 173.125 li
@
50.125 171.938 mo
50.125 173.125 li
@
59.875 171.938 mo
59.875 173.938 li
@
69.625 171.938 mo
69.625 173.125 li
@
79.3125 171.938 mo
79.3125 173.125 li
@
89.0625 171.938 mo
89.0625 173.125 li
@
98.8125 171.938 mo
98.8125 173.125 li
@
108.5 171.938 mo
108.5 173.938 li
@
118.25 171.938 mo
118.25 173.125 li
@
128 171.938 mo
128 173.125 li
@
137.688 171.938 mo
137.688 173.125 li
@
147.438 171.938 mo
147.438 173.125 li
@
157.188 171.938 mo
157.188 173.938 li
@
166.875 171.938 mo
166.875 173.125 li
@
176.625 171.938 mo
176.625 173.125 li
@
186.375 171.938 mo
186.375 173.125 li
@
196.063 171.938 mo
196.063 173.125 li
@
205.813 171.938 mo
205.813 173.938 li
@
215.563 171.938 mo
215.563 173.125 li
@
225.25 171.938 mo
225.25 173.125 li
@
228.125 40.625 mo
230.125 40.625 li
@
228.938 79.791 mo
230.125 79.791 li
@
228.938 75.439 mo
230.125 75.439 li
@
228.938 71.0874 mo
230.125 71.0874 li
@
228.938 66.7354 mo
230.125 66.7354 li
@
226.912 62.3838 mo
230.125 62.3838 li
@
228.938 58.0322 mo
230.125 58.0322 li
@
228.938 53.6802 mo
230.125 53.6802 li
@
228.938 49.3286 mo
230.125 49.3286 li
@
228.938 44.9766 mo
230.125 44.9766 li
@
228.125 40.625 mo
230.125 40.625 li
@
228.938 36.2651 mo
230.125 36.2651 li
@
228.938 31.9033 mo
230.125 31.9033 li
@
228.938 27.5439 mo
230.125 27.5439 li
@
228.938 23.1821 mo
230.125 23.1821 li
@
226.912 18.8218 mo
230.125 18.8218 li
@
228.938 14.4624 mo
230.125 14.4624 li
@
228.938 10.1011 mo
230.125 10.1011 li
@
228.938 5.74219 mo
230.125 5.74219 li
@
228.938 1.37939 mo
230.125 1.37939 li
@
30.6875 164.916 mo
31.875 164.916 li
@
30.6875 160.564 mo
31.875 160.564 li
@
30.6875 156.213 mo
31.875 156.213 li
@
30.6875 151.86 mo
31.875 151.86 li
@
30.6875 147.509 mo
33.9009 147.509 li
@
30.6875 143.157 mo
31.875 143.157 li
@
30.6875 138.805 mo
31.875 138.805 li
@
30.6875 134.454 mo
31.875 134.454 li
@
30.6875 130.102 mo
31.875 130.102 li
@
30.6875 125.75 mo
32.6875 125.75 li
@
30.6875 121.39 mo
31.875 121.39 li
@
30.6875 117.028 mo
31.875 117.028 li
@
30.6875 112.669 mo
31.875 112.669 li
@
30.6875 108.307 mo
31.875 108.307 li
@
30.6875 103.947 mo
33.9009 103.947 li
@
30.6875 99.5874 mo
31.875 99.5874 li
@
30.6875 95.2261 mo
31.875 95.2261 li
@
30.6875 90.8672 mo
31.875 90.8672 li
@
30.6875 86.5044 mo
31.875 86.5044 li
@
228.938 164.916 mo
230.125 164.916 li
@
228.938 160.564 mo
230.125 160.564 li
@
228.938 156.213 mo
230.125 156.213 li
@
228.938 151.86 mo
230.125 151.86 li
@
226.912 147.509 mo
230.125 147.509 li
@
228.938 143.157 mo
230.125 143.157 li
@
228.938 138.805 mo
230.125 138.805 li
@
228.938 134.454 mo
230.125 134.454 li
@
228.938 130.102 mo
230.125 130.102 li
@
228.125 125.75 mo
230.125 125.75 li
@
228.938 121.39 mo
230.125 121.39 li
@
228.938 117.028 mo
230.125 117.028 li
@
228.938 112.669 mo
230.125 112.669 li
@
228.938 108.307 mo
230.125 108.307 li
@
226.912 103.947 mo
230.125 103.947 li
@
228.938 99.5874 mo
230.125 99.5874 li
@
228.938 95.2261 mo
230.125 95.2261 li
@
228.938 90.8672 mo
230.125 90.8672 li
@
228.938 86.5044 mo
230.125 86.5044 li
@
30.6875 250.979 mo
31.875 250.979 li
@
30.6875 246.627 mo
31.875 246.627 li
@
30.6875 242.275 mo
31.875 242.275 li
@
30.6875 237.923 mo
31.875 237.923 li
@
30.6875 233.571 mo
33.9009 233.571 li
@
30.6875 229.22 mo
31.875 229.22 li
@
30.6875 224.867 mo
31.875 224.867 li
@
30.6875 220.516 mo
31.875 220.516 li
@
30.6875 216.164 mo
31.875 216.164 li
@
30.6875 211.813 mo
32.6875 211.813 li
@
30.6875 207.453 mo
31.875 207.453 li
@
30.6875 203.091 mo
31.875 203.091 li
@
30.6875 198.731 mo
31.875 198.731 li
@
30.6875 194.369 mo
31.875 194.369 li
@
30.6875 190.01 mo
33.9009 190.01 li
@
30.6875 185.65 mo
31.875 185.65 li
@
30.6875 181.289 mo
31.875 181.289 li
@
30.6875 176.93 mo
31.875 176.93 li
@
30.6875 172.566 mo
31.875 172.566 li
@
228.938 250.979 mo
230.125 250.979 li
@
228.938 246.627 mo
230.125 246.627 li
@
228.938 242.275 mo
230.125 242.275 li
@
228.938 237.923 mo
230.125 237.923 li
@
226.912 233.571 mo
230.125 233.571 li
@
228.938 229.22 mo
230.125 229.22 li
@
228.938 224.867 mo
230.125 224.867 li
@
228.938 220.516 mo
230.125 220.516 li
@
228.938 216.164 mo
230.125 216.164 li
@
228.125 211.813 mo
230.125 211.813 li
@
228.938 207.453 mo
230.125 207.453 li
@
228.938 203.091 mo
230.125 203.091 li
@
228.938 198.731 mo
230.125 198.731 li
@
228.938 194.369 mo
230.125 194.369 li
@
226.912 190.01 mo
230.125 190.01 li
@
228.938 185.65 mo
230.125 185.65 li
@
228.938 181.289 mo
230.125 181.289 li
@
228.938 176.93 mo
230.125 176.93 li
@
228.938 172.566 mo
230.125 172.566 li
@
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
NCDNMP+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8707CC95A9B5DFDE3A4AF8C8BB7D0C82C30C322ED949
85BC6C2F162CD480F8280AD954FE8DC511B40B423DB4A6012D9C419E4DF4F375
C6ADD098717CA70F621> |-
/zero <1C60D8A8C9B7A73DAAFDCA97EBBC8D8E35A41D9404C5638B059E1CA50
B5366543C3D584AD9E19987218AC5999BB0F2477597AB6F8DD868788C8440CBF
4A338EF64ACD9BF2268656755741DB71FD86387D4A7AA1CFD19937BFD209E4FB
CD1952717C8CF8C0555CB2D0238DC43B2A6A2DE4D7366DB210D2673870D0B0C5
8344E6AEF91B916BAAEAEF37B22F065E870AFE6638E56D0B4AE01785D59EE234
02242D396440157FC51> |-
/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |-
/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B
4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25
003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0
F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11E
C41D90433CE0F55F0A42A96AF852FD50FA> |-
/five <1C60D8A8C9B7A73DB97C1FD4849B14157B765BEEE66B9438731A1E1DB
F6D904609867EBF49E3E19DC6BA786F7382AB36C8CFA3690DF4F8E7A258691DF
DD71792965BBA1DCE407BE309901C1513A762BED3C73A852D4EDA1BE20A2B364
C59E2224D36D9C8BEE5DE8D6C54C49D0F66DB7448A8FCE0E63D5DEE7BBBA026A
808CDA9AD5556005639017FF42B963FB833B4B64B6445B350600BDCDD563F> |-
/six <1C60D8A8C9B7A73DB682174C160AB8115D90A4524BD5B352C23110F23E
E4E20266716093AE0643A076F6C57BA527F49BB819243E28C4CA7F711F41FA01
318856C15674E51D546E83D25FE9DB7A4B9EDFDDE57E488CC507C2304526D6E8
0E07D1EEFCA86373B2F664DD3DA4646061C700F112AB44ED3896FA596FE81443
6AD1F1DC5FEDB207A575A17735F66E79BF0D0E423C92F1E9255D38F15B49459F
3693E95DCE92EBF25C243713EDA9138A49C42AA83683249878EEA825672AC6D9
9C32B9109B3D5797A7> |-
/seven <1C60D8A8C9B7A73DFE31854B8CA51F015562FECC80A8475F282F7722
52E10D05B7D43981266F60616595AB1BFBC47BFB03D1BE> |-
/eight <1C60D8A8C9B7A73DAB2BA6B835CAFB4C9A41096F555C470FE6294A70
7AE711C017C95446B200870C2B6A47FB931BCEBEB5BBC6B53605850C75701306
FD83F9DC906687C2B3A2C9C0DB9DB68E95D3478DEA01153491C8534F5AD89998
0F04C195BFB522EDEF282420AA1F12E08397ECA941D5934294BD451B3952E622
9D3E7987DD36FC8E43559904E0205D3416EDD1402AB05184D2018B2C7B816330
FD0C2740A24C74F80E34F93317BBB1D6B8C4D916C15B7FF1D533D7762324A101
7022A27246D93B9768262BFCC673CAD6781894C98679A5889F9338F377D1995A
EDF5695FBA7A65628522691535557B2045419DD63F87D7A64B6A962B> |-
/nine <1C60D8A8C9B7A73D92CE6A66BA49C70A16072730ADF99EB50B81EC870
A54394DDFE38FABEC18FB7B826889153F28664691169009324BD4E9661571BB9
1EC6E47B44C4894E182CDFFE1F715113C62DB236897358730FEA1D138847386A
CC90D129A1077A70DC9DAEA483EA5552EB360DE0397958942F0F1C3FE8C7E6CD
3CF99FAB1F16B30CA1A210BFF9DDE43DE5ED76615C174EEED6DAB9E5A77B1C62
FBE9CABC1B3A46D497C4D6EFFC96F4CC02C8A01382FD55BD7B4> |-
/c <1C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438ECC5
4400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F42A
6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F9C
2999730E7919239B324086FEA852156F456647AA0692084759C352D699897179
9F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |-
/m <1C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE11167932D
24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA1816E
9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747A2
556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68FD
574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F24910
7C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D18C
E6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE9556
17323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D98
7ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FAFE
C679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE82
B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B5179
96> |-
/q <1C60D8A8C9B7A73DB694895DD5E49D3BBCEE95B381618ED0718BA1F35CD3
9E95BCBD1002A9F89110DE3E7AD181B368295D0F054E6A3D9A7267329EB95AB8
13B7AE1696D9C600AC6A6B00419AEBFBF715793C3A2F30373AE9BFAB97302272
E9B4EA6D0F482F853122AF239C1F65C8335B7091413102CCD1675C767B686462
E8E1B94DFF670F4F69122307C3AAC013B5112B2F564262A5E8DE4D58B097F43D
017CDAA97C6843EB833175C60735563DF7F92AF1ACD211546A7958997473A18D
23764933CEE9DC71CCD4C3E61E53DA702E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NCDNMP+TimesNewRomanPSMT /Encoding get
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 99 /c put
dup 109 /m put
dup 113 /q put
pop
%ADOEndSubsetFont
/NCDNMP+TimesNewRomanPSMT*1 
[
46{/.notdef}repeat /period /.notdef /zero /one /two 2{/.notdef}repeat /five 
/six /seven /eight /nine 39{/.notdef}repeat /a /b /c 
9{/.notdef}repeat /m 3{/.notdef}repeat /q 142{/.notdef}repeat
] NCDNMP+TimesNewRomanPSMT nfnt
NCDNMP+TimesNewRomanPSMT*1  [9 0 0 -9 0 0 ]mfnt sfnt
52.0078 262.745 mov
(6.85) sh
100.648 262.745 mov
(6.90) sh
149.289 262.745 mov
(6.95) sh
197.93 262.745 mov
(7.00) sh
12.4487 65.8652 mov
(m05) sh
18.9492 42.7354 mov
(00) sh
18.9492 21.6055 mov
(05) sh
125.912 270.995 mov
(q1) sh
38.458 182.102 mov
(c) sh
NCDNMP+TimesNewRomanPSMT*1  [0 -9 -9 0 0 0 ]mfnt sfnt
9.07373 130.298 mov
(q2) sh
NCDNMP+TimesNewRomanPSMT*1  [9 0 0 -9 0 0 ]mfnt sfnt
12.4487 150.99 mov
(m05) sh
18.9492 127.86 mov
(00) sh
18.9492 106.73 mov
(05) sh
12.4487 237.053 mov
(m05) sh
18.9492 213.923 mov
(00) sh
18.9492 192.793 mov
(05) sh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
] del_res
/NCDNMP+TimesNewRomanPSMT*1 ufnt
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 12.0.1
%%For: (RSLab) (Yale)
%%Title: (quadratureshipower.eps)
%%CreationDate: 8/4/2009 10:15 AM
%AI9_DataStream
%Gb"-6B6,9=dP,u3DZp(@A<DN<#'h@WhFf(PP)qpA,7+onpWWGPJ,@L7Wj[".NLB\1o>V^scE*rsS!B7&X/;f()Vo_9<e&k=r$Rhq
%oqWcW--]-+U71jmH?uK4<c.`6A.2aTeVoHe8Li4i1*REAKC-ZOpT%KdS?s1feTO%3ph[=k\Rb\`\Xko7^VQ7Wntu9Zg%Zr*oiZb>
%E478Sl5cgM;>[B%O/i5M2876+POl["GFe>CZh[b)<[-gHm])>eg1RhGBRQ.-8L#HVTdW'AF_dV7U[H`T[?XBWJkG.q,>Ia7%C:\D
%inqCr\,PsOX]/)(T%2!O(OU/M(]BJFS6%cmJ-sLe`#5/3[dr6tVt!2]jH9TC07A%FIB0b;X`C>jW;iCJ?!gRGR\/\:Ps?h!6:O\,
%\rop$!3Q!neGp@QQ'XmAc"ODc-^Q)]a9\63,S__ZSWK&8+_MKdep&EP1TGrVWrM.C44SAJg>Xg?Cj"$=s+N>RJrl33,@aopWK1]J
%cYDdO?L.+2D=3i$9S\U"p!YCc5)PtDKE5;[kkrV>>a/H2eIGtaj0OXda<_;3q?C/D;#Xa;\HY'3<pLQ]/"5jgW1$:H2/-Mk&V2,s
%6;l9C^c`T,9#:fkU.D%_o>5CL'<?I#GN]/fmC6/CX4;8aU1+*&'fBL$P/qjTe>cN=:"?)9_>^.iA.7)i:$_h,ec:=tVcpQq!N;;K
%FF"RQbi(QWTMViQ)dg*"Le-!!J/NJh.%cJXrmgg1hk5mF1\'(&i\0!/IWla%C)_KsX<pXnqpm7s>tp3>OY(ZZNMIs1Xr>XJFuB.(
%gJt;\d`O?rK9KAP[VIRE[ShR$X1%eQi-Y0oecKr=rN,uGgT7hEmu;4s>d%\a?coK?4o5FrL\h"O^36g&KqtZGXD]Y?roe9NmX)tq
%P,_\MfVdmbP]j@_HDTDGcW7gE592_LeL[5Q9(f7?!h,3fqZ^Vk)qAc$dJ3pV;M.nWAoB0,C("(t:1i6T32B,C;mJ(4<i]DRq$fQq
%luT5t;6<'L!TunraBJ8C09,+4hIin[>5bJOCNX<n93HdpmA9_`Dfi;R^RO]BHF?6I(`HG\?f`)o(4[,X.GOde[\79ASaH@(BQjJj
%[72\$H#H]`p94$[[o:P#Fd&OCB;r!'!rGd,!EH+II[6\*7bqbZ'Da2f?b2jd,K%<Xhq`;\g>JUljj.!d"tsd?78q?H&jAQ^Rr$#;
%f5>I]phnfdho#\/2[e;$T0ftOc*IRg%)!?[bmS^,>uka-%C,6!ZYS/AFPa>o1a$m]bShJ-#03kNa)"MkG.XsGB;a>Yr1,ugIj.Wm
%=pqoPNA"Rs0C;e!m,Q'3UBT:J"bL(d<,6-iCuDV,T!GD>R13H14"1h&b15j:"cb'J?=gfOS]9#VeS\Gu[;)dDbr%o6Y#>LCeCf?]
%<kVqdWSqU=i)T,eQ.k+Q/7?9WZDLnc;V*^sY2/5!qqN?&r3hIrIpEa*<E/]60A=2QElfOk,gIWjckPau%HR#hjC8]j%H=X:g"q&.
%hNj*J>hgZ>,bT),36@(Z[sISV=ln_5-LhAJ3e=Esd-3T+dPp4VjKf499<C[m\QaQ#,lUDS<Z9<7j@QoR%Pe/`P4i.DQa*/Sec\SU
%C4BHAR<#Dif;HfM(>oMCmeHTZoq_cXH%GS=H+2A(`p)ak)+(BQ>\DN%FkcB,MalaUSgpqZ5M7gsL<A6JCBh$o#7UYTs1OudbJ<N'
%j>>b001#OAI('=fBcC\e@$h5mTFnl0m(n!Pr&_na5ekn8+>P8MnK#\.^7(u7,gYAk9e=;Q79@_noA?^bJqWRG>:M5Ss/pf/RT69@
%/cj[tr)%>h@fbcef5ouYf)B\ti[V55Nme^KG:hEgkU6<&(&o6=P^\qaj]7O.fWuaDFA`<XkG)'Wk&dXJflU04V5:m_F-nj4qh@-t
%kP$>R3naIXj.AC29'1(Io`e)FHW:!E-5YY4Gn!`?Wr63o*lC2[6T#9D5quLW9GEb7parOO0bBN"AZTYHqMi8`i3-Kap.nRX*[^?)
%$HYmA^7DNtf+f-]6#&FM=#(.sK7="u&&_oJh`aJ3OoE<u]S#c187Fg\cI#\fn:,7<B<e>J3QT^hn>R)L!i!;'[Qj2PPX513kmI_\
%H&a[h^BRJl^A]bebHKWl]YOQVS9`b^%<hLVTMs0CoIcG0)=jke!rL';+EmGX=QRnt^GKa05&&3[Y[-Ys&kkN%XTCm*r)nA4n<@.l
%=b2saD?8bu3k-\taV,4_X">H@(Y/P-P+ZN2b0RKA>3GW"@c$aPVQ-j8fj3eO)OO+CGb,l9<[IQn`X(4Q2c,1mE@Z[i`N-#%+rT?>
%V*V*k1kk,=DDc=PY.Bds*["].e6Ss4^9q^@A@qPBX.nMQDoLFg>.]@J-Kqa-VS)-H+8*Xs8#+gihMGlBh<agn_,6t*A_WTDZt]]>
%3:ELEPt_5@$hWRRFUA)I"81S(K.Hk*G*Ze3jgi-MIQ+CTTWklI*.N@bpo8M['gTHPbX*:q(4UrD=U*NM=$,f!btS*W'D_YI*m7<\
%QZl9+>P?b:+[rQ6+;_M%c_*G1H0+-QV#NO./gE#;@eW*kf)r,!2fWZbcMcRK^?M&3q[rP)]c9r%4a$"=?sB.t"Dn]uN4I(IZI]&f
%fBN5OKrMuM`[;=EjE>s&#3'Fkh[1rN&V6jggk*Fi6n@N6aQFHr8FbTK;"nGu4DkRJT)S[f,<j%n?td=So0:DmgRkm?s0GfVXm!FF
%D7roj^\f`kS8[Q)qp/4B_>:6:rqr*'!_]Tb+7fC=ia2Y7j.cMd]Vt!_#IsXsosM\B^AZYsCSq-3jn5c$BXRli.\6>59>lVemGGL;
%HjrBbH`s0I2TGT8(5_Uc>bAE[Ii$]@f(OS#diL0W)W*;TVNN"$Mi`<tYp7e"ZI/'$e%a_TW.fE=g7@MY>TIl9OXMPn3ug\O,S/&j
%[r2#DRQP:@D4;#)rpZ\7QDNVZVqLG_ccR*m;#;p!23Uf!N^Y<q:SYgBqn6p3O>SjHo3^PHC9*3b7;LGJi*))O8W-&AqRcUPBsa&L
%jj.uG`R"O1X_GJQ1m?1)'DcLr^:KqJf3EZG=5ghZ7ohjcFW;mU>/n=sG-fT&e)enZc[L>.gE5!1BGO"*j\!M.SB]mNB"-6n_/#[u
%]>JB[f)9VTqPWWj#OR#gL*5/S43=5tcKBiQb@dp`n3`,SJ!(WQdr6<tR.*bD<N0"#^m<1c2*-A<\$eBaS=o5l=2r+=7d%J=RYt2=
%jm0AZ<sL#=\ueT*SRL6e!rrQ)Sn]#pg?j^4W?tHmk>,:c'a(K7VjVgEe,e#[m"@n$kYu[FD`W,/<Sq!Z""+I"<EhUd"4uC?/+9f^
%W!/RLX6?9,rjqP8I9>mcj/7\M=8(*"?S/A._E]f%*?c0`eMfJDIn'P:[GK#)5+A\+L-pHt^brcQI:P#uXke5Mc#alKpm!QJcC%!i
%D8;cY`S5Nob20:J@=XW"#X3lmhQLD3jjNEq[gDDs<e"sgoeM[K3nm:"'tKT6`_-EQ\uaLiJ8GL];JPp+n_C*d5-"cB@0c\;p)1:"
%<7?2'"!RWkWaq2MI?p@j^Z/A%(+9BZ"K^=+.=YCc*rB!FH;oMF+4P$`g9j++L=KZ>RdZ6eJ,<2\Zt^GUh64`B<lSb+cPXj]Vm8bg
%J3?Aq+`)FYqCK+JCRqYL1JZaqTDc2K5''pqABd`S?$iXL!"cA!c"8Kt%S*a/NBGrpn"6!?4Bd=[W>WY\4B,.bL/I.PVBB%J@`TE9
%\phiQ^Y#He6\kNglpl`%@YMA!iuR6)kEDP!Ai#=B@QiSQ;_^c!;#(J_J%F1((p+@'W\(F%+EC5YJM"=@_CHgb!c%[:-#(IIUr?^s
%*`S5QV'MR,buR8BFR$l4oO[/IPPe:+:?EMW%Z##sl16";-hh](^SO+e6M\iR8qR*KQ#K[]m0<r'ja+TPKm-4FldfF;"m:\M5\>%R
%GDK5KBND_CC:*m3n^<5D%8):=^+BL6L_E#gY<EXM3s!1!7r8B.HENs?DTQuDU0@6Yl=V3TWni)@G9VcN_O#&m@n8^'4HE@sNPaWu
%;QCDKC7H@B0Fu11HGo0s52-q#dt]/lC7e8J7c;B3;;nA.N`md1eGO^i*<eJN!PHA_GG*B2e8W4piu_n:?(Za=r/m^\qK#lMS@PWk
%&K@EpCM6'I1PT=mZ<[ur<_YFrl"Vmmoh?]j0mZgHANMXS"5Yr<RRpJNK.I]k<G;RhZB]I.T:",[6euKYZ+j<B`aREk8$*)\?ThTK
%-J8c;"PC5nC>^T9)UB6TlX$@S6r?7X_T=gIJRksOiFg>Ppi48-@I7QB*BX#JdX(6@dDV11-B9mCM'J%C"hTSrXLOT?,r^$XYC\7u
%?Na@JBarQZ9]M5&X>_+t?*[KYit1JsG%J."OMe!G_GhJQO7CuK=r:qUYaa%)%WLBo!J%:#3j;C12HYoMhDs"l0r?@PU=b1C6K:Si
%iuYh0%j-*I#[p9^)J2"fd(:K2I3G"<)&B90?!&1'<=D($Mia<BT'(<A%<]:?`0,FQ=Au[nPkF(725)dH^-P!8bak_?c3JX<O:CSX
%qmp'9H7CiF+0n^_2;<DXk$+t\<-RZmY^<mjUV.Z1B'Qf"P1hqOfY/qD@<1Eu[NcK-5EE8mk0s.S-8aWWJcTeu(Y7J*ZC8q^*@iY<
%3GDq#l8^@#F&Rf9$9,*bC["$jH2MW$=^3C(^Y%0)_EkfaP1j9BV>BFtC/HHuVA=&^J&3n=\YiLR[<V@@81g.XN0%>Y8_YJ[.W)/5
%38hC!<hD;eRn%fEqdt3"fNJ$4JROFq>NMm3]"\tfI5_t]e]lV\EILiio3p^ZdtR_Jr##ofTNRIB4LP3PfNMA&[.fN,?r$Aq3P]n&
%<bo6o!M_46$<cJ\/]=&]gF.6JUkct1$ij2,]3pHn[XJSN($OH:0!(=91X=E)fsXaUN:1?5iR0(^_tUtJm;i*<p%.\P1jIN5rh/Cs
%+#8DB5"lt;"H<c+d(ih%^GJXepPc\H9"3O6F=VUc'CfCsOE0qYUUFeO&!ps/6>6C>eb=02p8/B`W\Se5YTgaaYB?T7TM/ZM57`.:
%i\3?r:u'd^#Q_4h3E:"BXbMd\o,n`SO3WAJ/YuK[`4a2![Pp@m'hUR97Hi;p[qcdU1b)noF2>Jl5?dg;[0%Ckc5@@PiEMecOmbKQ
%3>bb1oH;Y7Yf0*qR@X#1WiBEec*1%e><h$2Zl8DKeu0O!9eT7uJYPE15FmLf\hbY1Qg]?tdP)Z7I^UW]X(T8DT'#4e^8J[TJjs$J
%rlhKuN2jV<YMX4;1X[/F>ik*;.%8"Mi2@=.2gsuX90*P$<@IkE=nI\g;.r:pl&Y[L5&A`S:g/7X$6HT#CsH)1qFr)c4-PTgGWaZp
%2bRj,OOoPX<=\*,rC>6klKsIJTJ)-]l?ppV44T(/<aLqs<4tku_D&.S*o,S;6UoTQooD`8+`,YFiGedo)*I3P2nJZ?I^P3]S:Ot@
%ShJF4Tqh$WcXe81e@R$cr,HVk)&665)L-b0H?=?mQOY#.C:=*W3pQP<l-j_+W$OjqX8V0Qn8]'#l-&)+b%gFEc+St\;6M$6'-1^b
%`&,fUa23o1rU&N?&(_/L&#VXA#*/QOpgZ7)<#FcLNERcc/GJ!4I^VJ-Jk&!#ebhHd%68CWa5*T'1FhgPGMq'Eq*HQAe=0+);#ArS
%*7[#PRRh;n>UmOf\SpB(aJ?G/qBI*W=e>4*T"3U.niVm]c*!me]PBYAT&t*`39m5V<9Wu+2t6kbFVV+Pn=SEX@qM!eg0%ePXYk6.
%^7/W-DV^,\?7rkBC1"-?E7Bhb<#>ffeF&L-gjH#T0()DHCt*TIJ&t1s(RrPZj#lm30#-iqFfNtA5M'mSJM>?\gt$)F@A33tb0Sqp
%?THDWeoR`,++u![eY`epAZOo_bqF+94-q`6NEf9`qKd34IU.YUI2@'uVRrO/JI6>A=H&o^!pmhK6JhS8X/c'2C52Lsc+O!`pqPD;
%-a'#D]a1a4m,m_'RiBfRfi.[tp[Z4<crUE.D/rRD\U=d$I]uXUQbpL$+29F`IQa9IH/<Okk-&1Zbj;E9[b99afl,?kr,SLN-!0&*
%SB1N@54>&oSZf^l]@pTdBSAAE1&[V:Kn$encE.;![=Is-rLcr?2ZM;fC$pY'rOA$!:.)dFI2(9SCnUH%J.JR$C?X848QiY8rVBEA
%5!Oi'g.Z6npO5<-q+P5gn@9J6F\c25&0l_6R?FH0EZr]X*MK\us1lD3d`]A.$Q#`.FoF7j=n-pRGUgsV3^BGIb2Sgj8';:*ft0?o
%78MC)ppE]S8]VYh<CV\N)XSc9HHHuLc4o3Z7m=>fBAT<L\bQ0i!rpAMEA=l2I?qp'IX"l*)4D$WY^Elj;8Lh:1qS(>`2Pi^5qXXs
%2CZt8b08D7*E7_t-R3tOe7V)#^$Ys$SX=s/?WZRp-aU52k;f28'89K].C8*/^$\`h&+[kWp:u?8W!_>aO/h!jL5lU'jd-f@WhW%7
%.MT6p)AUr`9A$0XpSc71P\X7YB^=G(Vc@>@-Cs7]DIAMTHU]l9:cGW1>5IlM3d25o.L]efGu\l:f/kJH"sKanap>Sp6cc2b5A=(e
%:@g)^U=`M`7n)5VFB$a!hL2/^)T<7;PmI]d7.FYCFArl06:XHnj2+0"@,S&!9nE<'Rk^8EXaJ*epX&l=#M"H84B8f2mt\dQESiD!
%GE.*ADJ[.hml)%f7O%!u5Gc-)ML4KkkH#E1/P]rGH-Ld2ZaIp1U@Z]71L7QL3^&WRK^2f_DP_(AQaTrTR-<,FdbQemZ#Tl#Q9Aac
%a'U>jo7%Md)ghc$bH2AHl+l:ZS#hLB8R'1aTRg>#pZhIZrQgm9ReBqTT^juN;fXPdBlDgrn`:)TS3aJKG9.?b",KPAS2e.3E&-I-
%Tc<jFSiT#/rubME#b;V=_l!*8mRBn9Yr`=1I(1TLXpZkoS'QUU:mZWS\+Y5Hk<SV=*rk3JBBj]V$>39l<_38;"qb&Iho>6oB,eb^
%E7/(OI-:oW2'CLW`n8<1He8VC;Hcd;]HVY8kI5mT#Jta12M(@$?5a]r3-(;P^[ZQ/"o9Y<gkLEPb]X(R?eW(KpBIN-QF>p%6qk5b
%:n`YrGCS_*W/tL__&Xu[n$_"*ZmY6li=)JJ_;KYgfFW4#a*0W^$]F?n%R.-=%)/4-<%&=h4e?3%$UD2<rQW:%Mj)br/e0nVM#qm8
%ItkQZ!b\gP&7]!6"\pg/*!LZ8^&Z&U2+Cmb%KdX,[;-g9Q]sjRT&sWmK%Ja#>IE)tb>Y`/Tn%-=9g@89iJdZIZ*7u:O,_LsrWtsU
%D/kfs]Vf])3IR3E(][MfNcG,*P:]R8GC@);CBW4C:5XsriZeAC\);:Ho\]q8a`Lt+n!;rtYb`B_5qe86$@O2Ih:qJ!4X\k"?o=KQ
%YUiTR'R4MNiU)@rm9F7MUpGko=n!"lP1*$g;EsCs/f"4:g-KP4(dU8udb//mEUGlMCs'N1Ni0*oP=l1IST+p8'f:,]$$QB^%N>m2
%NgNaXI4o,+a(I4;bp_GUJn.#.-[Y^lp<XC3>h`pe78"R%ls\`/2_hcr!a_^eY@rk['fUS[kOjDqbN[/bmcM3.)9bXp]P3B>B_UEE
%"PR@$S3Z[D[fMiKFJITS:6,-+2p_Pk4)9BmBjf&.a/:LEiAOri#is[ef(FA>Y36mP4?MjB@lg2cfABO*0Wdj9AtIfY!3M1V#LRi7
%F6#gmk[n:9+9;($B<BGRc1Q62>p<B[h!%TUE&B?s'42+UR0a6=\S7'4(9c6PT8=e8p&Rf.!oQuu(OQY7,n@ZVT[!@O!7dXN2ne`S
%S-MYNgWpbX%aG6V?,Z]Y!$d/a5<qUF1k/Vj9ct_g3@MN<A<G_/ERG^]XiW;[JtF&]U\\nG$rX;K9aUsh!o\[%*K5I%F6_^C]DVm=
%+7b/Cq7h+#0DNGJ3_)T?m>b<Dfe,_B#Wao)Ae^uN_^ThsLP2#GZ,5HWfO9hkQhR<Mj.8F'nfDt"b5B>lS6k^:T)YVHqH_$O!)"FW
%mmJ.*MJ[@;/5TYpg[cA)rJG0&S`=LHK_lV+Pl?DB=PR`bic#b'q>qJBSi](T`=P@$'DK(E:-F8m#a""L$=/h.RM\]gF4gSQ6nV11
%g-\*pbt(;J"AB6iT[-m&dJUZXdUF?+6PN?An5q!LP4hAsmmI4fLgtr,M:o`.B&E'D)$52rdqNGUQA9lZegR_/lEgH:_@d*K=l[5g
%2%FhJEi3s\;5dkVqm`>4?$nO.c(`I2LDLH7,TEEhK=l#>(fISe3NWJdVH6OY$_,0Rp3j]Clc<dH!;XRg5QJb:F4&Z0Y&@B<#d+Pm
%j'Y9)4Z<o#aY\B;i=OT2lgqXQcYZGcj+,M2+BI2==i<b&Z*t<@+WVVEEQ"Ns;(,(!2`M??Kd^+FH'QVt:(Za15)3A_*4hn95DR\q
%pTTEs'Z:@aB8#&C4QgiD%b@-$TKWaNZ^CGYU3U@+?B(g(E=I/<$?H[AMQ=5hBkH"ePSr7T(]mMB)P)om9p]6+9\lf1M9KM5LUslX
%ij]#!:cB-l[IHDUQtK?Zb@p1\%:(^MHg#<+l5%HZYd`#ZgJu.bDPL#/fX\NA/Xd#37q830cjQS`W.G5Cc5=4(e5:l\BlPY?H\&Ig
%-cfrgL4+t8Wjt9S_'V2a7qMocJjpGb<QF+(\8ouhT'7c*pQsP'E8lo\a^bt%[:=*lLbA=CQ&6aV7oNYfU%@:MW49PKe[V"`2t"M:
%Sb!"Y`?Yrp-np82n*7k2;Sfm+E#fC\G))Jb=[u=t9mu)FDc[W.1,^@9Y&M5'*2.2j'r!Z+Ig!1Z/2Z9-^/B4S@hdsi-g$`f2QHE<
%m`K"!Y-@6.dI$op8GXEqXl8E%C]Uk=@!)C(*CVd)Qu%aCMCJK/ojTH<f[2,FdC3h<m*LCVa2_4V5W+jQRA5gb%`BH1l'P=SKgcdm
%#R/%S.q2`<cjX'l:QrL6RunZ$nfI@@7M+aQ?cNe2^!YXJ5`9d;UD-N0Tl]HlX:l]7L<TfkYHgH-@>A%ZO4a%J=XGJ!YYj*16uo;T
%AuUPajYMIONjM0/E@P\g]&F5%*%3YhCDVN3Kf]lokH$>N4L`?Jg5EXi@_;K8fPGKCiqT3+H"qX)?nB;3!1H*=g^t+`B^OqlTNrbc
%_]EjbD^$ES4_WfB;m7d(VA0arU<H%IZe_'r=:\@npcbpoA)?_CQq)<ubgNBdJ4Y+l-_2nOQd<op7S;j%cK.^W%5?g5kNa/=S]b[9
%Ruu1qU3$,C4@s_WF?YW?"R#@/`fs?Lq4_s+&pER"M!9;<CUJ6Z'#CQ*K;\<0kOKpDlJfnLI*i7C$(egkE]RQL/mlIep)>TS005H'
%f9e=(3aZt]?]]6m$%S%,7QQqhp="tKOn[hV8H"-Rim!=L];&lTkMtYR(;kc/Xk:IW?@Zn-!ZVNH4pL#YD6F'r/>sP@<+l\>Ceu_0
%HamlW*8Bb"g?g>J84or^Wa6,9.XtMPr<@W?g:2lETg+1UPCMUD103,"f?b6mVaPVNk&N?ai+"*Cp+^YXJLYR.???TT/A*RQLbE1[
%JNddQSS6D07XU%=glBG1bSD"fp'-5eoi^(uA.6$*B9DWh\1C%'R)D_2o,YXj%E+WW2i-39&X&&V\DN=A`:hGGjRFP45o/F:8k<n!
%ZG_j^7.o[On.M3RP/Xd"h%/=O;Wr/+T/XNgB'a3ZcZ6*`:"u-XT(H3X3:nR`H78E92?88/KO`eIBQF8-b1?>r1jp,SBRUg\*N,OY
%WtZk?*M:;F7SE6@_S5#3m$tq1hoPZqo$O&(o5>s=L1IP1l6c?]_io$Dc#\9)N/5.(#g+"oho#GUpB.3PHEEdDpFm2D;eWQ7jlFA#
%LfTQf0N)i:.69$NIXp:06i7Lg747I21bm_RYlQHQ[YFcHo;1nl?/I2Yj/@.tjmI*JI=LLna&F$uliZ'H8>5pXme,fH3r"NFoE;.D
%oHZSUps2n"3St]P*t37p^?rki#D3<dF:^\cr9!ErIIt.l`DI^>6BsWB,t?Hls'9pb@dk=0.1/6[Qu!Sj)A/ur@X;9a4`A\`4a68N
%A1ZUe/?.P*/7._eDcQO(R(7B9$:0!M1PdM!J^D/T#I=TQ9[rYqMZ\(Tn?f:BjLF9Xh,2J3?V^L+4.%TJ4QFa,S7Ksf#u6?eWqV'<
%&eTjNGFDhhP=3?Z,aWFd5kOD7L$O)cI;CKE>0;ps`_UDs1@tbPQ.L>GnQBcI$@M76M\qCa^"Ee$h@(#$#?(-BOOfoXaEr1^Q^J_L
%ok&+n_+E!D3j+0g'T_a2\<3mPYj6N:]rm1Mo&4%[DePMe\Uqu&esef\bV0>iJH-&#%e:cb]F[ASrLtN]"mPuYeCYh=0TI#T?GBa4
%*"jK$`2:(0Z3A<E)Y5>_p0-#,>(C"#\THWG\Kr2E\l[\&^rS>jdEc`c9_"$`m9.:u>msrckguD7INNlU7u.JY@FHTl2=Xc'Y`o#V
%bA!SY9N%cQ*:TcU-];O\E'Ca[j%@T9+d+rA1XG5/L`a&a=Ctk`qYmjAA`gf_,G2giR<`dn4@[Q=ZZT&^Eo&51$9Er+Kfra4K4j>#
%3*+%iRE%j2:NG=%1\6![gS%'N5+-[3:$Z5"j3>g>R_/Nta$XG#"Z_YH[5H1-)`@.-q43/#M6OY#fV+YY>Q<&CRgMR@]KnQ#EC)>U
%;M"Os4K8gZmu=jp/leK(=r_oN4jN&7DiDW=lP`Pc=\ij%7-LOC"iAS1k4s]Md/)o[fKO!s`-V-(^*gjFp:JX_`!GR7MT>D?36pPY
%1R(6dgb\YLK\cn>KbgC8cbeO.3KH)6Pqe*[q/K\_9HB+AN*,0>G-"[5^=*BQ7UEOS\"iFdR-7rL!+ODuhf7P3Z6J9Sjq]Q)dhB'@
%=`@6,G?hNp/V_r`d'S=]PD?S6@rID_dTYZXad+<GLUA_D!'Zu"g&(4m--9UdUF4/mhV)(pA?ho7,fsLcnLhE@CB;%Zf"m0C?t2Sl
%q9J#`cNHr[@;M=9SB%S(4>NcBQ7k'g;I6j:C91!P1sEImDo7e0@bNlV5T;g7022*[F&H>#/26Lf]S,U.n8P(@jJ4nq*K1X8N7h:k
%&nA]2msCIE:X$fI.=Sd#\Z_M=2eEGE$bU,Rf*E83n;P$iG!B=jd!SnC&*oXV>WV9Q$BA#DGOmL"p*_!G7Z5Va8H6'b6SIqc_^d:d
%l'u:38oHFt5e[cqV=imCdcXX+EI5">/JQI/NJHN4g.>]tgR6;&0@oe8H>@s+[a<a\gsIb$9pFPX]]AZgfmS6niOimpVs."GUq(or
%Rh6G+R,(C"cH27/Aik2<S8juZE?gl1m;Da]ps<lbG)`N9cVLa?)PP9%b0>'.g0H!D3iZ#hfEtFJRm*tqQ6VRkSg$WU/X`b=r>B%S
%Ksj.E*:Q_^p%s==BVR3qD'C!cFsglg7pT5"rea8?dj?HW[I/HFg>-%6g>,i&AA?.'7F6'X@cKcI]b35<2(Gm$o\(KI6-BuM7sCek
%;2q-G]"IqX2X5#&^;@GB5(Y6[@:O[;W+nT2j]M2?qh##7.3>8Lg^1%%RH]8<+JN$e\CgcP1"\mdgYcPZpNhPJKmJf<l!t"#*90WO
%M%L0^\$:V$l1I4#SGWt)0WfeDYV@pD4b@Zm7+XuUlNPt9>^J:!o6R[dG'D\hUUFZa.cdo-nCYQc?IfK=gZcsZh)!'oHEgOB(GlS_
%&.nNg?iS^m@Sa&^)_7V'nsLS/4K93E:0#p5C5K`]2ZlE_7sUBGAKW$q@UBP5br?@5K!P6cOnW?WljI!%Jj4\sN2T)ip@Ws(H.^0.
%fJdmrk$X$o+T_T&:@&?tojk]WDdm(gb=op?fGB<7O!1b].'##Lgc\nO?][k!c<(rk@UIohTb.t8JunV4W1bplp'#%#q+0[.')R:E
%XQ*V->@LsdS-T;<S(JN#5`IS)01]mg2\6LjfGBbWB(;?F-M@Uc27U!&Ddm'M=.rOTn;2Q:5T=oVhq3J1=(:Lu[':nM"aOO&,O\,t
%ljLu$F-Fm(-2%LRosp.HQkK:JZMG3]q4>JLp'#RM:2GY[m.9-Ccg#TCRkZ5_"UR5`<+,L>4r61p%rA!?[5gT=_rp$'M;HDo]h98+
%YqKccbe73Io4Doj*AP?RqeOgB$hj+LSn3.AT3"Mk"2,q"KP+Y?pH/(dOX&NL_qhBRI)W:]c"9YQp]Y5^Kt(2m=pqY]K8MEPh*L*H
%k'$HHYa;t'j%O6QHrDu=fo>N,DqmAKUk1j/4YE]04k&^E2Gqrg@l+XhT3cq[?/22&?G.hP4CpGJ`&>Rhj`qsJ)`lJ`YfHc'6MGd*
%DkO&L:h%oJrP+I:s%D#5HhP_KM\U<\-QY>FrP+I:s6Ci!rULtaHi23:4N$%UMjk+53>V&'s.U&c?>NWCa8Zc>hJLm"+3,C-o(o1"
%D4QWTj0;D>\//gGLHdZjUVi'3D66S8h!3ZCVH;n,_Irb#MK&3)HtZiMf2L<\Vf14h>W;E4O,OL(H%Id(YrAu9$;23e8.>SV:eFZ\
%kHQW=HXf-5PI(7Q-G0\/+O1cEf6QpEQMe%bnV(.4DuJ_F@Y\,QDfLBMqdE["#iQU50mb_CHd!!T4,T<elh$>G9Yib3jUGHj0Dlg`
%$QSKi;62VO=FjuFULa7b&F,7`6`WUn[dSKiN7T"XDdsCXfOV[K/NejE`QUZBGnC^Y^3=RlU:06321J:,N#/ee.-tA>gXZ#<GS4Na
%2`hPB64.!="HnmU'R&j1,fV^IIAt$DaH(\SLZiOT,;K+--ENte.2:14DgE=?e8#Js(E@&J(V\RE_VZ4m7KI7c/;hUo;^fMR`H)Cf
%kOE<.'T-5W^$k4#+jZqPh7qkjMtlHik!dLN3,a5+rpF.19#M^eH&R"B0/;quJjZ@kq(,@U:]Cm90(33WB5@H-)W9GdBWF2e2NE"]
%/B&k+l+`@eI@V(RdBe8i^S?K)43/UH[P.82SFD^J\4[QDll/+B=.E+-?ld0ra2?P$o82ru\u;AY&5hX;l]3/0[\H%_Q*%1]m3k(]
%2b#!Vf)eCE#`b@%mnT\$V&/AMqM*+gqeSaGo6BXaN..5H0:0fd9j$"7S@?oZr0I-WR;%'XY0ksO&("c'J)V_OjjGlEB:L?kAln:Q
%@N=FmT%>\MdgJsI9(5L:ioX.XRo>BYb\_eG4R^jNoqReUeKZgFltLJ2DY'8UTmR>ol,0<hgESq;l'Be9`g:mr'9mSXA;#o,GC("t
%1!Fl-)u23^4#$r':IiaCm0W099#p@lG7/I1kV5aSm,fS][`$EMd";S1A4"MRgKD5BrXe[*ftAK^PL[A<mIc2)Mq,hrJd-^i:+4F"
%L+-Hd(G!r#g;Go07:[!RfpqkFSp\>KoeZ?@T$4k@jOMM3gT37]cSA2#Su0]mmqtH5`1%.\#AeOTEan726;a+7o\%^+:XeQ@F$IR6
%iOb/n6>XfY;4/ZdI[Y0Fp+ga>g"ki8>M.DHEtLEQ-`Z6-EII<Uc0@+1$]D;Dl#JDiIeO`Rpn.R(^'%*L[[12.:IGnSq^X$;UM?"A
%b0fo]=D$E"_ODV0911=*C#PhQ:+'sI7Q#@Z<):[oj;n"H.M6\#.X]`4iNh\'f.$X/8:Pn]T[fT?c%]8Af9>emN-`@iHu@F!,7(?]
%ODAqF%c`4Bh^Eqne9:Ng0[kEq,7\&>A21idcRo3&eN'fpC"m(J1#g[Y4F4Hi$o:G.)H4LOOQ$F]L!Iet(P$5]LX!#C_tmo@*Mf?1
%_[Mh\jL55HJBEEVZU4uOS[Jb3g^;rQo81Dqdc7'3`"N6La7X`;TuUJWGEq[TQEVAS$nQQ'T^=^u)57tQ_H8O#/qlGt>+rdkETb8G
%&_dDAJb>F05Ra%?o\q[lH!nN[\dJ1Io3TjFLgcd]0WblR([cKWp`967DBB5Gb)!W3nqYli&t@Mk;$3;a"5Q?UKorRkoj)l&ZotNF
%OT.C)<rJ^G#)b>#,GP#Gb,"(8-=!VAkH4F+C3o?\)t7;\`sBd''&]iC(Irr6JJ4O4fJMi51!#+9&=\5uka;5`I\;#s"rmf`/2.(-
%Ye0pFgA($H<%USCI.p#SHl/t^6g?p'$Bq0e_gRJr-+&BJEs^HV0sP)c)a'T>1^<6_*9\l,n2ZWI3AadM^SpRg;g=%Ia)W+P0C`Oe
%aP>2b!NHk1nB^$>(_A>S;K't/5XSTZqu3r>^%H_C."#J1?_0+Hk2S4l/2L$Zd/^jKHU%f=>2L]]"p<S1EZ`_6:DS#Mf]^LKjSWWB
%PXPQ!$Hkq]L[tq:Or,NXLP<YWR?ACPV??E%LUBJ[ps<EAe/:Is0m"&B3/Bu`ZYk1i''&CXDZJ!H.>blgTf4(@(M#768n($O&&#]*
%Ya!)9q1pa_l*-DjaF(o82B=l&d(RnXk-;cgKHC/'KlP@\,<f/Lj3saA][7fOF:k!,q,h(46ZR"('o)%G@stH*+3X20*\0ne4<=,#
%*\6m+!i%nZkabXJDNn50VA]'M=:XhH8%a$/,fYf<i8J&MAOA\,kQ@:B[DUpQb97oh*$M\5O9Z;k?TUr?I&e!3n1]/[M8$H&`I.0Z
%n#]XNH13LK%>4Or7Xsn]3\\tllLPATK0OSt/^8WoP=Biecl+V5[6pPiCA8#EULU-VfSnk,_pHAb3'O(=ds:F:H<l@kO.X@>n1]/[
%'U^_:#7mS:4*2=UL^tOr8$jRi)3Ubk5e5_0T%=GmKHB["6RT*.#^G_j0jK%[T[r1C3GlP:%jU,?c4_`RJ+NsVUKoVE0J1:sLP*6<
%35U<'Y$M0S@$'o-W!<j.HO7bq)=G>YcoLb9Ldud\:l'Mdck-M<c]/V,_8BsGiKaX:HLNWb[DSZN)=#&Un.9N"ioUk:[u:aki*jFS
%GJ/0e(bIm'Y)h84'TVnF@C35^`<\q[nB_Aai+n)KY4(<j4H/^)a3Z^1K80K@/GXG7@69@;!>:emdduDUJ12;kd,+%I*^#C1m?#M*
%UHa"5(AZZm@_hWG+_*\K5tO_e4Eq](Z(;=(7saZD1f6F0K86_g.3-7;TolN!-3egpE7fN5h84$EK85(B;&K;d@BZA?a9N6N?TUpa
%,[q8Vi8FquD3+u5UP0f.[';`<BMC&Q[6qF$E23^L#Kt(,qSC(@?9H62+;>[X_8GJC6=W"[IIJqbQX'C<a.tlOq?&m*(nI\!LiZ4:
%S-KS"c!WiWqk5&nN.1.JOKAu`i*dHZfkZB"]bs$(l8i+\:H3RQNV;:=9O"D2B]D[sEaChdX*aPgn8K?jMD6/7N0Y<kIP^hQLX?a0
%b>UCSK84nhH36BX*%SojGSoi<8U+0_LO\eI3r1hp:&,h/_8@=eH!WRkn4!l\i*j!81r3+>6eFj*#7ojlQ&bXtTpJhkICt.BEuW(N
%N\BGJbdpi$n$sI%b0V+J8o16^rI%8%*irg)ED0\SX3G@>Z^=C,I&s[[%[i%R)^0Q5eSL<gH*l+SG,lpshc%=&p/29B7oMbJqEq_\
%Fj0,C9c^D(AqY7hQ$p2Y.WXj'YIO<%dlb=6:G7.@c#.rJ#s3&qS!2ac/M2*PY/p+ae&Jb0/FUe&*e0f]h]Fe$\scK&N5OXtAj=a:
%W<Xa2#o/N-O3@4=q4[NBrM"V6IUAqPY>[YDkEP@@',P<Y+1]^_lUH"[?2oB'^Sb9TFmUUMj(Nja8kt_[l.<Q'h7;tNjIO`/YNBM>
%.FiP-o&BQsQ!&@a84daW=%Le@jOk!9\@''t'OP5@KT\67enR@9kuQR6Z.kjtd%9"WoA,7oQ[#d>RU,cPOUoYB.fo*?[ai*1i!Xqp
%A.U?_KNcbcQ>[9Tc-;U(-IPljJP:H/Zhl"CcYm\@lik4`^]=i2bd:RE<6D[Ng`+R[hp^]?lH/,;mD[dY]p11p8BP.\o!=LZ?uG;%
%Q*-S@/iJt>%#@!H;hegtZZpIE/PK.p:j1:V9(PbMjD[j,/FFePb279A['%@KM=V%8Ce(ksI!>Ir=M:U+7Ir`:B@kj7^4Ie9)qiNZ
%hF=qZ=Y?/,+")aa)tF(rY.ds5]Xki7gsK$Gd*^CQeSgoS121ae6c[-fRtm!bK2dc[[JA?4BQ*>=q!kjj\@UP5^L4l*T,G'rPD`-5
%?W1lHUg4;[:)`.3*]o<5B@Y5-op;$mRkoR`YJX.aSoTsEp?X]rkNX8i"L`L*JtMjtD&:9n`GDe%*?*;nNj,b$38H0`GBS2L`S'uU
%CT@8QmLNp-Ck#Q+IlLPTYs0d"+"0,56*K#"ZL13,r1!XNFF>QSI:HHudCd*X1Au#h5$E&XGZ-*%2qGGH^&BGJ9Pk'V,c8MNV4rnj
%7%d24%rl7\%"Fk[4+D]`5iA4dZ77M+HB(oZ+Gttc>N3iSWlQm]1lKIS?fK9*/jeujp\SuW8c<+mmE-]kHi^RFM,R,?F%Zl*"rAoE
%89=)9b;d^$qTdEq4u7-KRjTkmBH#U]hbBY'QtcF3nm:^,g8gHU8TQu4Q(Ta^qVs&Ch_%\8<p_NKeBZ08[Ij(AGhY@L:=T]\PnO2M
%,s#]jrTl^ajD3kY-tI6;:unjBlp>]oIX>A0;<Gn3_,/iLbp-<fOgVFn#B]tC';)?&+`^.VrB\Z$JUbf.05jZ/E%3O4S+.$iqfiT9
%!-1;b)sP5#X[@1DD9[L;n.l"@B<*.c/p[hSs+0-3L55Ai#2L4[B.`2?_,'Rn`ra/AXm:bNOStQfO>o4>1*]S_?QDF'BA/'+O)L5B
%4bZXpKb8b`F-Ja;(@F-NB5R_]s48/1kXBhgm\.T7ma=jb,S^_Wa]RLa@d,%gU#nGi&F7Gu?t7<;b7F_F2N:S.hr:A,J$P.*4?Et0
%q.]`5mPDh7MD%C\BDWQ*'mNs-DXX\a"<kC#+:.9(rd"Q-5cN]/Qk>%[Rmr,4#tr%joYm_JM'_Uk2dd`_1.EX^$^!.t?9jqmV8o.L
%VXSo!;WX<lD*M5dH*ElT>.me#a8qLpah^,gr$hu!S[0Vf-8iQ-Xd'q;OA$k"pV(<MiquhgRo+C5.F"U65hd>\Jka$5UW:uWn9XT.
%!?:j=#"('/de6Rc#Lp7j,a_m.M65X)o2FbU0KVJ_afYA8)j`&b@R_siASX6FRo3\jCJ?@n:Z]Q^]>>V52"O+]`CF+A6ZU1!R=P*>
%0DAi/4g9dH%;EF0%t_0QeGuaH+Iu0?Z9aCi<b#@\#@$!]qFS-(Q=!..YD4__QuihP\3$s[05^b\GP6V(k?%sV2K-s5'+095jaD7!
%MW2qRe>Djp^P*Pgd@9<+h"093Y5dL!jipu&#c-B[&^`@h@;q_-97,+B`k2od1P*`@/dcs%eSSFIqM^Yf4.?bfJ[ffha]$VNpJ++N
%I+d>-1FgZ5E1AgoohRfrSl$C#Lg?e?O]dp7(Q!,>Y7JD!6^R$m5PS;p_BIL^Uq'c*++0LIoZPiaR,?@e@V-%!aPFG;PF5M5R2'cR
%85+":.ITt>&sGIpUbs(;+uXj7lQ6[72HsD@!5W@3pbBd=+9WK^BQ$'a9(qa`_?;&\fc;&l@c3>,cGg=NPo47Q*emf,*:*'bYeQaO
%K@F$V@\1#c,W6/iojNcg$ZVa@^RYV;p/AF\P&TZjQ)<"S<'LkY!W.<u%gcZ,Sq@$26hhBA[[DE7'GnV3WXf*j&-r@eWnj1^KL4>Y
%>DiUE(_B.H;'PU)cae&2^")/VZU!H`I"b]9$4eW-DJ'tH3h1N!3F[`!,q(R\L]UP*k/Gtsm4+Bt3pF*/a%9&Kb'YY5lth+WQ0J-g
%X0pZKGAe&XhQ<%hqfX$D9r54B,<N9'.EBnA;qk=p0/Gb>Ch4+tH\5G5/r@"k#@Wek_L5.B;G'jMg1>hG;o$*%)G.89g"!Q3G14Ub
%Np@)DeB5p4nT!t,UJHsE4]3r9>+*89U<F=`EbAtZ$O$(\@g[sqY,jB+fsg(hb9OIs$T'iOV!c]d]O5*n1k4,?T)hq-MJ/?tcocYn
%DW4l8m>XrtdZ3^ANUFG\<m=dO@5hI4=gpE)$(fU4&,*:T4h-h(]q'Hu1j_VK@-5ogWJ3Y9OnH!85.?M3^'h?7*7G3&K7,jb7Zpcn
%ZB(sQl0#%PHdMMP&d+&=k,Y'2RFA+=)>N11fa.eMD_osc-_4*mK0m)L%WWb9^_-EkIcJIrg$0fg']''&3uN,Q?6^`-]%8a!!@L1b
%NV7OGHP="%EeOo*9hXOY?8$BQ^cl-=:"Lgr1crN=o-,F%$k#fnMld/,Gq$&`_\oFa(S#:#cG$(ZGJ.Tp#b*#j'2jDF6bG7`/+Tr;
%4'U!4#c_fE4\u[PX?$4l(VCQb-29jRA1*SLDT#hQZ-Z2qf6<Rcd4*RL-uf1LX66o+HkUcNF.M'J5=6Xq$Vb2cD#&F7l1R?rmn6b?
%6`RB'IQ9\dln#'N2ocdS6/FA-6b?UJjYni*QKoL5_UT>06hD=Sc0'.ZB)B#]S+]N+c""Qfr0`<cE=$#I]b&gYKt/X"&@7SfQ%dEC
%QF:t9*,Xt*.r!uNkZF7b4\p'm_p+`_gFJnHe2OkHH0>!2dJcu)$[Fq2FY.(,b8gD[4E7dID6bd3X>E%5RVWp\HFnLp8`SQC#LtCW
%q2Dp6Uf]1</60aEBm"0M@#_5?\s7IZq!(B2oi2JYYLHYP\6K[`hnBFO_30>377#eQ^)U8sbla/gJ%koJ\'D.:\5MNaiKX$FGu;TY
%!WC_6$Qpu@c&")djrWI#F%2U(]igSkjGS*UBj5'o:at0c<E-Bn!Xg(TH$O2fEt&q7j6cc')1T<E(<"*4mYsG8=s47[F7:3L\Q.!"
%[bsF,r".u7V]UlMS=F2eq:*ADM.7[Vc'P5XoOcHGH"smo#861I::<'kZ%a#hR,H5D+YJY=71?7pi3.N'gA[74Fe=d]7*VjW1T=LX
%VgV>@V]Z?hbb5Wql<cVd8!1`QG`81P7;05rcdpTT;:mtE`u(58Zt&+t0P?a1lgZk?b9A\Mpj$nn-Tu>Hb$.i\5rU,?H@/rb%frC[
%PJD'3G!r%.;HXDP'Y]C+&6^eDTs22>dBm@n6=J?M86R`'U#<2.OgJT*2(G<(;gtKU70oU.1jjsC>^W1$#)j7>0n!h?I+b(E"uY[Z
%`teOa5q>DO'M-^Ldu$Es`Bk-0^uH;-.nWSFG]e^TT/1*X#&WbqQ?)tYf7sgW:>WSjK\Z1:Z,ru\(?qEh`,:Gc)s]L$VGKUGqM%+2
%RmQ;q@u"lPdaO)a#C>eY1Rm@A1f,6C!KE384k@a;Y>pZe^@n(a>7^mQVq7FL["*q.Gn/G$DD.MB"FP/6AsY'aFN(<1FBt521Y5DU
%-tuH^TVp<"lW1H0j;DpK/@\&u3OXaG>sFL!Dom$egpcfdeoEJFKd<bn\=.4]cL\6A:Lhhg@4#ucjj`:"jW_*7<\rSo;j]b'.,ZmB
%YW*;S?igA='ET]3;uU([Df/ltepl&OOLFT>+%U=7k$G3+j="E3F*J4Xg[kdT@-tk%GNlZgntY3Gk#lGToD-"&SAMBsn(b0$(:\K^
%G*i_j8V0`g3SMT7Mk#,h'lnpIG&_S9m5r%mfCDZA:k;P3!RLOBZtW/ABYJE>&ikR!#8PRq_p"PHb6%6<$T?=q&?BD+B:8M<L7un2
%9QDRd!)gNK&+EH@?aDh0JOJ`[7i,OcJe#cL?[l=sm&K]FnEYWL_GU5-XGF%VFqE`i-[oAhe)paZSNA`W-QZQ+[jXbfcsjC*/q0]0
%"V<6(m/-+%/j4Y)(as6;!K"?M70uAJk,,:_Uq'e&KR&`\^T(Y,qb<LM_KF]=="eiT-$&Vrl:DLhrVhq-\bhPdaa.,tM"Fh2&REbh
%Sbb@Y%IcOX7QPEhd5VSWq!M_R`>+2Cnm)>HXDV1Q5)40IEG?DgioXtSNkEIfbj%s([C5p*(Sl!4GOBqjj0A<fQVetEd)0*h>a!'$
%\RSeea70e+-s0Tio4=4@q"YgS)tE`3GKscm`'Y]mY,->Ym]F&oK]S&Rj\NQ*-98>PLOWHh:D="(lK7BV\Q=<E:*siuMXEL1dNSuT
%36]%U,.o>IdkAs_@$5FPi>eB=1O]]MRm\).5RQJ8q5'uYM(T;)q(TRuM8kZ<f0RACmRRj60tKK$%aV4#qcTG3+(nsD[4_;"e#$[u
%6b4fhjLcb@kR]$U&+-)aZBTfb.g@FIBT:(W[=AFQ4L]QuC+"EC!'/YN(DdT3CZLI)X;?D@Fq!8b-Yk%?)f7h:hU"37rUdHHQJO)A
%_VRk%"/#=O`L$8+j-<"Ke%uI-A7q<>iIji"m"Q?^Ju)l"H9eOW4.qS8OgrX1?C?A6m8?U+h*u-'^H(76qn4%g=!NquVRY,kWA+I$
%`aF'=6R]p7bf<,k&io<7KIiB2EC:c274(Q*aM$,:08h=aV84_BZd$[]eDgA/Mq$7bhFc%o*p[K/n$pkmDXQr#ps42&*^M6,^V.E3
%'I-BmZdk!$h9'KT&kK/o48M?ca51ng+0MQ9+,b$I@qQNXs!,EMNn[j%BkH*Qa"%'7473e11>--q43f>fo9QMB9d.:eiL#rs(d9q;
%DNCpB[_kd[Q.tsNS#1OsptaV7P\``0,J]u@UUB-)gq90LFEG,'iq<]bda.#<l*5U/i/iu8l%Y7r`?QCUdg\DuIaUMb&Q,@A9/i/`
%jVcK@^)hf.gou.B8L$KPJY$ATgK5+^iW8PHN@>1,Gu2@+^1A7P+EF"=DR6i]Ote.B5fX6(;$9m+3st=a/8C$:H\Q2\*jqfMP+#6k
%*XC:f/:J8.P`/Ha+ZE8S;DL_$K_Yn*Q'*k:,RO1M?TL_,)*fFg[A,Sl4+&kM.Db?@>/'2=:nmP(3Bs(/[4MdGZZqn!Tok"c*.]qX
%BT7[8%0\4-+W:Xp-]bBlOR]HnUjC9:($1:9-*JBLK,98GQ1L='62!e"/8^#AnS?1m6\ohVM^!tK%m/3LAP,2i#DdJcX(tro&b";(
%^$"]5VM>j`64jDQmgl4L3/4RQnjKi+ZMnDBKpB)+DHl:DeW(ILr-COTMkTi?'KLp>Q!!b+Ru7GK&Nf!u$hH"#'']iE)p2q/_\,T>
%AgFPdbI$PE$$Ci.6bFa(*uS>;Qp[1HjLo"H3Z;]8Bu;"ScUo-%C688-OZ#aoM_Aqg5RQqF.J>*EQ=.dk86Q@g]3U;O+*+#.2_mC=
%B"JK0rl>15^9$6;0IMafQsS$?G6KcqW&H[cMcPkF.D/u`'XDc'05Y?;CM*hC"O#0>FUj-<1nTd`MLlI/CdN6.e3^.F4J_r)&T7W5
%ZpCDjW_n7Hg)s7F/@U+.g7SR#[fpM+Bu>gtNjO<0pcZ0p6$B0_5il![/i/2^]K&E,gn!.4?Z,>T0kc59nJKZ@&P=8fa%?bM#%bWi
%V\'j0f.E.>6c6EuP..aCi(9RS(CsF_=ubIX:DPnZaT*(SUCI^[c_IS!0,peI3*"(q.dZ!X(7E5uVkAHIKAL/SWh!YL5%[H$q9[LZ
%YmsT&%45T_!F)Hu=?_lHYH@DGOfd)QYmb40`4,LW]K$Wd8;BMt/A3p;s(gqZZ?;Hs;]ZOf%lo\dj)KO;6@7Tg,n.rCJo.'m]EbpJ
%;Za1nmX^<ohYu-Z3YtOi.q<[t#0@H^P9-VP2+W`ur&&Y!C60Fo[WN''9#Qu>&j>ue=l<Vb&*Z]_(^clT_*!E[3DW#Q;M2%d/7)_c
%Y1+Sp"iE/$T\+u,YpA1Wm'O#3Ui,N+es3@]N^/]!AA>S_Zn4g&IBt=:jMCpd=^f=mZLkN0Doaa*ed3gEX&`gTdklGDAf=L9q%D&6
%'pMKJYA!<>#7]`@&Y$h;U9qV_gu;l0&&_^TMFX%Rdn%_7jMd8[+e/nl/s2?PUXnI>&VJjaKDS3d7hFT*$$)&biYd;Ui]9S!nVgRs
%j4pRFl5YZ>)+!cVNhGA&&bHepY^&8ZV'mjH*g4Z=F';cV+s&jVAI/,e&FlFSMkT>>)1UWY&#'+>MNPY[iCQ,EdY9m?h%f#D9?[uh
%X!Q`u"uJ5SAS[5#)AsK-(q73;4ttrnqQ,4SEU^"s3O9Rg\Lg!(hm*6c(!q4AMqcWo$0*rVR`Y&6alB@qOa)7h5,Dd$NPou&!7ZA>
%!272!(J@CmnB2a1.Omf#.>bg:#?"NUe5B\AJJ=@l/VW"P*iZ!_0Th78]"#Kh6pG,l&)<gO[&m9`5K@hL'MH^+rVoc"kEnB4fCqJb
%KUEq[n2c*^*=s@MS#\dSME)J9fXoO*nO678h7?0mr=B:Y.f-;BEG9`J$g<nnX<GH0qKRXO.B0Ft,Y8UKBQ_kNTcTDce&j+uA*+b2
%m][Z]Iou,h@7%jf`[H&(A2?bQ`fP42_S3!&?;O*B\YK)$q<3QS4CcGQji?&q<+\pt\4>rm9I1RkgsKV\(g-3^j__usl#jK?W%@bY
%d`*JWVlrbQ@es7.Bk)VH72-NPkOU6\r-3jV+!14AUHO<ZbW7Baqr323[-(gcR]EM0,40rb"`;FS55q/d3LkWGs.(@SHFe,IDOHqE
%0!)4P4I4_FXeZ%*+2jt1ZB>\CHmIncig<cpdT'eA+ED-:Gr#I.hG]olgmNODADRWqB$<8M6$Xhq29M831,i<q)InW;8df7#aD>e?
%g+ME@(LA45ba,'FY?B:6E9#9qll-`NZgWnGMKObFOH5Z*+gQ--6<$A5a0n?k>Z>B9bD/mSL_J@i4okt#lX:q%.%QhU"0#Cob-1AG
%FT%?Heuh)mK0*EhQ6V.3o^V$$2,h/P;_r4Fdbo"F7KpeH4q4fg1.KXJHob``(UHBO=a$#QP1Sh3gg#JL!qM9!lZ?(_bLua+I<!;.
%Yl=i+Q<qFK(drAfSXV7gYeHNJnhRc8OgSa/,ri;k0Z\UZIA?f>HJGh0:='6&<X33;W(Xsa;J/;_;3WIB"Z.'l,`4\,2+.U>cm.>=
%L$X6K=)=pn:B_'1HmnRJOh;k(SX^FO$;&uF^IhN4#^Ldi%I<T=*P/4'AtnT>=g"(M6.&WcP:p)k7fLNfZ3Y1J@H,?FAJ):lL5@-b
%PXQG9`p0f<P!p3ll]am1fTts?7gL35$hst:,q3(7JRQQ^"rf.P=MD1/dU;5Cba0ur/CH3uE>^VN_,!hWV.iPSPp<+<^Eo-B0g85Y
%O7!LdMNeUr9]7i<6idtiiNM70oJCJ!4i6EDb^/&(F!gs"p^GdrJYY6reW(F_c=7ep+;p4V\$&&+X&4?j2:`@1Csk=ABNSVm"Gc4X
%)E,&]Jj?WKi!niUO@^5&;]B31HYS>]dO5/g_L5WTOA%DNJHT[jUeEP$5_:qMZBmdPL(9A<(>i&[o$#Pd^oN[M4T`a"#or&7R6.oF
%";7>1KN,`5PP@#1pc!+Z'9@hD#+4VD2aT1RE/PllhTdoB+F8tpFEBs1)MfFZ$JdU,rimt6-jndn"[W:<p#a>>pX"%V(0__%&:Nm@
%B$oFQP\8#+8It9[M;al=j#O,\-AH0QMR+2>3>9:d_n<LS3G2fGB)Y3VR/6qVf7iC'V&uL+Ug;SF(ERTIr(nA7lhoN<QJaXIMfIq]
%pP0;k&F1l^8>.Sp=m'73qT0=Qh,n,N3CZ]f3`dc)Yio>Mn"-HOU2=.pl^R(SD>/fYZ!r4Ph7NW#IrO<E^GN@qDVq<efB1H9h5,`1
%qsOJ/pYGkGLQ!gC*%e]c1im?14gKdF,D"[@^S;gB?i>e[LZ7pCFP.D$G.PJ(4Z>elW2E;^&YEMuX&,,@=7C!Nm-%EAe2Hl*i(r4u
%bO(kA[Ao_U6MBpHKAUNiZ,hVa/SDu@j!9gPc_h//k1kSXaTnWlI$j7;]3GV46@rVM,QBZb%HM9anH+`[%K?4:Pk\VA]*BYm($<Z"
%[b@YVpat+Y=)ZM\HnX8nVO:#+is*sq=Y2UQQ8Lp!44XC9Djb0\X&ORK(UtB9+bCh\/9"%??P!agD'S_;T;m8CT<()IS!/;E=*@GP
%aKV/9CQ#_,,"X%_"[/VK`/`f>r==b!F@hFQ?.7tQ0`NDhSuBHYl@Q((4ijmoVmE!"naUXjPF],;XF9V%S.Y^7-i`hD=`Le6;Jm!7
%jcG!#FN+loN-p!k_f4L(^\Ro4-2oY&78+W*VIiM)=-M=DmUrqMgoA'<l:HNBEoO:hk,p+=egl_hX'338rhm*YGj0ZWl^_Q=RGC!O
%n*V+ZG4h\/W?rE5dnnAK6lu/^8OBo?fBp`/;mE%rOG-;fQYW^.07@1*HJWs/4PedtXG]<0f>T7m*a:n!%7[H2"N0Y?Ah)R/X',;O
%R64\*DncW<CORZ/D"HX*?.h<=KpN2op"ZAZV;cbM^!k!O@*&ki%i&G%o"X<M_E0Kt,;H,d`Hind.COlB'B:>tYeBj"n&.2H`,NKS
%T6Vg(GpJ+Ro7u1ZE?9s.n6<$oa?)*ap*2;&<W?"d`&NghfHDJhiggpa^Ri6GEP<+H4;-\:CrZEKN:TS6Jj"e\BASJb*f5GVrnKRi
%c6G'>'`P(U@[oqt')m)pa8&Jho10:f!e9@'(e6lbY_8*^@\PN8[nfJ`9B01AT_mU@5B:I#$g2Ne)uiD\NG#L9mX+!oaJJD5IXShL
%Du:]f1d9m4,+Le"n0]iJLLGT)`rD/oj*?lhle_D$EbToQh;Ebr^):Fk1nHC<Pl'1p>oM%F9irKI]/2];(S2/h`rMIG-hu6g4ai:`
%dWc+Ln_>'*dH0ka`[??Z$5if>nHnC(H[]m\n"oRPnWcu4F_64$POCPq]Uj)6h#!<+]$"^W-foKZ2h1C(8!;J<Qp:GM,72s.pY2`u
%:1!tL3?DF3:Q0O6Dh!$Qq2LiI*Y%,f,hX&I_rWH\lQ#Y[X7L.3Alm=A\V:M`6^Cs;m/jcPr[="V8jN1a&Hoea9NsluZadg1HZ:SZ
%s&m"fAV!UHIB&S=KBUtHX3B1C?)@K[/+0U.F[%JH]Mbs$U2S9`VPcr)n/qM8VPK?pB7rl<S[2!W3Eeu-D5CRn=C`a(AkcS^AfN<7
%3q>MD4t#X^5pr>(QI("1g9ht=atWUV<p)&Gi.tt*4&Rh;P0f5?VP;*t^#Cp`61HcGSQ@o/-<3nb\#OASqEaq$'b7@5AH*>$J,$3b
%-:Q$I8u`4_<%L1W:AgBSg.?9:H%76Ja6[E=ZX%qBe/J"#lZY*SA_2\BQb2"o>a!WdK\FVk1sAO9K^/&@N\".j37Gpd?UAcHs1/+6
%rrk8Ua;Cpc84jNp&533*X2AjYjg0T>eA2(V)h77k?b`86B]s4%T;8!>A5a8-LWR0#6F)c)C='A#A5l9$PEIQ)56-Hac#A+R,lTiK
%WelIm;:$<'X4b79eH@>]Y/Pmr8mMSe5=m/HQk8XF,\9h]1]?;:Ot<qk"6tP81T8Z<$AD!,^Fg1LRE>)+o(iTNotRMNCV*;,1c='#
%>uPi\>B,:8UF"PrOg`iQZ$]2Qk@dL6?-(BWXK?":TJ5S%#-^YY"n50O2"jRC"Ym!W)+i:[JYYr\(MKMZ=GjtQ"Aqt[>"2BmSI.b&
%.RAV<WN;54UL>Z9UZq8Bd`dY!C.[7&BS]m^dh$&'@qIP`=/\@tA8G_2)9's5.\_J&3?oII$j7+t"[bm#0K[/dWBcS?C8>JF?,L[S
%N![PB0Je;kb4Jnlc:ibQJofDJMueE:)cOm-VT-bH>r7bB!X$TtY6p7G-#'B`%hdGi19_/9#l7I6'8g>ad7B][O=B4IUl93.#>kJW
%.QF`$;%8XW6L5Kk*GZgKnT;R8,_Wo>m1g)".2c,>TUgrb!(a%/!+"&AUc95jd:K6\5ScaiW/=]0m<"_NKE\S"'kU8/N/Sn^[?=K4
%UId9b^fN5kcjK+>d1$[Z#_6/X!$mFoRk0F@J3mk%&hG2_,pkoL!@5K5&k+5OPQsZWe;P_i]HLZ":^h(e_ri;2kW8'jUqhQj,RGY6
%?KJZt^N$.\2G7>l2@@aOTZ%`lm!pLa!+2;!f2PJq:<gS39`c&/d\rIlW.Nrl%998<3"Zd?"%On>KRHl9KC,3^i/G%%U51/`\1(?P
%Lr:4L/\ttE/rG0bU86Pa!=Jn6TU$'QVgX+/9uNI;=jf\G-p$c7(.,3D,,(HfOTddi"p1?\(a:"q6XXdAC1tIBkV/[G2cZ+#9Gt'`
%al)"e;3Co`FXdq:RC/7>N2b"I]`G'J)F/Km!1S_@$$m4@'c@i0A=O>BW(8B?N<Bn/AVK9C.(C!)XP#9AR_(+$.[=[<PAlAA^pZQb
%189@J"98J,ducirLdZFE"\kiq<E40&MRmCY1K74]-VY<bWb"eS6@0pZomd[*JLn'Y,T)-Q)T)J')K%D(!)oY-MQG_Jd/^Ll;kZTX
%<LHZQ#-)&ge--/Za`''>1!*$!J5@F?]$<oIk^fs6G=L(V?:`_k8rs[cLg#Ve1+.<K,)^IS6rtoAU8UpNf`87]&lkb/<?2PhQ7/J"
%'@dMGC07:[q1cdu)Q]+%8@1Q$VG"[4Y6b#Jd?(JBRNcE5?j%K\'J.Yb7_lZn"[e+iic#f#A\906ENn?+_T"BS,*bEC9bE]s6im29
%7@X\%1aiHDVN@#BoLGf_5R_%,3moK;lWBm3fKr+T.\^T6<)(:T5X.LNf"IpldRp``!]H:)K)uPSZ%-Ts2uu9eh*`D[#3%#7.N4OJ
%JSLom#0apuF:LqYcaul)5TOeOJ8uJtA:_i6/&;kC&1!\SE#fE&%58:6-aG6+YQd`G66A<!aN1SRL5!ug&7neG)QG"0<#qs8Ti*`_
%_+G\C77%M2N)JSZ^ba"MC5/Ff"$sPL]8](lo:Y\(!!>.D4@k:<]U_?u?nbiY!X&61TSk)]#*kPg;E[9,5X0TX;c_Rk&62,I/0W@?
%^8aa!J>ZUR/MW22C+HT2AZA]q'%g#Ac@QC63Z1K'/<!&%.Bmlp+=Y/?=k),-f2^L7-(6:q.i&iE1nd_X1rdGl,k,OQP!pWK%&]eZ
%W\E3b1u03MQ$#j#FH_]_C:'Z7B2`4b\r8$?&r7rlRaoar"@a:u%K[?_#[]t'0b_%u*)".K^aO[,!5/t_$%Z[).Nj>+W=n>B_#:58
%"Eobsq"!?fO[+UH3fO>sbJ6h<I+8XZ8cY>,l<+A39FV^;H&b1S1/KO<&lmj8>shHt9*"*jH(&7n<^VU?JC_L:1o^b3%l-$C&24Mn
%Jk1KT!\$OD)B,p'%_IR$#aLbcll\ZP<+&=GCBQr/#;f9Z!+%.<bb5"c(T7Iu!\#6-&<=TH,?I5p__O9r,U)2fLD"!=,4T"eK4#";
%+8Lqr8pm'c9g\AMe>X??'of?Aj:.M2$%N&n-X$ro`K3(W,eKM`Bp+F*!AY!PPY*JbXiO=EjNNl;\q59caGrDT)AQp2=duL*hFo:o
%!Dj<&%][GnB>>-[i[$)QQ;KW_ZW;fpR++g(j+`gm)G2@!!YQE8,Xb[a`e(NH1P08<-jZOa-fPn,M1uYE#\';LW!pdJM%MKWmI4(_
%R>dnu+P-q<G-H1Qg4;4p0Vfr%8X%X@?=5Qsj&!i__-EmA.e\lKL90rklWeC+J>_\F1Jn=4$k<uq'=kW5B)n5?,.j*S#"jNi&O=#D
%?"1Dp&L@IdW<`P=A9>Zh'iBqs2DV$<8=a:Fo-FF69GB4CZ4WP`_#U?HMD?^@*"TQV+c&gZK8mZI5YO"s0a/1\7Dr;n`&l4EJOCM]
%3jKT%ThrK8!GQ8#YXC;K)b"9]MTA=(Yu>D9EbQ$JR#0u2AcjDeAd8oZ2\CUL9'g66I*VhJ!_HWn-CW#4EJoniic.8<&kYQhFOC3L
%E.Kd5+17;0A>.hGfF1#CeYr\%Y>U3d!g1b!L8r'`#,V\n#:i)PL!p[5.n^%t!=_b4N"uaH):\eQUG]>(8;J9cJD(S(1se!P<^C?<
%**Kp&Z"XiM_%KM_'HCIi-+(Rg5cLL.cJTm!#S/Cb@^6M:_BcBof+OF^F[MJ]nRRfiEBK@@,]*QT,S>8c/($An[g3jB-a;.fW/2jY
%.8V3*-GqrE!?%?kR'`X0R3[O<.(q.0KY[4[JcZXB.ap!M$n@Mj1@5KBY?XjX8;C_02Dp_pYQW&b@[otR9gT7":CI^J(d]?d%uOdD
%k<fQ>-(tp!_@d>cfH!n%BPkQT-cuYiLJBN.S6%#V9L.<A-(m,_SGJ(seP60gPS$X:OK"\eKK0S[(&$B--EH*#CK<5p-YWKu<!:cG
%QEcm8P,HDpON>7HJTIncG!d9GWJRZ@SHqh%!FZJ\4NL-26q'Cb!p[F4Ns?tC;APWSL/gS&#MK7c>pel.KqD8_g2Qfr\i[;s1mQZ8
%o7.-<B5j5O1+o2X$^qMtiY&-4Zqi/*OnuoJ<#*q,"#Vo'!J@G_]U^[=4:@8!ptBflblP?GWm812'U+C*6t:I/'::>E4rHtkKUMd(
%g6.QX)1%#d]eE=!*7dlo%P4'-;!c48Kj+ok<HZ#b`#bBlTsVf'%nY>c2.VYQ(YLF(*Kcmg5Yb:0W$*oaNV*K$>GQ"a,g9LB(u-6J
%OuWN?TN\_HjJ&T5!^>R,Z;$Q<EIfN;@>Sf?+ou,k)p3oT8:UhBJZ<^d!>&5)@r-aa:Vn*onsV_99'D<AM?5u-OFE"TaA*spVKa(T
%1r&9u4.YjA2%+tp#=<r43!3+2=:$#S`%03Zm"lX<KS;[n7:_K^JuUED[4#=KX@,PmeX>"*gOVO=6Qn]m'A5M<UFZ`X@i3PQqQ)6*
%bW(0p%>A>VOO9:<U<6l<,u>2QHUUCQ(J@^c^<C.R/4,m:NsUmXOXcJ_K<*Br9>D0h+:[DgVU\Kd,&<o"K=i3t9S%gl6_oDK'a80%
%0RPUVL*3eDZk4EF.TB+u8Airf<Qc)DI0oYt0Y,^B$;Es#iZ-%iJ6L;O#g=LQ&-AsOU`Tbo-0-6g+&M$o#r%9Z#qSq1DYO77R^E6/
%QVh]5*YbZKJJ1K?MJ!,$9N,AC,o$q40Gc]/S3mXr'o8(e$%b,D8n(V+0VK97O@Gm06!\'b<.P4YL1i?,)9F6&-C2`9aLR@d4:t4'
%a4D2)k7(E[jp+=B,:A`>Z7^34(pOiK$r)qq:2WU'6PDu1K0mLO"KD\6JB1KBKG#JnL_AH/=lGZ--t>@@$+XIo<(etT7`>h<L*[2L
%KnqQrWT"@eeFX?^5fY^\)JMNoIq6+/&gEdMTJ-a"Dl<bd-/=3<+gPir,fC>$O(&Ed"qYTZdE[Q&6H9.n.-MkYVCQa>R*9D^):f:c
%JBgn'0GBYB*DnUeW^M#K*"R]\NCo"ki^?B<H=79)/qh:%&-t]][&\19V!s+(2^IB^V"*u0-AeG3j+,H#g7X:`3$Z]LXVI_0RH);D
%eqe"$eo3FLIlc^Q>4Jjc@#0@[-;d[YOm-:]89@3J^ngKc3`_Vo9."3^NTVR6OESJMDE'dNAa0jUB[?eH-.<cTSL\U[iek\843QD(
%$'qNGC(X'(!&g7M$D!ZtEQ:X`6.O.d>+C8q8lM,*,*BShW6CLIUcCOl\0m`dbce$!o)UGb!neNmD-4XiEL=@u*$);98KY`r2+D7)
%J]NpB@$]1LJgE0TlNdl3%KL!;BBZHh9F-dae>@=W3gnM88n>B\B]DEH'9n#>`:+Om.9R*g5>B!mM)_bj@[*r+!lF"t.T&''+Z+m*
%q&3!"5\O,q9=T>#a[?Bp"7/R9BZ;<&2D$'mb7(`^aoWs-Osi)Z(/%&9UI#8QMu&_SP;SRAe&-Hn.1#,NgB9VCVN)KE!n^<n+kA"X
%]V.quBuG:/"[I,n87@2@%')fR1PnfpKDujkS\b8!-IQWc)i67[*A*[MpEW.B$2B%,rWSrb,*Hq^-qT_4M9H4(PpE+:8tpBX>(hR7
%25>9u1Ok"t"KIa&:'qSH1kj*k.j-d>KEbb7R"9(=N?uJEV"g&hM#76ITGeJ0E7pB_(eWeO62#_p2$412&[bWd*rt\>dh3mVVNCaS
%6+*/c=Ku-f'&#(]ItjDIVD)Wn[uhfh_/37Mbf:b5R5#4eBNc(g*q2.`9jElb$,E&MgmOj&Z<\Mbmj=)!WEpu8TRE=*8tZ<qJXI6!
%3lf0]Qkth-ToA\q^a:4NBQAhZ)I4BcoB45]A],Wde!M/.LlW]6K<-ILX;W7q`+]m#EK8=I&.q/a&C<4KMWgL'>#';6b;tYbOZQmk
%%`!Rh2;-?XYGbZhnN^Uh6%l;5>'3DP0bs!j*a`&k.\hNfQr[d_LI@]&itMJJEXjiuiFfm&88NF:2:56^"&XakhPh:5hu]>j\7hRU
%k)UQR7;!9&/4N\blibcS%2?#(*.tQAP]hX7G6eP=`74iuMf<>UnueVuBdh1qa1]oabOq\dVFcJraZO*QA=*Wjk"[n.E)'DN'O\8#
%'5@e&;c*_(A4g+t_.i0_9V@RWLbb0s8;s6s5RJ4n^s\=T8HpQ]W&*b<@,MXI792oK'#sl:&d+'9i//g'#tQ=_&Xsu*O/t&bbZZ)L
%>ZBF$Kb5PMS1#"+l@;.;>Uc,Xej@@lC+!/]9Sp;nZ,A=!Xt])a)O]!tYOIP1bnN8qCpQ[b6&u7,U>m;YPm?+cB\-X2iD*GG#H5l9
%638Q\1*hi>49X2X&BN'2A>3:tHO74.'5]13)o69T<C/B:iBUn_c;d$^nRXIk,2sfIA>1!`k,Cu:fMcU*MJQ%RNS2f=hE/3$ldhAb
%[DK1(j7tN+gW[mCp:*FT;_;c>a)m"dXO*k]YS3b)V3"/7fpj,i^]9p.I8,04aYQ9G>D\mq&p<c2.9:!"+4*b+$S$F_fdR]!TXkXo
%RS%]g[m-W]@9C9DO\7c:AT[C.UA^Lm[e;Am@!Br\M\-,NIXkf-S*!]%d.XYglC4(ES19UJd'Vtf(dZG]]0=;IZA"0<!JFKc#\$$G
%X^Vr&Wc)j*_^b^B0Y<VC;^Y/SY)d1(_<q>REbcNg,LB(U7VU^Gi(bp-\[]$uncrX*M'fHP;033!2cYi9%@&FKA>t`7?:]s]jNJF9
%IqB?.*0P)A*4aKFAsd^>B"Bo_Ba2%+b+*Y?Yb0]g#\&n;l)DtPG_4%5Z,$m+bSKUd+OXdh^,eVlL-3Ed(rDD*S.'ZULB)(\[\8Tu
%AnB4pVC%.&Mh*0GJn=/?cj#R6/5m@o"65N\6U8'kKnDd("s%UC7WQG4!Yg>^e`%;NZVb\FNPZZhA:>)Wooi?0DLDL=>:q=96kD=E
%Em<$Qck("R(IECA1"[Wcaead(1'rRooAbqPX)dK#L,,pAEjZi2[LB%C179.?C-4"?cP*i<g`l3#`K@8XM<SKH`p'1m0We"!I7t1%
%-eW$abiFYmP%@+H'f5oZV?K_O]-L3-;FrFY-0oe@cnq`f%!;P>W(3MK9]O3i1(m'FO_/VqK8aUbPQac\--i%bVTY'j_`^lH,PYkB
%bgMR;!"2mo"@c<OMZ-l)_#Q!<2&&o,Q5KmrFQ>guE8^'j#"5^;]j7pY@5VgK#oUo9W9VI^6-(B0A[QJBM%jRL,OM./Xb^5r;A;5D
%(t`4g(/_nM4B7PM6qBX.W7kcX!\U;f2Na3E$0eUQY!#doqkJrr:9?D%Dif@I/ujW"YbZ:da4uRiN?[mK_B_Vsga\An:i,+C5T@)2
%OIYQuWOkf6AchZ_ZmB(WRcY/@?K,gCmYu1E)gU_eR3nk&!3bMlLpY#@25;Nu1oRE*b!An$FtjLXoi:St=^eDg6&"B+,&1N8X.7n0
%s4(E(.<F)t]M#,omdI#J%UE-NX$h)+&&\4UeZ9C-B,Faj]Q`e$:8+R<9"hOFY#FP`9497J\k\rsY/3<pSuQt%G>TirIsJ'JAY)Wt
%?[Kf%b<.Y)[<E9iKq>l1g:N?I6;LlD;"jPI'RCNap*=QV]?&eW)D$9dG_r>aUh"iTgI7][ZJ<'eY!Poi7IJu/=.sguWhmG@.m&HV
%Ne-!\60a]FCBg=f;FXJj%&4)AL"=nm1bErMM8,e$<)6Ra?K/#a:^icUWb@[m.q1o/jJg3nHkfXl>9FWkQXc<VX((!9aBq]7<f+#S
%7Y*\iMH5SK,$JnM;0Q%$-2rcKZ_Y2_ne,:u=7e_sKR:l><RF/>*5Umg.e-M,Mi7\,h5P(Qpa^+''&fk397.K%+bSde;pd)b=&^oK
%be#r;RD5bYd5UJ6[n;%l7mJq%Et*#Rpa]ebXa@hM&jJIAQn?R^BU+8B4a1DXc`#V6SMF88_oj4fVs?-K9(!TuM<JQYN%)<<=XC5b
%Ckh#Mk7kM.>5ZH?eL>TA[FgV>W`/,ab1VoTVHr=i&8+M)WcjfB:X4q^(%!c#7>ht-C-%(:WYR,U<-8Q(<@pu,WTk1D(<(Q]7j>6r
%>^\A6jJg*kgm&^(o$jt&gsmr6jJh>W\uT">aA^V<oIe,B6Cu=pTt=[WKtN#1gq/ihAKgaEp>tab.94CE3VqdZ<@2\Bq>k0=d-Ljl
%XHoq`]&j:iehELc87qD#,J<[T;o\$6q5_)2Y>kP>$dLhneo/0.3UmpIP+@a63dG"^Kiuj;>LN9-27[*=@4].RJ-6<[I!0ZO;c&n4
%/j+(;hqmraZ`toD9!cnGU`!d,+km8@^_C[ld1(1-OPpcZ6qOd+"<'>F%>B'H.0*"RZ!\3a2AucumE"^kZJ]8WHelb,L$ildIg@6V
%Zm0K:L0'IF(u:ec;qF`rS*7uQ09N;cdX0>;VdM7[Ah_V7]#M#oaAi6",gD,HYL-l2E/-2P$n6Nh^kd;q(VjQ69J`>b-Hh,V0jBQ0
%bG%7&8<KW#d%EX6C#",0IKJ$]<K5Za%8,bK@kG9W2)G<n-T!k\IZT:M7WtMh/da/l;kl$3&X-g#Ad&pjcn$Xt!Z=X1?/Z7?4GE;U
%)MS9d56:AB"KJ?ijW`MK,9Y7eEeGj.[%Pe*R&(.2RM8H7_5'#\HD1sUNPM?g4MV3X,8/]U0u?]Fa\\XUla.%a2Ff2j-BFWAY5id?
%Yj`,ZpBd)&V(mTa);EN/7i>!2ejlXP_<mLaW+[rE$XjMg9PZuK7Wp?b.C2b%MrQ]ZZqaJK3gNUR$=\s1H#(LPJH8#LF6;m/AsG]I
%d4p@hR#.]7(Bg]\i;e1"27-jk*0b0LCLj!VFdSV.Eds(c6=n6E6N.lq*l@t#mW`<26RE=B`0_SsTd(qi3$XagKA5ts'mDMuRiG#i
%DTVoe00ZO=h]G@m(("\$3,hA4(`=Uc7J8?iInrR&Aplf5NlB3P[PWd(I&$T'm]+F0b)D9KD,rNK0p4T!IKDBoe/)3knerp,Cj)M/
%6&TX\Zukq&O(aY]EI"8[!e?*a_4Z)s[Q-^6hru\SU_%>/XEcMJ540n]+Nkn`$Yee0l@1-Z&]<KRMKVhc8,=.q5#Fsk6pQs&O$o73
%Of/A"#&AC,QfO5NXd,Zp9nXdU7Ds8Q/rA@E=_l)SU&L2Aa'k?$NWgg#_(6p@c;*8b`_F_q7G1#!A1Vcu=OcgjP07<u-@--]bUdna
%V4ptgA[3496dN$=$5p8Y4m<6<[R*@u%M0%i(:LH2P==nBX>6"7c64JK]AsS]dO%WXZ3%T/a(>$?MC+(NHFJcsM:P$J4@WIU]g:4T
%0p3OA;ckRU7T^!uZ,3AIfdb0FR%GLland?iq]i/DT$=(29L@hk!M]m0+]"Ru^_3)B=Yl%nNYCq4;,Y9n#?.TNeOGQ5=]X@:!hti1
%EXu3<nOtEd2jtWVB9ZBCpnOEJ,km^,UoQ6^]6^-J.Zp,lo!b'aCJ#jTR3OkTC2(+/$^9U$cURV2/?;U![2?8^SN"-BgPD"=];89K
%cTS</oruJ:6mgudH/EWF"_4GQ><MP1d="nY?#m:,!ki#2'a*2(>WjbBCGb$/hNUkROKsL/K&_H<`.k#k4q8e"BMaou\#f<AXP=)8
%`UkS:'P]6P8nE#g"IjmEb>*.Q.uBU%ZfF]RVi/RY6>'!%"jGbLKX&$LE-*<5FlHPmWXeTu)JD!amnYD5Qr%@6qq8_m/'NALo7YcN
%P:#OqH!CQm\t8h7=iB<g3T*_AB7m5YO_mr@='c\]fBQ:&'X*+P["BmjBFO;/@ZT0^@<&JLMIQ5gNRank&RK*?)4.;a?+`f'HomIQ
%HLqA9B!d*\"H/R\c#QK_`HgIE+:H#G&8Et,Guj5c?`-kl0m]=O`^C-r*<*TlXUUbuNSH#7=mS:Tl7Y5Q)Y6t\eF<*Kd>;WW\kT6:
%^f5!RlH!rWN7CU0jCNY]BiU$].WGVZXthn(!GM_@l2Y*MPDN=?7Y42gM("Zn?G,@[gDnE+M&FIb]$ZUt&c$_\+poik#9rf]RpfR-
%BSfMt<W\C_Absa0LCo71C&s?aRS6aCh^BRZ#1Y#`1`s;r]NbL.m<,JFRpJdB1b9KO(nR^..n--?!![St>.bQI1kXZ2Y(i1p:sXtc
%C\eT0GJ@Un9!G]+\s)f2Pnh(8&)I$@!/uu^.uTV)P*i"Vd?pQRXfILkSk>ifPFO].WQcloXIJ;kNOh1u5H-[TOulF"Stk7C>UQfX
%O;*).b!t,s,ti>%k9O6ls#A2OVlXSUeJ!jWXK=/eOT9o#I5R=+,%h$0ok"C$jNL]Q+?=@Z7Z0gfK=7R>K,YO!F4RV%ZicLPM56>6
%)Rs-G'NioMJg9Kc>u(B6L66lqG+<Zki9sC*98I*g>'ihUe-U6u-;MDNC6n?Z'cG*(dAR0ko3S`QPrX!41:<1<'a:7C,H"GNA%=s/
%j<)4mCsBMiTgW6aBRj]e@aWf\E9b%KFZA\D9C%2j;T)7'fM%D/4.VbmeB"_[ZFhkA`mA%$Ho"]k7)Nj)]k!Wg"e5Y*<HEU<]etbK
%(dm2SF%F@d-abpl9OV)=(o&O-?n3s'6]G,"r9QDQ22"C$[s6[X69s$YJN<n4[cj2dGKQ(,1/8d8-s*_S@M(=m>]>"`mm<.]iVg'j
%!pOJHM*U<#.soNbS".>)eu68X$R6ri1b_qU4`Y\:BFaCLn<lh2A,efk$'s',67A&l%FR&_Wl*m)[01VGc?^UaZM9;_)\ZI+_+>)a
%Vi",&_#Z5*=CtEX>Dom6Luh0]OGLdTS$c%GH:JHF,E8r8l6g7R>#eOo=I.XIia[:h-[%(kWpYqY%Wb$(Q1#k6dDB4&/&!$P>Z@V+
%6kao7V$96Mlo74pYXsVb6Zo-P\IGg3;!'\&kY,3].opZa_hRYSm)N[\G\3R*;9+'9c3c6fl&O%GkOcUNE*[6+"D:d6)e]$*b?G['
%9q)Rn[NqB^]A6R3W@Q@_&Xu<\FqfZ\1#1faAi.r5ob#%c>c)!,8Z&qZL92$=NZ/(m_%7<#8c>Hs1OIo2"CJ8,Sej>/$A&@;%fPCn
%iTps_B]jqnB>lJ,93=I4(R&4"J=>iC0!1/se`cjpH45A*O*->gl)M>;m'Db,N_<;bQb5iQ<k4H@>UN-o"H2NarMXJj[;IH,d[4'#
%`Y(5bEJrm78F+lf]5fDb]NjM8f3/m\]l_?K[N_f0Pi;jLUGUIOEJn($\@6Y*$N5)t\jMd:**8G?f`!]B>M>&jj50^6H$cdOBB!1=
%qPg9MAfXU2P?pGC-OJ$I5n)0S+PVk`<S%$AmLW1V`P^L-frCC8gYA?RUd6^KQ4YNKYAnc3m^bA"q9U_KS$@u`NMT1NTlLT%CrBG%
%[o##`,4i#q.:(^Viba?YW+%!;EmLX0H^sI_&M>Q?o=ip^1UmUAT`/sQQu91#+D_adTr8:G-^f#<CDjrjbI"NR3,4ZGmK+]cVuJHJ
%@]^Cd)]$qJ*'pq1Aei@W&WH=g,1-tUlEC83E/0`2UqPR?bcCZ+Q"V/Nl>)Zr?0iHK-;:a[I'_JVG?i*V`Y`m2/Fh\ZY,&bk)C@K'
%>fCTpU./pTaoXm<%0il;8'JDs>P7KVr%1)>$3W2%lq*X_`Q4tL>$9a$[3d9NC=Va0'KQ._=.ItaYbKP/_=/ZX\?VXUG=g'7)2YDQ
%!bCn]hG"Q'8G7Ce+skmm<B[Le(ogA#=?9PHRrPfL+bF5<nOQ)[S>;Wpd2f@KopP_Z+dr"g+U/rg$n9m`7]e2N;:I_VIHdik$goh'
%6CAS!I/0kr#[l+^F+&sfpiOL9P7l'a:hJ75hW$C2<%c$EK;".7BSO^FTW>?Q#7J.Vd@P1*!+diBn'uj*)R3O@aZD_&k#-<W"Ef/E
%g2*\#7`2R.I<H@%+/#OF__akQV6_.1pEcVlC^P&QiV%(Ee(>mV^)mgdFZ[_s*$,/S[a;p#KLhRj/_e]:%Xaj-]s?:!2+_67YS7_5
%YOeE`1#iRLGl08&`,4RX<^WJR4Nk#TLLFG#Hl39#FKN*+1pLjMC6`^&_'&]<J`p-I(LEc`ikh&V&"`F2\*n8#/_m^n'=r#sFPIDN
%_[@S2a,)ND%HeahaDo)PEa<PP3%j8MhI'u:>i9J3_9V/P^tX*dNQuNPh=gDI7d%:SbB@7C#TX_'fl!`E3\KbWhI,Mg>i9J3_9V>U
%^rpseSFJX8kV?FF't*)=RH90[gMu3-F9A)gEC%)(#!9HW!\`TW,<<Br!cR+IAKuG)fO_[fDiEaolJI%Mp^Z4?S\T6)H6/W,2PTY0
%\=jqG_e?b'jG*7uS)SeQ[dAZ!L@50![L9YP^'Ac7/uTG2&*,KOO5olh"1V%V'qO0-!12pO/oL-/gpRU%W4`FXgFh]!p)_Rt4!2S4
%]n_)]bBZNdp)YV<>Ti)"*[nL&YXRh?JD565(T7"XDVOh,MpZl:\*^c,1O@A=/\f\lDf_nl$jT:]Wo3974@g\iFP]uFlVRB&?r?SM
%c_<bSg>>:kf)rc-!r6hJdr0N&0?T%WEV#l]`,hTCN3+#`VO8ogciHc(WPaJ`G1[*q`8tGBLp_Q1'1=MZ+aAh4Y!=!WV*%A*8kg/$
%EA3j3@Y2%=cOF'>DU)76":>lg%%oXhofKK8l.F?*M;TO<e%8G0NhX-Z+n4J6_dq>0CL?-73pb(fl+.!E1N<04L_QX*+EE#M+gdmR
%Y@B\L8QR-G5d7d^bPU8"#jO93VkZXdCnmf[c>NJK7Y6M2^s33],R<U[P`FA>>$])AT)CJ!JQf5/THYA9PX$>!aGWJeCXbC5(kMd0
%&CHZ(.E5hKQjKeI]9Jaep.(7M+\i\t#ID?LbRN\JH39<]c%o/[3'iu@E@@hK:VLiR">&=Fq$)Ec_nhMh4Xpf_3XrLTHJr8-?jDLh
%#qOSb:=FYO2LhlI!FVo]LIIMDC!*C0)oJ.iVXuu8'RE$!lK"BVUmXpL-X,UkN"k?)L$X_.<NRr'\;7n1;eg[Y8i6qk`:Mf]-nu5q
%",9U'9$gO*QHG"G0hY]1b2(UBVhu^lq`n^\6I&:[iF+4\&>DF%"[,d%"AkC$D%Faof\$sH:n8G<4O.^^&A9J)MKC-o*u3_0B4)4C
%0A[B(68/gX0aoAP3E-34S11p:;IMG6+g@IR]7Vk219oh8&\A=7RO4kf=`,XSoZ_b]BkmiO,C):t'J(q$T!JSjTp-9t3>X/s6bc_a
%j0$A<+@q*@dSu5*&\;`JGTp[RUt=J7Wp\!iiT$$`JmH.(<BhCqUP/mk@8)EN+'/`f*h0!q$Eb?uhWW`'-7TFY-G`JUMPuJa,i<"A
%FHpFt#JndFGplkWdr\N36J6doT7`^Dj\j_!=_Or`UK'Wg"u1-dELEPV7<om6PN9XINoG4$IF-bXhPrmr/-mPZ,19%.=r:bEP5Z]N
%I#9gJj-+MSY_Ys"JuXB18]F;PW9:6K.@s#:jebdBffXq""*85<\!d_T&!BJWCd1LE-jsq8ZinCc-o8oXP)]f#A:TSm95TW9R1L_s
%MQ19Fk[99MRKh8]7$EaVCO?UQ5j!AP//1h/KXg<'&`=(ds*CqPU.B2n,P'NCBeR8b=$1XUdYV+(JZn>0EKo+2\0"ueaB@7X)jNQ%
%*6)T9"B&)Nj!od#oO]5J3/t"l.2?3/5Uo]!A5U4\Pj0-\V,e!*9X:f\$2tbI4fjW$('A^LTMWU.^_[u8h%'9eFV_n`e/[>#EEO+i
%U;e`YD.XWBI[hmLc@MWp@kcFO'nF3H@j!Ph$k)l%0o38S-W9Cc;EM'4IAtRK-5\LBOb1n;K5UZ]29H]ucIAeIL#X-OJ0[P2o5Mn!
%>qomR,R=j7."2oZ[Ih(I:9m2IkKR^E6Pb]Y*89c9:/cORC<%ION\1DmiV2dt"q\O7;rMp^!d1`>-:m-bOQDC&nD#f@;V`njAu$;5
%joOAgGe+80I;1EhWmo$BlE5+=o$bN:90sY</XW6JNh^b1&."A]7T1(TTq[@4_/*k8dEf,s>AhFh!GV%:mR4=ZAE0*MN:''B3N](2
%aGW>V7<T`[I7YUn&.AP%Jua`G>-(PO@obKVjY#p_jT\YHAg80-&@k<6;r:4JK;)cPP2K6m,$I6=!'Fqpq@c<Zj(,`]jB3bi,O#?F
%qq>Sn\irHr68Zi05s^;n2QGJl9F'L&%@UQo[:,XV_+TE?&:INU-Da!8I5/@!5h@qh->7hTO76S&@cY*AcT=F$,*.<s(Sm(-N>GIH
%O')T:nk)(P`hnRr%J0kO2X#HQj<%PD0jp''TQ&8_:`^"<C@aN42MhS.VId,1b1sq@`djdQ%,XfoG-Fkq4;T]@24X1(9ueb#dH3I.
%,KYP)]a-Ni/$X\n4\:e",f]IFaI_[?S8tT,;i4O%3A&-;o7JJX'CIPk],HX8cH\NDKp8SX'#,ejaK\Po*CIW[oi/fhej@7L5q6u`
%:o=]YX^M8V["Dp5RT[F]EPP8!<`T^!nP-38m"8*0>(jCY'V0!t[RITC_qr4HK`Z)MQn_niqd'Bf95`]dX*/#!M`SHfVQY_sjPRLN
%i$%b9)*$NV$5i2bYo\m9)f4gelL79ZeL%m7cD4QWF4G.S&1g99qD=K@eRQ#gO6&\ec)ets$G_:+s85U=B/j:`OB3u*-UPP*Ju[I&
%On"D':``84MofG6.AO==qD\N:5UL*MkXjNZ`LF+Qj3X]VGb_\TUA)[6;9Bn@%"2A-6r!C1G(;NlPrJn$OLnsja#"0q!#`,uatiIn
%DQ6D=2!L+O'^!<O*XQP!s5<96erm-(b=HSpUsjpB7I#?1fDu>H^=+DOYeilr/44C:78_m<nqUl&)RX#^-Mj-9CMGG^Ej8>k\kOfS
%a6_UhbQ#EL%0M,Y'm0\j4=o-a(_`_%AW-??XVXF?_@hfsXNQ,cT@T\f`,0]@^b]$6\e,K&UuAc?R+93jhR)aGps?n;>7AV`!(M?p
%am[bfh0m;K9_&@jo30R3GC`pDM=*'>;-hMS3kku?U*,EGf8.H+>H?*C=A\oh__!'$`-phXLkQ)iTrcfif/IPk1Om'a-5>Znn,/c0
%+#sRQ_hY(h(P(7'4A@^(^"<ng*a:%L\PB<m`%ccPFk9?&s)tQePD_q*"jDe&:,^0O35o:AMJ=ack&RT4+5hQELE4RG^0V-aYPIP5
%W'Be':(deh4qo'B`?-Yl2I>82n\@%:UO?k]bK4JSNXFI&*2Z@nL)h&pPU;0<F98je1:-$j)8*-m_*q;"YN@_:HNhJIEE)?f^!%ak
%F',7hUr+"#<q0%DVsBn^]A(O8Esj1U9r$dl0cGC[FcRhh'_H*tAP3YFP_E<]XH<7_!_rp-DrZ_bZ\_d4'XcZFnth/):,],b2/".M
%.F=)g^6(N=Y!6F(aWU/mU!B?>V;:?79ToC;)ZZso)9kK=Lg%@:WQo1gZkdiM&F<Y,`\lf?Hd;\A<clofYE7R%Np.AN:RXu0%22g6
%k+7n.PIM&'J8c=j=GL%\L'>VaS`\RS+1@\^?N],^m)*J"AarAZ4CRq\J\s7%lZ&Lu>r-H9.bL!KP)!C"b9O`k3%_/@?moEB4e7nu
%h>ERh]%:4ic07S$gG5pQ^'t#CcMl%jo(^MH^-Xf+I7VXShg.b9glTE]Im/>BjB?qM0:2*cVfa#fN\Ao7O+dO>IoAtks(k3egQ/5P
%Yg3Iuq"8l6L-6Fkp#unf:\]lj<r1Tneu*nDp4MhXI]Xm(^D8oB?JJ.[0@2K036tk`gbRYE:L#R.1>Fi^>;)?cs$EK[.+?pE8%XI)
%=mE32TA*c62ek$>d]_9^a7mc`%/iNgnW!,+r.6N<NUtZt_C`Zbo=Y"</]05!)S)`c=BgO1</=>T.t)+,gucep:%K5I_-`9G?E[4R
%KE]cNN=Zn761"*\3"9;iQJohD#@ZSWi>3Dl$=YaW7U(W'6jS=M2_CZVB^n#r2!82H=0rD1X#/tXK)+qjq@!=Og2k"\)<4H^Mi[kZ
%^\+jur$?jQA$b"kOgaf32<Tb<Q>MIOkiX.63cJ:Ui&DN5A%_foM4K[rj)E(/)26N_IXGGa?uI[Q2Vla)h-A<D\tPV(\Y.]!6Pl/3
%+d_;<Qpo_6Y[tAK[j[^R\1BRXo/.>)Rr7G%CG+g/h9\mS>gR=K*b[8cf0\$tfCbZ4\PRHsK:JdK:i<dOS"[BCgN5eABlcSLl$SH7
%c!8&$]!&ZCR="=mheL"=Vt4Nre[jMb/1#8k"juTo%]aLe5'9o)T0"S$p$=?\'!q>Ab7eS]_aQKZ-&M9&aj0dBkFQ%F!=,_>L-HAF
%pgIA<N71Kg2']eKZ*QXS.EZQcVmgh@C.`%4P1.?-ghJpZg8P5;0!3S)\&D*r];/1\ma+!@mT)A3E*MU,\4c$bT*\">pn;e%goYV.
%YBS'X$?q>sDVUq+9&-OgHJl6QWGn3Bl%.S-Vnu^HVk;HQLU?=F(uc/dh7,i*<$-t-FA3;$(,coqOu;(*6e@R4>LdgS`?B"Hga-Z\
%>]4DH$?mqf0&.mi8hIqbd.G+j78r.t4k#BP"AP_PGfcBQjXtX`8H&j\5$aJ@kRYfle"NW'L0#5_YbdmMZb-98TnMmHCnP!=JPDaa
%r*`7>0&$c@,>/p"Rrlh(&0G8iT#N@c^aZgL")*u:i37-<CnP!=JRbT`_i*mc$;EKNf'R7ajV?F1=\U9j/2rZ*E2[JW^h%cp<dfGT
%!1N!QaLH<$"b,;$$:RhIV>]bH=!2b"nbdC9]E%I2JonHqZFg5f$?H-Q><[PGp@a+!s(Ah7Z0CjQrl2uf-,7T?D7Qgu+XsL?\YG/=
%reRf%)]bmENWctadDd3`Lq)1U/]W?%,N17F['+[u,3!K)FPsSP'(0d-#B'D^i@ZdjEJGK22<X(SPeYu`8<D$jlq8AU7q*O+ml>@A
%q$;2TSiml2^.4-]bOZ^`m<XGt*7(4/&'mVum</-q%_!\<j`D!fp,^&r5%imcVkZT-bN0_Rm;mrm4O+n2+;U,7VbF`DhsLpDX<?A9
%PSn?U54K7]$%4bF^mZ*:)eOgD2QW5)E:e$o!>^)tB3igm0<k93]A7GD5SNGQGU%*NJIRa22p;[`1M',7^.uCSH3N;lhW:8Sh=:W#
%!"rD<)sESh?rc(X!1N!a3;'!6")*u:+QQXd]004bDL7'IIK".ldk*4<d-p/jj)0,GG4DF>TNPTOraEu[KkZk!SpT4q3;%a%!prY[
%`nSi2CJVXupFq5HHCg,LY(r[nnLW2KH%<L)c:2Zk6e(4@QCgD>%T'X\=k>^)%T/S9fr02,mb?bQeDYFu\fK'cD3%'6j_m-+DI90W
%ron(hoQ`D7B6,,3B&a@c6eq'?%bu4`_Hfq!^hk_LguW&>MW\q6`8(o8?gmJ<_Hm.Pisl;]h!JDXh"EDCMJE^jEi^(dHdR00E\?N/
%q;^@]rREiVoCqpMs7#'`rpehE]`76j^OH[Lr8YEXhuD/$n,E8MhZ*6@=5X&Um_@WYmbNpgroqbtrqua[T0N;Bqk)aFr!^mF^\dia
%rq,*Pi1tM42rFPl+9(]oYPo?h%mJP~>
%AI9_PrivateDataEnd
