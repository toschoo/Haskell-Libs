%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: supfighetpht.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: RSLab
%%CreationDate: 9/17/2008
%%BoundingBox: 0 0 235 196
%%HiResBoundingBox: 0 0 234.8335 195.7330
%%CropBox: 0 0 234.8335 195.7330
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2008-09-14T03:30:30-04:00</xap:CreateDate>
         <xap:ModifyDate>2008-09-17T23:11:42-04:00</xap:ModifyDate>
         <xap:MetadataDate>2008-09-17T23:11:42-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>216</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA2AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqlljp2nyxSSS&#xA;2sMkjT3HJ2jUk/v36kjFUPrF55J0RYX1mfTdMS4f07drx4LcSPSvFDIV5GnYYqp6Rc+Rby4m0rS7&#xA;nTb680wCO8tYHt5p4ePwfvkQlkNRT4gMVTX9E6V/yxQf8ik/pirv0TpX/LFB/wAik/piqnBoekQw&#xA;RwrZwlY1CKTGhNFFBXbFVT9E6V/yxQf8ik/pirv0TpX/ACxQf8ik/piqnBoekQwRwrZwlY1CKTGh&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:B46FD1582882DD119997F45A17949884</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:9D0A54E52A85DD118E07C6FCD2A1A4DC</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:B36FD1582882DD119997F45A17949884</stRef:instanceID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -195.733 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 195.733 li
234.833 195.733 li
234.833 0 li
cp
clp
[1 0 0 1 0 0 ] concat
gsave % PSGState
23.7642 0 mo
23.7642 81.4292 li
125 81.4292 li
125 0 li
eclp
grestore % PSGState
gsave % PSGState
23.7642 0 mo
23.7642 81.4292 li
125 81.4292 li
125 0 li
eclp
grestore % PSGState
gsave % PSGState
23.7642 0 mo
23.7642 81.4292 li
125 81.4292 li
125 0 li
eclp
.75 lw
2 lc
0 lj
3.23931 ml
[] 0 dsh
true sadj
23.833 80.8789 mo
23.9019 80.8789 li
23.9707 80.8789 li
24.1084 80.8789 li
24.3145 80.8789 li
24.8647 80.8789 li
25.8276 80.8789 li
27.9595 80.8789 li
29.9541 80.8789 li
31.9487 80.8789 li
34.0806 80.8789 li
36.0752 80.8789 li
36.1436 80.8789 li
36.2124 80.8789 li
36.3501 80.8789 li
36.625 80.8789 li
37.1753 80.8789 li
38.207 80.8789 li
38.2759 80.8789 li
38.3447 80.8789 li
38.4819 80.8789 li
38.7573 80.8789 li
39.3076 80.8789 li
40.3389 80.8789 li
40.4077 80.8789 li
40.4766 80.8789 li
40.6143 80.8789 li
40.8203 80.8789 li
41.3706 80.8789 li
42.3335 80.8789 li
42.4023 80.8789 li
42.4712 80.8789 li
42.6084 80.8789 li
42.8838 80.8789 li
43.3652 80.8789 li
44.4653 80.8789 li
44.5342 80.8789 li
44.603 80.8789 li
44.7407 80.8789 li
44.9468 80.8789 li
45.4971 80.8789 li
46.46 80.8789 li
46.5288 80.8789 li
46.5977 80.8789 li
46.7349 80.8789 li
46.9414 80.8789 li
47.4229 80.8789 li
47.4917 80.8789 li
47.5605 80.8789 li
47.6978 80.8789 li
47.9731 80.8789 li
48.4546 80.8789 li
48.5229 80.8789 li
48.5918 80.8789 li
48.7295 80.8789 li
48.936 80.8789 li
49.4858 80.8789 li
49.5547 80.8789 li
49.6235 80.8789 li
49.7612 80.8789 li
50.0361 80.8789 li
50.5864 80.8789 li
50.6553 80.8789 li
50.793 80.8789 li
51.0679 80.8789 li
51.5493 80.8789 li
51.6182 80.8789 li
51.687 80.8789 li
51.8242 80.8789 li
52.0308 80.8789 li
52.5122 80.8789 li
52.5811 80.8789 li
52.6499 80.8789 li
52.7871 80.8789 li
53.0625 80.8789 li
53.6123 80.8789 li
53.6812 80.8789 li
53.75 80.8789 li
53.8877 80.8789 li
54.1626 80.8789 li
54.7129 80.8105 li
54.7817 80.8105 li
54.8506 80.8105 li
54.9878 80.8105 li
55.1943 80.8105 li
55.7446 80.8105 li
55.8135 80.8105 li
55.8823 80.8105 li
56.0195 80.8105 li
56.2949 80.8105 li
56.7764 80.8105 li
56.8447 80.8105 li
56.9136 80.8105 li
57.0513 80.8105 li
57.3262 80.8105 li
57.8076 80.8105 li
57.8765 80.8105 li
57.9453 80.8105 li
58.0142 80.8105 li
58.2891 80.8105 li
58.7705 80.8105 li
58.8394 80.8105 li
58.9082 80.8105 li
59.0459 80.8105 li
59.3208 80.8105 li
59.8711 80.8105 li
59.9399 80.8105 li
60.0088 80.8105 li
60.0771 80.8105 li
60.3525 80.8105 li
60.9028 80.8105 li
60.9712 80.8105 li
61.04 80.8105 li
61.1777 80.8105 li
61.3843 80.8105 li
61.4526 80.8105 li
61.5215 80.8105 li
61.6592 80.8105 li
61.9341 80.8105 li
62.0029 80.8105 li
62.1406 80.8105 li
62.4155 80.7417 li
62.897 80.7417 li
62.9658 80.7417 li
63.0347 80.7417 li
63.1724 80.7417 li
63.4473 80.7417 li
63.5161 80.7417 li
63.585 80.7417 li
63.7222 80.7417 li
63.9976 80.7417 li
64.0664 80.7417 li
64.1353 80.7417 li
64.2725 80.7417 li
64.5479 80.7417 li
65.0977 80.6729 li
65.1665 80.6729 li
65.3042 80.6729 li
65.5791 80.6729 li
65.6479 80.6729 li
65.7168 80.6729 li
65.8545 80.6729 li
66.1294 80.6729 li
66.1982 80.6729 li
66.2671 80.6729 li
66.4048 80.6729 li
66.6797 80.604 li
66.7485 80.604 li
66.8174 80.604 li
66.9546 80.604 li
67.1611 80.604 li
67.23 80.604 li
67.2988 80.604 li
67.436 80.5352 li
67.7114 80.5352 li
67.7803 80.5352 li
67.9175 80.5352 li
68.1929 80.4663 li
68.2617 80.4663 li
68.3301 80.4663 li
68.3989 80.4663 li
68.4678 80.4663 li
68.5366 80.4663 li
68.6743 80.3979 li
68.7432 80.3979 li
68.8115 80.3979 li
68.9492 80.3979 li
69.1558 80.3291 li
69.2246 80.3291 li
69.293 80.3291 li
69.4307 80.2603 li
69.4995 80.2603 li
69.5684 80.2603 li
69.7056 80.1914 li
69.7744 80.1914 li
69.8433 80.1914 li
69.981 80.1226 li
70.2559 80.0537 li
70.3247 79.9849 li
70.3936 79.9849 li
70.5313 79.9165 li
70.6001 79.9165 li
70.6685 79.8477 li
70.8062 79.7788 li
70.875 79.7788 li
70.875 79.71 li
71.0127 79.6411 li
71.0811 79.6411 li
71.0811 79.5723 li
71.1499 79.5723 li
71.2876 79.4351 li
71.3564 79.4351 li
71.3564 79.3662 li
71.4253 79.3662 li
71.5625 79.2285 li
71.5625 79.1597 li
71.6313 79.1597 li
71.7002 79.0908 li
71.8379 78.9536 li
71.8379 78.8848 li
71.9067 78.8159 li
71.9067 78.7471 li
71.9756 78.7471 li
71.9756 78.6782 li
72.0439 78.541 li
72.1128 78.541 li
72.1128 78.4722 li
72.1816 78.3345 li
72.3193 78.1279 li
72.3193 78.0596 li
72.3882 77.9907 li
72.4565 77.853 li
72.4565 77.7842 li
72.5254 77.7153 li
72.5942 77.5093 li
72.5942 77.4404 li
72.5942 77.3716 li
72.6631 77.1655 li
72.8008 76.7524 li
72.8696 76.6152 li
72.8696 76.4775 li
72.938 76.271 li
72.938 76.1338 li
73.0068 75.9961 li
73.0757 75.7212 li
73.0757 75.5835 li
73.1445 75.377 li
73.2134 75.1021 li
73.2822 74.3457 li
73.3511 74.1392 li
73.3511 73.9331 li
73.4194 73.52 li
73.5571 72.5576 li
73.5571 72.3511 li
73.626 72.0762 li
73.6948 71.5259 li
73.8325 70.4253 li
73.8325 70.1504 li
73.9009 69.875 li
73.9009 69.2563 li
73.9697 68.981 li
73.9697 68.7061 li
74.0386 68.1558 li
74.1074 67.8809 li
74.1074 67.6055 li
74.1763 67.3306 li
74.1763 67.124 li
74.1763 66.8491 li
74.2451 66.6426 li
74.2451 66.5054 li
74.3135 66.2988 li
74.3135 66.1611 li
74.3823 66.0239 li
74.3823 65.8862 li
74.4512 65.8174 li
74.4512 65.7485 li
74.52 65.7485 li
74.5889 65.8174 li
74.5889 65.8862 li
74.6577 65.9551 li
74.6577 66.0928 li
74.7266 66.23 li
74.7266 66.4365 li
74.7266 66.5742 li
74.7949 66.7803 li
74.7949 67.0557 li
74.8638 67.2617 li
74.9326 67.7432 li
75.0015 68.9121 li
75.2764 71.1821 li
75.3452 71.457 li
75.3452 71.8008 li
75.4141 72.3511 li
75.4141 72.626 li
75.4829 72.9014 li
75.5518 73.3828 li
75.5518 73.5889 li
75.6206 73.8643 li
75.689 74.2769 li
75.8267 75.0332 li
75.8267 75.2397 li
75.8955 75.377 li
75.9644 75.7212 li
75.9644 75.8584 li
76.0332 76.0649 li
76.1021 76.3398 li
76.1021 76.4775 li
76.1704 76.5464 li
76.2393 76.8213 li
76.377 77.2339 li
76.377 77.3716 li
76.377 77.4404 li
76.4458 77.647 li
76.5146 77.7153 li
76.5146 77.7842 li
76.5835 77.9219 li
76.6519 77.9907 li
76.6519 78.0596 li
76.7207 78.1968 li
76.8584 78.4722 li
76.9272 78.541 li
76.9272 78.6094 li
76.9961 78.6782 li
77.0645 78.7471 li
77.1333 78.8848 li
77.2021 78.8848 li
77.2021 78.9536 li
77.271 79.0225 li
77.4087 79.1597 li
77.4087 79.2285 li
77.4775 79.2285 li
77.5459 79.2974 li
77.6836 79.4351 li
77.7524 79.4351 li
77.7524 79.5034 li
77.8901 79.5723 li
77.959 79.6411 li
78.0273 79.71 li
78.165 79.7788 li
78.2339 79.7788 li
78.3027 79.8477 li
78.3716 79.9165 li
78.4399 79.9165 li
78.5088 79.9165 li
78.6465 79.9849 li
78.7153 79.9849 li
78.7153 80.0537 li
78.7842 80.0537 li
78.9214 80.1226 li
78.9902 80.1226 li
79.1279 80.1914 li
79.4028 80.2603 li
79.4717 80.2603 li
79.5405 80.2603 li
79.6782 80.3291 li
79.7471 80.3291 li
79.8159 80.3291 li
79.9531 80.3291 li
80.022 80.3979 li
80.0908 80.3979 li
80.2285 80.3979 li
80.5034 80.4663 li
80.5723 80.4663 li
80.6411 80.4663 li
80.71 80.4663 li
80.9849 80.5352 li
81.0537 80.5352 li
81.1226 80.5352 li
81.2598 80.5352 li
81.5352 80.5352 li
81.604 80.5352 li
81.604 80.604 li
81.6724 80.604 li
81.8101 80.604 li
82.0854 80.604 li
82.1538 80.604 li
82.2227 80.604 li
82.3604 80.604 li
82.6353 80.6729 li
82.7041 80.6729 li
82.7729 80.6729 li
82.8418 80.6729 li
83.1167 80.6729 li
83.1855 80.6729 li
83.2544 80.6729 li
83.3921 80.6729 li
83.667 80.6729 li
83.7358 80.6729 li
83.8047 80.6729 li
83.9424 80.6729 li
84.1484 80.7417 li
84.2173 80.7417 li
84.2861 80.7417 li
84.4233 80.7417 li
84.6299 80.7417 li
84.6987 80.7417 li
84.7676 80.7417 li
84.9048 80.7417 li
85.1802 80.7417 li
85.6616 80.7417 li
85.7305 80.7417 li
85.7993 80.7417 li
85.9365 80.7417 li
86.1431 80.7417 li
86.2119 80.7417 li
86.2803 80.7417 li
86.418 80.7417 li
86.6934 80.8105 li
86.7617 80.8105 li
86.8306 80.8105 li
86.9683 80.8105 li
87.2432 80.8105 li
87.7935 80.8105 li
87.8623 80.8105 li
87.9312 80.8105 li
88 80.8105 li
88.2749 80.8105 li
88.7563 80.8105 li
88.8252 80.8105 li
88.894 80.8105 li
89.0313 80.8105 li
89.3066 80.8105 li
89.7881 80.8105 li
89.8569 80.8105 li
89.9258 80.8105 li
89.9941 80.8105 li
90.2695 80.8105 li
90.751 80.8105 li
90.8198 80.8105 li
90.8882 80.8105 li
91.0259 80.8105 li
91.2324 80.8105 li
91.7139 80.8105 li
91.7827 80.8105 li
91.8511 80.8105 li
91.9888 80.8105 li
92.2637 80.8105 li
92.814 80.8105 li
92.8828 80.8105 li
92.9517 80.8105 li
93.0894 80.8105 li
93.3643 80.8105 li
93.8457 80.8105 li
93.9146 80.8105 li
93.9834 80.8105 li
94.1206 80.8105 li
94.3271 80.8105 li
94.8774 80.8789 li
94.9463 80.8789 li
95.0835 80.8789 li
95.3589 80.8789 li
95.8403 80.8789 li
95.9092 80.8789 li
95.9775 80.8789 li
96.1152 80.8789 li
96.3901 80.8789 li
96.9404 80.8789 li
97.0093 80.8789 li
97.0781 80.8789 li
97.2158 80.8789 li
97.4219 80.8789 li
97.9722 80.8789 li
98.041 80.8789 li
98.1099 80.8789 li
98.2471 80.8789 li
98.5225 80.8789 li
99.0039 80.8789 li
99.9668 80.8789 li
100.036 80.8789 li
100.104 80.8789 li
100.242 80.8789 li
100.517 80.8789 li
100.998 80.8789 li
101.961 80.8789 li
102.03 80.8789 li
102.099 80.8789 li
102.236 80.8789 li
102.511 80.8789 li
103.062 80.8789 li
104.093 80.8789 li
104.162 80.8789 li
104.23 80.8789 li
104.368 80.8789 li
104.575 80.8789 li
105.125 80.8789 li
106.087 80.8789 li
106.156 80.8789 li
106.225 80.8789 li
106.363 80.8789 li
106.638 80.8789 li
107.188 80.8789 li
108.22 80.8789 li
108.289 80.8789 li
108.357 80.8789 li
108.495 80.8789 li
108.77 80.8789 li
109.32 80.8789 li
110.352 80.8789 li
112.346 80.8789 li
114.478 80.8789 li
116.473 80.8789 li
118.467 80.8789 li
120.599 80.8789 li
122.594 80.8789 li
124.726 80.8789 li
124.794 80.8789 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 1 rgb
@
23.833 80.8789 mo
23.9019 80.8789 li
23.9707 80.8789 li
24.1084 80.8789 li
24.3145 80.8789 li
24.8647 80.8789 li
25.8276 80.8789 li
27.9595 80.8789 li
29.9541 80.8789 li
31.9487 80.8789 li
34.0806 80.8789 li
36.0752 80.8789 li
36.1436 80.8789 li
36.2124 80.8789 li
36.3501 80.8789 li
36.625 80.8789 li
37.1753 80.8789 li
38.207 80.8789 li
38.2759 80.8789 li
38.3447 80.8789 li
38.4819 80.8789 li
38.7573 80.8789 li
39.3076 80.8789 li
40.3389 80.8789 li
40.4077 80.8789 li
40.4766 80.8789 li
40.6143 80.8789 li
40.8203 80.8789 li
41.3706 80.8789 li
42.3335 80.8789 li
42.4023 80.8789 li
42.4712 80.8789 li
42.6084 80.8789 li
42.8838 80.8789 li
43.3652 80.8789 li
44.4653 80.8789 li
44.5342 80.8789 li
44.603 80.8789 li
44.7407 80.8789 li
44.9468 80.8789 li
45.4971 80.8789 li
46.46 80.8789 li
46.5288 80.8789 li
46.5977 80.8789 li
46.7349 80.8789 li
46.9414 80.8789 li
47.4229 80.8789 li
47.4917 80.8789 li
47.5605 80.8789 li
47.6978 80.8789 li
47.9731 80.8789 li
48.4546 80.8789 li
48.5229 80.8789 li
48.5918 80.8789 li
48.7295 80.8789 li
48.936 80.8789 li
49.4858 80.8789 li
49.5547 80.8789 li
49.6235 80.8789 li
49.7612 80.8789 li
50.0361 80.8789 li
50.5864 80.8789 li
50.6553 80.8789 li
50.793 80.8789 li
51.0679 80.8789 li
51.5493 80.8789 li
51.6182 80.8789 li
51.687 80.8789 li
51.8242 80.8789 li
52.0308 80.8789 li
52.5122 80.8789 li
52.5811 80.8789 li
52.6499 80.8789 li
52.7871 80.8789 li
53.0625 80.8789 li
53.6123 80.8789 li
53.6812 80.8789 li
53.75 80.8789 li
53.8877 80.8789 li
54.1626 80.8789 li
54.7129 80.8789 li
54.7817 80.8789 li
54.8506 80.8789 li
54.9878 80.8789 li
55.1943 80.8105 li
55.7446 80.8105 li
55.8135 80.8105 li
55.8823 80.8105 li
56.0195 80.8105 li
56.2949 80.8105 li
56.7764 80.8105 li
56.8447 80.8105 li
56.9136 80.8105 li
57.0513 80.8105 li
57.3262 80.8105 li
57.8076 80.8105 li
57.8765 80.8105 li
57.9453 80.8105 li
58.0142 80.8105 li
58.2891 80.8105 li
58.7705 80.8105 li
58.8394 80.8105 li
58.9082 80.8105 li
59.0459 80.8105 li
59.3208 80.8105 li
59.8711 80.8105 li
59.9399 80.8105 li
60.0088 80.8105 li
60.0771 80.8105 li
60.3525 80.8105 li
60.9028 80.8105 li
60.9712 80.8105 li
61.04 80.8105 li
61.1777 80.8105 li
61.3843 80.8105 li
61.4526 80.8105 li
61.5215 80.8105 li
61.6592 80.8105 li
61.9341 80.8105 li
62.0029 80.8105 li
62.1406 80.8105 li
62.4155 80.8105 li
62.897 80.7417 li
62.9658 80.7417 li
63.0347 80.7417 li
63.1724 80.7417 li
63.4473 80.7417 li
63.5161 80.7417 li
63.585 80.7417 li
63.7222 80.7417 li
63.9976 80.7417 li
64.0664 80.7417 li
64.1353 80.7417 li
64.2725 80.7417 li
64.5479 80.7417 li
65.0977 80.7417 li
65.1665 80.6729 li
65.3042 80.6729 li
65.5791 80.6729 li
65.6479 80.6729 li
65.7168 80.6729 li
65.8545 80.6729 li
66.1294 80.6729 li
66.1982 80.6729 li
66.2671 80.6729 li
66.4048 80.6729 li
66.6797 80.604 li
66.7485 80.604 li
66.8174 80.604 li
66.9546 80.604 li
67.1611 80.604 li
67.23 80.604 li
67.2988 80.604 li
67.436 80.604 li
67.7114 80.5352 li
67.7803 80.5352 li
67.9175 80.5352 li
68.1929 80.5352 li
68.2617 80.4663 li
68.3301 80.4663 li
68.3989 80.4663 li
68.4678 80.4663 li
68.5366 80.4663 li
68.6743 80.4663 li
68.7432 80.3979 li
68.8115 80.3979 li
68.9492 80.3979 li
69.1558 80.3291 li
69.2246 80.3291 li
69.293 80.3291 li
69.4307 80.3291 li
69.4995 80.3291 li
69.4995 80.2603 li
69.5684 80.2603 li
69.7056 80.2603 li
69.7744 80.1914 li
69.8433 80.1914 li
69.981 80.1914 li
70.2559 80.0537 li
70.3247 80.0537 li
70.3936 80.0537 li
70.5313 79.9849 li
70.6001 79.9165 li
70.6685 79.9165 li
70.8062 79.8477 li
70.875 79.8477 li
70.875 79.7788 li
71.0127 79.71 li
71.0811 79.71 li
71.0811 79.6411 li
71.1499 79.6411 li
71.2876 79.5034 li
71.3564 79.5034 li
71.4253 79.4351 li
71.5625 79.2974 li
71.6313 79.2285 li
71.7002 79.1597 li
71.8379 79.0225 li
71.9067 78.9536 li
71.9067 78.8848 li
71.9756 78.8848 li
71.9756 78.8159 li
72.0439 78.7471 li
72.1128 78.6782 li
72.1128 78.6094 li
72.1816 78.541 li
72.3193 78.3345 li
72.3193 78.2656 li
72.3882 78.1968 li
72.4565 78.0596 li
72.4565 77.9907 li
72.5254 77.9219 li
72.5942 77.7842 li
72.5942 77.7153 li
72.5942 77.647 li
72.6631 77.5093 li
72.8008 77.0967 li
72.8696 77.0278 li
72.8696 76.959 li
72.938 76.7524 li
72.938 76.6152 li
73.0068 76.4775 li
73.0757 76.271 li
73.0757 76.1338 li
73.1445 75.9961 li
73.2134 75.79 li
73.2822 75.1709 li
73.3511 75.0332 li
73.3511 74.8955 li
73.4194 74.5518 li
73.5571 73.8643 li
73.5571 73.7266 li
73.626 73.52 li
73.6948 73.1763 li
73.8325 72.4199 li
73.8325 72.2134 li
73.9009 72.0073 li
73.9009 71.6636 li
73.9697 71.457 li
73.9697 71.3193 li
74.0386 70.9756 li
74.1074 70.8379 li
74.1074 70.6318 li
74.1763 70.4941 li
74.1763 70.3564 li
74.1763 70.2192 li
74.2451 70.1504 li
74.2451 70.0127 li
74.3135 69.9438 li
74.3135 69.875 li
74.3823 69.8066 li
74.3823 69.7378 li
74.4512 69.6689 li
74.4512 69.6001 li
74.52 69.6001 li
74.52 69.6689 li
74.5889 69.6689 li
74.5889 69.7378 li
74.6577 69.7378 li
74.6577 69.8066 li
74.7266 69.875 li
74.7266 70.0127 li
74.7266 70.0815 li
74.7949 70.2192 li
74.7949 70.3564 li
74.8638 70.4941 li
74.9326 70.769 li
74.9326 70.9067 li
75.0015 71.0444 li
75.0015 71.3882 li
75.0703 71.5947 li
75.0703 71.8008 li
75.1392 72.1445 li
75.2764 72.9014 li
75.3452 73.1074 li
75.3452 73.314 li
75.4141 73.7266 li
75.5518 74.4829 li
75.5518 74.6206 li
75.6206 74.8271 li
75.689 75.1709 li
75.8267 75.7212 li
75.8267 75.9272 li
75.8955 76.0649 li
75.9644 76.271 li
75.9644 76.4087 li
76.0332 76.5464 li
76.1021 76.7524 li
76.1021 76.8901 li
76.1704 76.959 li
76.2393 77.1655 li
76.377 77.5781 li
76.377 77.647 li
76.377 77.7153 li
76.4458 77.853 li
76.5146 77.9907 li
76.5146 78.0596 li
76.5835 78.1968 li
76.6519 78.2656 li
76.7207 78.4033 li
76.8584 78.6094 li
76.9272 78.6782 li
76.9272 78.7471 li
76.9961 78.8159 li
77.1333 79.0225 li
77.2021 79.0225 li
77.2021 79.0908 li
77.271 79.1597 li
77.4087 79.2974 li
77.4775 79.3662 li
77.5459 79.3662 li
77.6836 79.5034 li
77.7524 79.5723 li
77.8901 79.6411 li
77.959 79.71 li
78.0273 79.7788 li
78.165 79.8477 li
78.2339 79.8477 li
78.3027 79.8477 li
78.3716 79.9165 li
78.4399 79.9165 li
78.4399 79.9849 li
78.5088 79.9849 li
78.6465 80.0537 li
78.7153 80.0537 li
78.7842 80.0537 li
78.9214 80.1226 li
78.9902 80.1226 li
78.9902 80.1914 li
79.1279 80.1914 li
79.4028 80.2603 li
79.4717 80.2603 li
79.5405 80.3291 li
79.6782 80.3291 li
79.7471 80.3291 li
79.8159 80.3291 li
79.9531 80.3979 li
80.022 80.3979 li
80.0908 80.3979 li
80.2285 80.3979 li
80.5034 80.4663 li
80.5723 80.4663 li
80.6411 80.4663 li
80.71 80.4663 li
80.9849 80.5352 li
81.0537 80.5352 li
81.1226 80.5352 li
81.2598 80.5352 li
81.5352 80.604 li
81.604 80.604 li
81.6724 80.604 li
81.8101 80.604 li
82.0854 80.604 li
82.1538 80.604 li
82.2227 80.604 li
82.3604 80.604 li
82.6353 80.6729 li
82.7041 80.6729 li
82.7729 80.6729 li
82.8418 80.6729 li
83.1167 80.6729 li
83.1855 80.6729 li
83.2544 80.6729 li
83.3921 80.6729 li
83.667 80.6729 li
83.7358 80.6729 li
83.8047 80.6729 li
83.9424 80.7417 li
84.1484 80.7417 li
84.2173 80.7417 li
84.2861 80.7417 li
84.4233 80.7417 li
84.6299 80.7417 li
84.6987 80.7417 li
84.7676 80.7417 li
84.9048 80.7417 li
85.1802 80.7417 li
85.6616 80.7417 li
85.7305 80.7417 li
85.7993 80.7417 li
85.9365 80.7417 li
86.1431 80.7417 li
86.2119 80.7417 li
86.2803 80.7417 li
86.418 80.8105 li
86.6934 80.8105 li
86.7617 80.8105 li
86.8306 80.8105 li
86.9683 80.8105 li
87.2432 80.8105 li
87.7935 80.8105 li
87.8623 80.8105 li
87.9312 80.8105 li
88 80.8105 li
88.2749 80.8105 li
88.7563 80.8105 li
88.8252 80.8105 li
88.894 80.8105 li
89.0313 80.8105 li
89.3066 80.8105 li
89.7881 80.8105 li
89.8569 80.8105 li
89.9258 80.8105 li
89.9941 80.8105 li
90.2695 80.8105 li
90.751 80.8105 li
90.8198 80.8105 li
90.8882 80.8105 li
91.0259 80.8105 li
91.2324 80.8105 li
91.7139 80.8105 li
91.7827 80.8105 li
91.8511 80.8105 li
91.9888 80.8105 li
92.2637 80.8105 li
92.814 80.8105 li
92.8828 80.8105 li
92.9517 80.8105 li
93.0894 80.8105 li
93.3643 80.8105 li
93.8457 80.8105 li
93.9146 80.8105 li
93.9834 80.8105 li
94.1206 80.8789 li
94.3271 80.8789 li
94.8774 80.8789 li
94.9463 80.8789 li
95.0835 80.8789 li
95.3589 80.8789 li
95.8403 80.8789 li
95.9092 80.8789 li
95.9775 80.8789 li
96.1152 80.8789 li
96.3901 80.8789 li
96.9404 80.8789 li
97.0093 80.8789 li
97.0781 80.8789 li
97.2158 80.8789 li
97.4219 80.8789 li
97.9722 80.8789 li
98.041 80.8789 li
98.1099 80.8789 li
98.2471 80.8789 li
98.5225 80.8789 li
99.0039 80.8789 li
99.9668 80.8789 li
100.036 80.8789 li
100.104 80.8789 li
100.242 80.8789 li
100.517 80.8789 li
100.998 80.8789 li
101.961 80.8789 li
102.03 80.8789 li
102.099 80.8789 li
102.236 80.8789 li
102.511 80.8789 li
103.062 80.8789 li
104.093 80.8789 li
104.162 80.8789 li
104.23 80.8789 li
104.368 80.8789 li
104.575 80.8789 li
105.125 80.8789 li
106.087 80.8789 li
106.156 80.8789 li
106.225 80.8789 li
106.363 80.8789 li
106.638 80.8789 li
107.188 80.8789 li
108.22 80.8789 li
108.289 80.8789 li
108.357 80.8789 li
108.495 80.8789 li
108.77 80.8789 li
109.32 80.8789 li
110.352 80.8789 li
112.346 80.8789 li
114.478 80.8789 li
116.473 80.8789 li
118.467 80.8789 li
120.599 80.8789 li
122.594 80.8789 li
124.726 80.8789 li
124.794 80.8789 li
1 0 0 rgb
@
grestore % PSGState
.1875 lw
2 lc
0 lj
3.23931 ml
[] 0 dsh
true sadj
124.794 80.8789 mo
23.833 80.8789 li
false sop
0 0 0 rgb
@
23.833 80.8789 mo
23.833 .137695 li
@
23.833 .137695 mo
124.794 .137695 li
@
124.794 .137695 mo
124.794 80.8789 li
@
0 lc
37.0376 80.8789 mo
37.0376 78.6782 li
@
58.9771 80.8789 mo
58.9771 78.6782 li
@
80.916 80.8789 mo
80.916 78.6782 li
@
102.855 80.8789 mo
102.855 78.6782 li
@
23.833 80.8789 mo
26.0337 80.8789 li
@
23.833 64.7173 mo
26.0337 64.7173 li
@
23.833 48.5552 mo
26.0337 48.5552 li
@
23.833 32.4619 mo
26.0337 32.4619 li
@
23.833 16.2998 mo
26.0337 16.2998 li
@
37.0376 .137695 mo
37.0376 2.33838 li
@
58.9771 .137695 mo
58.9771 2.33838 li
@
80.916 .137695 mo
80.916 2.33838 li
@
102.855 .137695 mo
102.855 2.33838 li
@
124.794 .137695 mo
124.794 2.33838 li
@
124.794 80.8789 mo
122.594 80.8789 li
@
%ADOBeginSubsetFont: CourierNewPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /CourierNewPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
def
/FontBBox {-21 -680 638 1021} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
6 dict dup begin
/.notdef <1C60D8A8C9B7C3C9ED920C533BFCEF61AA10204FECFC9554268C6D
0CC61A5C177657F51B> |-
/zero <1C60D8A8C9B7C3C9ED58ADDA6024582BEE281A96CFE9DC1AA2EC8812C
94B001C7910FBBD84C9AA3EC763ABC72EAED0410AB5B05EC8C95DCB2CD57773E
DB31317FC8DC4E011990B6A42F6A549593572BCE0393DF2C17B006D1EDA5708B
C522CF05779A98566B87D3C5BB859AD8E7DE961461E71EF10BF23112D8DD5BE4
E54297F238545A6503E07F1773CE8AAD2A6369ECB7182FD6BF83BEE50BEB14AE
2377B9AA46BB868CEB7331F2605BB0E70E5EE2543021F6F69E6E8158661C7870
FBEF0E6D00EC88C50644EE40789F558E0FDD6C8> |-
/one <1C60D8A8C9B7C3C9E253524776887F337C16AA993101E6DBE6C08A6F89
61CA59EAFF81EB6404DF5CDEBF72176DA54682BC04946502865B8AB8C99C0346
88FA7C41553C6055553A38F1619951B43E7AFEFEECA014E0331168F3189044AD
AEDA14E954632F277B30E64E1CDF03C1F1206907E05589FA939BD664B413979F> |-
/two <1C60D8A8C9B7C3C9E25BA96EF2E802B66BE86A2A3E3FE3AC371E49DA68
03ED8AB03E354E10C659BAB7B346FA0FF5C440026CD90B74FE4A941FFEDF85BA
202D091801692AFED370C746E75580531D25138121108A7C99DE546F9CE8BF1B
19962C87599657883DA2B0F6D0660C18EF81CA17D3448743D7093AD794551112
B0D93F01A4BF9BA020047391997389EDCF7ED1C60CB3E06CACA4DA2135980BC3
309F8ED660AF628E01CEF48949B9294C9AE88A1F1C83C027CE0A10D99ED06A9E
D29CB628A339E71BF2E0AFD5> |-
/three <1C60D8A8C9B7C3C9ED73E34E9FA8549779B64BE4BC031AD92CD1652F
E3EDCFE820A27F4F569C962AC00F9BF82760891822F24CF8B0B77F91057B4B46
1DB6F7DDC5DCC31324AF91ADAB41D727D403DB92F38A703E355CD9C32437BF61
1D740437ED226983E19CDC29130CCBCA68D2789343ABAC1B07A912C72FD07EBB
A18374181401198634437BFBDB2FD7E5CF1EAAB38126DA14C395F6D5A80113C8
5E8519FE389D4E7D58DFD2C36CD2F1F3191DB6587AD0FAAD7862335C8BE56A45
77DA487FC103161D5E6FF1FA50AD260AFC376123842A1572AA554CC65285D1C6
5FC552B256868894B6608C76404C48951423466AB8A11AC3FFBC61456BA3802C
3F61ECF0C79E37FA58F22BF9D9D9EB0446> |-
/four <1C60D8A8C9B7C3C9ED24D3DD491F47599236336F96E6A347B6FB8D7D5
117EEAEF9A0E348B77878644601A688562041CCEC051357CB927E2FD768D1D96
E963B67F432A06DE66F3AD54F3FD515B0AA7CAA73C929463F59870FBA3DC6473
BC5DC1FF4383646C6ACCC59A716A71EC3962A07367AB807D341C17B25E6E8612
D72E148DBF88BB049B31AD6444BB77C9AEC> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ALMFJN+CourierNewPSMT /CourierNewPSMT findfont def
/ALMFJN+CourierNewPSMT*1 
[
48{/.notdef}repeat /zero /one /two /three /four 203{/.notdef}repeat
] ALMFJN+CourierNewPSMT nfnt
ALMFJN+CourierNewPSMT*1  [9.90356 0 0 -9.90356 0 0 ]mfnt sfnt
16.6001 84.1177 mov
(0) sh
16.6001 67.9688 mov
(1) sh
16.6001 51.8198 mov
(2) sh
16.6001 35.6704 mov
(3) sh
16.6001 19.5215 mov
(4) sh
gsave % PSGState
126.995 74.1392 mo
126.995 87.6187 li
129.196 87.6187 li
129.196 74.1392 li
eclp
grestore % PSGState
124.794 64.7173 mo
122.594 64.7173 li
@
gsave % PSGState
126.995 57.9771 mo
126.995 71.457 li
129.196 71.457 li
129.196 57.9771 li
eclp
grestore % PSGState
124.794 48.5552 mo
122.594 48.5552 li
@
gsave % PSGState
126.995 41.8149 mo
126.995 55.2949 li
129.196 55.2949 li
129.196 41.8149 li
eclp
grestore % PSGState
124.794 32.4619 mo
122.594 32.4619 li
@
gsave % PSGState
126.995 25.7217 mo
126.995 39.2017 li
129.196 39.2017 li
129.196 25.7217 li
eclp
grestore % PSGState
124.794 16.2998 mo
122.594 16.2998 li
@
gsave % PSGState
126.995 9.55957 mo
126.995 23.0396 li
129.196 23.0396 li
129.196 9.55957 li
eclp
grestore % PSGState
gsave % PSGState
0 34.4561 mo
0 46.5605 li
13.4795 46.5605 li
13.4795 34.4561 li
eclp
grestore % PSGState
gsave % PSGState
23.7642 0 mo
23.7642 81.4292 li
125 81.4292 li
125 0 li
eclp
gsave % PSGState
31.1919 1.44434 mo
31.1919 14.9243 li
42.8149 14.9243 li
42.8149 1.44434 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 113 /q put
def
/FontBBox {-568 -307 2000 1007} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/a <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550D
EC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B
177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB33
3E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB
0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70
BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895
DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737
B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272E
F1EF1464C3F0D45D7CBB8749AF571E09> |-
/q <1C60D8A8C9B7A73DB694895DD5E49D3BBCEE95B381618ED0718BA1F35CD3
9E95BCBD1002A9F89110DE3E7AD181B368295D0F054E6A3D9A7267329EB95AB8
13B7AE1696D9C600AC6A6B00419AEBFBF715793C3A2F30373AE9BFAB97302272
E9B4EA6D0F482F853122AF239C1F65C8335B7091413102CCD1675C767B686462
E8E1B94DFF670F4F69122307C3AAC013B5112B2F564262A5E8DE4D58B097F43D
017CDAA97C6843EB833175C60735563DF7F92AF1ACD211546A7958997473A18D
23764933CEE9DC71CCD4C3E61E53DA702E> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ADDFJN+TimesNewRomanPSMT /TimesNewRomanPSMT findfont def
/ADDFJN+TimesNewRomanPSMT*1 
[
97{/.notdef}repeat /a 15{/.notdef}repeat /q 142{/.notdef}repeat
] ADDFJN+TimesNewRomanPSMT nfnt
ADDFJN+TimesNewRomanPSMT*1  [9.90356 0 0 -9.90356 0 0 ]mfnt sfnt
32.3071 11.4468 mov
(qa) sh
grestore % PSGState
grestore % PSGState
gsave % PSGState
133.598 0 mo
133.598 81.4292 li
234.833 81.4292 li
234.833 0 li
eclp
grestore % PSGState
gsave % PSGState
133.598 0 mo
133.598 81.4292 li
234.833 81.4292 li
234.833 0 li
eclp
grestore % PSGState
gsave % PSGState
133.598 0 mo
133.598 81.4292 li
234.833 81.4292 li
234.833 0 li
eclp
.75 lw
2 lc
133.735 80.8105 mo
133.735 80.8105 li
133.804 80.8105 li
133.873 80.8105 li
133.941 80.8105 li
134.216 80.8105 li
134.698 80.8105 li
135.73 80.8105 li
137.862 80.8105 li
139.856 80.8105 li
141.782 80.8105 li
143.983 80.8105 li
145.908 80.7417 li
145.977 80.7417 li
146.045 80.7417 li
146.183 80.7417 li
146.458 80.7417 li
147.008 80.7417 li
148.109 80.7417 li
148.177 80.7417 li
148.247 80.7417 li
148.384 80.7417 li
148.659 80.7417 li
149.14 80.7417 li
150.241 80.7417 li
150.31 80.7417 li
150.448 80.7417 li
150.722 80.7417 li
151.204 80.7417 li
152.167 80.7417 li
152.236 80.7417 li
152.304 80.7417 li
152.442 80.7417 li
152.717 80.7417 li
153.267 80.7417 li
154.298 80.6729 li
154.368 80.6729 li
154.436 80.6729 li
154.574 80.6729 li
154.849 80.6729 li
155.331 80.6729 li
156.362 80.6729 li
156.431 80.6729 li
156.568 80.6729 li
156.843 80.6729 li
157.325 80.6729 li
157.393 80.6729 li
157.462 80.6729 li
157.531 80.6729 li
157.806 80.6729 li
158.288 80.6729 li
158.356 80.6729 li
158.425 80.6729 li
158.563 80.6729 li
158.837 80.604 li
159.388 80.604 li
159.457 80.604 li
159.594 80.604 li
159.87 80.604 li
160.419 80.604 li
160.489 80.604 li
160.557 80.604 li
160.695 80.604 li
160.901 80.604 li
161.382 80.604 li
161.452 80.604 li
161.52 80.604 li
161.658 80.604 li
161.933 80.5352 li
162.415 80.5352 li
162.483 80.5352 li
162.551 80.5352 li
162.689 80.5352 li
162.964 80.5352 li
163.446 80.5352 li
163.514 80.5352 li
163.583 80.5352 li
163.721 80.5352 li
163.996 80.4663 li
164.546 80.4663 li
164.615 80.4663 li
164.684 80.4663 li
164.821 80.4663 li
165.096 80.4663 li
165.578 80.3979 li
165.647 80.3979 li
165.715 80.3979 li
165.853 80.3979 li
166.127 80.3979 li
166.678 80.3979 li
166.747 80.3979 li
166.816 80.3979 li
166.884 80.3291 li
167.16 80.3291 li
167.641 80.3291 li
167.709 80.3291 li
167.779 80.3291 li
167.917 80.2603 li
168.123 80.2603 li
168.604 80.2603 li
168.672 80.2603 li
168.742 80.2603 li
168.879 80.1914 li
169.154 80.1914 li
169.705 80.1226 li
169.773 80.1226 li
169.841 80.1226 li
169.979 80.1226 li
170.254 80.0537 li
170.804 80.0537 li
170.804 79.9849 li
170.874 79.9849 li
171.011 79.9849 li
171.286 79.9849 li
171.355 79.9165 li
171.423 79.9165 li
171.493 79.9165 li
171.767 79.9165 li
171.767 79.8477 li
171.836 79.8477 li
171.905 79.8477 li
172.042 79.8477 li
172.249 79.7788 li
172.799 79.71 li
172.868 79.71 li
173.005 79.6411 li
173.281 79.5723 li
173.349 79.5723 li
173.418 79.5723 li
173.555 79.5034 li
173.831 79.4351 li
173.9 79.4351 li
173.968 79.4351 li
174.106 79.3662 li
174.381 79.2974 li
174.931 79.1597 li
174.931 79.0908 li
175 79.0908 li
175.069 79.0908 li
175.207 79.0225 li
175.481 78.8848 li
175.55 78.8848 li
175.619 78.8848 li
175.756 78.8159 li
175.962 78.6782 li
176.032 78.6782 li
176.032 78.6094 li
176.1 78.6094 li
176.238 78.541 li
176.513 78.4033 li
176.582 78.3345 li
176.651 78.2656 li
176.788 78.1968 li
177.063 78.0596 li
177.063 77.9907 li
177.132 77.9907 li
177.201 77.9219 li
177.269 77.853 li
177.544 77.647 li
177.544 77.5781 li
177.614 77.5781 li
177.682 77.5093 li
177.82 77.3716 li
178.026 77.1655 li
178.094 77.0967 li
178.164 77.0278 li
178.301 76.8213 li
178.507 76.5464 li
178.576 76.4775 li
178.645 76.3398 li
178.783 76.2026 li
179.057 75.79 li
179.057 75.7212 li
179.126 75.6523 li
179.195 75.5146 li
179.264 75.3086 li
179.333 75.2397 li
179.333 75.1709 li
179.402 75.0332 li
179.539 74.6895 li
179.608 74.6206 li
179.608 74.5518 li
179.676 74.4146 li
179.814 74.0703 li
180.089 73.314 li
180.158 73.2451 li
180.158 73.1074 li
180.227 72.9014 li
180.365 72.4199 li
180.433 72.3511 li
180.433 72.2134 li
180.501 71.9385 li
180.639 71.457 li
180.639 71.3193 li
180.708 71.1821 li
180.777 70.8379 li
180.915 70.2192 li
181.19 68.8438 li
181.19 68.6372 li
181.258 68.4995 li
181.327 68.0869 li
181.396 67.2617 li
181.464 67.0557 li
181.464 66.8491 li
181.534 66.4365 li
181.671 65.4736 li
181.671 65.1987 li
181.74 64.9922 li
181.808 64.4419 li
181.946 63.3418 li
182.153 60.7969 li
182.221 60.4531 li
182.221 60.1094 li
182.29 59.4214 li
182.427 57.9082 li
182.703 54.4697 li
182.703 54.0571 li
182.771 53.5757 li
182.771 52.6128 li
182.909 50.687 li
183.184 46.4229 li
183.184 45.9414 li
183.252 45.3916 li
183.322 44.291 li
183.39 42.1592 li
183.459 41.6089 li
183.459 41.1274 li
183.528 40.0957 li
183.666 38.1011 li
183.666 37.6196 li
183.734 37.1387 li
183.803 36.2441 li
183.803 35.8315 li
183.872 35.4189 li
183.941 34.6626 li
183.941 34.3188 li
183.941 33.9746 li
184.009 33.6309 li
184.009 33.356 li
184.078 33.0806 li
184.078 32.8057 li
184.147 32.5991 li
184.147 32.3931 li
184.215 32.2554 li
184.215 32.1177 li
184.285 31.9805 li
184.285 31.9116 li
184.285 31.8428 li
184.353 31.8428 li
184.422 31.8428 li
184.422 31.9116 li
184.491 31.9805 li
184.491 32.0493 li
184.559 32.1865 li
184.559 32.3931 li
184.559 32.5308 li
184.628 32.7368 li
184.628 33.0122 li
184.697 33.2871 li
184.697 33.562 li
184.766 34.1812 li
184.834 34.5249 li
184.834 34.8687 li
184.904 35.6943 li
184.904 36.1069 li
184.972 36.5195 li
185.041 37.4136 li
185.11 39.4082 li
185.178 39.958 li
185.178 40.5083 li
185.248 41.6089 li
185.385 43.9473 li
185.66 48.5552 li
185.729 49.1055 li
185.729 49.6553 li
185.797 50.7559 li
185.935 52.8188 li
186.21 56.6704 li
186.21 57.083 li
186.279 57.4956 li
186.348 58.3896 li
186.485 59.9717 li
186.485 60.3154 li
186.554 60.6592 li
186.623 61.416 li
186.76 62.7227 li
186.76 63.0664 li
186.829 63.3418 li
186.898 63.9604 li
187.036 65.061 li
187.242 67.0557 li
187.31 67.2617 li
187.31 67.4683 li
187.379 67.8809 li
187.517 68.6372 li
187.517 68.8438 li
187.585 68.981 li
187.655 69.3252 li
187.792 70.0127 li
187.792 70.1504 li
187.861 70.2876 li
187.861 70.563 li
187.999 71.1133 li
188.273 72.1445 li
188.273 72.2134 li
188.342 72.3511 li
188.411 72.5576 li
188.48 72.9702 li
188.548 73.0391 li
188.548 73.1763 li
188.618 73.3828 li
188.754 73.7266 li
188.824 73.7954 li
188.824 73.8643 li
188.892 74.0703 li
189.03 74.3457 li
189.236 74.8955 li
189.305 75.0332 li
189.305 75.1021 li
189.374 75.2397 li
189.511 75.4458 li
189.581 75.5146 li
189.581 75.5835 li
189.649 75.7212 li
189.787 75.9272 li
189.855 75.9961 li
189.855 76.0649 li
189.924 76.1338 li
190.061 76.3398 li
190.336 76.7524 li
190.406 76.8213 li
190.474 76.8901 li
190.612 77.0278 li
190.887 77.3027 li
190.887 77.3716 li
190.956 77.3716 li
191.024 77.4404 li
191.162 77.5781 li
191.437 77.853 li
191.505 77.853 li
191.575 77.9219 li
191.712 78.0596 li
191.918 78.1968 li
191.987 78.2656 li
192.056 78.2656 li
192.194 78.4033 li
192.468 78.541 li
192.538 78.541 li
192.606 78.6094 li
192.744 78.6782 li
193.019 78.8159 li
193.5 79.0225 li
193.569 79.0225 li
193.638 79.0908 li
193.775 79.0908 li
194.05 79.2285 li
194.12 79.2285 li
194.256 79.2974 li
194.532 79.3662 li
194.601 79.3662 li
194.669 79.3662 li
194.738 79.4351 li
195.013 79.5034 li
195.495 79.6411 li
195.564 79.6411 li
195.632 79.6411 li
195.77 79.6411 li
196.044 79.71 li
196.114 79.71 li
196.182 79.7788 li
196.32 79.7788 li
196.595 79.8477 li
196.664 79.8477 li
196.733 79.8477 li
196.871 79.8477 li
197.077 79.9165 li
197.626 79.9849 li
197.696 79.9849 li
197.764 79.9849 li
197.902 79.9849 li
198.108 80.0537 li
198.659 80.1226 li
198.727 80.1226 li
198.795 80.1226 li
198.865 80.1226 li
199.14 80.1226 li
199.622 80.1914 li
199.69 80.1914 li
199.758 80.1914 li
199.896 80.1914 li
200.103 80.2603 li
200.653 80.2603 li
200.721 80.2603 li
200.859 80.3291 li
201.134 80.3291 li
201.616 80.3291 li
201.684 80.3291 li
201.753 80.3291 li
201.891 80.3291 li
202.097 80.3979 li
202.647 80.3979 li
202.716 80.3979 li
202.785 80.3979 li
202.922 80.3979 li
203.198 80.3979 li
203.748 80.4663 li
203.817 80.4663 li
203.954 80.4663 li
204.229 80.4663 li
204.71 80.4663 li
204.78 80.4663 li
204.848 80.5352 li
204.986 80.5352 li
205.192 80.5352 li
205.673 80.5352 li
205.742 80.5352 li
205.811 80.5352 li
205.949 80.5352 li
206.223 80.5352 li
206.774 80.5352 li
206.842 80.5352 li
206.912 80.5352 li
207.049 80.604 li
207.324 80.604 li
207.875 80.604 li
207.943 80.604 li
208.011 80.604 li
208.081 80.604 li
208.356 80.604 li
208.837 80.604 li
209.869 80.604 li
209.937 80.604 li
210.006 80.6729 li
210.075 80.6729 li
210.35 80.6729 li
210.832 80.6729 li
211.863 80.6729 li
211.932 80.6729 li
212.07 80.6729 li
212.344 80.6729 li
212.895 80.6729 li
213.995 80.6729 li
214.064 80.6729 li
214.202 80.6729 li
214.476 80.6729 li
214.958 80.7417 li
215.99 80.7417 li
216.058 80.7417 li
216.196 80.7417 li
216.471 80.7417 li
217.021 80.7417 li
218.122 80.7417 li
218.19 80.7417 li
218.259 80.7417 li
218.397 80.7417 li
218.671 80.7417 li
219.153 80.7417 li
220.253 80.7417 li
222.179 80.7417 li
224.38 80.8105 li
226.375 80.8105 li
228.3 80.8105 li
230.432 80.8105 li
232.426 80.8105 li
234.559 80.8105 li
234.627 80.8105 li
0 0 1 rgb
@
133.735 80.8105 mo
133.735 80.8105 li
133.804 80.8105 li
133.873 80.8105 li
133.941 80.8105 li
134.216 80.8105 li
134.698 80.8105 li
135.73 80.8105 li
137.862 80.8105 li
139.856 80.8105 li
141.782 80.8105 li
143.983 80.8105 li
145.908 80.8105 li
145.977 80.8105 li
146.045 80.8105 li
146.183 80.8105 li
146.458 80.8105 li
147.008 80.7417 li
148.109 80.7417 li
148.177 80.7417 li
148.247 80.7417 li
148.384 80.7417 li
148.659 80.7417 li
149.14 80.7417 li
150.241 80.7417 li
150.31 80.7417 li
150.448 80.7417 li
150.722 80.7417 li
151.204 80.7417 li
152.167 80.7417 li
152.236 80.7417 li
152.304 80.7417 li
152.442 80.7417 li
152.717 80.7417 li
153.267 80.7417 li
154.298 80.7417 li
154.368 80.7417 li
154.436 80.7417 li
154.574 80.7417 li
154.849 80.6729 li
155.331 80.6729 li
156.362 80.6729 li
156.431 80.6729 li
156.568 80.6729 li
156.843 80.6729 li
157.325 80.6729 li
157.393 80.6729 li
157.462 80.6729 li
157.531 80.6729 li
157.806 80.6729 li
158.288 80.6729 li
158.356 80.6729 li
158.425 80.6729 li
158.563 80.6729 li
158.837 80.6729 li
159.388 80.604 li
159.457 80.604 li
159.594 80.604 li
159.87 80.604 li
160.419 80.604 li
160.489 80.604 li
160.557 80.604 li
160.695 80.604 li
160.901 80.604 li
161.382 80.604 li
161.452 80.604 li
161.52 80.604 li
161.658 80.604 li
161.933 80.604 li
162.415 80.5352 li
162.483 80.5352 li
162.551 80.5352 li
162.689 80.5352 li
162.964 80.5352 li
163.446 80.5352 li
163.514 80.5352 li
163.583 80.5352 li
163.721 80.5352 li
163.996 80.5352 li
164.546 80.4663 li
164.615 80.4663 li
164.684 80.4663 li
164.821 80.4663 li
165.096 80.4663 li
165.578 80.4663 li
165.647 80.4663 li
165.715 80.4663 li
165.853 80.4663 li
166.127 80.3979 li
166.678 80.3979 li
166.747 80.3979 li
166.816 80.3979 li
166.884 80.3979 li
167.16 80.3979 li
167.641 80.3291 li
167.709 80.3291 li
167.779 80.3291 li
167.917 80.3291 li
168.123 80.3291 li
168.604 80.2603 li
168.672 80.2603 li
168.742 80.2603 li
168.879 80.2603 li
169.154 80.1914 li
169.705 80.1914 li
169.773 80.1914 li
169.841 80.1914 li
169.979 80.1226 li
170.254 80.1226 li
170.804 80.0537 li
170.874 80.0537 li
171.011 80.0537 li
171.286 79.9849 li
171.767 79.9165 li
171.836 79.9165 li
171.905 79.9165 li
172.042 79.9165 li
172.249 79.8477 li
172.799 79.7788 li
172.868 79.7788 li
172.868 79.71 li
173.005 79.71 li
173.281 79.6411 li
173.349 79.6411 li
173.418 79.6411 li
173.555 79.5723 li
173.831 79.5034 li
173.9 79.5034 li
173.968 79.5034 li
174.106 79.4351 li
174.381 79.3662 li
174.931 79.2285 li
175 79.2285 li
175.069 79.1597 li
175.207 79.1597 li
175.481 79.0225 li
175.55 79.0225 li
175.619 79.0225 li
175.756 78.9536 li
175.962 78.8159 li
176.032 78.8159 li
176.1 78.7471 li
176.238 78.6782 li
176.513 78.541 li
176.582 78.541 li
176.651 78.4722 li
176.788 78.4033 li
177.063 78.2656 li
177.063 78.1968 li
177.132 78.1968 li
177.201 78.1279 li
177.269 78.0596 li
177.544 77.9219 li
177.544 77.853 li
177.614 77.853 li
177.682 77.7842 li
177.82 77.7153 li
178.026 77.4404 li
178.094 77.4404 li
178.164 77.3716 li
178.301 77.2339 li
178.507 76.959 li
178.576 76.8901 li
178.645 76.8213 li
178.783 76.6841 li
179.057 76.3398 li
179.057 76.271 li
179.126 76.2026 li
179.195 76.1338 li
179.264 75.9272 li
179.333 75.8584 li
179.333 75.79 li
179.402 75.7212 li
179.539 75.5146 li
179.608 75.4458 li
179.608 75.377 li
179.676 75.2397 li
179.814 74.9644 li
180.089 74.4146 li
180.158 74.3457 li
180.158 74.2769 li
180.227 74.1392 li
180.365 73.7954 li
180.639 73.0391 li
180.639 72.9702 li
180.708 72.9014 li
180.777 72.6948 li
180.915 72.2822 li
181.19 71.3882 li
181.19 71.2505 li
181.258 71.1821 li
181.327 70.9067 li
181.396 70.4941 li
181.671 69.4624 li
181.671 69.3936 li
181.74 69.2563 li
181.808 68.981 li
181.946 68.4995 li
182.153 67.4683 li
182.221 67.3306 li
182.221 67.1929 li
182.29 66.918 li
182.427 66.5054 li
182.427 66.3677 li
182.497 66.23 li
182.565 66.0239 li
182.565 65.9551 li
182.634 65.8862 li
182.703 65.6802 li
182.703 65.6113 li
182.771 65.5425 li
182.771 65.4736 li
182.771 65.4048 li
182.84 65.3359 li
182.84 65.2671 li
182.909 65.1987 li
182.978 65.1299 li
183.046 65.1299 li
183.046 65.061 li
183.116 65.061 li
183.116 65.1299 li
183.184 65.1299 li
183.184 65.1987 li
183.252 65.1987 li
183.252 65.2671 li
183.322 65.3359 li
183.322 65.4048 li
183.39 65.4736 li
183.39 65.5425 li
183.39 65.6113 li
183.459 65.7485 li
183.459 65.8174 li
183.528 66.0928 li
183.597 66.23 li
183.597 66.3677 li
183.666 66.6426 li
183.666 66.7803 li
183.734 66.918 li
183.803 67.1929 li
183.803 67.3994 li
183.872 67.5366 li
183.941 67.812 li
183.941 67.9497 li
183.941 68.0869 li
184.009 68.2246 li
184.009 68.3623 li
184.078 68.4995 li
184.078 68.5684 li
184.147 68.7061 li
184.147 68.7749 li
184.215 68.8438 li
184.215 68.9121 li
184.285 68.981 li
184.285 69.0498 li
184.353 69.0498 li
184.422 69.0498 li
184.491 68.981 li
184.559 68.9121 li
184.559 68.8438 li
184.559 68.7061 li
184.628 68.6372 li
184.628 68.4995 li
184.697 68.4312 li
184.697 68.2935 li
184.766 68.0181 li
184.904 67.3994 li
184.904 67.2617 li
184.972 67.124 li
185.041 66.8491 li
185.041 66.6426 li
185.11 66.5054 li
185.11 66.23 li
185.178 66.0928 li
185.178 65.9551 li
185.248 65.8174 li
185.248 65.7485 li
185.316 65.6113 li
185.316 65.5425 li
185.385 65.4736 li
185.385 65.3359 li
185.454 65.2671 li
185.522 65.1987 li
185.522 65.1299 li
185.591 65.1299 li
185.66 65.061 li
185.729 65.1299 li
185.797 65.1299 li
185.797 65.1987 li
185.867 65.1987 li
185.867 65.2671 li
185.935 65.3359 li
185.935 65.4048 li
186.003 65.4736 li
186.003 65.5425 li
186.073 65.7485 li
186.073 65.8174 li
186.141 65.9551 li
186.21 66.1611 li
186.21 66.23 li
186.279 66.3677 li
186.348 66.6426 li
186.485 67.124 li
186.76 68.2246 li
187.242 70.3564 li
187.31 70.4941 li
187.31 70.563 li
187.379 70.8379 li
187.517 71.2505 li
187.792 72.0762 li
187.792 72.2134 li
187.861 72.2822 li
187.861 72.4888 li
187.999 72.8325 li
188.273 73.52 li
188.273 73.6577 li
188.342 73.7266 li
188.411 73.8643 li
188.48 74.1392 li
188.754 74.6895 li
188.824 74.7583 li
188.824 74.8271 li
188.892 74.9644 li
189.03 75.2397 li
189.236 75.6523 li
189.305 75.7212 li
189.305 75.79 li
189.374 75.8584 li
189.511 76.0649 li
189.787 76.4775 li
189.855 76.4775 li
189.855 76.5464 li
189.924 76.6152 li
190.061 76.8213 li
190.336 77.0967 li
190.336 77.1655 li
190.406 77.1655 li
190.474 77.2339 li
190.612 77.3716 li
190.887 77.647 li
190.956 77.7153 li
191.024 77.7153 li
191.162 77.853 li
191.437 78.0596 li
191.505 78.1279 li
191.575 78.1279 li
191.712 78.2656 li
191.918 78.4033 li
191.987 78.4033 li
191.987 78.4722 li
192.056 78.4722 li
192.194 78.541 li
192.468 78.6782 li
192.538 78.6782 li
192.538 78.7471 li
192.606 78.7471 li
192.744 78.8159 li
193.019 78.9536 li
193.5 79.1597 li
193.569 79.1597 li
193.638 79.1597 li
193.775 79.2285 li
194.05 79.2974 li
194.12 79.3662 li
194.256 79.3662 li
194.532 79.4351 li
194.601 79.4351 li
194.669 79.5034 li
194.738 79.5034 li
195.013 79.5723 li
195.495 79.71 li
195.564 79.71 li
195.632 79.71 li
195.77 79.71 li
196.044 79.7788 li
196.114 79.7788 li
196.182 79.7788 li
196.32 79.8477 li
196.595 79.8477 li
196.664 79.8477 li
196.733 79.9165 li
196.871 79.9165 li
197.077 79.9849 li
197.626 80.0537 li
197.696 80.0537 li
197.764 80.0537 li
197.902 80.0537 li
198.108 80.0537 li
198.659 80.1226 li
198.727 80.1226 li
198.795 80.1226 li
198.865 80.1914 li
199.14 80.1914 li
199.622 80.2603 li
199.69 80.2603 li
199.758 80.2603 li
199.896 80.2603 li
200.103 80.2603 li
200.653 80.3291 li
200.721 80.3291 li
200.859 80.3291 li
201.134 80.3291 li
201.616 80.3979 li
201.684 80.3979 li
201.753 80.3979 li
201.891 80.3979 li
202.097 80.3979 li
202.647 80.3979 li
202.716 80.3979 li
202.785 80.3979 li
202.922 80.4663 li
203.198 80.4663 li
203.748 80.4663 li
203.817 80.4663 li
203.954 80.4663 li
204.229 80.4663 li
204.71 80.5352 li
204.78 80.5352 li
204.848 80.5352 li
204.986 80.5352 li
205.192 80.5352 li
205.673 80.5352 li
205.742 80.5352 li
205.811 80.5352 li
205.949 80.5352 li
206.223 80.5352 li
206.774 80.604 li
206.842 80.604 li
206.912 80.604 li
207.049 80.604 li
207.324 80.604 li
207.875 80.604 li
207.943 80.604 li
208.011 80.604 li
208.081 80.604 li
208.356 80.604 li
208.837 80.604 li
209.869 80.6729 li
209.937 80.6729 li
210.006 80.6729 li
210.075 80.6729 li
210.35 80.6729 li
210.832 80.6729 li
211.863 80.6729 li
211.932 80.6729 li
212.07 80.6729 li
212.344 80.6729 li
212.895 80.6729 li
213.995 80.7417 li
214.064 80.7417 li
214.202 80.7417 li
214.476 80.7417 li
214.958 80.7417 li
215.99 80.7417 li
216.058 80.7417 li
216.196 80.7417 li
216.471 80.7417 li
217.021 80.7417 li
218.122 80.7417 li
218.19 80.7417 li
218.259 80.7417 li
218.397 80.7417 li
218.671 80.7417 li
219.153 80.7417 li
220.253 80.7417 li
222.179 80.8105 li
224.38 80.8105 li
226.375 80.8105 li
228.3 80.8105 li
230.432 80.8105 li
232.426 80.8105 li
234.559 80.8105 li
234.627 80.8105 li
1 0 0 rgb
@
grestore % PSGState
2 lc
234.627 80.8789 mo
133.735 80.8789 li
@
133.735 80.8789 mo
133.735 .137695 li
@
133.735 .137695 mo
234.627 .137695 li
@
234.627 .137695 mo
234.627 80.8789 li
@
0 lc
146.871 80.8789 mo
146.871 78.6782 li
@
168.81 80.8789 mo
168.81 78.6782 li
@
190.75 80.8789 mo
190.75 78.6782 li
@
212.688 80.8789 mo
212.688 78.6782 li
@
133.735 80.8789 mo
135.936 80.8789 li
@
133.735 64.7173 mo
135.936 64.7173 li
@
133.735 48.5552 mo
135.936 48.5552 li
@
133.735 32.4619 mo
135.936 32.4619 li
@
133.735 16.2998 mo
135.936 16.2998 li
@
146.871 .137695 mo
146.871 2.33838 li
@
168.81 .137695 mo
168.81 2.33838 li
@
190.75 .137695 mo
190.75 2.33838 li
@
212.688 .137695 mo
212.688 2.33838 li
@
234.627 .137695 mo
234.627 2.33838 li
@
234.627 80.8789 mo
232.426 80.8789 li
@
234.627 64.7173 mo
232.426 64.7173 li
@
234.627 48.5552 mo
232.426 48.5552 li
@
234.627 32.4619 mo
232.426 32.4619 li
@
234.627 16.2998 mo
232.426 16.2998 li
@
gsave % PSGState
133.598 0 mo
133.598 81.4292 li
234.833 81.4292 li
234.833 0 li
eclp
gsave % PSGState
140.819 1.44434 mo
140.819 14.9243 li
152.923 14.9243 li
152.923 1.44434 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
ADDFJN+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8
F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9A
F110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D39992
4398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D660
3C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83
F23AED1F56FC130F21> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ADDFJN+TimesNewRomanPSMT /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
/ADDFJN+TimesNewRomanPSMT*1 
[
97{/.notdef}repeat /a /b 14{/.notdef}repeat /q 142{/.notdef}repeat
] ADDFJN+TimesNewRomanPSMT nfnt
ADDFJN+TimesNewRomanPSMT*1  [9.90356 0 0 -9.90356 0 0 ]mfnt sfnt
141.928 11.4468 mov
0.000366211 0 (qb) ash
grestore % PSGState
grestore % PSGState
gsave % PSGState
23.7642 88.9946 mo
23.7642 170.423 li
125 170.423 li
125 88.9946 li
eclp
grestore % PSGState
gsave % PSGState
23.7642 88.9946 mo
23.7642 170.423 li
125 170.423 li
125 88.9946 li
eclp
grestore % PSGState
gsave % PSGState
23.7642 88.9946 mo
23.7642 170.423 li
125 170.423 li
125 88.9946 li
eclp
.75 lw
2 lc
23.833 169.254 mo
23.9019 169.254 li
23.9707 169.254 li
24.1084 169.254 li
24.3145 169.254 li
24.8647 169.254 li
25.8276 169.186 li
27.9595 169.117 li
29.9541 169.048 li
31.9487 168.98 li
34.0806 168.911 li
36.0752 168.773 li
38.207 168.635 li
40.3389 168.499 li
40.4077 168.499 li
40.4766 168.499 li
40.6143 168.499 li
40.8203 168.499 li
41.3706 168.429 li
42.3335 168.361 li
42.4023 168.361 li
42.4712 168.361 li
42.6084 168.292 li
42.8838 168.292 li
43.3652 168.223 li
44.4653 168.154 li
44.5342 168.154 li
44.5342 168.085 li
44.603 168.085 li
44.7407 168.085 li
44.9468 168.085 li
45.4971 168.017 li
46.46 167.879 li
46.5288 167.879 li
46.5977 167.879 li
46.7349 167.81 li
46.9414 167.81 li
47.4229 167.742 li
48.4546 167.604 li
48.4546 167.536 li
48.5229 167.536 li
48.5918 167.536 li
48.7295 167.536 li
48.936 167.466 li
49.4858 167.398 li
49.5547 167.398 li
49.6235 167.329 li
49.7612 167.329 li
50.0361 167.26 li
50.5864 167.191 li
50.5864 167.123 li
50.6553 167.123 li
50.793 167.123 li
51.0679 167.054 li
51.5493 166.917 li
51.6182 166.917 li
51.687 166.917 li
51.8242 166.847 li
52.0308 166.779 li
52.5122 166.709 li
52.5811 166.641 li
52.6499 166.641 li
52.7871 166.573 li
53.0625 166.503 li
53.6123 166.366 li
53.6812 166.366 li
53.75 166.297 li
53.8877 166.297 li
54.1626 166.16 li
54.7129 166.022 li
54.7129 165.954 li
54.7817 165.954 li
54.8506 165.954 li
54.9878 165.884 li
55.1943 165.816 li
55.7446 165.541 li
55.8135 165.541 li
55.8823 165.541 li
56.0195 165.472 li
56.2949 165.334 li
56.7764 165.059 li
56.8447 165.059 li
56.9136 164.991 li
57.0513 164.921 li
57.3262 164.853 li
57.8076 164.578 li
57.8076 164.509 li
57.8765 164.509 li
57.9453 164.44 li
58.0142 164.372 li
58.2891 164.234 li
58.7705 163.89 li
58.8394 163.89 li
58.9082 163.822 li
59.0459 163.752 li
59.3208 163.546 li
59.8711 163.133 li
59.8711 163.065 li
59.9399 163.065 li
60.0088 162.997 li
60.0771 162.927 li
60.3525 162.652 li
60.9028 162.17 li
60.9712 162.102 li
61.04 162.034 li
61.1777 161.896 li
61.3843 161.621 li
61.9341 161.071 li
61.9341 161.001 li
62.0029 161.001 li
62.0029 160.933 li
62.1406 160.726 li
62.4155 160.452 li
62.897 159.764 li
62.9658 159.695 li
62.9658 159.626 li
63.0347 159.557 li
63.1724 159.351 li
63.4473 158.87 li
63.9976 157.975 li
63.9976 157.907 li
64.0664 157.838 li
64.1353 157.701 li
64.2725 157.425 li
64.5479 156.875 li
65.0977 155.706 li
65.0977 155.637 li
65.0977 155.569 li
65.1665 155.431 li
65.3042 155.087 li
65.5791 154.399 li
65.6479 154.331 li
65.6479 154.193 li
65.7168 154.055 li
65.8545 153.711 li
66.1294 152.886 li
66.1294 152.818 li
66.1982 152.749 li
66.2671 152.542 li
66.4048 152.129 li
66.6797 151.236 li
67.1611 149.378 li
67.23 149.241 li
67.23 149.104 li
67.2988 148.897 li
67.436 148.416 li
67.7114 147.384 li
68.1929 145.115 li
68.1929 144.977 li
68.2617 144.839 li
68.3301 144.565 li
68.3989 143.946 li
68.6743 142.639 li
69.1558 139.888 li
69.2246 139.681 li
69.2246 139.475 li
69.293 139.063 li
69.4307 138.237 li
69.7056 136.518 li
70.2559 132.804 li
71.2876 124.551 li
71.3564 124.345 li
71.3564 124.07 li
71.4253 123.588 li
71.5625 122.556 li
71.8379 120.562 li
72.3193 116.573 li
72.3193 116.367 li
72.3882 116.091 li
72.4565 115.611 li
72.5942 114.716 li
72.8008 112.928 li
72.8696 112.722 li
72.8696 112.515 li
72.938 112.103 li
73.0757 111.346 li
73.2822 109.902 li
73.3511 109.764 li
73.3511 109.627 li
73.4194 109.283 li
73.4883 109.146 li
73.4883 109.008 li
73.5571 108.733 li
73.5571 108.595 li
73.626 108.527 li
73.6948 108.251 li
73.8325 107.838 li
73.8325 107.702 li
73.9009 107.632 li
73.9009 107.426 li
73.9697 107.357 li
73.9697 107.289 li
74.0386 107.151 li
74.1074 107.083 li
74.1074 107.013 li
74.1763 106.945 li
74.1763 106.876 li
74.2451 106.807 li
74.3135 106.739 li
74.3823 106.669 li
74.4512 106.669 li
74.52 106.669 li
74.5889 106.669 li
74.6577 106.669 li
74.6577 106.739 li
74.7266 106.739 li
74.7266 106.807 li
74.7949 106.876 li
74.8638 106.945 li
74.8638 107.013 li
74.9326 107.083 li
74.9326 107.151 li
75.0015 107.22 li
75.0015 107.357 li
75.0703 107.426 li
75.0703 107.495 li
75.1392 107.702 li
75.208 107.77 li
75.208 107.908 li
75.2764 108.114 li
75.3452 108.251 li
75.3452 108.32 li
75.4141 108.595 li
75.5518 109.214 li
75.5518 109.352 li
75.6206 109.558 li
75.689 109.902 li
75.8267 110.589 li
75.8267 110.796 li
75.8955 111.002 li
75.9644 111.416 li
76.1021 112.241 li
76.377 114.029 li
76.377 114.235 li
76.377 114.51 li
76.4458 114.992 li
76.5835 115.955 li
76.8584 118.017 li
77.4087 122.282 li
77.4087 122.556 li
77.4775 122.832 li
77.5459 123.313 li
77.6836 124.345 li
77.8901 126.27 li
78.3716 130.191 li
78.4399 130.397 li
78.4399 130.672 li
78.5088 131.084 li
78.6465 132.047 li
78.9214 133.835 li
79.4028 137.137 li
79.4028 137.343 li
79.4717 137.619 li
79.5405 138.031 li
79.6782 138.856 li
79.9531 140.438 li
79.9531 140.644 li
80.022 140.851 li
80.0908 141.195 li
80.2285 141.951 li
80.5034 143.395 li
80.5034 143.602 li
80.5723 143.739 li
80.6411 144.083 li
80.71 144.771 li
80.9849 146.008 li
81.5352 148.347 li
81.604 148.485 li
81.604 148.623 li
81.6724 148.829 li
81.8101 149.378 li
82.0854 150.341 li
82.0854 150.479 li
82.1538 150.548 li
82.2227 150.823 li
82.3604 151.236 li
82.6353 152.129 li
82.6353 152.199 li
82.7041 152.336 li
82.7729 152.542 li
82.8418 152.886 li
83.1167 153.643 li
83.667 155.087 li
83.667 155.156 li
83.7358 155.224 li
83.8047 155.362 li
83.9424 155.637 li
84.1484 156.187 li
84.6299 157.288 li
84.6987 157.288 li
84.6987 157.357 li
84.7676 157.495 li
84.9048 157.769 li
85.1802 158.182 li
85.6616 159.007 li
85.6616 159.076 li
85.7305 159.145 li
85.7993 159.213 li
85.9365 159.419 li
86.1431 159.833 li
86.6934 160.589 li
86.7617 160.589 li
86.7617 160.658 li
86.8306 160.726 li
86.9683 160.933 li
87.2432 161.208 li
87.7935 161.827 li
87.7935 161.896 li
87.8623 161.896 li
87.9312 161.964 li
88 162.102 li
88.2749 162.308 li
88.7563 162.79 li
88.8252 162.859 li
88.894 162.927 li
89.0313 162.997 li
89.3066 163.203 li
89.7881 163.615 li
89.8569 163.615 li
89.9258 163.684 li
89.9941 163.752 li
90.2695 163.958 li
90.751 164.303 li
90.8198 164.303 li
90.8882 164.372 li
91.0259 164.44 li
91.2324 164.578 li
91.7139 164.853 li
91.7827 164.853 li
91.8511 164.921 li
91.9888 164.991 li
92.2637 165.128 li
92.814 165.334 li
92.814 165.403 li
92.8828 165.403 li
92.9517 165.403 li
93.0894 165.472 li
93.3643 165.61 li
93.8457 165.816 li
93.9146 165.816 li
93.9834 165.884 li
94.1206 165.884 li
94.3271 166.022 li
94.8774 166.16 li
94.9463 166.229 li
95.0835 166.297 li
95.3589 166.366 li
95.8403 166.503 li
95.9092 166.503 li
95.9775 166.573 li
96.1152 166.573 li
96.3901 166.641 li
96.9404 166.779 li
97.0093 166.847 li
97.0781 166.847 li
97.2158 166.847 li
97.4219 166.917 li
97.9722 167.054 li
98.041 167.054 li
98.1099 167.123 li
98.2471 167.123 li
98.5225 167.191 li
99.0039 167.26 li
99.9668 167.466 li
100.036 167.466 li
100.104 167.466 li
100.242 167.536 li
100.517 167.536 li
100.998 167.672 li
101.961 167.81 li
102.03 167.81 li
102.099 167.81 li
102.236 167.81 li
102.511 167.879 li
103.062 167.948 li
104.093 168.085 li
104.162 168.085 li
104.23 168.085 li
104.368 168.085 li
104.575 168.154 li
105.125 168.154 li
106.087 168.292 li
106.156 168.292 li
106.225 168.292 li
106.363 168.292 li
106.638 168.361 li
107.188 168.361 li
108.22 168.499 li
108.289 168.499 li
108.357 168.499 li
108.495 168.499 li
108.77 168.499 li
109.32 168.567 li
110.352 168.635 li
112.346 168.773 li
114.478 168.842 li
116.473 168.98 li
118.467 169.048 li
120.599 169.117 li
122.594 169.186 li
124.726 169.254 li
124.794 169.254 li
0 0 1 rgb
@
23.833 169.254 mo
23.9019 169.254 li
23.9707 169.254 li
24.1084 169.254 li
24.3145 169.254 li
24.8647 169.254 li
25.8276 169.254 li
27.9595 169.186 li
29.9541 169.117 li
31.9487 169.048 li
34.0806 168.911 li
36.0752 168.842 li
38.207 168.705 li
40.3389 168.567 li
40.4077 168.567 li
40.4766 168.567 li
40.6143 168.567 li
40.8203 168.567 li
41.3706 168.499 li
42.3335 168.429 li
42.4023 168.429 li
42.4712 168.429 li
42.6084 168.429 li
42.8838 168.361 li
43.3652 168.361 li
44.4653 168.223 li
44.5342 168.223 li
44.603 168.223 li
44.7407 168.223 li
44.9468 168.154 li
45.4971 168.085 li
46.46 168.017 li
46.5288 168.017 li
46.5977 168.017 li
46.7349 167.948 li
46.9414 167.948 li
47.4229 167.879 li
48.4546 167.742 li
48.5229 167.742 li
48.5918 167.672 li
48.7295 167.672 li
48.936 167.672 li
49.4858 167.536 li
50.5864 167.329 li
50.6553 167.329 li
50.793 167.329 li
51.0679 167.26 li
51.5493 167.191 li
51.5493 167.123 li
51.6182 167.123 li
51.687 167.123 li
51.8242 167.123 li
52.0308 167.054 li
52.5122 166.917 li
52.5811 166.917 li
52.6499 166.917 li
52.7871 166.847 li
53.0625 166.779 li
53.6123 166.641 li
53.6812 166.641 li
53.75 166.641 li
53.8877 166.573 li
54.1626 166.503 li
54.7129 166.366 li
54.7129 166.297 li
54.7817 166.297 li
54.8506 166.297 li
54.9878 166.229 li
55.1943 166.16 li
55.7446 165.954 li
55.8135 165.954 li
55.8823 165.954 li
56.0195 165.884 li
56.2949 165.816 li
56.7764 165.61 li
56.8447 165.541 li
56.9136 165.541 li
57.0513 165.472 li
57.3262 165.334 li
57.8076 165.128 li
57.8765 165.128 li
57.9453 165.059 li
58.0142 164.991 li
58.2891 164.921 li
58.7705 164.647 li
58.8394 164.647 li
58.8394 164.578 li
58.9082 164.578 li
59.0459 164.509 li
59.3208 164.372 li
59.8711 164.028 li
59.9399 163.958 li
60.0088 163.958 li
60.0771 163.822 li
60.3525 163.684 li
60.9028 163.271 li
60.9712 163.271 li
61.04 163.203 li
61.1777 163.133 li
61.3843 162.927 li
61.9341 162.515 li
61.9341 162.446 li
62.0029 162.446 li
62.0029 162.377 li
62.1406 162.308 li
62.4155 162.034 li
62.897 161.621 li
62.9658 161.552 li
63.0347 161.483 li
63.1724 161.345 li
63.4473 161.071 li
63.9976 160.452 li
65.0977 159.145 li
65.0977 159.076 li
65.1665 159.007 li
65.3042 158.801 li
65.5791 158.457 li
66.1294 157.701 li
66.1982 157.631 li
66.2671 157.563 li
66.4048 157.357 li
66.6797 157.013 li
67.1611 156.256 li
67.23 156.256 li
67.23 156.187 li
67.2988 156.119 li
67.436 155.913 li
67.7114 155.637 li
67.7114 155.569 li
67.7114 155.5 li
67.7803 155.431 li
67.9175 155.293 li
68.1929 155.018 li
68.1929 154.95 li
68.2617 154.95 li
68.3301 154.88 li
68.3989 154.743 li
68.4678 154.743 li
68.4678 154.674 li
68.5366 154.606 li
68.6743 154.537 li
68.6743 154.468 li
68.7432 154.468 li
68.8115 154.399 li
68.8804 154.399 li
68.9492 154.331 li
68.9492 154.262 li
69.0181 154.262 li
69.0869 154.262 li
69.0869 154.193 li
69.1558 154.193 li
69.2246 154.193 li
69.2246 154.125 li
69.293 154.125 li
69.3618 154.125 li
69.4307 154.125 li
69.4995 154.125 li
69.4995 154.055 li
69.5684 154.055 li
69.6372 154.055 li
69.7056 154.055 li
69.7056 154.125 li
69.7744 154.125 li
69.8433 154.125 li
69.9121 154.125 li
69.981 154.193 li
70.0498 154.193 li
70.0498 154.262 li
70.1187 154.262 li
70.187 154.331 li
70.2559 154.399 li
70.3247 154.399 li
70.3936 154.537 li
70.4624 154.606 li
70.5313 154.674 li
70.5313 154.743 li
70.6001 154.743 li
70.6685 154.88 li
70.8062 155.156 li
70.875 155.224 li
70.875 155.431 li
71.0127 155.706 li
71.0811 155.775 li
71.0811 155.913 li
71.1499 156.05 li
71.2876 156.462 li
71.3564 156.532 li
71.3564 156.668 li
71.4253 156.806 li
71.5625 157.288 li
71.8379 158.182 li
71.8379 158.32 li
71.9067 158.457 li
71.9067 158.732 li
72.0439 159.283 li
72.3193 160.382 li
72.3193 160.52 li
72.3882 160.658 li
72.4565 161.001 li
72.5942 161.552 li
72.8008 162.79 li
72.8696 162.927 li
72.8696 163.065 li
72.938 163.409 li
73.0757 163.958 li
73.2822 165.128 li
73.3511 165.266 li
73.3511 165.334 li
73.4194 165.61 li
73.5571 166.091 li
73.5571 166.16 li
73.626 166.297 li
73.6948 166.503 li
73.8325 166.847 li
73.8325 166.985 li
73.9009 167.054 li
73.9009 167.191 li
73.9697 167.26 li
73.9697 167.329 li
74.0386 167.466 li
74.1074 167.536 li
74.1074 167.604 li
74.1763 167.604 li
74.1763 167.672 li
74.1763 167.742 li
74.2451 167.742 li
74.2451 167.81 li
74.3135 167.81 li
74.3135 167.879 li
74.3823 167.879 li
74.4512 167.879 li
74.4512 167.948 li
74.52 167.948 li
74.52 167.879 li
74.5889 167.879 li
74.6577 167.879 li
74.7266 167.81 li
74.7266 167.742 li
74.7949 167.742 li
74.7949 167.672 li
74.8638 167.672 li
74.8638 167.604 li
74.9326 167.536 li
74.9326 167.466 li
75.0015 167.466 li
75.0015 167.329 li
75.0703 167.26 li
75.0703 167.123 li
75.1392 166.985 li
75.2764 166.641 li
75.3452 166.503 li
75.3452 166.435 li
75.4141 166.16 li
75.5518 165.678 li
75.8267 164.578 li
75.8267 164.44 li
75.8955 164.234 li
75.9644 163.958 li
76.1021 163.34 li
76.377 162.034 li
76.377 161.896 li
76.377 161.689 li
76.4458 161.415 li
76.5835 160.795 li
76.8584 159.557 li
76.9272 159.351 li
76.9272 159.213 li
76.9961 158.938 li
77.1333 158.388 li
77.4087 157.357 li
77.4087 157.288 li
77.4775 157.15 li
77.5459 156.944 li
77.6836 156.532 li
77.6836 156.462 li
77.7524 156.394 li
77.7524 156.187 li
77.8901 155.843 li
77.959 155.775 li
77.959 155.706 li
78.0273 155.569 li
78.0273 155.5 li
78.0962 155.431 li
78.165 155.293 li
78.165 155.224 li
78.2339 155.156 li
78.3027 155.018 li
78.3716 154.812 li
78.4399 154.743 li
78.5088 154.606 li
78.5776 154.606 li
78.5776 154.537 li
78.6465 154.468 li
78.7153 154.468 li
78.7153 154.399 li
78.7842 154.331 li
78.853 154.331 li
78.9214 154.262 li
78.9902 154.193 li
79.0591 154.193 li
79.0591 154.125 li
79.1279 154.125 li
79.1968 154.125 li
79.2656 154.125 li
79.3345 154.055 li
79.4028 154.055 li
79.4717 154.055 li
79.5405 154.125 li
79.6094 154.125 li
79.6782 154.125 li
79.7471 154.125 li
79.8159 154.193 li
79.8843 154.193 li
79.9531 154.262 li
80.022 154.262 li
80.0908 154.331 li
80.1597 154.399 li
80.2285 154.399 li
80.2285 154.468 li
80.2969 154.468 li
80.3657 154.537 li
80.5034 154.674 li
80.5723 154.743 li
80.6411 154.812 li
80.71 154.95 li
80.9849 155.224 li
81.5352 155.913 li
81.604 155.981 li
81.6724 156.119 li
81.8101 156.256 li
82.0854 156.6 li
82.6353 157.357 li
83.667 158.801 li
83.667 158.87 li
83.7358 158.87 li
83.8047 158.938 li
83.9424 159.145 li
84.1484 159.419 li
84.6299 160.039 li
84.6987 160.039 li
84.6987 160.108 li
84.7676 160.176 li
84.9048 160.314 li
85.1802 160.589 li
85.6616 161.139 li
85.7305 161.208 li
85.7993 161.277 li
85.9365 161.415 li
86.1431 161.689 li
86.6934 162.17 li
86.7617 162.17 li
86.7617 162.24 li
86.8306 162.308 li
86.9683 162.377 li
87.2432 162.652 li
87.7935 163.065 li
87.8623 163.133 li
87.9312 163.133 li
88 163.271 li
88.2749 163.409 li
88.7563 163.752 li
88.8252 163.822 li
88.894 163.822 li
89.0313 163.958 li
89.3066 164.096 li
89.7881 164.372 li
89.7881 164.44 li
89.8569 164.44 li
89.9258 164.44 li
89.9941 164.509 li
90.2695 164.647 li
90.751 164.921 li
90.8198 164.921 li
90.8882 164.991 li
91.0259 165.059 li
91.2324 165.128 li
91.7139 165.403 li
91.7827 165.403 li
91.8511 165.472 li
91.9888 165.472 li
92.2637 165.61 li
92.814 165.816 li
92.8828 165.816 li
92.9517 165.884 li
93.0894 165.884 li
93.3643 166.022 li
93.8457 166.229 li
93.9146 166.229 li
93.9834 166.229 li
94.1206 166.297 li
94.3271 166.366 li
94.8774 166.503 li
94.9463 166.503 li
94.9463 166.573 li
95.0835 166.573 li
95.3589 166.641 li
95.8403 166.779 li
95.9092 166.779 li
95.9775 166.847 li
96.1152 166.847 li
96.3901 166.917 li
96.9404 167.054 li
97.9722 167.26 li
98.041 167.26 li
98.1099 167.329 li
98.2471 167.329 li
98.5225 167.398 li
99.0039 167.466 li
99.9668 167.604 li
100.036 167.672 li
100.104 167.672 li
100.242 167.672 li
100.517 167.742 li
100.998 167.81 li
101.961 167.948 li
102.03 167.948 li
102.099 167.948 li
102.236 167.948 li
102.511 168.017 li
103.062 168.085 li
104.093 168.154 li
104.162 168.154 li
104.23 168.223 li
104.368 168.223 li
104.575 168.223 li
105.125 168.292 li
106.087 168.361 li
106.156 168.361 li
106.225 168.361 li
106.363 168.429 li
106.638 168.429 li
107.188 168.499 li
108.22 168.567 li
108.289 168.567 li
108.357 168.567 li
108.495 168.567 li
108.77 168.567 li
109.32 168.635 li
110.352 168.705 li
112.346 168.842 li
114.478 168.911 li
116.473 168.98 li
118.467 169.117 li
120.599 169.186 li
122.594 169.186 li
124.726 169.254 li
124.794 169.254 li
1 0 0 rgb
@
grestore % PSGState
2 lc
124.794 169.874 mo
23.833 169.874 li
@
23.833 169.874 mo
23.833 89.1323 li
@
23.833 89.1323 mo
124.794 89.1323 li
@
124.794 89.1323 mo
124.794 169.874 li
@
0 lc
37.0376 169.874 mo
37.0376 167.672 li
@
gsave % PSGState
35.9375 172.075 mo
35.9375 185.554 li
38.1382 185.554 li
38.1382 172.075 li
eclp
grestore % PSGState
58.9771 169.874 mo
58.9771 167.672 li
@
gsave % PSGState
50.4487 172.075 mo
50.4487 185.554 li
67.5049 185.554 li
67.5049 172.075 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
ADDFJN+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73D83638F79AE86E17D4CE334FAA90E146D21CDA0FE
B71815E9499D6C6A6E581E78F34038D792771470EBF894DABD777E9B4FDE68E7
E1544BCF1EFB2DCE59357B716B4D2ADF3EAC3A9FF8BD07EC79AF5536B9B74185
F8F7489AD909079119E88D2BB755D6F6AC02C01BDFADB347EC55DAC49C8BB047
661CC7AAA3BDC1DB8E01EC56137B53ED31B24F4502353853D049BB0515CA4217
D33D10484933F30AD1EAA43CFDF00AFA5462EE9B1772CE60A3392B8D9C1A3598
CF2273E36A1FF3A58B2E24B1EACE5E34650257902678998DAAFF235764CCCA14
3A> |-
/six <1C60D8A8C9B7A73DB682174C160AB8115D90A4524BD5B352C23110F23E
E4E20266716093AE0643A076F6C57BA527F49BB819243E28C4CA7F711F41FA01
318856C15674E51D546E83D25FE9DB7A4B9EDFDDE57E488CC507C2304526D6E8
0E07D1EEFCA86373B2F664DD3DA4646061C700F112AB44ED3896FA596FE81443
6AD1F1DC5FEDB207A575A17735F66E79BF0D0E423C92F1E9255D38F15B49459F
3693E95DCE92EBF25C243713EDA9138A49C42AA83683249878EEA825672AC6D9
9C32B9109B3D5797A7> |-
/seven <1C60D8A8C9B7A73DFE31854B8CA51F015562FECC80A8475F282F7722
52E10D05B7D43981266F60616595AB1BFBC47BFB03D1BE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ADDFJN+TimesNewRomanPSMT /Encoding get
dup 51 /three put
dup 54 /six put
dup 55 /seven put
pop
%ADOEndSubsetFont
/ADDFJN+TimesNewRomanPSMT*1 
[
51{/.notdef}repeat /three 2{/.notdef}repeat /six /seven 41{/.notdef}repeat /a /b 
14{/.notdef}repeat /q 142{/.notdef}repeat
] ADDFJN+TimesNewRomanPSMT nfnt
ADDFJN+TimesNewRomanPSMT*1  [9.90356 0 0 -9.90356 0 0 ]mfnt sfnt
51.5322 182.048 mov
-0.000244141 0 55 (673) wsh
grestore % PSGState
80.916 169.874 mo
80.916 167.672 li
@
gsave % PSGState
79.8159 172.075 mo
79.8159 185.554 li
82.0166 185.554 li
82.0166 172.075 li
eclp
grestore % PSGState
102.855 169.874 mo
102.855 167.672 li
@
gsave % PSGState
94.3271 172.075 mo
94.3271 185.554 li
111.383 185.554 li
111.383 172.075 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
ADDFJN+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7A73DB6B62B7A95EE6C20B94EAC94CA9AB50BFD020369D
6A63C8EA15A0D9A89B2ED9293078F8D3EE629592E255C65B246> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ADDFJN+TimesNewRomanPSMT /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/ADDFJN+TimesNewRomanPSMT*1 
[
51{/.notdef}repeat /three /four /.notdef /six /seven 41{/.notdef}repeat /a 
/b 14{/.notdef}repeat /q 142{/.notdef}repeat
] ADDFJN+TimesNewRomanPSMT nfnt
ADDFJN+TimesNewRomanPSMT*1  [9.90356 0 0 -9.90356 0 0 ]mfnt sfnt
95.416 182.048 mov
-0.000244141 0 55 (674) wsh
grestore % PSGState
23.833 169.874 mo
26.0337 169.874 li
@
23.833 153.711 mo
26.0337 153.711 li
@
23.833 137.549 mo
26.0337 137.549 li
@
23.833 121.457 mo
26.0337 121.457 li
@
23.833 105.294 mo
26.0337 105.294 li
@
37.0376 89.1323 mo
37.0376 91.3325 li
@
ALMFJN+CourierNewPSMT*1  [9.90356 0 0 -9.90356 0 0 ]mfnt sfnt
16.6001 173.108 mov
(0) sh
16.6001 156.958 mov
(1) sh
16.6001 140.81 mov
(2) sh
16.6001 124.661 mov
(3) sh
16.6001 108.511 mov
(4) sh
gsave % PSGState
35.9375 73.4517 mo
35.9375 86.9312 li
38.1382 86.9312 li
38.1382 73.4517 li
eclp
grestore % PSGState
58.9771 89.1323 mo
58.9771 91.3325 li
@
gsave % PSGState
57.8765 73.4517 mo
57.8765 86.9312 li
60.0771 86.9312 li
60.0771 73.4517 li
eclp
grestore % PSGState
80.916 89.1323 mo
80.916 91.3325 li
@
gsave % PSGState
79.8159 73.4517 mo
79.8159 86.9312 li
82.0166 86.9312 li
82.0166 73.4517 li
eclp
grestore % PSGState
102.855 89.1323 mo
102.855 91.3325 li
@
gsave % PSGState
101.755 73.4517 mo
101.755 86.9312 li
103.956 86.9312 li
103.956 73.4517 li
eclp
grestore % PSGState
124.794 89.1323 mo
124.794 91.3325 li
@
gsave % PSGState
123.694 73.4517 mo
123.694 86.9312 li
125.895 86.9312 li
125.895 73.4517 li
eclp
grestore % PSGState
124.794 169.874 mo
122.594 169.874 li
@
gsave % PSGState
126.995 163.133 mo
126.995 176.614 li
129.196 176.614 li
129.196 163.133 li
eclp
grestore % PSGState
124.794 153.711 mo
122.594 153.711 li
@
gsave % PSGState
126.995 146.971 mo
126.995 160.452 li
129.196 160.452 li
129.196 146.971 li
eclp
grestore % PSGState
124.794 137.549 mo
122.594 137.549 li
@
gsave % PSGState
126.995 130.81 mo
126.995 144.29 li
129.196 144.29 li
129.196 130.81 li
eclp
grestore % PSGState
124.794 121.457 mo
122.594 121.457 li
@
gsave % PSGState
126.995 114.716 mo
126.995 128.196 li
129.196 128.196 li
129.196 114.716 li
eclp
grestore % PSGState
124.794 105.294 mo
122.594 105.294 li
@
gsave % PSGState
126.995 98.5542 mo
126.995 112.034 li
129.196 112.034 li
129.196 98.5542 li
eclp
grestore % PSGState
gsave % PSGState
68.2617 182.253 mo
68.2617 195.733 li
80.3657 195.733 li
80.3657 182.253 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
ADDFJN+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ADDFJN+TimesNewRomanPSMT /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/ADDFJN+TimesNewRomanPSMT*1 
[
49{/.notdef}repeat /one /.notdef /three /four /.notdef /six /seven 
41{/.notdef}repeat /a /b 14{/.notdef}repeat /q 142{/.notdef}repeat
] ADDFJN+TimesNewRomanPSMT nfnt
ADDFJN+TimesNewRomanPSMT*1  [9.90356 0 0 -9.90356 0 0 ]mfnt sfnt
69.3672 192.227 mov
(q1) sh
grestore % PSGState
gsave % PSGState
0 78.4507 mo
0 90.5552 li
13.4795 90.5552 li
13.4795 78.4507 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
ADDFJN+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B
4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25
003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0
F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11E
C41D90433CE0F55F0A42A96AF852FD50FA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ADDFJN+TimesNewRomanPSMT /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/ADDFJN+TimesNewRomanPSMT*1 
[
49{/.notdef}repeat /one /two /three /four /.notdef /six /seven 
41{/.notdef}repeat /a /b 14{/.notdef}repeat /q 142{/.notdef}repeat
] ADDFJN+TimesNewRomanPSMT nfnt
ADDFJN+TimesNewRomanPSMT*1  [0 -9.90346 -9.90346 0 0 0 ]mfnt sfnt
9.91139 89.372 mov
0 -0.000366211 (q2) ash
grestore % PSGState
gsave % PSGState
23.7642 88.9946 mo
23.7642 170.423 li
125 170.423 li
125 88.9946 li
eclp
gsave % PSGState
31.2607 90.439 mo
31.2607 103.918 li
42.7461 103.918 li
42.7461 90.439 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
ADDFJN+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438ECC5
4400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F42A
6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F9C
2999730E7919239B324086FEA852156F456647AA0692084759C352D699897179
9F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ADDFJN+TimesNewRomanPSMT /Encoding get
dup 99 /c put
pop
%ADOEndSubsetFont
/ADDFJN+TimesNewRomanPSMT*1 
[
49{/.notdef}repeat /one /two /three /four /.notdef /six /seven 
41{/.notdef}repeat /a /b /c 13{/.notdef}repeat /q 142{/.notdef}repeat
] ADDFJN+TimesNewRomanPSMT nfnt
ADDFJN+TimesNewRomanPSMT*1  [9.90356 0 0 -9.90356 0 0 ]mfnt sfnt
32.376 100.437 mov
(qc) sh
grestore % PSGState
grestore % PSGState
gsave % PSGState
133.598 88.9946 mo
133.598 170.423 li
234.833 170.423 li
234.833 88.9946 li
eclp
grestore % PSGState
gsave % PSGState
133.598 88.9946 mo
133.598 170.423 li
234.833 170.423 li
234.833 88.9946 li
eclp
grestore % PSGState
gsave % PSGState
133.598 88.9946 mo
133.598 170.423 li
234.833 170.423 li
234.833 88.9946 li
eclp
.75 lw
2 lc
133.735 164.096 mo
133.735 164.096 li
133.804 164.096 li
133.873 164.096 li
133.941 164.028 li
134.216 164.028 li
134.698 163.89 li
135.73 163.684 li
137.862 163.133 li
139.856 162.583 li
141.782 161.964 li
143.983 161.277 li
145.908 160.452 li
148.109 159.489 li
150.241 158.388 li
152.167 157.219 li
154.298 155.775 li
156.362 154.193 li
158.288 152.405 li
160.419 150.135 li
162.415 147.66 li
164.546 144.565 li
166.678 140.988 li
168.604 137.206 li
170.804 132.46 li
172.799 127.578 li
174.931 121.869 li
177.063 116.229 li
177.063 116.161 li
177.132 116.091 li
177.201 115.955 li
177.269 115.611 li
177.544 114.992 li
178.026 113.753 li
178.094 113.685 li
178.094 113.616 li
178.164 113.478 li
178.301 113.134 li
178.507 112.584 li
179.057 111.416 li
179.057 111.346 li
179.126 111.278 li
179.195 111.14 li
179.264 110.865 li
179.539 110.246 li
180.089 109.214 li
180.158 109.146 li
180.158 109.077 li
180.227 108.939 li
180.365 108.665 li
180.639 108.183 li
181.19 107.289 li
181.258 107.22 li
181.327 107.151 li
181.396 106.945 li
181.671 106.601 li
181.671 106.532 li
181.74 106.532 li
181.808 106.463 li
181.946 106.257 li
182.153 105.982 li
182.221 105.982 li
182.221 105.914 li
182.29 105.844 li
182.427 105.707 li
182.497 105.707 li
182.565 105.638 li
182.703 105.5 li
182.771 105.432 li
182.909 105.294 li
182.978 105.294 li
183.046 105.225 li
183.184 105.157 li
183.184 105.087 li
183.252 105.087 li
183.322 105.087 li
183.322 105.019 li
183.39 105.019 li
183.459 105.019 li
183.459 104.951 li
183.528 104.951 li
183.666 104.881 li
183.734 104.881 li
183.803 104.881 li
183.872 104.813 li
183.941 104.813 li
184.009 104.813 li
184.078 104.813 li
184.147 104.813 li
184.215 104.813 li
184.215 104.744 li
184.285 104.744 li
184.353 104.744 li
184.422 104.744 li
184.491 104.744 li
184.559 104.744 li
184.559 104.813 li
184.628 104.813 li
184.697 104.813 li
184.766 104.813 li
184.834 104.813 li
184.904 104.813 li
184.904 104.881 li
184.972 104.881 li
185.041 104.881 li
185.11 104.881 li
185.11 104.951 li
185.178 104.951 li
185.248 105.019 li
185.316 105.019 li
185.385 105.087 li
185.454 105.087 li
185.522 105.157 li
185.66 105.225 li
185.729 105.225 li
185.729 105.294 li
185.797 105.294 li
185.935 105.432 li
186.21 105.638 li
186.21 105.707 li
186.279 105.707 li
186.348 105.776 li
186.485 105.914 li
186.76 106.188 li
186.76 106.257 li
186.829 106.257 li
186.898 106.395 li
187.036 106.532 li
187.242 106.876 li
187.31 106.945 li
187.31 107.013 li
187.379 107.083 li
187.517 107.289 li
187.792 107.632 li
188.273 108.527 li
188.273 108.595 li
188.342 108.595 li
188.411 108.733 li
188.48 109.008 li
188.754 109.49 li
189.236 110.453 li
189.305 110.521 li
189.305 110.589 li
189.374 110.796 li
189.511 111.071 li
189.787 111.69 li
190.336 112.928 li
191.437 115.611 li
193.5 121.181 li
195.495 126.408 li
197.626 131.704 li
199.622 136.243 li
201.616 140.163 li
203.748 143.876 li
205.673 146.834 li
207.875 149.585 li
209.869 151.786 li
211.863 153.711 li
213.995 155.431 li
215.99 156.875 li
218.122 158.182 li
220.253 159.283 li
222.179 160.246 li
224.38 161.071 li
226.375 161.827 li
228.3 162.446 li
230.432 162.997 li
232.426 163.546 li
234.559 164.028 li
234.627 164.028 li
0 0 1 rgb
@
133.735 164.785 mo
133.735 164.785 li
133.804 164.785 li
133.873 164.785 li
133.941 164.715 li
134.216 164.715 li
134.698 164.647 li
135.73 164.44 li
137.862 164.028 li
139.856 163.615 li
141.782 163.133 li
143.983 162.652 li
145.908 162.102 li
148.109 161.415 li
150.241 160.726 li
152.167 160.039 li
154.298 159.145 li
156.362 158.32 li
158.288 157.495 li
160.419 156.532 li
162.415 155.706 li
162.483 155.706 li
162.551 155.637 li
162.689 155.569 li
162.964 155.5 li
163.446 155.293 li
163.514 155.224 li
163.583 155.224 li
163.721 155.156 li
163.996 155.087 li
164.546 154.88 li
164.615 154.88 li
164.684 154.812 li
164.821 154.812 li
165.096 154.743 li
165.096 154.674 li
165.166 154.674 li
165.234 154.674 li
165.372 154.606 li
165.578 154.537 li
165.647 154.537 li
165.715 154.537 li
165.853 154.468 li
166.127 154.399 li
166.197 154.399 li
166.265 154.399 li
166.403 154.331 li
166.678 154.262 li
166.747 154.262 li
166.816 154.262 li
166.884 154.262 li
166.954 154.262 li
167.022 154.193 li
167.16 154.193 li
167.228 154.193 li
167.297 154.193 li
167.435 154.193 li
167.503 154.125 li
167.641 154.125 li
167.709 154.125 li
167.779 154.125 li
167.847 154.125 li
167.917 154.125 li
167.985 154.125 li
168.053 154.125 li
168.123 154.125 li
168.191 154.125 li
168.26 154.125 li
168.26 154.055 li
168.329 154.055 li
168.398 154.055 li
168.466 154.055 li
168.535 154.055 li
168.604 154.055 li
168.672 154.055 li
168.742 154.055 li
168.81 154.055 li
168.879 154.055 li
168.948 154.055 li
168.948 154.125 li
169.016 154.125 li
169.085 154.125 li
169.154 154.125 li
169.223 154.125 li
169.292 154.125 li
169.36 154.125 li
169.429 154.125 li
169.498 154.125 li
169.567 154.125 li
169.705 154.193 li
169.773 154.193 li
169.841 154.193 li
169.979 154.193 li
170.048 154.193 li
170.117 154.262 li
170.254 154.262 li
170.323 154.262 li
170.392 154.331 li
170.53 154.331 li
170.804 154.399 li
170.804 154.468 li
170.874 154.468 li
171.011 154.537 li
171.286 154.606 li
171.355 154.606 li
171.423 154.674 li
171.493 154.743 li
171.767 154.812 li
171.767 154.88 li
171.836 154.88 li
171.905 154.88 li
172.042 154.95 li
172.249 155.156 li
172.799 155.431 li
172.799 155.5 li
172.868 155.5 li
172.868 155.569 li
173.005 155.637 li
173.281 155.913 li
173.349 155.913 li
173.418 155.981 li
173.555 156.119 li
173.831 156.394 li
173.9 156.394 li
173.9 156.462 li
173.968 156.532 li
174.106 156.668 li
174.381 156.944 li
174.931 157.563 li
174.931 157.631 li
175 157.631 li
175.069 157.701 li
175.207 157.907 li
175.481 158.25 li
175.962 158.938 li
177.063 160.589 li
179.057 163.89 li
179.057 163.958 li
179.126 164.028 li
179.195 164.166 li
179.264 164.372 li
179.539 164.853 li
180.089 165.678 li
180.158 165.748 li
180.158 165.816 li
180.227 165.954 li
180.365 166.16 li
180.639 166.573 li
181.19 167.329 li
181.258 167.398 li
181.327 167.466 li
181.396 167.672 li
181.671 167.948 li
181.671 168.017 li
181.74 168.017 li
181.808 168.085 li
181.946 168.223 li
182.153 168.499 li
182.221 168.567 li
182.29 168.635 li
182.427 168.773 li
182.497 168.842 li
182.565 168.842 li
182.703 168.98 li
182.771 169.048 li
182.909 169.186 li
182.978 169.186 li
183.046 169.254 li
183.184 169.324 li
183.252 169.324 li
183.322 169.392 li
183.39 169.392 li
183.39 169.461 li
183.459 169.461 li
183.528 169.53 li
183.666 169.53 li
183.734 169.598 li
183.803 169.598 li
183.872 169.598 li
183.941 169.598 li
184.009 169.667 li
184.078 169.667 li
184.147 169.667 li
184.215 169.667 li
184.285 169.667 li
184.353 169.667 li
184.422 169.667 li
184.491 169.667 li
184.559 169.667 li
184.628 169.667 li
184.697 169.667 li
184.766 169.598 li
184.834 169.598 li
184.904 169.598 li
184.972 169.598 li
185.041 169.53 li
185.11 169.53 li
185.178 169.53 li
185.178 169.461 li
185.248 169.461 li
185.316 169.461 li
185.385 169.392 li
185.454 169.392 li
185.522 169.324 li
185.66 169.254 li
185.729 169.254 li
185.729 169.186 li
185.797 169.186 li
185.935 169.048 li
186.21 168.842 li
186.279 168.773 li
186.348 168.705 li
186.485 168.567 li
186.76 168.292 li
186.829 168.223 li
186.898 168.154 li
187.036 168.017 li
187.242 167.672 li
187.31 167.672 li
187.31 167.604 li
187.379 167.536 li
187.517 167.329 li
187.792 166.985 li
188.273 166.297 li
189.236 164.647 li
191.437 161.001 li
191.437 160.933 li
191.505 160.933 li
191.575 160.795 li
191.712 160.589 li
191.918 160.176 li
192.468 159.351 li
192.538 159.283 li
192.606 159.145 li
192.744 158.938 li
193.019 158.594 li
193.5 157.907 li
193.569 157.838 li
193.638 157.769 li
193.775 157.563 li
194.05 157.288 li
194.532 156.738 li
194.601 156.668 li
194.669 156.6 li
194.738 156.462 li
195.013 156.256 li
195.495 155.843 li
195.564 155.775 li
195.632 155.706 li
195.77 155.637 li
196.044 155.431 li
196.044 155.362 li
196.114 155.362 li
196.182 155.293 li
196.32 155.224 li
196.595 155.087 li
196.595 155.018 li
196.664 155.018 li
196.733 154.95 li
196.871 154.88 li
197.077 154.743 li
197.145 154.743 li
197.214 154.674 li
197.352 154.606 li
197.626 154.537 li
197.696 154.537 li
197.764 154.468 li
197.902 154.468 li
197.902 154.399 li
197.97 154.399 li
198.04 154.399 li
198.108 154.331 li
198.177 154.331 li
198.246 154.331 li
198.383 154.262 li
198.452 154.262 li
198.521 154.262 li
198.659 154.262 li
198.659 154.193 li
198.727 154.193 li
198.795 154.193 li
198.865 154.193 li
198.933 154.193 li
199.002 154.193 li
199.14 154.125 li
199.208 154.125 li
199.277 154.125 li
199.346 154.125 li
199.415 154.125 li
199.484 154.125 li
199.552 154.125 li
199.622 154.125 li
199.69 154.125 li
199.758 154.125 li
199.828 154.055 li
199.896 154.055 li
199.965 154.055 li
200.034 154.055 li
200.103 154.055 li
200.171 154.055 li
200.24 154.055 li
200.309 154.055 li
200.377 154.055 li
200.447 154.055 li
200.447 154.125 li
200.515 154.125 li
200.584 154.125 li
200.653 154.125 li
200.721 154.125 li
200.791 154.125 li
200.859 154.125 li
200.928 154.125 li
200.997 154.125 li
201.134 154.125 li
201.203 154.125 li
201.34 154.193 li
201.616 154.193 li
201.684 154.193 li
201.753 154.262 li
201.891 154.262 li
202.097 154.331 li
202.166 154.331 li
202.235 154.331 li
202.373 154.399 li
202.647 154.399 li
202.716 154.468 li
202.785 154.468 li
202.922 154.468 li
203.198 154.606 li
203.748 154.743 li
203.817 154.743 li
203.954 154.812 li
204.229 154.88 li
204.71 155.087 li
205.673 155.431 li
207.875 156.325 li
209.869 157.219 li
211.863 158.113 li
213.995 159.007 li
215.99 159.764 li
218.122 160.589 li
220.253 161.277 li
222.179 161.896 li
224.38 162.515 li
226.375 163.065 li
228.3 163.478 li
230.432 163.958 li
232.426 164.303 li
234.559 164.715 li
234.627 164.715 li
1 0 0 rgb
@
grestore % PSGState
2 lc
234.627 169.874 mo
133.735 169.874 li
@
133.735 169.874 mo
133.735 89.1323 li
@
133.735 89.1323 mo
234.627 89.1323 li
@
234.627 89.1323 mo
234.627 169.874 li
@
0 lc
146.871 169.874 mo
146.871 167.672 li
@
gsave % PSGState
145.771 172.075 mo
145.771 185.554 li
147.971 185.554 li
147.971 172.075 li
eclp
grestore % PSGState
168.81 169.874 mo
168.81 167.672 li
@
gsave % PSGState
160.282 172.075 mo
160.282 185.554 li
177.338 185.554 li
177.338 172.075 li
eclp
ADDFJN+TimesNewRomanPSMT*1  [9.90356 0 0 -9.90356 0 0 ]mfnt sfnt
161.394 182.048 mov
0.000366211 0 (673) ash
grestore % PSGState
190.75 169.874 mo
190.75 167.672 li
@
gsave % PSGState
189.649 172.075 mo
189.649 185.554 li
191.85 185.554 li
191.85 172.075 li
eclp
grestore % PSGState
212.688 169.874 mo
212.688 167.672 li
@
gsave % PSGState
204.161 172.075 mo
204.161 185.554 li
221.216 185.554 li
221.216 172.075 li
eclp
ADDFJN+TimesNewRomanPSMT*1  [9.90356 0 0 -9.90356 0 0 ]mfnt sfnt
205.278 182.048 mov
0.000366211 0 (674) ash
grestore % PSGState
133.735 169.874 mo
135.936 169.874 li
@
133.735 153.711 mo
135.936 153.711 li
@
133.735 137.549 mo
135.936 137.549 li
@
133.735 121.457 mo
135.936 121.457 li
@
133.735 105.294 mo
135.936 105.294 li
@
146.871 89.1323 mo
146.871 91.3325 li
@
168.81 89.1323 mo
168.81 91.3325 li
@
190.75 89.1323 mo
190.75 91.3325 li
@
212.688 89.1323 mo
212.688 91.3325 li
@
234.627 89.1323 mo
234.627 91.3325 li
@
234.627 169.874 mo
232.426 169.874 li
@
234.627 153.711 mo
232.426 153.711 li
@
234.627 137.549 mo
232.426 137.549 li
@
234.627 121.457 mo
232.426 121.457 li
@
234.627 105.294 mo
232.426 105.294 li
@
gsave % PSGState
178.094 182.253 mo
178.094 195.733 li
190.199 195.733 li
190.199 182.253 li
eclp
ADDFJN+TimesNewRomanPSMT*1  [9.90356 0 0 -9.90356 0 0 ]mfnt sfnt
179.23 193.328 mov
0.000366211 0 (q1) ash
grestore % PSGState
gsave % PSGState
133.598 88.9946 mo
133.598 170.423 li
234.833 170.423 li
234.833 88.9946 li
eclp
gsave % PSGState
140.819 90.439 mo
140.819 103.918 li
152.923 103.918 li
152.923 90.439 li
eclp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
ADDFJN+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D2030
65B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD3329A
86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB857
EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5CCB
01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD104
E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A618879362783A
36815EA1CE5876FAC4F83CDFE1BD4A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ADDFJN+TimesNewRomanPSMT /Encoding get
dup 100 /d put
pop
%ADOEndSubsetFont
/ADDFJN+TimesNewRomanPSMT*1 
[
49{/.notdef}repeat /one /two /three /four /.notdef /six /seven 
41{/.notdef}repeat /a /b /c /d 12{/.notdef}repeat /q 142{/.notdef}repeat
] ADDFJN+TimesNewRomanPSMT nfnt
ADDFJN+TimesNewRomanPSMT*1  [9.90356 0 0 -9.90356 0 0 ]mfnt sfnt
141.928 100.437 mov
0.000366211 0 (qd) ash
grestore % PSGState
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
] del_res
/ALMFJN+CourierNewPSMT*1 ufnt
/ADDFJN+TimesNewRomanPSMT*1 ufnt
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 12.0.1
%%For: (RSLab) (Yale)
%%Title: (supfighetpht.eps)
%%CreationDate: 9/17/2008 11:11 PM
%AI9_DataStream
%Gb"-6B63W7dkH)3DjC>)308b<E\]XbK/)#u#no_28LEePn+5N9p<th?6A]ZPBBu\/[apcsNM^?73`#LobtVf\>7@EfEG#%(W/1qN
%JgMs4R4*Zuq!7(>1i:Y[=UPc!p\RZN%hT'NTj`KDKL;F=HpN'F&L)`hb:Nt23PF''f#n*-fjpGUja%RtAcM!H9R"0)]]khFoPCu6
%O!umN%=Z7Q'UFY/C:i9'VtBhWr_MSEY([cR9s*ZMhS>?;Eo(#>O1F^#GH9818e2I15$\Y?$e#u!=K^i#XXWT[n3`B(Ap2YVn:!=b
%e*AF+/qBSk\p-!t%EnkSJ`#/Dji(W9)q#1_%m;JiiV`tq$$Gb[O7[T'3/!EVBJ@\?-G/#KQZLqNe3r6pCi<$o4Pai*^$TpPpoq)1
%\*3X&f%\Ws!X&d)^dO=toMbOUCC4"Vc.o*Ji!K6H+d8B&q`Os%/?0d5"bMub'VN=7Lu0:d58'9?rd.9;-Yb-Y]ck($Z'/L4+/f,@
%Zh4o`M=M>Hj5t5KYM5!"QCUpb*+<f-[iEgPmMZ#:0^GEh1NOgqT59EdD`su,5\S?o%a@(M$5;2V^jiK\&%r_ZWNYMSC\`VglD=i[
%<s%?416D\?F@l:&<"Qt:Rj(-6(l8966UEr/n%##WBLNiD8G2Xt4C(A2Ud&[9_fS'#E$WN-@W=OO$B#aq9O[&gSr"gGqEMjqcOLeh
%^YR<GD?`@0ffPlTJ9(C?#*<1#Zcb@4#=LO1)5)Wd0[OVrB&<rFi-3PeDKYL$gVmO6M"c,&gsR/*ECRjI^#O8(Dq[TW@;gV(?CFD,
%+_oEnD.rAD<bf3RSdtYA1Z6@=C,6%_hI1=bVUt0!nD66oY(9,51]"lC'trI!QFfk01%[X>HL'\03sK$-IF%-)em$Ii8:Q0S)a/`N
%nF(n`ad*0gRrX!4YPL>*](OL0@;dsldW>?4(>+`B!`'6hH#F.t_Rkp2ANjGKhViK:"*l[+`e\k$6f<H]n]'YGXFM`oAC0ccm+,ru
%1&)"Q#^ZC6jU]&gpOL]6@+`Z1pC<LiJ(Qs:_\#&(/uB$O4@FGqs3j8P[TIF\PCHUHHJr.>L4p.nhKa$iL';7E7ImTn]+'.ugN^4-
%=`/D5[-;Vuh+lNXc2Z<5m'a9F^,(m[T,0^2%Uf6TD]hKGZWRfb=tYI]?pO>?B!@c`&V\-djmT@]L2YGBPMU,o^gJ7%9OrhIVD15!
%=(qkJ>-s`4#/=l$p1Z>aD`[@3Z:"-Dn`SakrYTt'Ma#JYhj'U1AHkP*e>CI!a_rQ`HOLIsWA>XGR1JSW&*hB+lMPkth/#/Yc2R7a
%2`!i8D/M[Wk2Wo6j#6p;LO%RA/D!-=1^Nj[OP7_/@fZ85q=I'^pDD7?^69U-8!!?R3-<Nkk;:XL/URt4dJS2eVU^oF2&1\0nni&*
%a+=?%A=>0^0eGg9/D2BJGJi\&;tPT+`fBk:a$A?M`j=^?q1j7/`Q7h0H[P?b/'gc*5c*5hJ/X64mX^I%c%#slIPFqKr?!n>V-8";
%ahE%3/\JA"(_tDD]th=69]Pt-[FRFNp!8LZ?ncrm>Y2cLOS58lpV/OG0P1l%(f^\%@Z+CfIYH[5]8bJR?5D/9h5\+)/MI+/V2*5X
%D//^O'/4MnXDR;Np)3J"M>7:Geu!q<%m@Vjb-'3)CCNZ>UT=.(l+n.LB-.Do4mo1Og.59SUn-(pqLTUIHFK<0>0H#d+"H#qIDq6a
%'Kbp2^BOu$=:"u?r:bB+m=FO+2I9+T"/Yu3hXc7s^,5s-Zo>k5&k(t7*n^H.rsh!odA,q-XB#u]Hi\<3q$QpNVT28HKc["T"]7o;
%j3Q*tE">?PMkB,JJ((acMADfT:I*<pSpTdg+lrPWmk8>&c!8&@kR%:$OflLJ>`4>hs+Gklk[-\^3pSADCD205Ns87S7Lu;c9NpCf
%6FQt@2T:j,mFIPja*\P/hBB@=qp,[r=l/FQq4@iib7mC/=Y+!ChYZ0"2S%c=itVD=RX\,#lL;\)nj`rmbk,9km.ZY;(EsF1#!>1@
%Jg@B1?@(fCri^gu?PWA')kR!5I#L/9gBV.*?GO0"e+.&U0H#P_0)dVOJU5Zrnkm-;o,cOA+1ai$4X]kD1S3_P1IrTC"&aOO)#:CD
%,1Pq^@A=&S4Yg^_n4*G.EQc%(N.RDr6)^!Zac-?!T+Qgq"$MU/C=&qjAbP<21c^_@8V2600K&.\s5BP:BC_s8&D09i?@/ia"d6C[
%HFX9:E6t6+!CBS#r=Ae`jfWb;^,beOm:s^##P*5s+sY]MqsPM0Rj%/g58HMIG!qNQ?0)9?pLZLi7E"7="(97Jm6<,h2>@mOT(4St
%oX6]3)4Y1NjO'at)m&sDItj[SRt&[RrZ)+:ru3%7U"*NPILisS>Uqg'Mjf7*Yb(R)_:c&PA*c.[8OYR$,[_51r%G/E!HXG6*.>8P
%riJCkRq8kh_V/j9.W*-lVu@Ku7@8t\!o]IMB0!a.e:73TV135WlLD4^WsuF`O0PI<\Gd2_o#ZA3f#3bL,*:Jun3[]q9GD;.215>*
%:Qh3cT;RZ9q!$Zh22l$=L5*t:5QA@LF>KBrrm+K=GXdb;h0M?H%DmVbjQ&Fs5>lBce(^[FZ[WoA-k"%EoOep.po-OR?TG*8PUH-r
%l#8`3T,?YtGR/otGHM`D#GpZZBXGrnJ/fe"O"]]-r@@'O9gWQGrT+egZl2*]10^d`VJ>[6QHOd4*;AXdmo%u7hu6F!guh[@kF72S
%?@j72/2#C_Ou2^&(VD28Wq@.f?#NE+)TrkQUuDn]q?5!Vl#O^AhecH,Xf9u@]>rD#_4`EDO9ED)6U:4i*PIm)I_lUH@d:))rFKn1
%1_!8nL+mY&`DDImDagj(S*>;Zl\R[U_iCAV'ft@N$$##_>YRA%p>)g9><0@QCq>`nS+eg**.idt<*-c,a?!(_:$LJWaj6HSr3nb6
%38MhJ./4?.J^VE>W>I>L`gYc2>Ed.U+:6GY&uH8uFH,7js/$%UjkA5Qc$G;aT")YaE2W$:BiBrhn(*^F::Iq9F>hrqg+=-Ip]@J=
%@j4W_hCHri3aU8t/I*[g'io6HM>Gb>.dgA^&:HjQk]Yb=QU@_-G26A=<]qc[A%\BCJJe2/-7%g:37'L9p$Q[2k`WsBXENp%"h7c0
%i3b;GYHbQUil)t_VCNK=$53<hKT\E_]^ShrAAt\Ino&if6F#6-.[PPaK>@j6>9FT39fH:@XKk]5:U0,l4jl,)^G_LATANsK#9_Q!
%^>QL.)O5VQi/cT4d$l1Bf\eq-F90Q$HXE(9W_,9!q+gk%L#Rl$V#3=4n%j$-Uk]<+0R<,R>NpKkoReI72]b]429O0oiLi=l7NT\u
%TL@4kPR.I`%H.lcd\<p!GNsRp!&O,4FGq'(JK[WW'nNBk$f)G/JeY7&gdY%HU)"U:?3;o%VSt_9]iF"0Z<,D2hUQlMj$EKCS)n>E
%@I,3VGDhq$jrP?S4lt4lJPOf@]@,:(4F0]IFPi<g!p:(gn$^:"HK3h!qO?1`EB3+1H9%G>j?BHBd2]m`J8+bf*j.GnhI<aSRf[qr
%7_?W)>?PZjq<uHN1@p`<5`=`=\C55udHtGJeA)O#5XLT3q>o\);RNG+BsmI>QA[=)bGbPq7f=d17#i^]gW\lrl'VaWd:2Fpm.qY]
%-ct*OB;/rb<(R_@(d6ZLEs(gK,cle8e9\?*Y4UH+*]4ja0Dg:0mC\4=d@R:6mW4$S1Gp'[ejIb!bSOU#.WQ"Ug'e1DNRfqS7]Y5#
%+"c!9<m10go='iO'.n10o`=E<:oD3EK@O`(_1mj0cql6t[r4q:[6^Pu7%hGH&nN&<($Q'o8j)K+,iG@_!G+8@)i,[E5T=;?7;LmR
%GV[jpE]]uH`gRD"s)9m0@#j[^7gX-4Bc;p=APJlC7KYVf$!o?ja\YKl/Jk')[u<>D/Jm*;+sRQ_HDRM!4g+Ag.S\NA9blj*@V2c!
%DeK;\N3&_oOHI#CTY,_WVoK[3m,+D3gd8;oNn/QP,A9!,"[*(9no$*j1ST-%*\@Q=`INNDjlN@j`[KZu\DZ5$7C$60C"Fh$*dL'M
%hHCTeW8UpEg7m2BeJj-42<(u%iLp=QUE.c-AGAaWPE'`OT7M+>::E$3ZBUb,Ao*UKV)j&Sa/[=0@)H,cAO%uS%Cle.b+-8GUY^sl
%HdloRor)F"TN8,TAu`1HW#7/&C9h+EO&!%C)S$B),_4AamrJ,!*L0B0:A1fU>:hTu$5*$cgFst.Og[oRp#[4eg!(_cQ:#sS*A:q/
%:slcd@)3;SakMbd2V:d!A]%K_j&]7%;cMEr2$sFoT81j40/a//S[O+idVGg0KV7:c8S^-%b+%dWjlFra9;eM-Cr\k0"+<OHA>@Df
%Tkjg<+VLO$dL?<'0ejd>?C3/*;TicZcI`\c-pSX0UO4IE1<m3bM'<pcY-]+\,C$o(*ri=XlWJ.>eDFG>p8I6<B=\/,YgBhr0N/&C
%J7UfCSn2Kd7iB2'3JN3C+<-VS!jg`2-:"$I#`soG*KQA>epb4^MSs)Z86f(+M),e?79sS\Hc=ILOV+@pOG$K\-\7bX1^DfgB#Ijm
%aBpKPpnMQ7^bJNYP^)>";nR/T[O7m)Q`D\o,Ulu#F]4iV-&*3Eo(MNYZUZ0Plci*`#"UsjbN3[c7jCL@DuIehjinZm:0;#>(K\Rg
%WOjscF`BU%NYghM_<eI1ZdYLYEuf(`o"hA?Wa39No-^<@GO&OL]c2V3H0R#06i-a_"L6'skJf.63YhPa3)XbJC6R@N.5-3C`G4Nm
%f;c.$N(X\h<8:86AuCL?6-eMqNqZr3L)g72aq\fgU"A9^p\g6E^Ud_8q6IG#QQN[MkAB^'=313@T/5@\lSF(5NJL26Z+'$qA/'?9
%G^E5qZCWEMe7PE$[@8N\$&,R#r?jD5R9T6S>>Ib>.SLMk^`:'>\c+LpaNPE#GHOcf>bTI3p3UR[k!l+.O_tRsQ#s(4/]3g9-"]i[
%d6o9:$U$HUb4RhF7+9CRR$.D04)D)Q!DJ0HG09'g^cHZdC4T'[Rj"-_k3J\+)\.5W1i_iU./V8DN)of&43I!bDb+NRF,N<<;mAsb
%0bs_6S*&r0k@M7$S65r;>jP@NKXVaJoIP1d-9hbufWl0?2cd-sCFa&oaulA<A`"Mn]7,YN[(2<,]DU;f(K/qUG.P3i=*)p7a!*Tj
%bM$CO,C=mtC3_V\!;VW:n=+<UC>%C`=s>`Z5P#238QS"7&5>7m%B?")q)d)I`a@;/"rXV\iG8EKDYXT'rm%S/H7bL5`:NF=4C/0J
%',uDXIqC(%=7S86?%+ip:W&Xm[[mdZ^Vug$'`c-:J0uH*Qgg$B-(:bImH8g(L"[Vj2)fj64F3ob[gZ-Us(67\_FInGjh/::V-nJ\
%Y5/&\L&MVioInC:FpNf3T,U,2b-]L+nmCnL[uWn#B:0]%qS%"#O-ZtW><\.RdJRT]aGq5cTHerSMEglN3I6n]a,@:V)rUQ+,L$o$
%)++MHPsDVf>5nHApNkEV9X*E'#gYX!Op#0AR#5cD\*4[YK2oL?4c=:8-(RgLs%B2=fQ4`t[/JCak9QM;><"<B#P5*S_r])n,G4PK
%8WbOC"Lf5WM]:7amOI?mlthC2N'u1r6mWBJ9G`O77gK!(.b<<[,0nj.YEo[.REFAqYiO:(s*CPVN$eTM6Ii4VTaNd%b+>.,S$2WO
%&U3="p"Dj]NC8^IM$tW:@_,be0aYeS?\P>D?@`XV.KLBP:d6a[Y`+i$6&#\I-oP`te"Kk.=_PsbCQrF,P2TX]o57Vo_Os]9_N>qO
%RSC9ZL/%^N6KC%fbLAR;7,^;j;f0[a.s=7Sb`=n_&QI/-[m.E?UL8#a@YJ(FQ#b`)4rh4/@nC8d.cbZ%:aYD/5@L8D+\PT`$oR5H
%=ue@qgYj-jhU=79R_2leDi7U#:NNSLCO&\j/FLk(#_7aH5.e:SU9dS)[/mAc]*e86G:4-*kk!]k:%9IFi2]is:Vn]Aore(-bBYB#
%qELs(deXOQ-!oG9LgSaXm=O1=Jjp2i_qEdKC45c\Fllpf]7R.E*8tH0M7;]*etuI#7Il)'?OMdqVP=r2:TqN4haV43jbP8b=bHB7
%koMgeklE%o4!G,,VN^uTaebB6gZg[okfu<Fo],@cRd[`V2ONXu8$6#R5Ora+Cu\\"#odPX%:s.NR?(A"M!`:UF2XKF]N-9di*$o%
%oYqZZD>WeN&aq8%)VDK!Y,BiTgO"CR]*^W<Dt=`P!AYp^5c":?H$C^>F6.H3=/sIa\Zsn\A@T%=bqs\017'1ddV_1GaV6[sBrp`G
%?OM79&^"V4.:1@pQNhkJcXqsug\4#ugaib1$H6=eKsVr;7.87Q'GT>$64Sa[8j-<o`Otek3@nGn'/>=E6!S!:e5$=Ah`ddF9#>s-
%1E9MOIWq'A//;4Cn?'QM:q;8j"gg71jgWfZ\l#oNkPAT\m$fcKFZN@q."eCGG\*f0^A03qlM0G$;m`8rPmCbmd>CCn,(L9MO!0RN
%FM3e5IdUgGha+G62;We96I"I%%F>Qa0#3iu5g,#99^-QjZ/8QXJCPMmDZ?e-_s.Z2[6LV;JdtIP8>[P10&j#=hsD4NrjjsKEH\YE
%l"qWeY*Ti&&fpb2GLem1.+Q(1^g*Xf[3mL+OsG6k)u1PtdD4-<OUE@19pm`bj9LZ6>g1EDj#=6k.=SfB8V!u,MEa$VaQ81:&p=BP
%c*].+0)Lce1ZlH=p0/1Z]hGOiiKRj-MP6mhB.9W>iUcRm3G9c*<2seqYQWKsd'.1JI`0]R_<9ao![AKqB@&4CZ./*c<HdqNNl%I$
%?#G?\4>:2>2=knP"SL@`q750$`(.Xh8:G0"W.Z&'__2)R9Wj<1'%,Zc7NeC/&ZMCNXpu1159*aYr*oChh*gC69R$Oam^i,+KgUJr
%-1fJS2(3faIa8LHf==I;gcmt;EqU[N6Ei\@(*`CWlSjXRatppj727X73>A-Y#rKu'qc7?g8B/B*AW\9.O_e1MH$tr,Ac0.K6+Ybh
%ZXb*551>Wre]kkeq'PQ&XY22\TF27Ab7>6Vq$UHUiBjQqI&VAjF-1ctE*AtLkMqdOUQR]?=Za?^b\*'@imB,#!KqBD%n>?D5n<Sp
%^9#+aLcq#jQjT]BXBGWOjuD""$U9;+*LNP8K73Up`c@[BOi;-Z`i1iC9G,=cb+%K@45ES_\WJg,ja=hTYPip8btN`#rLLiZa6(li
%E^5PEB&0<$rRI:?2.>HJ@'kqU\WOoP@$WlO=`9,e>;7b?N6t8$n);LRHNIT_S>F09T+Y9;<9`4rCk5Wqrg<:6L[J.6rb!_E!.if@
%LYYjC^8++<_`'8[mrld&EX9@`Fr/Q`j_aZZ$`WX!>]8#.6dGjV5+>rVZ;!-u)qODW/n88lB)JX<4'9go#L3R!efn6XADt/+j%7&r
%L8!uir"rXh^Z$QZnDeX0]cY:VZ"Wr%?mI'kOATsKbOoA=HY$n,\rH=t`D$-N_]Re6^`#Zp&c%ZQr>EC*#a$^U]!t:ug/;^1A=%aa
%j@1#2P[;J)7`hn1^0pCd[Nb/]cR)N&+6J=LLe@^W1UPhUKs]qZ6tb<$=e4>0lbklY5JO]lGf'YWJPsm#83[MI;nj2*"u=&>Q$8]\
%62BRem;A\oFL@!q#aDdL$4L3YN8!T2p39O"r_u&F``iW5jeO2Q%J33Ok.?`/<,1=#*@oc&65%Ni!=O!p*G!,W1_8WfXB]cI@3]C@
%8a:$>cCgG/M8^._Q*^5tZ?oa?Yk,B?8m8h&iG#0Us"%"6oL&!@`gM=&.1'br$Q652.\"EZpcRa@-gSI8?52/-6G,kCjBXKnk8C-n
%"D[M!ScLq9maB?\l;qfMZ=EKX?!DB#ko7gCU<gU'd'M%gVd&EI*oTtITAN>X*dg[88rhdq]J*`dnjpAe"FY+$W'(p7gn4$J1.mjt
%W?c_2$%nnkWSm=c*1<:-d(OD+r&d7iZ'oPn-,G)D?/;F5hJ,11[g#7&UeREfT-O4;WMq^-R1M8L=+tJe"&.4O]3E?6mO1LX)cpe=
%DO#`t@M:bKW6U[5P!pT]]tEI`6-BE!!S=do1"+oD6<@CE8RU<2SFcPUh"c$.&#uM;aZCNZOkB;[+7<,fo9jp9hJOWeqmD>=.^'q=
%_?*#U8G:jJk!9%(]L?)Ci]$hGI00_u;OW:Ale"#?!ATP\T8e[/d0,RU/;*;/=:3_T`.9/Bm^N)W1n.h7HXC\LnZ!'s]A32H]p"?)
%D1ha/BTK'JgWEbj[kYHg%<@`Gp'V/WOrHshXXIbU./'IMDq@ZJAFOV(JrpkY@%b5]Ja_csnt5US7rHg[G_CP+V-GsIo7X2%k_3](
%%@2UX,nlZmeQ4#%?OkH1&s<&V[fXaYBL[I!q,TNjBo]#`q9>92nCrW*J5@=h5AB$+OTU[=/sl$f\qthhd)9j\e1oAmM22#e3>Ii9
%)mOCr16II_[Ils[@0A4kG8@Oqfj)KY+r%ir??Z[6H69V5Im+lDNbS`%[29K9TGfA^9`7)M8Jo5Q7aMs6+7rlR0\)@q*/T=0q];P;
%\Sii,NVS?Jli>4<j3Eq50A"9/R5'9]`l%+*MLOGSoF4)UdW6+p\],sgFS],X,0TpBrRbJ:)"3JWcu$&IN-ncKeP+<sDPTEe'k4==
%L%%m"1Y"igZW[a,f]71h],H\`K#H4E-LHT_/+d9tJkCL=e'-W/fB$hST,lgm5W!/*Hkm^7^C5RAZX[<76R0f76GK@/%0q^*Vm]]*
%leQarWt7/Si@['Hj?6nHGjGLhMUe.<n"93s]%%+q_l$^30AN;cB_<9/(He.ZT5iM$<j6A.2fDk.=PP*dRB[)G+"@R;0JmV!iIg0p
%0*0qA/POj$58KtoF'EmWR<eA0bkH<+Pq*@e[^h:?<^9QUS9eq8H\M*nLFL9+hce07%Wl:&R?ueqQk(I:':<X!:"LF<^LH`F^)Em.
%8\YWi7!DJK%d'Qh&6F$Zf&4MSYZ<DmG7B=[<qQBt^V^*3:MPn<c"D]gW<_/lXSGmQH_9'*U'PZa<kZel,K$UGMO1Ui8RkGe)142V
%^$X,(M=6oM?[g@UUD6<OY9i_1M_51WJ]76_<_<4'$Gsg?@l?1;5(!#.U]!4tk]F>Efk0$umqXU;HAd#f[\,GUTA`U'/>'gl&+1L-
%07`Z&Mig=]Q&qMP0]-\K5G2G)-;s8'(gsn3-nb!-DS:Z,8jDLY!R!=5SCAR2IcM5!-cC9*`J?/'"[VI)>a9MPL>ot%F<e2NhJIF/
%bRnN*\G0Dbpe+)F\O![uPB0F2K2C?iVt7*eEh7JDEKeG[=8/sr8.jT_3pcQF,/%+>6L]ud;!Y1C/`_(h'\354^tXo@&JQ#F4605j
%1I&.SRl*]H?&hi+B6LDNYhphmpYcadZ[t,#N98,?:ONkB]PSh>=\)][(<.I`?T[(Kf"QaF^\/aHGTL?U@u]+2Y)eMZ5,X'F@IP"U
%mG=c1RA5r2^X,^5[+eK`dp7B1)$s\q4edOVIY$.5,1mQKGMrl4hNPL42$ma'qO8(Xl+se[fZLmPYh^.B1!uZIglSs!+sRoTJG\_8
%AFSi-Pf>ehKpu6oWn.!K@!NbGEhh`O'CWaDJSaT%2pY5IK&/!F4KHeMp!k*!8-&$R=n@:%j_))0o!KZ*=!^o2\t5W/J:'#Pr":9M
%]7Ycr,hsqmoS%Zb/#^I!=LjJmYaAbrDS55Roq7oRR!,W#lS\W_NBu*4*8kWth-lM"6\-M-r;`_[?,9^W.?qWach5B'/.;_NlhT7u
%X#R9a@aMIKFah\]%5[ur.`jlD?WthAG<t-$`mJT*&T\oh#c2"&mN":WTe<:/T`rrX]9cj$l%1TSVB_]b*D=@8g6p<^g`ge]isuJc
%!khi?@%oN5^kL84`lm^?M\K&1msjpqeESbm,#?$_ANC=0gmqLrDg#d+PJsbM*>q)F@D!mjAk$FSm*trF"Uf\HRj5)l$`rFlk,a1<
%o6l(EohD@?0;;##%I*b>DhYP>C!K0XT=\Y_EQRoTT$;F<06Of`SWH79=?ggk_51%I'[$/aj9j]IPO!AC>Q;'`Wb04D5OO^Db2I2O
%emEAjS+IQjXHgAQ0T;I/f"KU+1D?<pq7,h.qQ@4u48@M%`cP?Sp/U?WQrS"7pb@_ZRSJ%5UiB>'^o/sr^)G83lrr`>g]2Y?>C=YB
%7`_G"CUCcZ/s_.3H9%n06Ge%k]&;mjp#%6JVG2e=)+8eT?M8_Mk*1/9$3KY=ik"k[DY]n.F%D^6A[_m0.$oi5?@9bPLeU*dpIs#f
%^#<d%Nl%2FpZuoT`!OlR+hcN'7oMU(dBAB=[!VpEn4a8SrfSo]&/APE^G]+BY?3]u;_Ll^/cb.3fA$<Vf0:-mT!&o.2jenYHm8cg
%S&TJ,j\)5Q(^@+WLu'1r4]1aZeqX<l$cirXX4CZ],"J'[HXf3PM,?,a^@DBN>sp'_PqZAd2bNjK^a8SKWJERm(^>E6djQ2#N6F\a
%=BeteQ.*O;b-sEckZVLDK;_RSMIKOWeeFri&L^2g4oX&"%kG4pU@SPK=q@mH47#VVY0`c9%'=l_eC%2LO^W3#3#*_plHj5[^u<u'
%ME/"P.VK?&;BSJJTS&i[hU<-^MUZ0P9ji>qFI;`E6CZV,Iaa%b1r]*Z$,&$0H@M]poG/dYBo;]CeD$Y:6GbO&'SONVhV^$FVmNd[
%Q93P&lqA(35L!R;K4_\6pSJ=_;_8(31''*.dfiiBVX5"=0q_6>S:KEOc$KD_@jcTd@\NlJ=Z3n.":_Pn[RR.SL!U82D#qS_K@)8@
%!r2$"Zs3I$_kTAL=(8D*Y4UflZO059oX8jWZCCS)^$4n!FdFP%_cERAFXeT:A$cnr<qJU#U8.j:/;<Lh&uDsNIt7>rp4Z[%T%r1N
%VKGMLH#X$,lC%(8H]&<S>Xfuh,SHHRWO@<3oo\TE0"+K-BPuNb&>6#`HlFZ0#WN@lB.\*l3I%CiN\N,l]Xu8"h"O0)Vi]*I^II6m
%%`Ut.>Au7CSN$%)r(+@N_0I!@rI?9oF\<,pO"("iD5;:P/\LRa_S1!Y2)p*)=h8ju8b?/b94ulBg[$Wg>$/H!T/1RF>mc&:7kKXu
%UDVW!OWPWkXkq=^2r<FCkt"=2i3h;]r#=PdK/<>QpC^fq*T`>H6t<rACR`G*,/kXg6J0J@Ls@UPQ?"=@_26jZ?Mi!MVpD[%*Hm4_
%c@P0+D#YEIfI;-:2nQZ=JD!-bR@3Hsb`qTD3d,.VZLtJ!WQj7mPNsfXZ`!8@k3MFYNH";hO<:_Qq%V+[%<qVQ[e0P"o*R'ER[80I
%qDGl3h^(+U)a'VXnBL<o$BJe'C#_O0G!*KB`9b-2XDV,o0X'5r4hcM6=6AkBHd)urgK,\XBB/N"!l+6Zj%@l*^u.e%_M(F:Z:-h+
%5R/R+86m(eqL(.0"6f7"H!<+0"<9bCiM,d$Fu=k9M_k.:PN/NHgT9#3c0P3Nej-iOK\-6;_rDJ.$QkT$rg-4$V$Qa(S11F(%8u(i
%ZOA;f_ZK805J>?TAZ5>@qc.u#X!p?j>^Zf4C/@R4&#$rU_`%qOp"NiDYsJ=`$0lj2't$&>ioVm?W'l2-`aqt,p&r1IX6X_@'N'G8
%Gp`s$b_+n[0+4iE9mq?><.nGf>,&-@Q0ALVXHf7S:2O_"lh:E[5u?tGl[&Bn]*W;Un<kB)4!F^qdRLEY=f;e1<OT:6<iA!q:k>\D
%Gq%7(ouC"GW<+s2"YbN$E9n;>MkGO1>PG-o6f-4c<>fNkK[(q0g^$_0E(LiV\.SSuaES6\`d6A_<M0OCG&)gb.RWm`5Oe)ACp#nV
%b<dk$oc)]B.7#6eeVB(jeDSkO+<3oZ:_=NN6$8%$ZIMj->.dU4C@n=(#dsF=IT"';8eSM@c(54D3</tVO<FAI^9OP?(s.e$W28oE
%nEX0g!&_-H6`lXB5?Oj)[gfI!FLn/ra7H;>ec2']C@d4B1=YmV/mR]N_FdXeYc5t4OoSSg[HdQn\Q#693Jkf1mnOa8eb<2s'U!&:
%'bRfh\ukP1X:"Xj0%g"uK:4$VLsLki;uj88XLYN<_lb5]LubJ[`'tL,PE#"5e=bY1cgG<J6cG9:Rr0hHHqoCI=[f9mY1BL#eF1R]
%/Y`F`^]<<e+S!kVE[i=0^-2FOhV>^WTmhI)FB,"el(i0TT`UV[l+Z$e?hml#)/>j>?G:4tb">L^l[/@@$aoH0$W)t=7f;;*3:]7F
%]"Q:(;(A96l^]\%+K2G+W:bi2pG;i4!iUs`%&u+pm'n`KXD`P3%N3mTN8?0)ohK'ZA6CB1RRI/SXb`X]pU0A$qg.4Z2#qB7.mQO2
%0Tu&'D\"Y[Ub2%ua[POBa\!u=FYm<fb!k$P#iEB?W8;s$_4/V9VhB^4!3V]#dkt'lqLjP@IIP>?qRoS`Ii,-+G-*+10TafYA;R]F
%=B:E_biGG*F#+P:oOSKA[l]N$2k7(9htl`U4LY>pmHkgq:&f+2d\,&3o'q$tH+R]2]I&G<b"(F"qc`,>8^s2#5CSLrHG;b7W"#dn
%[El1tSbY:Ip,5^r#N_iLXai8.CR9:irbPRuIrc3_:KM/9[iV9/]!JBL7@+)iD=ar$\O#"EXEWe<qfZ=]Q&)?H3Pi@nZ^^us69L7`
%8KMUC%;NiQFX4*_q*"6fb\,J_2Mftcd"gti#\e57`5g'%6fmq6&Fo9REiHa3&>/?W:[K`+7jYa_DFC<eG>3B'eUYfsSrJ\V;0OL.
%qc@=Jnl\dZ>5s_d5$V,f4s)>tq]BRQnoe[o45X%r.aeBjMcMCCI9$9:g,.#SHfZ<`V6%/7P4WVFlm\cKRC@2c88XJ50ZX-WDc).g
%gX-`4BXV?mR9=Fq),\=sE.1k%M5LbY+.Z:"]ibRs8`$8U>:WV"KiTtY!EZn^b.Zrt*dC?mZ5Lt2S'?2Y:9f`OFYcD&nM(#4TW``D
%ln)\'L]!f(5mhr,_@%k`>2j+KGiT<EjXAEdZWH!tU2L9C]$,*0&(-,"r2q\%CSKd"e-bc!7']l&2)%=Fcr+>N@DFEnJ*06@l=FDf
%<J?>/+;n.uNP^4^n-)mlVZufe")?4(&O@F@/6;mPll1cJ1nP2ua>\op:l@+aeG,k7%+YB&/O0K+On?_f!Z2N4O`-lo20ah&K6Ln*
%rm$u_<5A!nP1jWul!iO8'e8b`L2'P!),pS\-E-fs(Nl[tcqq\81,QRW:`gMj=1Yb?;&;<6r#8;s;1n7F9't7ZLSUpL]k439^V.Ij
%A)mho$VEcW+qDTq?.a^$DLK\8nJlB#0li#dYJC#ada][Mr/WeA:X=d8<ar6.E\?"t2#2,RJ59f\U&ek[@%djT-#dpXJ"S*9(7XD:
%KK;>f*-)PtS..%X<o$6&m0<K&\RC![?:<AO/;a[lhf<9,@oF(9=>]$lr!iXVOlj5Z1'h?jH;6F-Er\8F8oQ2uI`=ICF#W:fOCaS'
%.ufCDg#-</X]1&:b.F#_/4rL1!$]GZ:53llBbJAE+7'E@qlMiqL09"\pd^MUFK$o<f[(&IBrk`ekMV*@pcS*b@PC&Nr(="CUTl\8
%3L-NWa#[5jV9tdu+IX+:67&ojG#kNfQU"eh2C%duF#*GDl;^CjYK_XN-OuITSA*Ym7%WM3'^E2/&d\F5Fet0VQi]7nUPT[RI>E&4
%6rM*D_6g2#^5ctZ)pUWo@Sr29Yis!0<X&-Whk/,-6<od=):rJ]gu'&QXdqF32_O7>7lN^m4;MNZ6>7^S`Pu/0?H<n4Ik>n[.V/RI
%-g8h$o-mVT8-93^l3s;jYUNU)1.,BR<&q-3@P7Yk3<2!DFi@)%gU<Fp+.f,CpI0e/MuCn_^$Tk_M$"Mf;1KK,W)*@5aahgU(/VZC
%/9J\GCnqHmh-%Q"]Q<TUb,.KE]`Rl3b>e/#PdL\IiVSo6,+0<@7A?S:=2r7?8N\])\h28Z&>Q>i9ndKN%nbE@f!>(#"ej#I\7eu/
%iO-,T2(F;f?8!7cRc='[N*2@]+rB>b<j&;F.kK@&ggB,NOmH@X9.(ZYCol*eLTa,'VFu0O,*dG5<)g7Q59_>\hG<3)F\K[Cajq#M
%dYc6CF00.n>T$j8AE\%0`kX?Ej,9RWh6q'"bb"GM]m\@*LC]=YSbp)l(!J,U**IbucA+5NC[YZ,NM<l5o-$gTh%#o$)[>>32VZtn
%X9^*./X:VWP`)?4/E_"Ed/:OM;ti,5F`n)Yd$+s-hG#m$be3jYSqT=#BEtB69ketBZsloA7Zd("<ir?Y=MZ6/7*kt+TqZgd!aV4\
%Y/db"Tf*j,nUUF)G;*\U`k<:EOT6510M!IZJeg0U8p)BlX&B6T3W_S74@Xf(KdAM[\$m;V%B/VUipBHSrY"sZ)ik<G_*nRXG8]I-
%05hh^9)+&8fIZ+B&$]]@,Y?K&jh%U,Mb(k+6oe5%[CnVZ-n+,`!GQK_;=Ijl'a:UW!S&'*S^p0h[p<:s!&8.*&GsDH@cf%T\Lm'e
%Hl#nco2O/,W,j<J8<,i%Srnor%SfmkrV(8YiFtnB<Z$3)aQsi?&ie]tp>!]TPhA2$ZZF$P=/;ASP6m]\@Ssl*kiJXi0ZCm6;j=h#
%?I<]q%gh;Daf<<f0L\3f$^2g;WfpqF.JaXAH,Z+tC>BmJ#iS+M^?`inEGCT6!aqUc8lJ&I;ckg*.ET!!_'"l)dZS-P-Pc,@"Gm\!
%!kQcF\PSB4r_`lua*-N1JX'r4W.`[K:.?1,R@3G8[VlSm+%9eM3o@$=-cakI391OP4]Os^<&I_<H;T5E"ERC026NrWeT`@s,hiX;
%;$j'['"Kn7D\F"KoRabo`k([/.7jd`;3:fW;,H(IIq!hI&8l$I:JhfsbZr!FfLM%QbZ-rj+Z%`m:th17PaMQeA`9%O-W"^)c[C)W
%EAsjqGf0eOYq\21rqJaF:3[0>AhZiXA;eNF!U/nb/n?@CR"mLFTf#CWXdn3j&E/O9VlV,`W>pS<@CAHj;>"E\EZ#](!i+M4qlkJN
%"\$Md!k:28$,&n4l?9e`&nOJo91u]\EW#M5FJYXZ6n[mnSf&H6`ibHh:8*PVJT+/ZDe:F;VYee9baqjSD$"mKFMlX9-VHCAD;&XT
%]*3gc<P""g>m>rUW4.DUS!q&W]q%I#D16lqO90*&hhY+WPlggh'up`<8Q:]f&L[Fm;&:IsGB%Um?<-aW4'=TX*$O_&#I:?8G28Z,
%5rJ0BUfXd+7"iM@Og-Hi4<hgp<#n+[Z5EFB\QO/S?L+$EqA.i/P>R0p1ElFEmZR[@?X)NI,W+fRjFiD"B;O[/$bNnQ)&o]J1h"O_
%GYk%ieBsD5^UtBY`lc[L)0ELD@#B8#H5Us2p:=31i82`pjL0Xa/imRdO\(D5ak`QKXT)p5j`lS[LqKr:K3uKmQaF48XFFAS=?26`
%[muQ"Gq"g#*2hA6QZqUiCXA1U]2jD@k=A@b*??*P'0GQj,P"D(W3BrQm5XasqCu`+m4$)S9sbP=mF=Ss,E1]#CEP8<Vo/tr*NCND
%g>lS@$8r(5eC_V??fFaFDVPuQjP#L,#bQ=m#)lqmG..\(Ju:T$&qYiAI5:69WefmUV3n_;eOi&9:J,.n#0Gj73?AA]'pX(/\7M+D
%0,_Ym**Q?@FgTp`,H5\2\,_J)U)Lk6@+,+>ANdc6V=pY?N2RXihe6s.T\`G<AJroWQ^1#*%XG4PGW#4OIC47N<S5%#dE;(rPD(\;
%orSK^XM'/TiG#Q[YT;[SF;:dD>mKNYR/3U<Hg5bD8MPq?Fm?<[\o$MJ3M1IH+/<c":sPtEbK"kUB.2rlY2p>_S!2"jS=6j5(OYK,
%M<0+I<5i$)d16%fja>diHl(ej`DaqT<2&;T^'iK>`<4<ZZtoIi`2/BiPk/T*e-RC>@QC'(/Ka;_T3fg@?-B,c9KAi;:V2pRMfNJX
%5\h(l8`Bt)T!:-D?G.3?=4Kqt3[VkcKjj6-MVfupeLF/n;LJ%oi(4mE"aJ3^*FO"h)$gd4X9[jjX"PP)8876P)+Bfaq=!LO0iC8U
%au#"(%&NlY:aPO%k2/FBH8KA]L>iP(<XQnqBlo)!$'a>^d25nc]5Z<AQnI#X9YE]X#-*Urn*/t")5Gs4]QSa\Y^`EH``6+5bDkSL
%LlL0eal-i?E\b+*2%<;nEpm'7jd.AB>b\McPn]ELas:$i$Q^B47V-duj($`$;D5X\pBV2q<WHT*IYiB6KsIJJd@41%(c'WaHBXUl
%oVn\2ZI"Xd)j\j!C8]+l>+W";PD3Lg%A[_o]@fr]bh7SA'M?p0_(bp([\O="<9+?>)R2bB"M:HAPp4(>?HL2H@af*pe51;-MU=%E
%22,6t)oHVhiTErhoA4^TR[Qsjj3&Uh]N60jX]gC!=Il3^k'aqB:c#,cL'BF%NRnm$*57.DW\oL9W95TDn`5he![mZ<^AffrhAboX
%Vr6`'UoEg2*'>q?X@VrRLbrhYQoXY6P0lKHBcHVJn6Y#K0'S]8F)8Upo\!?EDX!`n+)D0cZKHfg`5I$ulLOb\FLXQ6]"P[LlB2<`
%="=Z9D:5/*d#;ia[i7Zs*#F(+H(;r+<qNEc%'>\/@ms8Pn:ls<Z(3N)m\<-]WWP^!#9qZr7&b],Q9-KlH)gQHRZd]4W.@(2/h8*L
%jjruph2fg*H[mWH:=,Y-%gm7m.F_;M/6;7Se]Y8jlji'!g3<?`hH-r1!*+'j4VCcCj<R>H3QW\LFCRTl3`+)6kK<E*LEn^re62<g
%CPS"Lig;R5>!]9)%-sSMNI"40ZpO4h<(WiDM6.?&&L`X?kdl13U,V\$;Y9+u1cXB8e967boL:k4^2g[Gc+J(Wj<U+_he!utEUhY?
%:-ICSd2TIXGc1&L4@)pW-f7ggOUn(SUfT'k>4dOUhP48j6OSQH&YrAHUdWRa;?X]1L@hJq.udPN$B5nNeK\#UA\oejTGts0k(i_p
%m>t<mAogcOW+n.^(Rs\.ol0VGPd*+.14=4SM4a4@B6Z?2-%;bXA-*TIib'['71V<q"Y:Ia!bVD<'3+.m*]_bYA)?L8V#u=b[*&,R
%iL(0EW+nN,J&<&bSJG&ZYKTr!,;>XrB=ouq'RikQgH.c6*mV=P0?uXA)-4@)msns$;_%Aa\V!4ghRP0.p)S=/*?A1KGJPBYY2%d"
%.e?c1-83Y+G@d@4jS!99:ST]66@OlE=IG_`1(W+@R`,M%<T_C^OB'aBMGMEZ[1(K-?JW1M_l9!LRuS>J8-,:29B])u9B_J%GXqVX
%nG+>EjOQ5\E2h`Wo'mZSD&2/lUo,1S4"o1%=3c@XUa&7iX'Y^8i!bXIp&W2<l551;Bq?F<n$`ce5N^k0g,RSRkR\^E=H(`)EF`'5
%i8m:QW4)4qB^;iF%[+skePp4_Skj'rcip7<S8P@%qSfc\Fc8CCO<53C>hm`kr:m)QEUTkarJlh9Y03qrARY2;G:&@,6!7Ce&hq32
%Kkh4WZ)Zu8LtdoHTUM?+aL(-:(<Jb4[7L#e*(@1%^ZR&/,qn*;.?]CFc;5dEH9"W\/F)FM7C&kTcIbG7b%5\C#S^_^NMBnSZ_?IX
%fNl[fOTEp:T8+LgMt0u<G%eS9Tga6cEN9^M4C:r,LU=B&h^TH(*>%P$,42U$-8"-HN(&"1[_On]nus^=CG_VfPfK44`\N`DUM<ni
%>,U7./*W'VkMiua5AloSQ[3hDd6'26gTUJQOZ3V\+Rk>9gDVagNEJ.[q%:b>mS#=BFM2Qr4\O>PahpZRHSomf7i([f;6=9KN\isG
%Eu'O1=`kl)oGN#bM#os4:$]7MFU6g1rb)KlWeR[=n!Y9I(hn0TRa:1-q+#PYHHYYgV1TT.4mWX-1i%89])feGne5L*;e#PI*]+\*
%P*XqW1p52@GR7M.XJ>i6A%c3+YDJO1h:_YVbo`4V48ZX%Z/9-O;gMlQ[-TCYXK+Sq?:en<jMcS?g;SM0F$La\Z+05k:urF#9%@hr
%U.VU"NDd-=<)Wp"<d#:K[I7+g"t#A[ZX\-O<p]#<FL93Y`e5g@U@;%./G?^OnNQWrT_:48(5\t>eFdEY\[p-9p+sHj"ktM\NFnO.
%>g!o9]!Am3DEJ(")cmic)p4U!\#Wl`#23@UCTHb-Z[o">?2*MOUeK1;pInPHKAg%$9i/'q3LJ?;]Cb]AA]AT)17)i41$fdCVl^sR
%pYh$g<iSG8l&LNIi2M1'=%`?@C;hnVV'n5Q\l[Au.p3MoA+be`UT`9JZ5>TtBubu$YLbQM[VJtuc\!^D_pYr6#7nLN:HNB:r69OW
%B6_64d%kfhK(0_Yh`)e?6Q8G+mN!g8A(hGX(q<Pkpm>gqGM,`bU"%e+Drm/dLsJrNB.RY9Ea^'I=B*hk,OKl4I7f]5*;6]Sp*kuS
%h-iN\@@tu4K]Jr8(%u>epn+ms:C/aL<;inPI0L0;3CdMM;'gX"@@q((CfR*6\GM*!5,F@b`F&LP40c"cWN&`?CZq#"4sc+aSi(VE
%_EOfr50ap'EflUoqip.mlOfYnYYSt,SA%!n@@pFtT?)OD=(._afuaGRcW\u!P%o.-_EOg!NnQ&80'lO%l9`,>o9dBY%A]Q$Yj\Ya
%;_RJnL:!-Pqil84PV_c(.dU*6l=1IIc<Aku<7N?pdcW%F;l]*r-![%BYYV5#DR3HAO(/OoPcFSUETj_Cp*gk?>5Om](A>ksJTkLu
%\a"r[`1W09TmTt;F@q<'p8OsKTODhXipf3AF<gMl;0A$aWUKVN5)G?!LjEc)Q[8=id=Pbka:E30SF74X*L#Mg\+hD/BdO+bJh!<q
%4`sW@iG%:75c/6k:A_obMna->)4&POI]?n@S*K4[4g"$r%iLSgJ>mDt<P$fSb(YhpY_#Bd:T;*^8kH015@1>4<0=ddqmfEj6@$H0
%Ij_'r)8H)F7*lkHruI?sW$Q8en,G1)3Ru=QKU@amR_Eh_&[$T_ha(1=])5?$FR%C<*e*qBILoEAr]ff:('Bp'kn1:r>Y"b9s"5"d
%n-j.uJXX)(8eDm)B67/"<o^GO[pu$Zr<XfpNbY;gU&5B8.cn-r:efj+)3/_eKnWUPTU,AE`bP@1aY]<!:K5W;Sf)#85!oG6EQ40k
%&;!5<fpMAL2")BimCUiG..@5]VmX!gUAAN%0D#48/_(2T"D:B8_T*=[:2,7M'=^jeG*Hj=8GnqZ445_Q'mdDe/]!%!Nk5C;Y8?+a
%",ULl3moUdk=p*4`%fcr;:WCnP*T2HIaba=C>Wr5B/`FE(3^oN`.ZtUR7KfIcb=,6?M9#c1/l0Sj2(dS0BDleC1_<ImI(O[BDO(3
%;MSPcMF*nqEb&TPqg9]cmB^-efKQ6e6<sp\/Piq4RkJr,EaVZ1a?U&cmaa>Gd2@s!?og@AL2Z4O5.,aWn8&T5U0ni"i"?Cac!mp!
%pA#;l*F(q)*5!(nrHDFn)97]98J]>AdE'"NHSS<\+&BKB:WV`t\bbdQ6;5@Fs-/BooIno[\>3ir`Kaa-GKRSlNbLS`,GY#4ksj4L
%F75aRnPHmpn&XQ!PnL/S/-^C!=g<!T[4cf>W'49tr*1YBV2BR\q0mUBE;KDnKp]I%^.-E3_B#0er-De!cSJPt5&2NCM7keFNmuC`
%dj_(*kGn.>G,HCV5GF5HV<kFCA)^ZACSIr5d0pdgFk>@?Sm&O$b*?\PKiAk_;r[IbWN:rjl<S*bhYmH-5]7;<3JiItWN:puA*dpf
%9!T680"tcOZb&,[0r\&A`Q-HSeWL,OWJju=0ICMD9HJXB]^E5C[s*b&8M*E.GacI[gW[i[Va`0,U0@^l3pSdaPu#e&lYk'l)('GO
%NB4*E+cY"-p,@_$eM:aiA3GZ7R]9hM.uZdI#KG);;IS(8WXc[<.*'oB]7hsW,R\T_<C'mrS9u9c>:9P`f:fWUYGpnH>:is6FASN:
%$iNVaSHDXkPo-7^#@)$-n^Si8r!HV<"(ZnFeB"aNjNUlPW7%a2/u`MP''53]9kR<T6sT2p4R2Tic8[[^^P397B\YZ4n%<C?_cQU[
%<M:%ZdJ]i)dUZG.Od5?"%I-dUC:_Wa#cb7$%_un`-FCEF:I+L<n+E3CX/n)&Y$MVE(f!n*73F5iN"B`XLr$.Xk+)9IWs;V-I71EP
%/8Y6adj9mSY:!>K<n\=XW7:urA9["S9*/m0<N,4XqpqhUeXZJT[j:938%?&/pBS;Ip?_*aY1-G-mW1<okdCk*rI3m9lB4:3Q)9*=
%97<o$6mXn_Bph!(7;m#64_7gLXlTjC'&gbZ5?7_UC<.l@-b\WG\i,qJVPUG:a<)q2"JjP!.2nNVl6gJKN_,`oO?5.99>0Jg+?r-T
%@dg#kK=bAKXW([AK#$a,W5Y=aEX*n.W@f8N3=\[:dO:/tW-Vf;>ek#YU@o<4Hgu-3f^[V_9e-\>O;YV?9Ms:h[aWJ%]9(lSXt_K`
%*-eS?M7+VTY`,E0l&SE-6S$j^@RmeT_1kp2.3.dORFdHnF%FcXrVS,-lj=e"a0jGUD@KZ8jkl]k*qu811$U+Kca-?qE?!3RdCN#4
%%>12c:I>p-)Vb;+coScXQR&.@"@`!>HWd@=il66!R\!TEh`L;pJ:i\\&s/ubOSbM7IHjmpg^OU[?K#.\FPh9k)q0M`;9&m@oQupK
%L(EP^OapU<#4SI2p:p,7+'=ZRGhVO\GU:++7imjV._D5DUl/D'h15`H9(nck2p-ANU<ZUELK/Zn%loM5]u]V>.p(PWW@f(;7(#?(
%-'$b!X%S\7ItP/*M?_S7W-%RUEGN)@b83.?2ZpP0)=L;o+sH'N/emTH;/^cpbQ.f%:ebK52shX46]n6mV9hM!e#85[X(#*e)b'FU
%,(4N+8YQ9%.Fo`ddWl<S8MjW8-8l*i-qRAMdsLbDVo58>\7e^hl82P)BXAiN6M1m46R@RY=%PCQ`c+MDd<\3@dLO==5o0t[.K\WV
%M+6eCNI0)g>BnlpM"S25G>Q!6i>e1!WY+lk0.T.1Cj3a-KbqsANV[8DBpTQ,L!:^OXAFC6ngp+B1'F_%1#Q1e.oa[Qp]Hit?Dq*L
%G36sT'l8F70.W9IM;HCl%hd?[)3J7EZM;:(TapE_VckNVG^+I!fhiP,.Nkj6c;Ujt$P-$,m594KTlpIp`Ap]$_?GI&37Z0eKnkCX
%[6"9'_ctC?%[iRV1L,1'SJWeIl9"+E6Z$Uf00/:L$P12ihS8Gs56>CQ&0SUS:cha9X1p[j_F)Sig!:5qXIe\I'13QWC/9]BoK)rf
%6g`V<\P98k00Ib0BY.*>O?C5[C9RVn]BrEecmN(CW.!Eo4?r5s$P0WI&JpmkB,tsMTsf6cW3nEdGc6&FTlE]R\a]+(HO>hIn5.hs
%]Gad%G^o4:LYBG?<3.'giM#s^LW2`[JI<!rD`d"o_5Ys>/a_g?+d_6-$P1d31su6Of&klu&%,?K0CX6FB=RG-7?"I[*F>7B*iCf0
%/fE52aT\eniM#sOR7n24J)R((iHr$S.W9_WET*U708b=`@kKlCl%SfX:Fd`*)n#2.8kJ_04?T:t@R%9pj9lL+D`d$rS9j.f:h6J7
%nm*54*iDrAX^pa)W"gm)HJtRkD22aXe[#I?O>^RJ)nPOc:c\76(ERV1.+^[h*.C]B0cmgZ<*-U!n=V9=<Gjlt%Wi_2iSf6ZL\S<q
%$ai=F6SCPa9r8fBn5.m7@4CU9$P,Z.;t.J34,(^^G^+HbmSOcA.eOtg^Jme??q1DAn-cpV$;W>*8%i/`DT#N,Im0h#9&m@t$\P@q
%lX"i"e@b0F/U2d7Kni9S="7W?0gZDan5-`UD/X8d.(n!<m8-':iPI,,$P*c(F\7d>fS,+7[iHOLH`@@V(JW/$BSrP0Knn@t,:Cr8
%^@4tR@[-6o*e3.B!]EKV*@bs.*-:)4p,"Gr8q,;KI<7)(eBU87MlIkGiLqIDp^.2lh5CE.4OdF$(OrF9l1,RP7P6gQeeK"\ZI2Z(
%4P\O'ZtR'L"GYcJm$b.n6K_l[@apEajX4NR1K$lukiDWaMC9ct)(Sk2Mhs\VZ@W(<KZKYk0ck:^!ag`5]3JlLP]FIBT69DbH@=P<
%VS(Z.,u',d+0iPj^!,G9W2coZCc-NSo?Fnr@^a,bc.:4h`9^'CVk(*IhhX'0CNc5Ml-GO6kJ+\urnAG>$IsnO;-6S/7.DG[->MZ>
%/lA+!`^G5E:Pd%Q?NeWN<LuAdmEK004;$<cnar7%&^Tkm)tE3.gPM!jAY&VoHl3OPVJf+Tq-L/@f:D;;]jBm8lco;^[bd.)VtI23
%[V`)h$Si?`>?#?PF\ddhHKdUK6<<9ua6VCEYhZlJY/@MIk,.ZNXB6f62j]jCn%J+'2Rk45,F3ZUq^!&&E-7$"SSR?%s2)sr']>eq
%Xk!r$9b62c@k!Tfnl.,Eo"*MI)V:G2Sa#o<(M'g1/4MEFpknnK*P5\</,j6iYOC:B@BKTBDn:DpM_je-VMIR9RNW$56%p`<n)p1@
%cX7h0e!aEi\%d3$,(0D[GRIe5WfVTNnkYr3^Aj;aenLJp>6ElI>$[<G%)6V"+\F8RS=kk[R+PTdp@u>Ym.OVT:`45tI%:Wip,'DJ
%W>'Y`0fpI0mnl+74aNGO]@4Kffld$e1-9rg@'73#0MC-pMEhR26pgO7FC`KqG1uPNBO9LoXCbf!"Y/T4].j0V\AF,24MHM6SpmsA
%:O%@A4ns*UF_&34#b/kms$RLJ`r>[+45c$[S[m*hAGpYF5Fq/5;4AO'l"9ssq7Wl=G)\o,2F%!4N=ar3R7PYj[8"7/r;6Td?lNO0
%H5j-t0>qqA9fPQpHIpgQpEJqC0)uE07qH#]8a]m;.sqIXff76iW0@.;:KXun)<!.o*5XKdk[N*h]Kf"$5qeNeJ9.%ZFPFD@3kDUq
%+.M^>]P*K':LCDEL-HV+U%9nF*T:/;Kpk!:rh_JRWZ[uP#/OIN@ka6l=PlU(M^$S%XGc&`2X]25/<I@2k4@FmrqPFC(+d:%r!L,[
%!X-i>n9/Pa*pOOHjpP3Sq!-.MHZA+97E5dO]+E<c^I@^W&[96@#I/Kr\[\.rY!k>G.IL*55Ai!g5aS!s`Eh1JiJ0t6=@cTZ<j"Pq
%Dsi:(]oX3O[jYn7FgEUN8nGBi6.oo,/!e7;4[21.Ss[UqFZ71#$h,'<^n5Hs9E"f*K'_+3G51HaAB\J#s-($RPUT_<Ia<e!P:#rW
%$;OEH5YGPe^pE2)![*MP6^]Ceh]sEM>ed>NZ2ftn0^Q3?ak9cD"2m#XOZMmFHjE@=d=LJA.Z9DiKaqcdf:E0PgkRQYSF73(p9uM\
%HOjRu)^AYPbn%sm/id&%-83&3cMcl.L/,7g'g]JCL''Q]HB=uo_E7,RYFW(k!sPlKoE6EA7jTPf_?E8VAc4Mtf)rY<Cf-4PUNdt@
%1B/5Oj(I#M\P6MP6KU`.(]Gt1"=X=lmJg^/Q\tq0>%NOq-,(YujT5/<bjp<]+Mffu1@j:Y=&,'RL+O0OdL,;eRog!+9qsPA6rDXW
%5ktHsLSO4,hDU9kDYFnkh)EnAl$>,B$0BfrNZ\*<fB!4J-m+)I#KS)l!tXh_L%&5meLL.(Z9F2[ro)q@Y.`RG>G^;6q5Z.h[q80t
%XaUX`\k$2^i@@d9@4$S<fG8'P[@r;!@YGYAK-amEnkhocIYaq7HT?,.,4;r]G,Fb7_5\;]`0[HJVlii9PZ&bW_h\>8?uM$F;)!BA
%hIjs>@Y\FrU#XCa$%Fe1mQ=B7(oDhC67FD9FSddR32]RX,Lu/UQ7T3$H%_;&+?,FUlu0Tn`eXY;!#QQ%":[S\+o>cIT.FTD;9GIS
%MFK=PLJN%cX#,&M6QhJ80^G86;AmUuN4r_BY\o[P7V^8FX#@Veo&`UXbpG^;j-^li\oF')ZU)9E@Fk+J0,&oi-<n5.r0n6k_4%C9
%[SaJQe"O;=+<J6C#kZrsOFrYF#O(XXb;ALnCs7X%J(0OM9^u/:&9518gf,<Z1In,0@QdB;PGo,Xb'k[bQEPZ'1-GrF$i)O,-c0Wm
%i^BWj/?gmmK>h\RSJ>3"3X`m1\JK5+Rd0nD_tq&APJu7C\][qte'8J^TXUOBlHAN`g655jr*us#jQA+,c`cRh)t<`'YRo5Pfj99/
%FC+P8bU,-GGf;*fY>f'I3D>$p%jIg#Q.YV(?hn5mqRV0Tr"3%ED%JZ8bEm[<j?V4u$7EY&#7Qj"FlUE.ln2be+&.;N(uA\Nctj">
%$R.$QT3Z'XQ^e`&H'0.EKH1TqfIlU029j>@E+Z;;Gs!u)3hU;ON_`c%r9X"F2@2/;As$<$'2+*_$?p20Cc7W6_MunI6!ji/Z9DT$
%)JQpHWD+((_1=ei0Eg,>:`jcU/?q,HD"sNY/:MnMgdPoO0aRP%&+fR+dma8TqhDHH\m*"86![ZJK:hqVNR0CIO\=9E*n9Y?rHTi^
%H6a!">59UA*,fV"T*mNPHsDmZ0X9AqDrC=pqMXipoZ.(rSB$\OO(',VU/6h.Ud<)VNba2c",IqCS]^+AjaNRQ=.(N!2NRd#hPFj`
%3JClD(s0joP(TdK6:+6&;\XM=*L+MW*2/Y8*Um\H3E"1`*it^7J>4+Jln.;=o4XNu,A/W"g)p-gGVNgtHeDlLZDmrLnV^h"LfX*o
%DZ17hBZ51'lX)U.)&HAZ&*Jc`@<Y;p7WTPaICP83"F%Y_NP#eJW=pFc*ABDDh?dW;e>7mV))8^-.dc:EN^6TmpqS,JVZ!)JX_UU$
%]-Pq=e=<Ct3;2I."BZ)O1U)beX9=j@+WAhH(Mdu"RT"eo#$u7`K=rp@U,&VUYcQ'hDa"pqrqkIQQ0C:"b!)9hMdIG^@pEZGn,crA
%N_"[Or`TEFl$"qd2KGlrHOoFE[kBmH?uke*\d*ig:W!tY[M.&)\o!9U;DI1q)T0GP%*\Q89CB4WC?)ra+kF^_1VAj`^IcNt`"p1J
%Q`shP$.=1.M*'IsFmuj,^JBVKL,Ou?b5V6Nk!CG6-ilen*VkjoWsfe-WOYE*'kSZgVMC#,jPP$%k-s4/PFE$)Z\D50hcAch,6<j*
%1`LPF8>7oX6f8&5!O3`^roW0@]$7kC0lSnVp##q#I>`(S`h0F[+;_hHmX*%Y>IPo`8\iFI"rD?$?%N(mI:-Q9mof3dB=WGN=p0UF
%A6m21c)5n;HtK]%edVd]4OSFR2G/;ghuJ;@,*pcPEo5\@V>l-dj0J1o@@+]t_$8\cE[H[=2rOY1@T;2c%AR'M/js=`j3H'7>=fr0
%4!/ir(,('a*QS)nm.&riVW)-+Edd+E`[i8M6o+o`o%=3WSZg0rm$'Bl./GL*?3&_T#l:"ld_OQ89'-.qbq/G!"5n!UF'ohLKTNNC
%6ii<1l&':a=R2Y?Ij[nW<LWc),`AbA*[U]k-91r;1NN$FpL*qXF3$`X&=%)m#u)Y'M24LFF"WR@[u2TMKVnN)8@Oemi4VC+iiOR$
%`P+'e2hD[WcdZaj2.SsUE9TIh"NDn=!l,Wf(oKn4U^.A9N)QMU@ga[k$tbDs,VT^o((NW6m.$(H^u2!l![EmET;rZ/CkJAUZ*f:6
%l+B)Pfn\+H+>#8R(_[aa8.0EpU5m%9PSOaGBu-'tM#".IiUC"<+)3Q^JY`P(P:"(nkYk_0chdof4I(9LJB3PTF,8WsBS]Nk3*oIt
%meI%sVC\KfW]MV^8G<RU6U0j0gkDtX?I;7dpo'^55)/9r;U%9@h*fA93tWZBWsq%no6?[e-1r6<G`)f0K>?()i/mX9F-VY`KJ.6d
%j:LgW.3A1i./:@>afoAMD]CK9$EYAT^2F]6PM4b%nE6YsT^Tg'E`0Ut][M<K..+F!I'YGcE4[d5,$BS0oYeq,rC`*ALS>#.Ic3)6
%D<%';I_>Bh1UHRN(r<dMc>1bml4.$1="iJD%1I(an0EO.8E@>%>hBMh5atS(A\PI6:j&%@V&.J%mS;ohnVPkKZ4C9=gob22O#M%Y
%%,T$uEll[YHhYa#,uV://94OX^"e:5_)C_2896@K!&2M\>kB'(@//F.oVj/$aM,>30JJ/]=h$_;$EO2nb;;J8#Y)ts/ZD30,h"&E
%KiCC\arJDI3rrsm:5hBOZXbNG]>rt=f^pPiYP\2.kF=%pJHnjR')57IdG2SH"q5sIUO\Z*:8pR%Yrmp1)0QONM9Vd%4o[,,Fgh]%
%$"=!CZJ?_^^Uk#aK@:I[/rq-()''i`Rbu]EXeJW1OYorP9u8QK9J?1b;%ROa5D[O-]I1rl5I\)HIMcG7n_)bN.jNIO+0n.PnDgR0
%71naVq^Mpf=&Gb47);5P7_4&N))+qq.7W4e"))TX,gMl(V_'cd'H%_H,P2C8%C=euY-?;#oo2?/(\gsK9EJ=MEJ=d09lbD_hTuc4
%2iVRo=rntk!H76I^5;%O94k-R<SN,O.n=T_mGWE4WZ/VO`kYn6A`!rHGT#HQ]uZHOaDZM#Y]Ad39JYa1DGUk:hgCUB6(o'Z@msd7
%5rBhe^q^aj-%$mPBE&"t8T%<O1X&GW[-7!:fjXV!ANI89NH'<HZ<b:o'BK*NZR\SngHla!>Gf7b@\L]u?8b-"LcoaEeCV")@!CBT
%)'k>BB8;Z<df^Ei50MF1O"r[#?5/JVIf[0k=Kl0b,?=^uW#tVK77`eTP)T,<9>Jg+Us,\IC[Ic;jE8rooVLTa&q!i%!ZAI?XCQSO
%Glhl[Y,H_a*atH73gQu9+ml0=+oA<K)@YkD'^\=)W3>u3'CU[Lm3M&&]7,01&A9T1?j6Z%+A#jLZ[bIVl24+!_7Z1gn_kV]i1PH5
%I$X24_!'PNdn:"8\aLZ%]H1Cj#&s(gqWm+FRaUpt`%MgJj-8O>K"a6/KOMY@@7!>ZKeNp[,glhqj$FRe4H^(WomL!L_gk7o-X7"@
%eq6=,S4AaranJcum9>b?O$D;<p4f3<1rq(aVPAB\#fD0_K)+QI&;Gc2"\.4&+Ulor`?*Is7MPLL8L9LPn58#i49`.ni5lTB(;Pg+
%AW\bDi'S?".!lFTbb&L9Yo\d5+UZZW`=(\A=7]0+_ZE\\l'#X4qgq9"T^8_"#r&07:RJE1r&h7&6W-k'"d-HZmW_9G\Xq$2ms4DA
%o0UR-^tSCmk(St8J[QcJCgJOC(6%H>X*MP9(/A;O(bj!t(Q9&+0JAZ,$f2ZWbR<1>H(g@BUh!d[fbR+M+(APa?-&KO8`:`P^$('d
%[c!=iFj(4u&7Nqu5fYGO^!k8>;;a:InNc6UD1g],Y0R[$h]C!5NIDh"__BC^3.YT_;Q.bY@oW)9m1_:tI\Yghoc@^N!0?4/ZR^h?
%Zo2<KAAJn(B^CF=*(1*Yq8tFR6UZ[%4cN#B'p5aiR>B`tebFhrG5%[R$j6#-(<f>n$j6#-DCa_2&;Gc2Kd^Q.(;c.I.4Bm(FQ41b
%%I\Wb*l>]Sd?7`oS/MY`kMDG6\Srs@nC/#(9)QP0'B0ga4g@mL+bV"q?[.l/nI)]uU_^fI"5/g7^)ZZn63s=f!pDck%=$$W7Y:N!
%9b8Q(fT24IbfL+N6.Dk$Xr.7]U^g\Mmi+qe()ubMKE9OCpaH"+"7b;=BmY[r=\:S<YkM()@T6Q3"c%j,AsgpK)sB=@H=8XPJI%^$
%?JOn5k:nWSC^Y%hT%CVOZ7VGSfKYe$Nbo.(Eu+@6-Zjo1^jp\2+stB3[Nmnp@[5i\lj2TU_GHI)HU%9f0M/:0I]DV:*m*:<NGP)[
%KI]8INs+c8k4FbQ4;,T(BA6D1X*Q%Mmho=!k!]pMH\)DtD!-YTm3Vftg+a-Q<eS@\$7DU#iK1.8fHiL*F#1m$Z`bb[499m_K1&"c
%m!k$epbmrf!at?DTkS<K:OGIpRH04IpVKEc=19S*0?_qi+7GM#88<,TZS<NFEMIk+38<j3fGH@G"2OgH)ae4FTHoF[@:R@e$uTq-
%CL]&PPp-;tZk]:L9nMY%p2(5'ncO`"YpT]MYVA!.8?beb"#bnX^d,cV\;en4'Pn0idXVIq1"&MAS?.:hGQW@Mqo%Fu(Klfn0(51V
%6c:ke)'^Uq2&D&R+p0_m1laCBM/<YHaU@<mAK226WQ4T>eN=6`5cg6.EHE6kl8k&Nbq1/pdWjUb&Z%>?(I$Q?5HHm%6Oo#Wel)%t
%#W'mI'ZVu"2&jZig,oe2mZsuJ!o\s9lQha;SFTH?AD_FXZM>)?,tdLrD5*Xq3ZhS:D!Cmc(`4>?';^JBlNi0Vn-ilXW$V-XTC=i=
%\@\?p?\])T*S;S3_"/ApNh7aYbdh*Z#%3B*^ki])KbHd4`>oM%K2Q8d/Gp=D8dO1.9Dc9*-r/bADIXePDO8q\T\6!"ofXd9#U$^\
%TQKulg?AFnMf0=5!0R`t@1C2#LSL<X_0bb$/hrt3/quO$_eVRb^p$'@p=dI^(:)5`4+)<?KX[Wm"AuS*<4WgoI%DUalB3Sg,*X-M
%82>QRPP32%A2@3dBd.-o+nD$&IRochR%<&/Q#*_@(POQr+8:pX#7Q"mU[4[i/u&ekR$@2QnWsNRB0TDi6Fo[[[%GL:@+8Q\Vkd]S
%`pHpR$ROO/V2Uqt]MPmcE+-t9bmU?^$ur`3ETRF+8?WoGfWt`@o)^(0>0[B=n=>;ZD$l&r?soo%]]Op2D1NFQ@IrLB'F_(=e[$s@
%^J_$SXXt9c?kB*'3Caj#4e/G7Q_e(t2i<_9&b'N:jWlhlB#?qN#'+5O<;6&IlV$Cs_>U%+`hoc?UWQW=S7toer+Ku#Ql'?JH(e&/
%,a]BQ*1@2`j-U"bE@;e5a&/:[i?I>MX4f1"RCAdTU2@DJI<,nQ7GDci4mCF4(N%%nRiH1O$U-YlT^AIi\.g#$]Sh,)65Y*Q>&f>n
%L)AH)F.c36#gkQXq4aj>BSuY4IUrp(.d(."5nrr^ekY7BQ[:geQ2dj_*uc,t[BPkk1)"p8[L7HYW/BPS_;?!T>s#kEq5g8g62[BG
%H[-a4ZqCg^fmAhf+Be4f1A(FV/?X[RWg#M>g#r*Pf&Z=o4dZZ7KGA'@aO"2r'+I,IUMX4.LpE"e)/(f"UYnZT"B?Vah0^@^5].Q8
%@HZQ715LTJRjh;b(H[f\b(P3F*!mJVDiPGq([T*t#<GY9$6U[>n..NTJcHER3R7%T#m,oWJ2-IS*@HBUQ48P/gcIPA'u&3Kq=Ogn
%^LTVHDpj+XA`Oo#K1NR9Yia;U8qG[bR?O(,Jp>(.I4*?EYI_.R'8t"@j&X>CU:TIP$<S7D0X1Mg#_TW4-"*tKo_'PgZ@In>JnsVU
%(9rre?uk\E*)V^T+D[e@S_gfu9M0%!Z^rElNC$\42p!Q/UYmn-Zf;Zj4Fn"1;<AT!-!WNap=<\t`s;(8mJBVp*3e>=8p":lF6$(+
%S"(boRhGI&bi[+M/e`^C%6FIkB`mKVNXqL>)\FSgO&(U&k;E4qP^(+F(tR$2VSq6"9U6oDeo4']fXTHprk`=aMGae=A0[_m6LeOL
%K"$E+?^a6'#E!:T>Y<uVYGT*=8i^['3fgL4A2CS[`0b&:](>W.i$/KYhd.`K`YfG5L0-ke[pmGXl7E%Rjt29],[]7+`mC(N,moI`
%A>h.gUrFBH_1d02<`C%ISZ>SGFCfC++H!>+kd2^="e=43g#&l"b'nD[V]=q9k((@^N&Z;[*u)'/WOV7QRFG9oZ8%Hm.Yn<fqZ0tR
%qR0F9KbNa#/Y#Kr\WY9(dO^a=qhOKdYp)04P#!B<f"[HF-luI3B4\B]N_P/4,D415FfnR'c9#0`ZG)::3]%aBQ=f!SKop?`R?]C#
%6ONW*50!"-"LDEGnUQsj@kE=IE*0sAV83J0hNmf1^[=`%@$jPMlbk)EYa5[_Vs>=*$7-Xi&2FNDY!S>Uf-i-3"!=Z:>t7(^a2oXB
%M6&,V>7::FL?=ZFo)')TcJpddU'_46:Q<[!g8'+^orcO\E[BV1(?X!<!;/L$=>s-`0s+W/@q9(qdpR6"eBdWK-,<&'-4@!d>cOlE
%C7,SrI-(Boq%t[SOnuj`jl$9u`frBdO;'C1.g)EUA@p\rf-5f]9OdKB0AlHB"<u-E4D-39-6?9-mHh)#RAYi7f!JpQ`L0jZ(6li`
%,7hLf-nN;g0Hre9S&*+7IRI<t8hh)LI6$).&7X5UIOqGIoM.m$1`),.MZq3(5tktU]WiT5@._Fp@4$IL(bIO(r_tRTPVVeWK@,Po
%`9.Y#o1n8:$qBte8aXL[b%h0UIACX909F0>\1F$4kD]Ye!^V&il4:gbFAmMq`e'ei@R2sg3e`Sl>kr@^#YP1V(??j$X'qI>2'"k<
%!TZTqJu0s.a'@I75Rnmm2+oHrk$btYAd"Z4!MM=<N>b*\=?m[sS,Ei@(-]Y<]&6=-5@:k'Op/cle^'[9XCM@j+QS+,_FI]nS0AL`
%5rF/OfPFut/eoo[,R$0!nq6/mQ$aJ</p6U9!^m(oNM'3$+IrC<bQuYQ%=;H]>!R>ugYo2`f6S)uKT_E661t;_67TfAQBVPLah::Y
%Q!u5X07Y5ME;'\G/>3rDW+Q7(@KGk#2N/5Yq<e'MkM$GUpH8uSa<,*s0mmJY8,c$ekX+fYi3T<o?AM@/47"NsK.J-%)ad*AA9YZi
%1tbHE4;=.a"RA$B\o6AT;Zr1ECZn#:bbtNY^?>#mR'$GSM!cfpo"o?hcW/I@h$EUNGt/G$oTZbZ\e,,kmbOW/U4P?-NT8?0$h%XG
%P^S##&G4gnE.92;/SmuWd1GsM4aQ[T&G4@?:Kdd][@5JSZuC[>(P5+]kg]r)4-K@5'K"sV`'_t?YnZu.+_^jKa?LVqQ5i&e*J,V-
%\a)@\9''8JC/a+'Zm/L<]>I&eDt!@`6I<e;$8VK;%es^#Lri!1`2L@@K2OAQfe`2[$:1:`)eD,7boJk>LI9EjQ=(@#UEO=;I;r-W
%58SpkhNncrr_jtRFfY,$&2`C&OK/&/_.]-4^umVX&@=TPcWI!S6c-$Ar31I;IkV"b=mH.H:%Tf#d+J-00q0CTd#Q<jLl?B2B=Su%
%V'0N"K+s-9qi:mR^6CSIs1e9QZqHJ>aS5-`VnYTG@?=SpQ$Xjtf^*8_]<UmN$l740N0.WYEG,43IeF^R7V5'>o/'!ip<;;U1C$Q;
%<Rk#`An8hE+p,r;5/6pa]6b@dp<nr8r;#\jHj)b3^8nHO>'ko+fPL/sC'JDjE;neIQ/9d=+NZ$1h!L`kq01Dn4S?nT-iO+[1H"/@
%/]p@Rc1s;JIJOi1>)G@84Y&fOm&s!_W6WDS2s/B37`()RRd)J;]1&\7Ehd1[oo%6F`ueaP\b2]pRr'3((I^"6;D%8-n%\BTR3C2T
%:VZGcB69?K:\:j*nbR(Mp'KNlO7!+^Fe^T(hfs@_Dss+Nn*Q*q4<FE7]`\F!LH<BH-.mQ'T2Qs)Dl(&2Hah;1NuZmZmsVG!`9#oA
%?f59Uk2X=6EgK:5J,SPCfDA,<qjYq&C/oDq!s@!8CjpC'an7m5nsB:N]3Rr"#RN%(gc0C<pmFW:jS.86FUchE_[:HVr90I1c^p\%
%f>N1`71m1/0AMdhp?fImhY'oejS2W$MI%]Vn_^t1h[LFcj`C=[)kLu_qWWA,6E^a<'!@dR,>4mimY]e(&&JY\?\[lcWkZ8<j0Ebe
%Hh5qd<FHE"NP@L?m#5Lsn-ZB!bO>_l3)MPhD(jg+\)E[@X`*\NhL[E[_2EeecYdt,,e*S$rp3LAo\!WuG4q'aM3r4Pc,gckKADXW
%D7?r*IJ+H%BQ#o=aVuo54\+drojW4PZVg2="1l4Th7E?1?T`V.DUG$+i8!RV&&/#=r;O>&^\[N%];P/2@(*];dS8mg])0I[fC,?(
%s5s6o*kZgfo5F)fhgKJ?r993-5()JSc'hs%s8:^ikGQY[aOu+^>eQ7!QLFb+$d\e9om>eE@JaNC!e'V4h)E(Im=0NWnt4cfs.u'R
%^$G[mMdO$PelR@p`OG%b-%?JSoubBc9K..h]_^gb`a@X$fa#:)rT^#ahnQ[Y4eMT*DuPdjeXP3&P]G.Mn<7M`lQ?,eg7.!XeKFZN
%pFVej:2S!Ui0g??jGWiU=2'AgjS?i<k-+^QN=S4un%A51:T:nmYA\g["WA)Y\"EWl^"7`-lgW"LrpA9BR!*uVn\;j2B)]nbcg6ph
%fA&03/Pi&@oSL45Dr7)p2Wm",`k^4(<IQ$fgt>WK4bqn%5,>&Bh_+2TDZ5X^(A]P`m&A=)m.U8b<DO%;!;3oeop='Zor[QV+52A%
%iual?s)@:lU%j$$3W0J\P]Q\Vr`.b#s7Wp'^)T3dhnmk?)(>4+[ILZ<o;qqH0B3l/+8FlK!>gKH?Z/%R^%pILfYQVha.MRb^\Rs1
%qS#/gB4!iT2u!:M'n?5SnpDOkT7*4#i\?,q4,:IuK7]!q!Vk2>1cF4Za8Pr7O6F)>FZ'EPmE%OX4VuMkr69<:<nH'^%po83m)u;6
%HLLGih]d9E$#G+kq!jiW^Mr]d%it+Lm1&g-H"0&FA!oZsi>s^f'E7''9)0JZrpJa;!rkh`Lfm8kW9<^Fn=C^B!1s5N]D&JAp:H[K
%rn!L?Isq>[(^`#*G@,f948[9O!76b6X1@a5kJkp0(2qp32Rgk=Fa4/1Qgp*)FFO5C-Y]qeH[iJt@b3_h5G$=UeNU0T.5)"4T00XW
%brE^i93\k%pZ'_@SAdEo\oXgH)T?B(Nd]ls\"C4(/R/5-:S)t0kHE#_4u^a#kl<Bo:^:sCJ,G%jhVFAm?M9`#^IFD$qSus<(\PdL
%cT_@Q^"U>PqfcJ`^OP:EGOL.2s2#.n,,:C8kN3H9IU`=Po<PkuSpB92G<V*Pk1;i;J,@pcqPA'OgX"YjN-\>mY;,>!KY>C88X"!J
%`_fIpP(qjbn$Me/ITLiTrVd>9V:]q$2]&rb63jU!8F(/p_d1]h]`+T\J+A;cgm_qH+8!N8gj0OqiS&\H>BF:8TgR)\kZ?_7S5@$G
%lEk`q@JoEdpDuHp_jK&5CZk$UVHq\6mc)N3kWX7fH^k3L2TLj:Ieq:KSHR([nGjrd:$p>gn]KO+htM#[oM0VB@smqHNJ#9%PPCXD
%"Mf1BI+.H*GXD(dT7#dJ*V(HLh"U&1Ls;uej2oi=>BRc/j.?/D:"Om\NAk49^P0/^mqOqO/$@&UrJ*K!=jXN)#0?en]oc\ZEuBAi
%YP_MrqT6tAqD%C1'.K%;j4`fHZeXH!Bs7-7H0=Na[b"<$K;0OA?9cg`(OeJnI:oS[3;,BtRn#-;o%j"#c8THNl+/S1#566ZY-5M$
%gNWP,s6f^3r)e\dMI%3Y)ro_fosjP\?G##l:Us7)3c')LL@Ym8BrB8m;q_0>%"3-UX*Tf_+StG2Ci?u`EPJY8hRY>9csOQ8^%*M#
%"93=]4.4VY8,$Be[hn'^SE%p2#;9BKinGd1,I<:ipRBM.qXW6&^&'jMcnM2OdJU/:/m3X7q#8"tbGSo+nBNh#78,3LSOhtb5Zc@2
%YMK.D]86MP$0]:u#N,N?2G'OTI/`5/GAl=:a#SOSmZd`iKE&jhQ?MP@4nU8??P:dkT:J)aNOD#nf2$>@KnFc!j/)V`?N'0\#@H<!
%Hi*e,:7ip-n_:N:](tXUo;B7oVm,hI:9VJoD4e]-n5%ZX6hMn"l),n)Co8rFIm3kXP:+)0s8P.n4rO-^J)K5`(&mhI_#Ep^T"]XL
%LHf[S?_"XTO'u<2\$NZrI-NY7<n`j7mnDmAFr%@kVmkRsUHdLBCkq!%)^)3`Is:J%4"!h:J+>uh]lsAHj586E?/@5OVf6'`jQ])>
%VqY@r2>bg?#i;#2iMLn5.;'sC4UGab[,=^:52!q=.4*CK2!8mDdh["l%":FPZcsf*17-qP0.`pQ<n=_A/bAJDIQ:^qgU=?QS'P9=
%ag)7)f]+8;(N26*iQSiuGHB@1q36(S[(&2&c7N38cb+&4Z383hBk>,!@E7YR=+DThj3$ZLQLi:=Q^>=N$61^PQ,Nj[*C)X8ZEfqZ
%_Wk9/YH4:K;VK9&>jl>fK:A$*QIkj9=S()"Q+W[,D7RjCSY`I=*@j"N%'CeVXOQ<4es]g15>1>8joE.8j,TDdI0>krEgqWrXU6S2
%f6b&gGSY?,.n_Q]X=S:(74%fl<8b*'-*Jl.[\B!Z>ZhP^GIUPfDVnLH;os!ub<(anDY)$Ao!/7IUFd"hS8EDl/'D@:44_uL"lA@F
%?<W'1_2";P(@'%_p3C3q\D?[i?G<,gcF1$mB^d1@S6)"r!aSre@:_;I04`b]gm6^;1-EaF'u,-HaP-2?",!l/5,.&^r)QitP.[Qt
%PNq78)5JPf?t'N#>N18Da?iLa=%#SR1;jH45+B7&fd>aVJ.UF$Wo',5l55)+Zt)(OB3UQY;+N,+*X\lV6l"/JeeV/Q3=^G%WFedi
%#g&7p@TuA4eWQ623DP<MhL[$s-Z;Rt.4q>bF2Qpo9>Oil]ZZTDHW^Mg#Q%h,ZlJX'C.sq<DdNp?C4%T@BuO5<Eb^o)/M+Ze8i=?e
%+(["N&m(:',iV\:k_W;1MtG+e<]@ND]$ZfYH@66T]2huKRk$!^4J3XZIG=^<ak<7m`BX263OdNZ/$5m(3#Y'k9?f,Vk0G#CBmAQ6
%3qI6).grWEQ";&cN\qn[<jM<IX0""h!Hq]SF_*c5ZEiCn=rCGoIV$L=IVgqi@4eRZAli'b>-eLY_Caji.l"1X`"5rbCOZXu:5GI+
%PhO9[O(DlS]4F&X7ml7m#]P8S$X<<d<ao68N$5>T3PX<-<TdC`f[L*0UU@=0o#b_$+gCEnAJoCM`]kEKMo,=;X&.`BhCu/6q<Z0H
%@?tA9/'H5iPnh"\A@F7lEa>-M.`sL`4al<G62QC6f_Thi_IU3<(M*+kMuDI4.$_`c:eU.'a8Wk$.aIWc[0V7i<YN_Z0_rTOhH=nV
%W#T5ZBH`"Z3mj%IT72]h3OVot1[f&i`qG=!JL2'J+]:oQ`Jk(`_^tX4]>dMHQXQ:V+#)3N?P/]\SJ@UD%>0_(mg>J@b]"FoXMR>-
%)6CblB.Z-XN)jDr$k/78pbH6O3C_*^m%i3'bf;&7\Q&K((0liiGu%'7(sl0(SV9c+:11DN@:6Ne'E]3^36(KY#:s_>2#-j/6!sk5
%=\^qf>'EEDD4/61$Sc!o=BWFl/1eBd3\).t@M*J8Nkd]kCBYA#<8"Z>)P7ZOr$e]uN*gFeVA(#H`iU2=XC>QHB'J@X0sZ=tJH::V
%"8aOVYVNS94/0h&7MQ_[7iiG;`,_uZ1Ut8GXme'c=G8X/9Q7]4il]'Z'c&S7:1+j&9obQ!1;2VF#QD(fK>DA?=11Z$\8c)a@"YKh
%E2#A83R`d!*1MZujiC6!TdM5l@Uq,1#%(Zo_7lUe#gElfF_f[9^ues92%[p(h\:/ViLC(QD>Y\T(>1HQk%PD?E-8f+0Se*!aBn26
%U)tf!]+[hARBK17,1&@q,dtr57WoWT8?38/A;;b<D*0p(CPdP9oabuH9_KC"P]7[%-jR*em%0Ec?RQjsAADqNEFgh3auqA2&K-rO
%W?"&$CK6C%Bb;'m>IoQ?;%fVYc*j=p#$CFrI^AS7,2:knd'8FN%)+'b$4F3l$huVU`_U7--';fRnPY6I9OuqZ%mVis00?hGSnt(B
%/&':Ifg%OOPd3(>m"OE1L#48F,,(bEa=MpGf`g'1(<7X'/W:L3dT/GFTe5:0HluXqG2sMlnTqjS6KV5+[6-5]l29J99mqgqX:L8?
%]Sh.s+/9h$f>,:DbPeTZ<8qV['A6*b0H%;VPMmNbU\PA5g,L\o$s.)=$cDhJ!\A\%is0b&FOnMB4XV\rK)BH,M'jqHhCsR<WFi_0
%<bTH0VcCuHFaSN1^6/L\VeKPCP%nSa7oi5:V?&@mF$@abX8j#@@UlHLT&P::Yj.18U04sE)Lc.E-+r)i=!.D#b_iUDW^>3U43Cs=
%/a(MJ2iYapCZLnE`oocj>Vu^10Yb#+$qk--L6[Hp]J3B:7@1DBMkp%mdmT%@&fTl_Q_7e?""UA$UJ.b-@+G"JWa[QXWX\\,hdu"e
%Xbg<IMcVY/J]69.>-`YYQ<\Sp<muq`mqZ!-[ifI7mAa:5>?i%JYh:d6IH90bDLDfpb[HTH@D;@KK469qcMD8c=E_7A=A<L@,t5FT
%Cp8fdI3C2C;Ilo@Q,ufM'Z@,I(sL'HANA=dPf_o'=:n>f@Q!h$e6jtSpgm<`XB!"j0_4#AiYLk&ZFF2YjT)C#RT<HpM*"bEF]Z'^
%XO-=h%X+1u6*8]YK]+rY+O!i*&*pYgArU[-gTBW2LZ$M'>L*pK=LFA6$t7=@(iuZ<QqIiL#gDaFFaM]XpG3s$F?Zil%O:S2h&_ll
%?4`(]Z<l-ZhXAR*Ost)M@4GWf-fEU_hBSCpZ]@1M6I?9O7!1;GGX<\o!jeEgAO4%r]HFEig4J%Ef,\'eG/o7Zm'r_H>$+VW[^r3g
%emlP'DU1MA2,P,'P&h#2_65r/c,CE_c/,UT$dZJYYj;T^>tZ]J3JI^Fi9d4Glml:BO>"-rW2."B<IJj;C<9dkK9Hgp6"-g35rI3&
%T]XG/@r'cak[<HX-3A`HDT5b=W4$R!Yo.2fF7:5tqsFN+3@uKj'6?Fg]X&b7Jo(flJb]N1GZhKY1ML%pjToX]FU)-6E5I-5!\P'c
%A1k:_a5MAV6d!8Hj*F0,,;&6L?se5pmLJ,fhUZbg'ldP'0%og,42<?7XFai<mW\DB#rNo[28OV0\88;5mKII@oe')IfBo5hFZh$)
%95<=%RI]d1.P@/k#bSo@]1`XQ`q>Q7/lgIEJm#d)laq[egEe2+Is+IYRO5gHedX?cRaW=Doj'g-cE3-Jm7t./c,g`."Y$fl$&_u?
%<]o.5D'7&>4f*[e@D@H*qXrGbqOuJI:Zu1iGGht5NlB91pJ,.@PnX=+:D3i!lRV9U(:i9])#;n^KS%)fe8iV1X%-6W+%M*CF3BON
%k]gH)Kg<AsjiSgZ<-ANTr>YMTb.-B50W<q<Ft/A-P\sdkZ``q'=8K!KIFaZIldh=bX0[T4B2(9!>)Fn$J5L#TG,<[!dV8Z(eS2"t
%?`CE08kZE>Q.D"ndSfE:;/%J&\LK2MrjaL1`J."N&Gr'AX[sR;\Y[r4dOiGV's,cHDG<.C7G=l#\oc-:\[kK#&6!U%-/DI>Xs)7T
%`3c%-Ug&_5F@u[h>,J-aaL%2%CM:"!5,gDB;n=h4=];1TjAusAeab4:e!cFNO_JsCeNkCb/LA/0,-<#r;DPArHCS*\YEV^r8?E@n
%ZBC9CH5cW1M-2A-ePp5lU-r09^RB._/ZVc)XiV'oZm7i=j]>'ceb*"JI[MS8[8o!&@=m1LaR$TO`E$0S,tt[M>(@n3KqYoCg+CR6
%G)HN+7_1G[=PG_:;dFp-K0ttN%C)02Bdd$&YBKkE@B5_tf30UDaC(:7g5]9aAY`N]^B+UlR-_u5:1Gg)U/[#8?_Njf#&dVZHQs`2
%Y-_)I)9$')6`!e.:GPuhFf!X.k,DeaLFPO9F]IpdQK-+qrc'H@iC=SL?#-9iAVua.<(^G3"X@F!AS"5Z2RHN#C1rpLd$D[gkuoU`
%k4$OI-J-WK=@_$![k"Zm1\J@cJTZd:F(Tuf\MQV;Xph\ZIU.M9mdX]M=`dZ0H"Kb\#Nq:%gN_+dlU320i8oq\OD,Ih0+oYqd([?*
%Z))3&<GK&_=M6R\=Y0KVU9$!<Jkr3I\$B,Am+Xs8o?/*,/Y&h6?5_D@XY\OL_)a%NfsU.Ve52jG>=4T3(^;FAYcd.ER]N4=)C(YZ
%0J6C7U?>FKXJ+I5!H^)U]l'QVl@Q0!phE)rf@"E)QA>LA9^/ng;`_%`kF.:dWSK=uXN?2DCWO&N->Q/]A007S/XW!fB8:YGBX5!?
%9/Ke/.8<jpDTt1Jla2o-C1sm_0p.-)S^nrYQBGI/-qhMC7[5j!W3VZAC+?GUD5@qK>&>Pm/>]eD$7r$^@Ki&p<cnS3@?7M*RV5<o
%VCHAe+j3d3WZP8n23<u/r=H7c/]%9,A6DN.p&BXq91c1e,Zt'\$'l>h>tM8L"::B=*3TKI<s#K'XTGRIIF/ZY"g:<r(1)j%%(m3]
%Xmer92;s$X&_=]hh6>))(tOUi'j>LM#I3:O5d&$.QH+_Y-I)\IOG.[C0/@,428/_8GNXL<N3E&5^5No#2[P$$V?>^Q5IG=>kBAPk
%mjAE2?iB'ROEc]2>k<Hd;0/oGTKAU19juT$GZ?X\S]ko-,>2muDQBG`pu";&?VYb0V1%+q0joPqXEq@HhS?Q.fU`+ZgX0AHh`8Gs
%pP\YC6K!EBpu($-Igkn+P:)A+d+a,<mbbe8rsT.DH1sTXTQb_L_t1(h]_qg?!q?-ebu_ZR9m_FS^#-5@*DbYn=*MF7n,2J<#IjAd
%qVQaCqm3KPnVh;755Cl8c2HY_M(C=Y8!!<D*-h;"@tCmn6bSh8/A`IqZ%/BdoiN:0Z(R0lF,fj&&b_$AV-Z<Na*oQWAnQ5$l,P"7
%&KaZVH7Y-U=A[P!9.BgAKK\=)a]FPb;'/H?7C4osjp='f'.;uoo0dLWbS.UfQm-k*@@l+GLF$ERWF;AL)ddE.*SK'^5)0R2&#nEe
%[?"UHS&"`H055Gs6X2bjf@UqcB0N&Vk9*_=;19Vqq0Q5ab"e=*C^l(+Xr+mq$>U<%`@:pR0CBsIh(SGYeJ(-LfZq;L>VU!ndEQ@-
%(bUUglLs3I6.u37Y?9%eo8;r-G/4pRQ^_cu=,^hu[4X-%5q'?Pl4p@V@pZF23A.i$L-ffk0,W6N>_GUQg&]e!4a+7.X/10>F+I+2
%o#Ds`'6@iD"lDuDW5%"!g$aOMq"mERMhbq6^8nl&V7Qm\S6$1S^quEY1TrVrF!rK]/87c@j2D&q!#teV]9GtZ4a_A4c_J4c9,jeO
%kS"h1s/8^1,qeR=r'&ZT0CuXo[rOO$ek?m[Ei'c2@T9+Fr?n+7b=\d+BQ+8fFB_np9HNJTU1#C+O=3;'cQTW47&.=olZJVi!G9B2
%^@t&imW&kWb5uI[46ZV]D5.NA2'SG59;O1-T6LW'kkuF3biC20Z(@@k@G/N/AVO')%6ipkKu$e,,Z(UOCjs.\:AsW:N"L'C7r<#4
%%BS<1j_ZL@2$CAFZL$S_AXan@#ot#70>Zm>hJ]lY6h.<eFqTm<YdTW0kg)RupI7Ak%XV=+\p$DjpO:;Zh4?;q;7;4!s6C9R_mNq[
%_NNIXMGo9n@HrGXbMotL4j7b+c#a.3pO::hQb3L/+hCY*6<4:pf&aR\G)`YZ7J*\tVK"m/G(luN?-d7oQ`=e&]..lU/[)'O]A@RZ
%/=KgO/&g)[FdNE@A6pDE7Gem5;VAmhs&0J-KXNMfd'-1&/53&**UF+m$VO7\QM<J3C1WF#]Ul7n?r"u8@.?,A@*NEA'")9K-.XdI
%IYU@)7'O53K1!5H@;YsG9Gi#&\&';a19dlF*i>)m_^7a]aK$;WmmOX;6i<`g8P9tYUWf7dG7^(t2Rrs-B+[CC2O$oS%V_,XF]"SN
%Cd-KN'JpGX\k,7d]6)^F)3^dkd]B<T)<S2W\?[8I'"&as)A`^OJYMCMP\F#3L7'A]IZ'tCOj39%CIV%^-t/nZN"epY9=bh<14($N
%U1#<L\$goVF#5$eJ)k`FR!G/Q<p(kS,1oM3Nj9b>9sAW)edrd=.EY@TR0]eTc?+mj6(T>RKG?f-6$O@FQ<cB5-s;(CY**DW-o7No
%m7c_3An3'PS1H!%D5nfeI8@rs?)o2eGd9n$(3ZOU,B\6E46ToT46R@8376SDWmKFQ[Z[d\Yf3o#3Ht;$L0_hVFh`q^f=;9GHh<>+
%ao2@o--)$Ff.lZcYMRiBFsMSjSBW9.Ak*JIAs*HgX<fBJ7T]a7;5DX#l:i$(4Ea<(AR0UVYk2_\d)W;hQ6[VD;Wbc],AM+LjL*?4
%E!&NbN\IBrGHc<IEbG(W_QL_Dj['tZPrFG'RZ>T`5#NG'Nr!=Q[7d*R,HZ!lKh<A"Nh*:cMD.];:lt8L`[U>^6E29\ETtS7[IfZ9
%!LU![R7:^q:BVeB2Ql')d)"/(B=eHK!0a7p^ajT4j/STQE,(QcL"/k;&0*-c1ETKbPoRo1OVKu5-O_@"%XXq&JWe%68C>(i?0Y8+
%cZCU>_11fQ;ab4Udk22X[`Dj4Nno65:m*^B(<7:2P21[CEhSnhp-auO\llu'5fnb$UjsdJYAkn=LRBnj[$Oc[aaS7UK(dGg)FdiB
%$RPl]+XuMPJdorJE"d5f*B[B[W='-I<:)AU391/5I2YUFW?]2,o=`$Y[qNo2,>;WlWqsjB8m,q]*8;MlS/nT0E=`YKe&>CURN'"?
%.OBnET"U._LDu`($VkK^%N?;!!RFi%'9lt$FcF@r=r>VMI>_*[6D()3b[VW0B4Q!Pcc``A+sh?(CV7g:N"U"*:h/I+TbWaPhI36c
%%J7TL=;TUL$`([0)&ubCB]E.uh/T#;Brq2qGtS62E%R/L2R(>"irP1QH0F4.=OO+TED.,i@O7R/*[+3V74FufQX_NMde"lji!530
%EZ/;I-^"0QH;S^R5=6jiTHo=k5-P5cEWamK@gnZdM4?J8?qY"IL-o:m/Gp2OWl84FcFH8fFt868hm[]5?&<]0;Cah"2l]58CD*`.
%ic^-2Rf[;lOrOF0KqXbWd*p\PCV'^EDDEm^5E6W&ObB!)gue=7eGY\@UXT<Y4g`!q"a#bjI7u]8p"'F"d>a@9pu9`DDfNhiV%6+`
%/!.&0Yl7?(AV$+RSIXmC&Z..u*Mfm66TF0q%in\I@nXBmEi.r_(RS>kg`a>gT&A2*?XVmPS=o>6>4hX4qgg)=U6e$aQg;8T2IlTV
%%g"nr6F101q?k?Q'8R<eq*rb67RmrShMP_]ZHt(#7F;AV*8Zk!jf$p"9).YT7^QW4.&(7L%U25W"Uh;hY6pI-E$Z>7k<rMk3KLei
%5V$&h^<+t>GWCb9.qS*lQtWm[_'<%I%`X[O&&I#<K=DjF)-0um1^-]QMU(KV$)-j+jjFoH\U]H#S3YT*Jdb[h/E*Tp/i%Uh1<rj*
%`k9sCa_I84aR31gTc+c\]Equ8dK3ZrSNt9MAi6&.39P^CR?Eb5^C,W&?Q+GLVm1RXh3O.e?3;Jug/D<Jn$PFkneI<<SKR'<YfQq[
%Pnt4g.52BN%20tD@*QZX>6n`5'uTAjJe/\HSBG7;('\THc,,WKg-Ni"7gKbPRt]9u!F]F:_arSUP]9T("9:6UgV]V$mjSjF2e*Cd
%ePdqij=R4W$Gu3r+'JQ`i'kc-RPmug[ihK-;VC6S](@!:O=rK?C.;G*L2D"<ee=!R%H/`rB#uAHa=`WYh7u?1_^OY#pOm!)N<$]u
%##2C=*JAu,+u?&4+`-)]RL12hWH^QRM8ffWB1L2mRA[,)a'6F$>PHLdUfQ*^@n`CKNMU\!6I2'+F*3<N<_UoB=:qF_$XdZ#Q2,L;
%lR@<RQH!A2:1FOP>\nc0f5Yt6NmMWIhE_u8Jm%:^9^H2U/cgRSmoW=/4g&\h?#"N%+5u#[pF+ZNAqZ#Y][LeN0T1S&_!8%O#%;X+
%/.cD6nZ_X@/=nVIU0Cb3s,-T+&17+>9J7$q*.'gd%:L.)p9=7dC%4m5ZcB@/f%Gb]V^+s>)F@WGm3'#./F:Id)Ig@bngTFmc;OpE
%ofMAccO1PU+Ms`I?ssPif'>V(\gu[B;SipP`L5s>rQ#jP.'d*DIMW8_h#%Y*[=EtEGcZW:C%\pI&],,1c&.d8QAX5>lH4EE=iF@-
%<AB>nMTZrA#r1jUh0dnl(:SEZb[jsM59\6faT4mk_D)t;XTtCC0&Ra$>07J.5a_.@ljD\Wa;EQ%gVFZR\g=4?3L_jcE#4U%=BHYQ
%@J*8a"_#U-L2OZ]YRI#Y_6QIrOO`^7%Q4Ut%>K^=9,TL<-,m<Fe]7?,0P]rkCs:qk't1?!XL)+Q=NYas-2+'A9e#I;03PA"->/V:
%PYeiuZl1)iQR$j0/a\!-$WTej]H5Ni)"NjANj(MmW2F&U@=`,^?o6qrbEgEJ[">ogZcD>Z0"='GDVZ>6:Mr(LNmP<_$L]E$9ObXA
%9!,YGi60c1hntW//K:"E#s0!("MtmiTe/Kh7<$+iRTT5rPG/3fqO%"]-GQ\'KNE?'@M"S@n3Ynt\,!C`4s&@if4NSF?DO+N!\mZb
%DOA"rEe3^cPoYg!oh:&*4>\a9n"5.J>:aWB==#OMVh?Qn06t8P"Z?rM8o/0V<7i"h&UFnG:'t!/m.@N\3.:R[MQ[!Z-1.-LW78CY
%etl4[F_T>O>n^KM\lO(?Jh@LfTZb-^m<9Y(/e+ue?&pT$)XpAG[DF*NRdbf\TM)&0JtPcSZ$oMg$G$qAK!#-(>X?tp9$jEn%jgG.
%E!j05qnWD@"+H#u9=(>U1/K6%'7P_6.t<>M9@R10.J9!]#M!#`'j)Zg;J^$K##eDM`MEF!<aSRtQ',KKV:@kV8:IDoOC&l"QH66d
%*:bThVu0/$Z:'/<-!<Ta25-1?BfP0T>*Ci*=%\Z6PZHTVB7s<C9qBgrBhb.`Aj^3B`)kq%e8XWQ1`SP,WP,BT<f?`FS:_^i8X5NV
%1m0>ja;U3kXg8X3Q!kl9P"rbq;Dn,L8j5,?<uPiDQ"[0S*1AAB2q$[3<%459=&2uheUUhNQ,Q=riK.#10kV`1P3SQ,;C.?FUT)[\
%Fi,.mPr*efR]9Li<,&@E:dBl;X<_S;Wa(VQ./fBr?R[B<;O+3'C9kFLC5+a5W+q&^VLWD>bgrL</a++I.P9jn;3dDaFoBgKp_YFX
%]9T>;$G*gK.e@tFi)!E&q:3hfblF&\dUQO=Wb/iD&lm3Gfb?]N0V*b-d$q&67B"2*.,VP<8r'OLYL5<46X9[LCB>G7F\,jPV6sAl
%'K$7/.oFft>-&E3=>X+a,7R(G3`Jfj1[#%e<&Mp6X\q#*Q'R5p<2b',QNC4_g7d#nWebId?ng`%%9_,4:7*LQY(En?DZWjJ/JiOG
%l&;DP#\i\:_E)47W*uZQaL9'-iiJ;0DiNN2*gS_0LfI=rds?1K;b<ip:#j+$C)asUjt.K*q'j^#iKY%MTj29+6;R\m!S^EiD.G=B
%K2W&+AN2Vu*9u?_b]O?Z;dtI4;<UFV,I/tFm0:^=RT_Cf57R6`i&-laTrAP1R6&Dk"qSDKR^%D9GKVsVVPo)m]*sqU:o%Xc7uV"J
%e4)q>WQWf'5)!P4UG+AY2pRQHA\`[#MinJP)5X2NXDt:&-rS3e,XYpQ?8Z?rX'=1!.Uk!_r9c0.IVq]W-M6.qOgf#fVP8pDA4@c;
%?nHL,U0'9bF<_-Y-p`3BOtDbq@gcgufQ'Z/JM+]$TK^[3m:ER?bU?m6<-OA1@),*tZEF;.'i]r>&AuOhr:h:5Ga[/N_5ZE+fb_Go
%o8mjPmRsNg-e#9'Lr%RpCuG4>6k!Zk*sJ^nG`b>:I!if\7u@B"/M:D:K&a0RFdX*h'V*&K`o-7*MC_V5Bes3I3!VQN%A^:^XC<u<
%W!Lt?/Qo<$%-h2T-b9f])QK!6^"[Rm"3s1Hf+"Q.2bCi*2fUEHQ:EZsIUoCr883@X,-/Vj^pcIsmu(lHbTJB=47`r>XNnJo6Pu_V
%XW_PN]c<8oD43m/%X$Ec[S93&;R)'M2FV<3>f=TES<>T=Tde12^p(r@mE.6oetmr/#]4`Q0b?gL\KqJXNAdjGe#WtZ$e(sjXH[9P
%0>a[/W2H>CZNZ#FQ;).#8^"1HCe2_ppVY(n[)-Uq9eK_YATO96Zt3:r2=t<EEN,11LR9@((j25<gem>jX82&GYaL2TTo@Mo0rES7
%N6*Qt#f`b.9529hdmt7NZD9A30FbWPbUU>]2GAt>L,;SikXHJfiK/dgEL5+.BlVbOL)l"D-<DK1dr5T4N&F?4@mfg`"Cm4SGY=!O
%9Z&J,Z[/l"+qn=C&WqoKaG@nG*$R-ALPSW<_hNn>CVtm_9ImiSMG1j[,+C>AV'=B-W5tho9W?+??u2ja]$J[#aJQI?WQ5J^'q'eD
%7AdJ$;amQo?rKLki'f+NWrm]n("j.R9bEfAMn,N);_#!p,+F0;,pLfWLr_Cm+u68:qsd'b>4XU\],D.sfar1<)4?(T7],+.OXV='
%`A4`ufhsR\%3Il*2Dn]27V8;!/2S>%1+i=uEFiZQ#W?7)$N>i:Z72VJ1,8t3Vod#WQ:f9?1`S8+XTSGB-R0R./1i)F3jAW!19r?V
%;DL!:LQ"pE+X<KG8k*FNOHE8rf7+SKfig63dYaFj^h)QnogpT/UO/K,5keN%]N0[BnN6%!QAtY:cCo:uGQ.g-B5OUR5FF+p:48)]
%ZL*<W@o!PGK"W65g5U(eD-A[L1!lN3iL>W$MRIX):@!5&@q/`HFDe0QI?';(WR&,[Y*(e'[T,*G`k&tHf[pt,PhU++d)mS9$IHrO
%2qs?_@Q,?Phn0ogOXqHph)?:68$ZrYnQU3JA+QqL+>TSHgfQ_S\ZpR3F(=n@k/R,jc&L9FRiC,F2`Fd`Df33<&GiVB1rI-bRR\kb
%b>;>$J?(27%]IQ_;YDp^$9A=)Z^BmONQL'\:32ZhKEYr'GcE7Z$'mit?*>@S4:e^%n$04/`8>jq17D,1S-$.Pp!]_eV',R+LcV!c
%(?FsH[4!;fs"0s&Udc16nT:kFEPNesG>6dG(\WDKCu5LK0FG4lk7H+IdCRAcMW8m\.nFp=W"q"tP&R4PjZ<X%35U_fCbZ,i_%cU^
%-$6B-.o)cPh[,8rL?q1FIa!Pr*"AlT!msfc]:6%U$G<qa"QM0rTSW+[Mo[lbL^$2'ij;H!`mH-T)"qli!\(In+_1@hUYTru_$6W3
%o+;,VMX)\NMVFkWnJ[<neSgSjfK&D&fUkfoFKee#RcrBAN!KYlMs1&ILh8Y8Q(KeV>H$K3#c.N/\>&ZO9iP)i_`\#EX.Ms3DSUqn
%P!s=_r.<i^efF"Q8XI5.ige[R6'3s0U*E!cLdegc-g:]!>0*,F5T1C2BOSQUHTJBg"$6B/QHM!OKt;m@$"f>=;?L:!ONN:gV<P>d
%*c"@*g6I91YnQ]Q)H*fqT-5JXU0(cPaGmmO'UiX#)HQVu5;]+gT4gT9FZQ@,9TpJQ*+V@2Gf"$Pj1&Hi^1*'upFH@i&J@NZU237N
%qZUEr2PTUN"[q3rN?%&8@u.+r=,Z+OFHV"?`3#-rE)DUU!K%&gA;KDn#O+PL[MR7iTIBZU52q0S%=DUT)*@Hu3]1lX:nXN?H\+Mf
%)2c26P8d'.f&IIWit3&\r92qVBOYqd'rd*B_B9H@+6)B]M6&TB35r4>&*<gn.12.rs%0nbpTe20G["%K6O'K7HsJ>@IcOVd.'X#d
%T[*^qTe\qLPQq0r5<ok0.+J6TN[5#lP4mp/C_4S?&G<'l=9'D35_hBUmgF;5_j@flBFS\PnI:2u+Rp/IO9C4J@H1pYctO-V=C_Cf
%EnHjFe=hgOL#c+8KI1CUPD1*?YrmCe,uQ5Y)%cHr#`):g!/R?qN(>$&Yk(8IXXG\IDPQb>.Ji!?&X=S'QY9@qPAM/FNCOPmL9VtY
%'i`N[aScnolEI5*<.AA:_uFDYGRb^ffH8WnLq8%0+UUqcKS&lQT14n_4\EEh8TbHa&V/gdH@DV#3Jo:b%gP#5($S?!MB3u:#\)^[
%X,aCh0ill/9t$c]G)Z?&0M2e/bSY'-KEUthE!W[>[^m+!B.-1D</`4?.HVf!!(8h;JB0Ci."h&5MA<Q<03]i7!#A/i.Tq=9HSC!n
%_aI0U\<7iE@R7(tq7\&ij8lb6BKL?FRRW"s8Q>=`_&m0NBRL>[g]XF6W^%cnb(8X?jPX!4-=Oaq$T';h!8_3fQr;(*8!li64N@[Y
%b'g]&'X4N3nso'bLbbdAV!CAY,p%S"S0B=A+[Wp\HqOcXg;5R_Kqu[X77S4(g6f%0\F]kIXI95LSF>>k0#DRFUB3g]HI-R7K*doO
%Y(sS=()GU$.9]&DEet'.+u"[TYIubaO>f";9f>85CBX]8Kc`.2H6"D-:IqB_>DWU_=tjV+:9!kd^Z8"T;PgTSQO+BA_F12e<`FAc
%'WUg5Y<S$k>CSObjP_(_)LE8<;>%E`7Wk[;->\DqVU!:d+]:BUU;SNTj_/H>f1'IS2=l%4KT`>hOeP7s#_k?hMEdX.rG8!8Km=&o
%V`BIhmL<.SUVLA?^8#Q*i_5_3&G^IHqua/@)GJSEa'ZtQJC2'T!D=Tflb?:X!fZCmcenMt0c;.MGCniP(t4(/Y?oa;:@^^\Ic;Z0
%6EVUpY?YJt6N)<BEaFt9L?eZ_j<QE*YK]@,8EA,F'1s!,iI%YS5nr9GKM+;7isg)(p]FGCEA\g`Q$/o>-kh@>lqePF$4KX$O^i`c
%a\XB-H+6q3Sm+]"Nf'e+E8PWR#R1fsl'%=K;iVehl+N9$WL]#;Pi$(M`ZD/r;8V'rUj`oP2@#$ud>Ctj]psftW9cq\;R`OrA'Olu
%ADC^#n0bfDWUL6[U%,WHb9Rkp:abhi;1JpPk5#7t9GC8M^Nj-O%7ITFCI_@_&Q:__*f-DTH6FX[cP<4B@&2.&2l<stG`2T+fIs$s
%$rp%(PuuPFL5QQ#=+llir`F/W&'kaCT$;P50Rao$[(l`YLe*DS-ud$HIbK3l_#,#D5oc3e9SAbk@9g!i1OLbu<KKYF4mE=Or\_%M
%M%QR4f#/ab7^*I5PB1Gs%hqIbV/]4,Me!OA2ZZA][+kG>E$YcSNV6]CQ\2gu<=es$G+s/j,S"N3JcQboT&RaV&d]J^R&\qS>(rL4
%,7*G+i%+shFQ6p9-Clu\;Q(4;OKD]@=Z9i.!db"t^B<>@WdMpcO[A]TN08h2k1P`QE^174L8@sDUq@0S>;93nQ`"Z`(4n7uj1rJe
%UdF]qDc%I_%@*9*j)?.dWqr&@:0;)g;,E0&JO9B*/9)&Y0NF\S/99Q%a$^E]?qb^'(kqQ,_/tdB!Y[X>)&$4MZ"^F*C(O=4Es3>A
%L$+U#Ri[M:'b\c_XqssVoe3XlC*Wu`\f64K/C:&XVACRY@%FskfQOTW%(qTS:D2t;FB9Dm=;8(-aMH%JDI<f$@uo%Z>1"[j66\Ie
%P_Vl.A5#k/U4g^(>uJB<N"4!*Fd,;pLBU.FONue-O4o'6/;Kf\JIK:m@&1X+N/G\cG;S25_ar%4l]#W"3tdt!HP$pH+?Rd9dc7&e
%M?>of=i5H&KZUIc8:"!$`b7j\lUHh*4qL)L1Tmgr9[P"lE2F@JWP'XkAl<9.[)0%6Nh1r/SP_.ToWs3,Wd62_8sqns!XC!u;qoL+
%D^an'V]P#_lUWL`&*P\\'e(k$R]I;G(6Cr#SQ]&T'%t,l$S:sU-ITW&o)jUPTrh!(]T/5[\a3GWjn$Rd+u(W$f]SFOOmod+aue0\
%732'".#Z!#R6>&@,cZi)nYDW?XPpgg<q_OVWou.)%KL#__7^"1ZKOhPl=jU,j<eBu&/TO!X:o'+^pg"Z[V"pE5XsV@E].52N56f,
%Z1^fO>N)s.Ksfiu_o8>9'<Mc+QU0b,DVE4m8@Ag89DO1$;9n.CE:?hE,Y+<Ji3g$#=kG4k99gtgUT?W?c-e/mT'`qZ/%kWt_g&e*
%DW?C7jY0%;[n:Nj=1>G?Ku]n#F3*it22DUM<:/:YUpWlHU;G0tPDG1?m4*l9Z,TO0P(s_B>i/\p.Zm/!ZRI7L1<T)amSRM&J7Zp.
%Wf5Pi<C[D<<`V\(:Wb&CN64:6#;<LrV5,0o#H!f]T)H]uq98hXc!nsaH'MeBik,ocT-f:17LPu-Om1OgjO$8'&WHG'D=/BU+Om't
%lOJ7_3p3n8T,<m)?'rNTG@?^WTY^fPkkQ)sd?d0nCb"cg]59"^:^/XZ#qsMrQ=OE3He+IEM5gV*(cHLU"a4YI@krq<0Fq7(Ce+uD
%jg8MWM_#:<M7bSVFfTa"jm;.G/IP[^=@]SdLqRY:7Cf5u7?ig8PUje3,X=iL8o`ft(q^TODeBU&O]^MZqC!/K`a4:2M.7,hN]"tl
%oV+a]5/!.&0'h^Fj^baC"<jbGYif+7V,n6r8Q]snU.OT$pp$g6-]/TnMY:%tFS$>K@8s<<?&FZMNjba@>uZ+8T,J.[84A.W5WkgX
%,="Ad_/c/#L^)1pY+i`db4&F])Vgsb%L5e:-R0`rd>/&9)BiOG&^Q9;$5-!"=<WM,.jP^8KgnVCIf_)H4OB#nlS*;h!%T;q@"fj+
%XH3R87ke'LJ0cO)"2HrEg]P>!8H;j9#lr0DV#nF78H;j]N^pT\KnLc-X,r!]APcFd?A0Z[44"E1NhGkMaJqe66t@$qOR,4g-9L5#
%1F>3C]bAXmY(UL:OYH/J&uHBf;-F\8Q72-ZmRiSlO;<Hp*28u[\dHiBJY5?:@Rm@.X[YHAX,r!J7g+'iBL`&I`a_NG=.pMcPn:&e
%*24HaL1nR";Baa+':'33M=#>FefYIO.b"R..KD#N=qq%/JQf<H<M4M'I!_739DDM=Zm,]9K<uj+/.pQL>E=TA721ka;.5=&Wj&]q
%A5u`V7V!g79LWJ&TFiWE6/$l88?3rR&u8N9@>W'k;$DA9AB-H="CsCKGcV5ZpNZ%0@uY_L*S!tU4Ot^6a3KCpLrZO:EKA0*!,rI_
%L)IR!84o@BnF\Jm/kCeaij!5!bOJ[T-'ifB$ji!Qlc'6N[oDj>K2icC-mSMubqP:`?Y:om6EN$D4@5[hqk0$1.7Q.9qD(Ms'\sBr
%_PeF`%;-:dQ?]6`g.K!j,9G)6/E9:?*>-KZMiig,S.9k%=N30IQ:Q8k0G:">6nApm(T'SO!KgXWedP^H8F](m;QN]YW$sjd@UdB?
%I=:=ol=p20l9oi`":QZ@RLKo.>S'@hdBIY\"@U?8)%5VK1J2'.+$m-<OrY3nI1XpWO]2[W!g400$;#(N.clC[+G4FO-5MW<h-sY%
%p:QjQnHlupP*#$bBsJLOn!#%fip&\>]-,T/*$W'KN'qk!Tbt0`)"'7,@4ea:A46*q,Fu"g_R;E>Q#mS],M.DE'gY'@+Y@93(DaYV
%<d7FpiRAr:Eb>ab;D%H!bKS#XA)$k-(+qO\&\0XHX&QUWW.*\4eep(%[@CpC]S5CS()<?qoS68Q4K7m!;sD"3[6%NbnUY.3TGX4j
%`>&]-Al>dB+>lUg6<ag/-%Ohj0n)fgl1L>fTHA1P_D@TH<'TKqN:EZfV2g'i`V>^f>%7EPeZ=kNorsT%MC$bK4:)l3[jVNseOngC
%M3<cT!&K;:l5(^7#Xg;<SB"nfTG0sA(XVbSQO?K2X[iQDPcKn%[6uSH-r_SQHr:>GF$[_Gb!m"T!*.7!EC"&PM-*#GEY@sS;\,R!
%2_[Z)TIa$(!@YRh#Q9qP4c(F!9?^`\q?i5G?]Y#``J6dc7-Q`4jnFq:^KLUd,aqqoqB&!9>F\5"Atf_oKVlX[j8qi5RrSPUMeS.h
%0;]7&=]L?Xi%S%jk3c#CLdVCS.W.7F,3B5(<,`\R]1&HG,A>rrednsUO.c"W];jdC)Ge,K$M6D8;'+EkdM_7-YU^"/W_VUVqH][`
%C(#iL5^sSU/jRD)]UT(XrRKUf+UMG1&jY\O71#X$o<&53k%>ldkqRWu81PsJ-:)<LDbc<f8cWVD-A7$Pe=/7N(kI>?9'V52Yc^j!
%NXAA!%Q,1;9hN`#oGCFY9kl!;-1F\;!bLXH,f>'I'`c?qPDr+5&5g?^cCD$e:t*W61)D+M>&9!u:(%[:=k!_-RY:X][28L`W)4;O
%_?Qm3[Z<:\,"A6rbA-mM3h%^8qcG#0[h3'=1c;mD1!\dd(#<F7BGHbO<htjS[Y&6=PT<*@3k[V,`./FGKee#VOmM$4lF%7hpoJb0
%:^@uoGls-P6eP`sF)OEWYYbEtesmdHh=dUqTKZQ=,AU%%$.p`V''q9N9Ms2e=@E"H"kD`/EsgG1&qjA=5p/Oni3g6T.X/S!`_2A4
%S%<:O+qfmZ]3Dd7[XKK-7</OQZc%U4][0J'3aQKYpS)FtPSG]P'E-X-XbhKe]@]NRn3h)e?i;T8;5U6>9+^dUFWrD7lWTF:W!0Hi
%8C7'H/AN@]&$:6kD8oi>)qG2K;m0UIlS[hO2t\(mkTG0\X_JE\#'pNf+I6UZ6r\!cQ;VM.d7SDY2;E#e4k(BR%jB)SD3fqtap]S<
%&7NR:9?W2HA'?)pQSE-A+j<c>"%.`]KT1;f?'o&b%pbQrr(BDEU!a[Q$=d8g;hZr3?W2ZPRA_g:,AjG7VC=]/(g?&E15tJ1RkbDs
%7#%E-&>I#im)Hc9<>\p:0\Or>Lb`IKUs.1ZPSqqiWK\:["J*sL/VamOL1Mp\ck6YIAkWHsP\+U^`0=k-3Q..o(tMb@6Oofc)4HC=
%@n7l"$q'8&L(%R#,f@u\#a&Ot`\IrSP*e"`.>SfrN/=D?6aJD_R'MPt_jI`d.DqMcM(->%aG*/n8i&:;Bu\Xs9PMMr9h]9@A6kXt
%,n_EHY`,Cr8i@j8N(#YPV%ckl0VoJPM3L=8I]]Hn9Z.X?*J>&((u[k!;iL]!8k^tY%oZ/qR><:K'/@I>JMY4YMf>DK.>H8:M((7p
%0nj3`VU/#T'G?@(@L=]9&2D-<3_V8^@9lPMTi3P?cqM@lP>*ccdQ\-l`R$Xo0nj56VGKtI'G<@UHA]hASjI-6L7D]Y*i>MqTcp@2
%Ca^bI)j6)pVP[f0.#+Tc@e<StU%K't;]ubQn'Y0/rIiTuLjn@R1_jdLRS,(1n,jK#R2>%bPM.%R$":\P]0NbASoO14-m'MGGLV[)
%g[=m.r>CU,I?H9,jOG[bR"G^sd]eddC8PC8OiA]0mS)[sf-Iss1(d%L(\^IDr8A^=dDpgC;:GisCE-luaG6c2OrgH'#k_b]WE%b6
%60^)QLrgCj&A#e!LWpHN'f^-e+;_d5Z@#Uf.7d`A_o+BUJ6_([ie0acBBM-IoN6$egE*>]N0mi7ed\ME'K)]\=Hrdb]>XSj?jOZI
%3GA*NOlkDR]m5CJXX??Hn^@@@YC?0?K<O_!]m]o&GUQr]nC%:4\,2fVco:DW^`tu;kq>f8I<bbaS$sKT5ldM6^\R.R[-;`4GJ2nA
%FraB;r`=<Yh!b1+m0C,nNr%X^F8N;IcgctThs`iH4SOnckQ`>n6kYm;1Jp0WO7H-,eO+W;LQWlDs3sCJoS=%>E6YD`L[kueV/@!:
%<R7J)7slT]lB+3s,=-6lb@^5VoS=$s>s4EBI40M8TGJ:ED&@BmY#PO,-DY_3b60B=h1JI4ST'D,^6c?-crW9]KpO:+:jo<qWQPo+
%j["'HQR\<6^=:7W][UB4X%OI,?'a.;#LFc'kV22EH?d:70@`q1neTHW:8k=SqKT/m^Wam6E7t7sQ\fH#mdZr&F$P.VOd#m%fg"M;
%e[fTWT(L1c^pQY5F?K^WG8-fI,<ZPI_rN3k42b*;k0gD3g%46%X[.I7>%+q<Seq6,Q1fH-f-)L<?KSXF1O36+[?HYY/*9+H?6")m
%IlW]^U>rQQ8G9^?/"O-3\56[_*ktILrhH['"R^kWY3H!cQ%L^V8sMt,0%JZta0-3[YN4im(L*fYBO9<l2Kh9-[1DTW3P5jab<=k:
%&bS-'7m`o=+=L0>,LIs%Rc+70*Ik#'-kCe:(lsQ:$\8Paol3JVk=/HaCsV3WN]=gbh[?UI@5"H@r1uetjbj!@dC#:Mp9cU@)d>9I
%S/N295(LYEa"HFN!Z0`sWHjeb<i7[FqTVkXq@NNf23]c_QQEV>o;D^D\qW9OfI^\m<jsh@/lkB>Pr#J`@2Tnu8[C*CZ;p!EZ1`Po
%XR$eC.T5@&^/fblbrshee"=49+P!'VVoj-mMWkA@MS[.oR)Prcp7++)#1YoNn"%XUqar>,,h==*F<dldeH;=Dnd*.H8q,tr(jR$p
%QS<!`;5qI\AJ_BuTthVj\4`&!1U";,Tp(?D<'53%\uMEuUa%F#ZuP[^@Yo5/3KiTc&69g)0+@0dLH`D8fKI__=H8@r*7C&me%C'h
%eOq.[WWWokA`)WnBFq0^IA=3].U+bkX/jBkUPZR^GVtq_A*--#i^XN$b\GeA6qaj!a1`r;`_6X#a(Eg9*E*`:1gf]GdBW1J017\o
%Qd=)d)G0&*dErqLoJo,SLf;hleD2Kdb1ul^UKl[M;CoL+3U4ASFK=lT_c9R?d3i1!"OrAKV?t/3>:<VA6gs4YNacN`&@Dd6"nC0_
%!7K/><p:Rj]N)YTdEPm\PoIu\<Je<7[Mp;[Q.GDfM<K/jnm3.^naJPaH/-)q2a4.dKf@H$)qColQhEu!mUOJLnO=C3PW,6olp`"r
%ZnCNbh3LlEDLCS\[LT3Ig\B!^&?6S*:HZlbW@PD4kXJM;Q/SX#Dap$>T"TP08l^L#Dk'Kn</p%j$_oW1a&m=Q(s.7C7_P^\0I^Wm
%g/0M^mg57g&;$)/Ki.$sKqZ?u;(:NqW>i3Q^$kR0-q.i]fFVn.e@,/q6\A+%cM"-[.mko\_Ph&;_Pgu9_FV+aOP+]K-HljmI`i*D
%ouY?Kh<djMQ=FadqVH^IAc/-67,"dgCq^"bV=Md_o'5m;aU9>%Oa1fS-1ZXYG&4mOhWEI<6+tJ3&N7D<hW&ihe>$,oc(e";)@&+R
%k%<+&GX89L6fb$NEpjo/#H6$+(cD5\oO4:a`^!uq"DZG\Vnl*-$Xt2b;TbtIG'"j-`C<A$@5X9b-J?V<rU?mI3gpT*$"WZG<[D6G
%;d`Ue<\l2l3Vik3N;<[XP..2\Yc<XD\ccLQd'be'`D!EWh3r]V?H`Gnd^N5]Y.0d8^8_b.B]e&]`qno\M[=m&1sPGOG#d5SdFM?d
%4elS(h0=MpepEgZS_1!@Ng?7?VMQei?F_^9(*\l)eC&4IMlld"HGda%k2VasLhKWZ'Z8<j&.EL7eVL!<*uOQVA,!n6`d>kG2L=G`
%FICP&DAG:"c>tHgFS(2a$(dn4>b'BmkQe"8"cS1TWheP9#cHr-N0\F_No"H/U^HdUVJp9a1AWILG#<r<]is-u\^WG%Q<cdjelPZP
%obE^u9\(^Bc"$u8Pi6*UV*sET"f5:-Z@YuN!lkpGXgDUFV7$3+K[Nj3`tE-!)iPMrWnTL6:buNh/>,u=`E5CMbi,gW;C*u-!MpFP
%A-"Pd^Q9_eeI+4NJg\,tB5(Tu=J^g6/80T;IPXL<;>#gkl\mN..<,Oj;&L(_D+`HeN7uG>WhNJh_UKWloq"bt8!^D0`PSRIXNK3^
%<jBf(@D8YIc#b&P,V-r50o[3I]JdqWQO/aa1e73rCc33:`ejM[8b/9]P&)I:9TH,o30X@&W&t<_M.m_Z_.[8?(DcC9=lj$'CMlQc
%a%N\"jJ?"[(<)^'--L]d!Q%uFL)$=](3$if=@=*=@?SX\PL:"^cB^aBKlsH]K3qL9B;eYMS)#glA1rk0WU>;8ViiJqDGH,,(>#Yk
%8[9BlS'jeilltU#C6mY`gGSXOWYsun=iQ;3$`eQ^05%1cepQ-;$WDXA`l?P<jcD&GLm-XG_P5-f;57QX!npcm7BCI@TG#fr;d>BT
%SQki`e2%!fj^))8@5SeCYc^KP44\db):r9IT+G0/[B>H.U'lUA:?A?6.`oMn2$l:Vbcmbm(hV,QWYSV&QY]-ib.]YfiaFG-(0;9V
%Y-f,u.u,RtcjR02<>EqLZsmNia6FOH>8_&_C=_#s<-aqRHCj8hB=chn=_jIckma[uoTh9<OA(U@okq9%dh=,E\k$/*JeGtQn-b/B
%CLKkb-o.eLTb9a6Q(pl2+l#rb$*J#`OS)k!8*)+;bh%k%/1n+q?.m.n=bft!Y57XAWiAj`8T?.K71MXg)154Gf9LC+(;]5n6AQ7S
%^k&=iG8OaK!R<tOH)]e>e`iadP136J`?\G\]Th.0'/([.lK&hnP>Z$HFsj+=^+<#O<B">G,QhXs/P%2UM2tP7Yo>l!?+!e)PWB7K
%S<Q'c9Y?TNJP<_@3e9u;PWB+E4H_`k9<jVP-!n`Jd<!]<>N2L/=]XOY<9[0;OOX(th'8oJPJe]Flaq>,UeX\uTB*l1-`PRY`%.f[
%^5>uiV'6APjN>gL<QReL!spOPC)t1o\M3S4!Xl+?O!Z4n*asJi);`AuTskUNXab3tDrXI::^-!M+2:(t`eEB1YbK9!C9m8E6mg+P
%mVH,>R^a,q>L=Y+Qj'2.CD#AhMo_`.&[,1d6Kb%2j?'`)hMgP?a`Y*IHE.J?DSh\/b:k#(G6om\>_5JuI)tY$>S+FP(Ii:/o,b0+
%E'^kj19Y85':N"6]*+2!q)NOUiPNZ1W'7ED&lbLcn-Q+uH8l(.-K8tOW^1*=!,'<K2uqKb1E:op:NSPreHe&QJ8.IlcG!eiVqqmg
%TIL($4Fh0g*\K]X^Lt(R<"ekCcRHoRn<9hD?(+?O#@u=tB47%nWf#h]8mfoAi<6GUQH(Ppi4$^W4B4.l(u!rk4gd/-m3s[l1275n
%->dklD4,06_GhG,O\8?8!6?ou$F:*V1">uu%N`\^DPjKIO/_Cm@8^Z]OAPui$XK[u`c@*c<EVH*."J72C_/sPWj8;E*D'R=<M!^1
%-rodXAE;<?iGW1Z)k_;.$R/3k<VE0-<-8WKCB'u:dSIh\rd+5fo0-gSKgA1"^WPSgN$=V2^LC<-`tlb(]qSto?6X199_[&8^_mfX
%=D_b`A;[DK!AZE?eM:V/I+8i4)&;[G(r\Vfnc]n"301>Y)Y0-D+7kN_@Taq5GDr@5&m>?=dd5j?ktWhaLpcSM7^8A8d6ft7q>ug^
%EG8tuF]oVNXB&BEZ>\k*h88B<bb[$<=PgCg"`G1'K\Em&(t6&<?/^C(nYCuAhi\U]>S&>L(0%qdBHV)1MjC'_\^_^qgc3KU=jk1"
%9=oV#NIGF^L#'Jj]=)4omIh8Q/e'>8[Ci1!CKjXd@6s7+25lu'<(IoChH3TWDD)ccE!q4cbIWgsA_eic\@eP!FL*[plRo9Dqepp%
%fL[J;bHN[S;oQD2n>i5]?<XQYni&_Hr&23sR[)*7[lLskfW(9=<NP:ur$iPCU,HD*T^*1>4[oLQR6N(D)ESkU>N2Uj#(,XU0^LNe
%&=XR$-/bUI(^YH'*#:?N4\!4[agu*"$Tf0uLG/d9ZeG$[Gg3sp,N>ONNtLoN9!f3#;Pa@``(SYRSe8//.VVAbVUB0J]S7M9#/"Q[
%-6;T=8<OI-#s27<if[9#5B$X\H$M2-@YEodG/R#GL21(O*P\@uB\@XVn*JA8h")2Gg!!9*+lqWL!uRH$<PM:q(T(-kF(/qP&A-/,
%"6*oo=$"]<PoD]QF8B1m#-a%N#!hkK';f[_8f9?QIu%CimIO9]/ElhSU5RnC>_;&QbaUAT\h$Y-^#3lM@[DA>pfg]fBO9shO&q_.
%;;N"UK$Y%,DkA_3X&*M\PNF$3R31.VJ^*qL1^?N9SR*UHg@VDMWQn8%9l5(%fMn^AaHe0dB5FNQ@q86%*@!qG8amZmkP'rZ`G@T/
%hKF92Au)$FCb%03flf]gm=d@3O_rX\4sk=KYf;F_@>ul+_]##ELG^ut%r5uB+4f)m4KPf]H<=\#>q4;jI?]dn/4L?4.][5:Ps^4c
%dpn6[6gT.F(-V$'Zq&1hU7P^8R#IO9<W3F7C8dWi+nhHu3L=:%*D=T'J%kUHaV.IaF>J@Ag>+E"h>YIjrTBaSnDnr*^HDP@rS(\-
%I=D4WM(cWSrI<*gDr86Tn%nArkC8,63rSXKq)<82cVM=ObJ!pDJier4Sp^+:G@*R[ir9$mVpQm~>
%AI9_PrivateDataEnd
